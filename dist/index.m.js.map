{"version":3,"file":"index.m.js","sources":["../src/error.ts","../src/general.ts","../src/activity_link.ts","../src/gis.ts","../src/message_queue.ts","../src/search.ts","../src/request_admin.ts","../src/comments.ts","../src/request.ts","../src/inspection_admin.ts","../src/inspection.ts","../src/workorder_admin.ts","../src/workorder.ts","../src/case_data.ts","../src/case_financial.ts","../src/case_workflow.ts","../src/case_admin.ts","../src/case.ts","../src/cityworks.ts"],"sourcesContent":["interface CWErrorInt {\n  name: string\n  code: number\n  message: string\n  info?: string\n}\n\n/**\n * CWError implements a custom error class for this codebase with additional information\n *\n * `{name: string, code:number, info: object}`\n *\n */\nexport class CWError implements CWErrorInt {\n  /**\n   * Just statically set to \"Cityworks Exception\" for now\n   */\n  name: string\n  /**\n   * Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   */\n  code: number\n  /**\n   * The error message\n   */\n  message: string\n  /**\n   * Object stuffed with any other information one wishes to include in the thrown error\n   */\n  info?: string\n\n  /**\n   * CWError implements a custom error class for this codebase with additional information\n   *\n   * @param {number} code - Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   * @param {string} message - The error message\n   * @param {Object} info - Object stuffed with any other information one wishes to include in the thrown error\n   * @return {Object} Returns instance of CWError object\n   */\n  constructor(code:number, message:string, info?:object) {\n    this.name = \"Cityworks Exception\"\n    this.code = code\n    this.message = message\n    if(typeof(info) !== 'undefined') {\n      this.info = JSON.stringify(info)\n    }\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n/**\n * A plugin that contains \"general\" methods for a Cityworks install\n */\nexport class General {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get notifications for currently authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of available notifications\n   */\n  notifications() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('General/ActivityNotification/User', {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n\n  /**\n   * Find out if the current user is watching a particular activity (case, task, null [as a string])\n   *\n   * @param {string} activityType - which activity type the following ID will be for.\n   * @param {number} activityId - activity Case or CaseTask (task instance) ID to check\n   * @return {Object} Returns Promise object that represents a boolean indicating the currently authenticated user is watching the provided activity\n   */\n  amIWatching(activityType, activityId: number) {\n    return new Promise((resolve, reject) => {\n      let aType = {'null': 0, 'case': 1, 'task': 2}\n      if(typeof(aType[activityType])=='undefined') {\n        // reject with error\n        reject(new CWError(1, \"Activity type provided does not exist.\", {provided: activityType, potential_activities: aType}))\n      } else {\n        let data = {\"ActivityType\": aType[activityType], \"ActivityId\": activityId}\n        this.cw.runRequest('General/ActivityNotification/UserWatching', data).then(r => {\n          // console.log(r, 'response')\n          resolve(r.Value)\n        }).catch(e => {\n          reject(new CWError(2, \"Unknown error.\"))\n        })\n      }\n    })\n  }\n\n  /**\n   * Get CwMetatData by Type and CwSid\n   *\n   * @param {Array<number>} Ids\n   * @param {string} TableName - INSPECTION, REQUEST, WORKORDER require View permission on the activities\n   * @return {Object} Returns Promise object that represents a\n   */\n  getActivityMetadataByIds(ids: Array<number>, table: string) {\n    return new Promise((resolve, reject) => {\n      let tables = [\"INSPECTION\", \"REQUEST\", \"WORKORDER\"]\n      if(_.indexOf(tables, table)==-1) {\n        reject(new CWError(2, 'TableName provided does not exist or is mispelled.', {'provided': table, 'available':tables}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"TableName\": table\n      }\n      this.cw.runRequest('General/CwMetaData/ByTableNameSids', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get recent history for authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of RecentActivity objects\n   */\n  getHistory() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      this.cw.runRequest('Ams/Search/RecentActivity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities\n   *\n   * @param {Array<number>} ObjectIds\n   * @return {Object} Returns Promise object that represents a\n   */\n  getWOEntityCostSummary(object_ids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"ObjectIds\": object_ids\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities selected through a search definition\n   *\n   * @param {number} SearchId - Search Definition Id\n   * @return {Object} Returns Promise object that represents a\n   */\n  searchWOEntityCostSummary(search_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"SearchId\": search_id\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntitySearch', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\ninterface ActivityLink {\n  linkTypes: ReversibleMap<string, number>\n  activityTypes: ReversibleMap<string, number>\n  cw: any\n}\n\n/**\n * ActivityLinks implements the activity link functions\n *\n */\nexport class ActivityLinks implements ActivityLink {\n  /**\n   * Activity types to map string to number for internal use. Activity types available are:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   */\n  activityTypes: ReversibleMap<string, number>\n  /**\n   * Link types to map string to number for internal use. Link types available are:\n   *\n   *      \"null\", \"parent\", \"related\"\n   */\n  linkTypes: ReversibleMap<string, number>\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"null\", 0)\n    this.activityTypes.set(\"case\", 1)\n    this.activityTypes.set(\"inspection\", 2)\n    this.activityTypes.set(\"request\", 3)\n    this.activityTypes.set(\"workorder\", 4)\n    this.activityTypes.set(\"wipcase\", 5)\n\n    this.linkTypes = new ReversibleMap<string, number>()\n    this.linkTypes.set(\"null\", 0)\n    this.linkTypes.set(\"parent\", 1)\n    this.linkTypes.set(\"related\", 2)\n  }\n\n  /**\n   * Create a new activity link between two items.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  add(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(3, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Add'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Get the links for a particular node type by ID.\n   *\n   * @param {string} type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {Array<number>} sids - Array of numeric (S)IDs you wish to get of the specified type\n   * @return {Object} Returns Promise object that represents a collection\n   */\n  get(type: string, sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(type)) {\n        reject(new CWError(4, 'Activity type not found.', {'provided': type, 'options':this.activityTypes}))\n      }\n      let data = {\n        ActivityType: this.activityTypes.get(type),\n        ActivitySids: sids\n      }\n      let _this = this\n      let path = 'General/ActivityLink/ByActivitySids'\n      this.cw.runRequest(path, data).then((response: any) => {\n        let return_data = new Array()\n        _.forEach(response.Value, (link, key) => {\n          link.DestType = _this.activityTypes.get(link.DestType)\n          link.SourceType = _this.activityTypes.get(link.SourceType)\n          link.LinkType = _this.linkTypes.get(link.LinkType)\n          return_data.push(link)\n        })\n        resolve(return_data)\n      })\n    })\n  }\n\n  /**\n   * Clone a current activity link.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to clone a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to clone a link between SID as destination and a particular source\n   * @return {Object} Returns Promise object that represents a\n   */\n  clone(source_type: string, source_sid: number, destination_type: string, destination_sid: number) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      let data = {\n        SourceActivityType: this.activityTypes.get(source_type),\n        SourceActivitySid: source_sid,\n        DestinationActivityType: this.activityTypes.get(destination_type),\n        DestinationActivitySid: destination_sid\n      }\n      let path = 'General/ActivityLink/CloneByActivitySid'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Delete an activity link by ID\n   *\n   * @param {number} activity_link_id - The ID of the activity link one wishes to delete\n   * @return {Object} Returns Promise object that represents a\n   */\n  delete(activity_link_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        ActivityLinkId: activity_link_id\n      }\n      let path = 'General/ActivityLink/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Remove a link by specifying everything.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  remove(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(1, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Remove'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Gis {\n  /**\n   * @hidden\n   */\n  cw: any;\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw;\n  }\n\n  /**\n   * Get gis service configuration for user, group, domain, or service id\n   *\n   * @param {string} [whichType] - domain, group, mapservice, or user\n   * @param {number} [whichId] - domain, group, mapservice, or user Id\n   * @param {number} [getGisData] - If true, check for feature server JSON data, default is true\n   * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  getConfig(whichType, whichId, getGisData: boolean = true, context: Array<string> = []) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      whichType = whichType.toLowerCase();\n      let data: {DomainId?: any, GroupId?: any, MapServiceId?: any, UserId?: any, GetGisData: boolean, Security: Array<string>}\n      switch(whichType) {\n        case 'domain':\n          data = {DomainId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'group':\n          data = {GroupId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'mapservice':\n          data = {MapServiceId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'user':\n          data = {UserId:whichId, GetGisData: getGisData, Security: context}\n          break;\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n    * Get domain gis services\n    *\n    * @param {number} domainId - The mobile map cache Id to download\n    * @return {Object} Returns Promise object that represents an Object with the domain's default GIS services\n    */\n  domain(domainId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      let data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Download mobile map cache\n     *\n     * @param {number} cacheId - The mobile map cache Id to download\n     * @return {Object} Returns Promise object that represents a streaming download (?)\n     */\n  downloadMobile(cacheId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/DownloadMobileMapCache';\n      let data = {\n        MobileMapCacheId: cacheId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get initial extent for user\n   *\n   * @return {Object} Returns Promise object that represents ... (?)\n   */\n  initialExtent() {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InitialExtent';\n      let data = {};\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get service request gis services\n   *\n   * @param {number} requestId - The work order to check against.\n   * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n   * @return {Object} Returns Promise object that represents an Object with the specified request's entit(y|ies)\n   */\n  request(requestId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/ServiceRequestConfiguration';\n      let data = {\n        RequestId: requestId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get inspection gis services\n     *\n     * @param {number} inspectionId - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified inspection's entity\n     */\n  inspection(inspectionId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InspectionConfiguration';\n      let data = {\n        InspectionId: inspectionId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get workorder gis services\n     *\n     * @param {number} workOrderSid - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified work order's entit(y|ies)\n     */\n  workOrder(workOrderSid, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/WorkOrderConfiguration';\n      let data = {\n        WorkOrderSid: workOrderSid,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get service request gis services\n     *\n     * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n     * @param {boolean} [allDomains] services assigned to any domain the user belongs to, default is true\n     * @param {boolean} [allGroups] services assigned to any groups the user belongs to regardless of domain, default is true\n     * @param {boolean} [getGisData] If true, check for feature server JSON data, default is true\n     * @return {Object} Returns Promise object that represents an Object with the user's GIS services\n     */\n  user(context: Array<string> = [], allDomains: boolean = true, allGroups: boolean = true, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/User';\n      let data = {\n        AllDomains: allDomains,\n        AllGroups: allGroups,\n        GetGisData: getGisData,\n        Security: context\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n\n  /**\n     * Get currently selected entities from the Cityworks install's session for your user\n     * @return {Object} Returns Promise object that represents an Object with the currently-selected entities\n     */\n  selectedEntities() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/SelectedEntities';\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get Geocode server info by ServerId\n   *\n   * @param {number} ServiceId\n   * @return {Object} Returns Promise object that represents an object describing the provided Geocoder service configuration\n   */\n   // Gis/GeoCode/GeocodeServer\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class MessageQueue {\n  /**\n   * @hidden\n   */\n  cw: any\n  /**\n   * Statuses -\n   * Pending: 0,\n   * Processing: 1,\n   * Complete: 2,\n   * Failed: 3\n   */\n  status: Object = {\n    Pending: 0,\n    Processing: 1,\n    Complete: 2,\n    Failed: 3\n  }\n  /**\n   * Hook Types -\n   * Unknown: 0,\n   * ActivityUpdate: 1,\n   * Email: 2,\n   * WebHook: 3\n   */\n  hook_types: Object = {\n    Unknown: 0,\n    ActivityUpdate: 1,\n    Email: 2,\n    WebHook: 3\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Process Webhook MessageQueue records by MessageQueueId\n   *\n   * @param {Array<number>} [ids] - List of MessageQueueId values\n   * @param {boolean} [delete_successful] - automatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  processMessages(ids: Array<number>, delete_successful: boolean = false) {\n    return new Promise((resolve, reject) => {\n      let data = { Ids: ids, Delete: delete_successful}\n      let path = 'General/WebHookEvent/ProcessMessages'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  /**\n   * Get Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status -\n   * @param {number} [maxcount] - Maximum number returned. Defaults to 15\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  get(ids: Array<number>, status: string, maxcount: number = 15) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(1, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"MaxCount\": typeof(maxcount)!='undefined' ? maxcount : 15,\n        \"Status\": this.status[status]\n      }\n      let path = 'General/MessageQueue/ByIds'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  /**\n   * Delete Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status - automatically delete messages that complete with successful execution, default is false\n   * @param {number} [hours_to_keep] - utomatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  delete(ids: Array<number>, status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  // PreferencesList<GlobalPreference>\n  // Base response type: CoreResponseBase\n  // Get a list of message queue preferences\n  // This method has no parameters\n  preferences() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      let path = 'General/MessageQueue/Preferences'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  search(parameters, max_results?: number) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(max_results)!=='undefined') {\n        data.MaxResults = max_results\n      }\n      let allowed_params = ['Id', 'HookId', 'HookType', 'Result', 'DateCreatedBegin', 'DateCreatedEnd', 'DateUpdatedBegin', 'DateUpdatedEnd']\n      let disallowed_params = ['Status', 'MaxResults']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(4, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n      let path = 'General/MessageQueue/Search'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Update queue message\n   *\n   * @param {Object} parameters - Provide allowed parameters:\n   *\n   *      {\n   *        HookId: number,\n   *        Id: number,\n   *        Packet: string,\n   *        Result: string,\n   *        Status: string, // Available options: Pending, Processing, Complete, Failed\n   *        HookType: string // Available options: Unknown, ActivityUpdate, Email, WebHook\n   *      }\n   *\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  update(parameters: any) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.hook_types, 'available':this.hook_types}))\n      } else if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])!=='undefined') {\n        data.HookType = this.hook_types[parameters.hook_types]\n      }\n      let allowed_params = ['Id', 'HookId', 'Packet', 'Result']\n      let disallowed_params = ['Status', 'HookType']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(5, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n\n      let path = 'General/MessageQueue/Update'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  updateMessageStatus(ids: number[], status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/UpdateMessageStatus'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  getWebooks(hook_ids) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"HookIds\": hook_ids\n      }\n      let path = 'General/MessageQueue/WebHooks'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Search {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Search Types: Null, Request, WorkOrder, Inspection, Contract, Permit, GIS, PermitTask, PermitAddress, InspCommon, Case, WorkOrderEntity, StoreTransaction, Requisition, Material, WorkActivity, MaterialLeaf, WoTemplate, Unknown, Employee, MessageQueue, Analytics, TokenState, AssetCalculationResult, Equipment, CustomerAccount, InspTemplate, ProblemLeaf, AssetSplitRecord, PavementInsp, TvInspection, Projects\n   */\n  searchTypes: Object = {\n    \"Null\": 0,\n    \"Request\": 1,\n    \"WorkOrder\": 2,\n    \"Inspection\": 3,\n    \"Contract\": 4,\n    \"Permit\": 5,\n    \"GIS\": 6,\n    \"PermitTask\": 7,\n    \"PermitAddress\": 8,\n    \"InspCommon\": 9,\n    \"Case\": 10,\n    \"WorkOrderEntity\": 11,\n    \"StoreTransaction\": 12,\n    \"Requisition\": 13,\n    \"Material\": 14,\n    \"WorkActivity\": 15,\n    \"MaterialLeaf\": 16,\n    \"WoTemplate\": 17,\n    \"Unknown\": 18,\n    \"Employee\": 19,\n    \"MessageQueue\": 20,\n    \"Analytics\": 21,\n    \"TokenState\": 22,\n    \"AssetCalculationResult\": 23,\n    \"Equipment\": 24,\n    \"CustomerAccount\": 25,\n    \"InspTemplate\": 26,\n    \"ProblemLeaf\": 27,\n    \"AssetSplitRecord\": 28,\n    \"PavementInsp\": 29,\n    \"TvInspection\": 30,\n    \"Projects\": 31\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Do a \"quick\" search for any string (an ID is best)\n   *\n   * @category Quick Search\n   * @param {string} text - text to search the system for\n   * @return {Object} Returns Promise object that represents a collection of the currently authenticated user's notifications\n   */\n  quick(text: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"QuickSearchText\": text,\n      }\n      this.cw.runRequest('General/QuickSearch/QuickSearch', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Execute a saved search\n   *\n   * @category Search\n   * @param {number} searchId - SearchId to execute\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @return {Object} Returns Promise object that represents a list of Objects\n   */\n  execute(searchId: number, options?: {EmployeeSid?: number, ExcludeEmptyXY?: boolean, Extent?: Object, Frequency?: boolean, IdsOnly?: boolean, IncludeSearchOrder?: boolean, MaxResults?: number, ResultFields?: Array<string>, TotalOnly?: boolean}) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/Execute', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of the saved searches by search type and specific entity types OR employeeSid/domainId. You cannot search for saved searches by both specific entity type AND employeeSid/domainId.\n   *\n   * @category Search\n   * @param {string} searchType - Get the saved searches for a particular type\n   * @param {Array<string>} [applyToEntities] - Restrict GIS searches to specified entity types\n   * @param {number} [employeeSid] - The employee SID to retrieve the searches as\n   * @param {number} [domainId] - The domain ID of the domain to search\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionName\n   */\n  getSaved(searchType: string, applyToEntities?: Array<string>, employeeSid?: number, domainId?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(2, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      } else if(typeof(applyToEntities)!='undefined' && applyToEntities!=null && (typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined')) {\n        reject(new CWError(3, 'You cannot specify both applyToEntities AND employeeSid/domainId'))\n      }\n      var data = {}\n      var savedEndpoint = ''\n      if(typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined') {\n        savedEndpoint = 'SavedByType'\n        if(typeof(employeeSid)!='undefined' && employeeSid!=null) {\n          _.set(data, 'EmployeeSid', employeeSid)\n        }\n        if(typeof(domainId)!='undefined' && domainId!=null) {\n          _.set(data, 'DomainId', domainId)\n        }\n      } else {\n        if(searchType=='Case') {\n          savedEndpoint = 'PllSavedSaved'\n        } else {\n          savedEndpoint = searchType + 'Saved'\n        }\n        if(typeof(applyToEntities)!='undefined' && applyToEntities!=null) {\n          _.set(data, 'ApplyToEntities', applyToEntities)\n        }\n      }\n      this.cw.runRequest('Ams/Search/'+savedEndpoint, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list display fields for a Search Type\n   *\n   * @category Search Options\n   * @param {string} searchType - Restrict GIS searches to specified entity types\n   * @return {Object} Returns Promise object that represents a collection of SearchDisplayFields\n   */\n  displayFields(searchType: string) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      }\n      var data = {\n        searchType: _.get(this.searchTypes, searchType)\n      }\n      this.cw.runRequest('Ams/Search/DisplayFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list search types\n   *\n   * @category Search Options\n   * @return {Object} Returns Promise object that represents a collection of SearchTypeInfo objects\n   */\n  types() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Ams/Search/Types', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Enable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  enableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: true,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Disable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  disableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: false,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a search definition\n   *\n   * @category Search Definitions\n   * @param {number} searchId - SearchId to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a SearchDefinition object\n   */\n  getDefinition(searchId: number, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchId: searchId\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definition names\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionNames\n   */\n  getDefinitionNames(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DefinitionNames', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinition objects\n   */\n  getDefinitions(searchIds: Array<number>, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a list (dictionary) of search IDs and deletion success boolean\n   */\n  deleteDefinitions(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DeleteDefinitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Save a search definition\n   *\n   * @category Search Definitions\n   * @param {string} searchFor - Name of type to search for from searchTypes\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @param {number} searchId - SearchId to update. Defaults to \"0\" which is \"Create new saved search\"\n   * @return {Object} Returns Promise object that represents a SearchDefinitionName object\n   */\n  saveDefinition(searchFor: string, options?: Object, searchId: number = 0) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchFor)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchFor, 'available':this.searchTypes}))\n      }\n      var data = {\n        SearchFor: _.get(this.searchTypes, searchFor),\n        SearchId: searchId\n      }\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/SaveDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class RequestAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\n\n/**\n * A plugin that contains \"comments\" methods\n */\nexport class Comments {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Storage of all potential activity types which comments can be attached to: Unknown, Request, WorkOrder, CaTask, CaObject, CaCorrection, Project, Contract\n   */\n  activityTypes: ReversibleMap<string, number>\n\n  /**\n   * Storage of object's active activityType\n   */\n  currentActivityType: string\n\n  /**\n   * @hidden\n   */\n  constructor(cw, activityType) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"Unknown\", 0)\n    this.activityTypes.set(\"Request\", 1)\n    this.activityTypes.set(\"WorkOrder\", 2)\n    this.activityTypes.set(\"CaTask\", 3)\n    this.activityTypes.set(\"CaObject\", 4)\n    this.activityTypes.set(\"CaCorrection\", 5)\n    this.activityTypes.set(\"Project\", 6)\n    this.activityTypes.set(\"Contract\", 7)\n\n    if(!this.activityTypes.has(activityType)) {\n      throw new CWError(1, 'Activity type not found.', {'provided': activityType, 'options':this.activityTypes})\n    }\n    this.currentActivityType = activityType\n  }\n\n  /**\n   * Add a comment\n   *\n   * @param {number} sid - The SID of the activity to which the comment should be attached\n   * @param {string} comment - The text for the comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  add(sid: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        ActivitySid: sid,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Add', data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Update a comment\n   *\n   * @param {number} id - The ID of the comment which should be updated\n   * @param {string} comment - The new text for the updated comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  update(id: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        CommentId: id,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Update', data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Get comments for activity items\n   *\n   * @param {Array<number>} sids - The options SIDs to get comments for.\n   * @return {Object} Returns Promise object that represents a collection of available comments\n   */\n  get(sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(typeof(sids)!='undefined' && sids !=null) {\n        var data = {\n          ActivitySids: sids,\n          ActivityType: this.activityTypes.get(this.currentActivityType),\n        }\n        this.cw.runRequest('Ams/Comment/ByActivitySids', data).then((response: any) => {\n          if(sids.length==1) {\n            resolve(response.Value[sids[0]])\n          } else {\n            resolve(response.Value)\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * Get pre-defined comments for activityTypes\n   *\n   * @param {number} problemSid - The ProblemSid if currentActivityType is (Service) Request\n   * @param {string} [category] - Only applies to WorkOrder and ServiceRequest category comments.\n   * @return {Object} Returns Promise object that represents a collection of available comment templates.\n   */\n  getPredefined(problemSid?: number, category?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(this.currentActivityType=='Request') {\n        _.set(data, 'ProblemSid', problemSid)\n      }\n      if(typeof(category)!='undefined' && (this.currentActivityType=='Request' || this.currentActivityType=='WorkOrder')) {\n        _.set(data, 'Category', category)\n      }\n      _.set(data, 'ActivityType', this.activityTypes.get(this.currentActivityType))\n      this.cw.runRequest('Ams/Comment/PredefinedComments', data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  // /**\n  //  * Get pre-set comments for activityTypes\n  //  *\n  //  * @param {Array<string>} [activityTypes] - Provide a list of activity types. Defaults to current activity type.\n  //  * @param {Array<string>} [categories] - Only applies to WorkOrder and ServiceRequest category comments.\n  //  * @return {Object} Returns Promise object that represents a collection of available comment templates.\n  //  */\n  // getForActivityList(activityTypes?: Array<string>, categories?: Array<string>) {\n  //   return new Promise((resolve, reject) => {\n  //     var data = {}\n  //     if(typeof(activityTypes)!='undefined') {\n  //       // TODO: iterate through it and output numeric types\n  //       _.set(data, 'ActivityTypes', activityTypes)\n  //     } else {\n  //       _.set(data, 'ActivityTypes', [this.activityTypes.get(this.currentActivityType)])\n  //     }\n  //     if(typeof(categories)!='undefined') {\n  //       _.set(data, 'Categories', categories)\n  //     }\n  //     console.log(data, 'data')\n  //     this.cw.runRequest('Ams/Comment/ByActivityTypes', data).then((response: any) => {\n  //       resolve(response.Value)\n  //     })\n  //   })\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { RequestAdmin } from './request_admin'\nimport { Comments } from './comments'\n\nexport class Request {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Request Administration methods\n   */\n  admin?: Object\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new RequestAdmin(cw)\n    this.comment = new Comments(cw, 'Request')\n  }\n\n  /**\n   * Create new requests\n   *\n   * @category Requests\n   * @param {Object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created request\n   */\n  create(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'ProblemSid')) {\n        reject(new CWError(2, 'ProblemSid must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Create', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a request\n   *\n   * @category Requests\n   * @param {object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  update(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'RequestId')) {\n        reject(new CWError(3, 'RequestId must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Update', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Move a request's point\n   *\n   * @category Requests\n   * @param {number} requestId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(requestId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        RequestId: requestId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'Z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/ServiceRequest/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Change a request's problem code\n   *\n   * @category Requests\n   * @param {number} requestId - The request ID to change\n   * @param {number} problemSid - The request's new ProblemSID\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  changeProblem(requestId: number, problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId,\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeProblem', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a request by ID\n   *\n   * @category Requests\n   * @param {number} requestId - The ID of the request to retrieve\n   * @return {Object} Returns Promise that represents an object describing the request\n   */\n  getById(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get requests by array of IDs\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The request IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the requests\n   */\n  getByIds(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific request\n   *\n   * @category Requests\n   * @param {number} requestId - A Request ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {RequestId: requestId}\n      this.cw.runRequest('Ams/ServiceRequest/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom fields for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFields(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/CustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Change custom field category for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @param {number} categoryId - The new custom field grouping/category which should be assigned to the provided requests\n   * @return {Object} Returns Promise that represents a collection of requests\n   */\n  changeCustomFieldCategory(requestIds: Array<number>, categoryId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n        CategoryId: categoryId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeCustomFieldCategory', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to cancel the matched requests\n   * @param {string} [cancelReason] - A reason for cancelling the request(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the request was cancelled\n   * @return {Object} Returns object that represents a collection of requests\n   */\n   cancel(requestIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {RequestIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { RequestIds: requestIds }\n       if(typeof(cancelReason)!=='undefined')\n         _.set(data, 'CancelReason', cancelReason);\n       if(typeof(dateCancelled)!=='undefined')\n         _.set(data, 'DateCancelled', dateCancelled);\n       this.cw.runRequest('Ams/ServiceRequest/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to close the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    close(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed requests\n     *\n     * @category Requests\n     * @param {Array<number>} requestIds - An array of the IDs to reopen the matched requests\n     * @return {Object} Returns object that represents a collection of requests\n     */\n     reopen(requestIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           RequestIds: requestIds\n         }\n         this.cw.runRequest('Ams/ServiceRequest/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to delete the matched requests\n   * @return {Object} Returns object that represents a collection of request Ids which have been deleted\n   */\n   delete(requestIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestIds: requestIds\n       }\n       this.cw.runRequest('Ams/ServiceRequest/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Search for requests\n    *\n    * @category Request Search\n    * @param {Object} searchData - The search information to retrieve matched requests, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents an Array of the matching request IDs\n    */\n   search(searchData: Object) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       this.cw.runRequest('Ams/ServiceRequest/Search', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the records on the basis of RequestId, only populates RequestId, Description, ProblemCode properties\n    *\n    * @category Request Object Search\n    * @param {string} requestId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents a collection of the matching (limited) request objects\n    */\n   searchObject(requestId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestId: requestId\n       }\n       this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Requests\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n    */\n   createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         _.set(data, 'EnableEurl', enableEurl)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequest/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get a list of problem nodes for a domain\n   *\n   * @category Request Categorization\n   * @param {number} domainId - The domain ID for which to retrieve problem nodes.\n   * @param {boolean} viewOnly - Return only view only problem nodes. Defaults to false.\n   * @param {Object} [displayMode] - Object that should contain two properties if you provide it: DisplayTextMode: string (C = Code, D = Description, CD = Code ~ Description). DisplayTextDelimeter: string, only impacts CD display text mode.\n   * @param {boolean} includeCancelled - Return only cancelled problem nodes as well. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of problem node objects.\n   */\n  getProblemNodes(domainId: number, viewOnly: boolean = false, displayMode?: Object, includeCancelled: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainId: domainId,\n        IncludeCancelled: includeCancelled,\n        ViewOnly: viewOnly\n      }\n      if(typeof displayMode != 'undefined' && displayMode !== null && _.has(displayMode, 'DisplayTextMode')) {\n        _.set(data, 'DisplayTextMode', _.get(displayMode, 'DisplayTextMode'))\n        if(_.get(displayMode, 'DisplayTextMode')=='CD' && _.has(displayMode, 'DisplayTextDelimeter')) {\n          _.set(data, 'DisplayTextDelimeter', _.get(displayMode, 'DisplayTextDelimeter'))\n        }\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemNodes', data).then(r => {\n        // console.log(_.filter(r, function(o) { return !o.Cancel; }), 'filter');\n        // console.log(_.some(r.Value, ['Cancel', true]), 'some');\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes\n   *\n   * @category Request Options\n   * @param {boolean} forPublicOnly - Return only publicly-available service requests. Defaults to false.\n   * @param {boolean} onlyActiveTemplates - Return only active templates. Defaults to true.\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblems(forPublicOnly: boolean = false, onlyActiveTemplates: boolean = true, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ForPublicOnly: forPublicOnly,\n        OnlyActiveTemplates: onlyActiveTemplates\n      }\n      if(typeof domainIds != 'undefined') {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Problems', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes by keywords\n   *\n   * @category Request Options\n   * @param {string} keywords - Keywords to search for potential problem codes\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblemsByKeywords(keywords: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Keywords: keywords\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemsByKeywords', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of a problem code's priorities\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return priorities for given problemSid\n   * @return {Object} Returns Promise that represents an Array of priorities\n   */\n  getPriorities(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Priorities', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field templates for problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose template custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFieldTemplate(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/TemplateCustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the questions and answer options for a problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose Q&A should be returned\n   * @return {Object} Returns Promise that represents a collection of questions and answer settings\n   */\n  getQASettings(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get problem leaf (template) by Sid\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return problem leaf for given problemSid\n   * @return {Object} Returns Promise that represents an Object that describes the problem leaf (template)\n   */\n  getProblemLeaf(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemLeafBySid', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of default statuses\n   *\n   * @category Request Options\n   * @param {Array<number>} domainIds - List of domains to return default statuses for\n   * @return {Object} Returns Promise that represents an Array of statuses.\n   */\n  getStatuses(domainIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainIds: domainIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/DefaultStatus', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of possible Employee values\n   *\n   * @category Request Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only DispatchTo & SubmitTo.\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of Employee options.\n   */\n  getEmployeeLists(listType: string, domainId: number) {\n    return new Promise((resolve, reject) => {\n      // TODO: make a default domain option on the CW object for cases like this.\n      var data = {\n        DomainId: domainId\n      }\n      if(!_.includes(['DispatchTo', 'SubmitTo'], listType)) {\n        reject(new CWError(2, 'listType must be either SubmitTo or DispatchTo.', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/ServiceRequest/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get a list of possible DispatchTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of dispatchTo options.\n   */\n  getDispatchTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('DispatchTo', domainId);\n  }\n\n  /**\n   * Get a list of possible SubmitTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible submitTo values for\n   * @return {Object} Returns Promise that represents an Array of submitTo options.\n   */\n  getSubmitTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('SubmitTo', domainId);\n  }\n\n  /**\n   * Get street codes\n   *\n   * @category Request Options\n   * @return {Object} Returns Promise that represents an Array of Street Codes.\n   */\n  streetCodes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/ServiceRequest/AllStreetCode', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates\n   *\n   * @category Request Templates\n   * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n   * @param {Date} [minimumDateModified] - ?\n   * @param {Date} [maximumDateModified] - ?\n   * @return {Object} Returns Promise that represents\n   */\n   getTemplatesById(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         ProblemSids: null\n       }\n       if(typeof minimumDateModified != 'undefined') {\n         _.set(data, 'MinimumDateModified', minimumDateModified)\n       }\n       if(typeof maximumDateModified != 'undefined') {\n         _.set(data, 'MaximumDateModified', maximumDateModified)\n       }\n\n       this.cw.runRequest('Ams/ServiceRequestTemplate/ByIds', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Request Templates\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CWMetadata\n    */\n   createTemplateSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequestTemplate/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the questions and answers for a(many) request template(s)\n    *\n    * @category Request Templates\n    * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n    * @return {Object} Returns Promise that represents a collection of ProblemQAs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemQA\n    */\n    getTemplateQAs(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: null\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/QA', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get a list of template id results for a provided search parameters\n     *\n     * @category Request Templates\n     * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n     * @return {Object} Returns Promise that represents a list of template IDs.\n     */\n    searchTemplates(searchData: Object) {\n      return new Promise((resolve, reject) => {\n        var data = searchData\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Search', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get request templates (problem leaf[s])\n     *\n     * @category Request Templates\n     * @param {Array<number>} [templateIds] - Array of specific template IDs to retrieve\n     * @param {number} canCreate - If true, only return templates the user can create, ignored if false or null, default is false\n     * @param {boolean} includeInactiveIf - If true, returns inactive templates, default is false\n     * @param {Date} [minimumDateModified] - ?\n     * @param {Date} [maximumDateModified] - ?\n     * @return {Object} Returns Promise that represents a collection of Problem Leafs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemLeaf\n     */\n    getTemplates(templateIds: Array<number>, canCreate: boolean = false, includeInactiveIf: boolean = false, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          CanCreate: canCreate,\n          IncludeInactiveIf: includeInactiveIf\n        }\n        if(typeof templateIds != 'undefined') {\n          _.set(data, 'TemplateIds', templateIds)\n        }\n        if(typeof minimumDateModified != 'undefined') {\n          _.set(data, 'MinimumDateModified', minimumDateModified)\n        }\n        if(typeof maximumDateModified != 'undefined') {\n          _.set(data, 'MaximumDateModified', maximumDateModified)\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get work order templates that are associated to this request template type\n     *\n     * @category Request Templates\n     * @param {Array<number>} problemSids - An array list of problemSids to retrieve Problem WO templates for\n     * @param {boolean} includeInactiveIf - Include inactive work order templates, default is false\n     * @return {Object} Returns Promise that represents a collection of Problem WO Templates. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemWOTemplate\n     */\n    getWOTemplates(problemSids: Array<number>, includeInactive: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: problemSids,\n          IncludeInactive: includeInactive\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/WorkOrderTemplates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class InspectionAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { InspectionAdmin } from './inspection_admin'\n\nexport class Inspection {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Inspection Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new InspectionAdmin(cw)\n  }\n\n  /**\n   * Create new inspection\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created inspection\n   */\n  create(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n        reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n      } else {\n        this.cw.runRequest('Ams/Inspection/Create', insp_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create inspections from an array of entities\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents a collection of objects describing the newly-created inspections\n   */\n   createFromEntities(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromEntities', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a parent inspection (TODO: what parent!?)\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromParent(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // see if it's just InspectionId\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'InspectionId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromParent', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a service request\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromServiceRequest(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'RequestId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromServiceRequest', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a work order\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromWorkOrder(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // Are they  both actually required?!?!\n      // WorkOrderId\n      // WorkOrderSid ...do with only SID first then check\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'WorkOrderSid')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromWorkOrder', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Update an inspection\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated inspection\n   */\n  update(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      return new Promise((resolve, reject) => {\n        if(!_.has(insp_data, 'InspectionId')) {\n          reject(new CWError(1, 'InspectionId must be provided.', {'provided': insp_data}))\n        } else {\n          this.cw.runRequest('Ams/Inspection/Update', insp_data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Get an inspection by ID\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The inspection ID to retrieve\n   * @return {Object} Returns Promise that represents an object describing the inspection\n   */\n  getById(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/Inspection/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections by array of IDs\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - The inspection IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the inspections\n   */\n  getByIds(inspectionIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionIds: inspectionIds\n      }\n      this.cw.runRequest('Ams/Inspection/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to cancel the matched inspections\n   * @param {string} [cancelReason] - A reason for cancelling the inspection(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the inspection was cancelled\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   cancel(inspectionIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {InspectionIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { InspectionIds: inspectionIds }\n       if(typeof(cancelReason)!=='undefined') {\n         data.CancelReason = cancelReason\n       }\n       if(typeof(dateCancelled)!=='undefined') {\n         data.DateCancelled = dateCancelled\n       }\n       this.cw.runRequest('Ams/Inspection/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel inspections\n    *\n    * @category Requests\n    * @param {Array<number>} inspectionIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close inspections\n    *\n    * @category Inspections\n    * @param {Array<number>} inspectionIds - An array of the IDs to close the matched inspections\n    * @return {Object} Returns object that represents a collection of inspections\n    */\n    close(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Close', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Reopen closed inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   reopen(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Reopen', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Delete inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to delete the matched inspections\n   * @return {Object} Returns object that represents a collection of inspection Ids which have been deleted\n   */\n   delete(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Delete', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Search for inspections\n   *\n   * @category Inspection Search\n   * @param {Object} searchData - The search information to retrieve matched inspections, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents an array of the matching inspection IDs\n   */\n  search(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/Inspection/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the records on the basis of inspectionId, only populates InspectionId, InspTemplateName, and Location properties\n   *\n   * @category Inspection Object Search\n   * @param {string} inspectionId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents a collection of the matching (limited) inspection objects\n   */\n  searchObject(inspectionId: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get list of statuses\n   *\n   * @category Inspection Options\n   * @return {Object} Returns object that represents an array of all possible statuses for an Inspection\n   */\n  statuses() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Statuses', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection submit to list\n   *\n   * @category Inspection Options\n   * @param {boolean} [includeInactiveEmployees] - whether to include inactive employees in the return. Defaults to false.\n   * @param {boolean} [domainIds] - which domains to include in the return, default to All domains\n   * @return {Object} Returns object that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  submitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {IncludeInactiveEmployees?: boolean, DomainIds?: Array<number>} = {}\n      if(includeInactiveEmployees) {\n        data.IncludeInactiveEmployees = true\n      }\n      if(typeof(domainIds)!=='undefined') {\n        data.DomainIds = domainIds\n      }\n      this.cw.runRequest('Ams/Inspection/SubmitTos', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Add an entity to an existing inspection\n   * This method requires an Entity/Asset to be specified. You can either specify the Entity Type and its UID or a WorkOrderEntityBase Object.\n   *\n   * @category Inspections\n   * @param {Object} entity - Either of two attribute combinations are valid: entityType & entityUid OR Entity as a fully-inflated WorkOrderEntity (WorkOrderEntityBase) object.\n   * @param {number} inspectionId - An Inspection ID to attach the entity/asset to.\n   * @param {boolean} updateXY - Provide a boolean to whether the inspection's X/Y coordinates should be updated. Default is true.\n   * @param {Object} facility - Add Facility_Id for the Facility Identifier and Level_id for the Facility Level Identifier. Defaults to empty so that no facility is specified.\n   * @return {Object} Returns object that represents an object which describes an Inspection Entity\n   */\n  connectAsset(entity: {EntityType?: string, EntityUid?: string, Entity?: Object}, inspectionId: number, updateXY: boolean = true, facility: {Facility_Id?: string, Level_Id?: string} = {}) {\n   return new Promise((resolve, reject) => {\n     var data: {InspectionId: number, EntityType?: string, EntityUid?: string, Entity?: Object, Facility_Id?: string, Level_Id?: string} = {\n       InspectionId: inspectionId\n     }\n     if(_.has(entity, 'EntityType') && _.has(entity, 'EntityUid')) {\n       data.EntityType = entity.EntityType\n       data.EntityUid = entity.EntityUid\n     } else if(_.has(entity, 'Entity')) {\n       data.Entity = entity.Entity\n     } else {\n       // Throw error, no entity/asset provided\n     }\n     if(_.has(facility, 'Facility_Id')) {\n       data.Facility_Id = facility.Facility_Id\n     }\n     if(_.has(facility, 'Level_Id')) {\n       data.Level_Id = facility.Level_Id\n     }\n     this.cw.runRequest('Ams/Inspection/AddEntity', data).then(r => {\n       resolve(r.Value)\n     }).catch(e => {\n       // 4 NotAuthorizedToUpdateInspection\n       // 9 InvalidActivityMapLogicXY\n       // 21 ErrorUnknownEntityType\n       // 30 InvalidField\n       // 60 WarningItemNotFound\n       // 68 MoveInvalidCityworksWkid\n       reject(e)\n     })\n   })\n  }\n\n  /**\n   * Get the answers for inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspections - An Array of one or more Inspection IDs\n   * @return {Object} Returns Promise that represents a collection of Inspection Answers\n   */\n  getAnswers(inspections: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {InspectionId?: number, InspectionIds?: Array<number>} = {}\n      if(inspections.length==0) {\n        data.InspectionId = inspections[0]\n      } else {\n        data.InspectionIds = inspections\n      }\n      this.cw.runRequest('Ams/Inspection/Answers', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific Inspection\n   *\n   * @category Inspections\n   * @param {number} inspectionId - An Inspection ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {InspectionId: inspectionId}\n      this.cw.runRequest('Ams/Inspection/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n   *\n   * @category Inspections\n   * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @param {number} [searchName] - What to name your search (if it should be saved)\n   * @param {number} [sharedWithin] - What group or domain to share the search to.\n   * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n   * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      if(_.isString(searchName)) {\n        _.set(data, 'SearchName', searchName)\n        _.set(data, 'SaveDefinition', saveDefinition)\n        _.set(data, 'EnableEurl', enableEurl)\n        // not sure how to handle sharedWithin...\n        // _.set(data, 'SharedWithin', sharedWithin)\n      }\n      this.cw.runRequest('Ams/Inspection/CreateSearchDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle from\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents ... I have no idea what this endpoint does\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle intervals\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle intervals available\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle types\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle types available\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get districts\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents an Array of the districts\n   */\n  getDistricts() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Districts', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Inspection Employee lists. Abstraction done here, though only one employee list field, AFAIK.\n   *\n   * @category Inspection Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only SubmitTos.\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        IncludeInactiveEmployees: includeInactiveEmployees\n      }\n      if(typeof(domainIds)!='undefined' && domainIds!=null) {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      if(listType!='SubmitTos') {\n        reject(new CWError(2, 'listType must be \"SubmitTos\".', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/Inspection/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get SubmitTo list\n   *\n   * @category WorkOrder Options\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n  }\n\n  /**\n   * Move inspection by InspectionId. Must provide well known id (WKID) or well known text (WKT)\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The ID of the inspection that should be moved\n   * @param {number} x - The X coordinate for the move\n   * @param {number} y - The Y coordinate for the move\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - the optional Z coordinate for the move\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(inspectionId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(3, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        InspectionId: inspectionId,\n        X: x,\n        Y: y\n      }\n      if(typeof z != 'undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Ams/Inspection/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /////\n  // INSPECTION TEMPLATES\n  /////\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates by IDs\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspectionIds - An array of the IDs to retrieve the matched inspections\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns object that represents an object describing the inspection\n   */\n  getTemplatesByIds(inspTemplateIds: Array<number>, options?: {MaximumDateModified?: Date, MinimumDateModified?: Date}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types for inspection template(s)\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents an array of Entity Types\n   */\n   getTemplateEntityTypes(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/EntityTypes', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n  * Get the questions and answers for inspection template(s)\n  *\n  * @category Inspection Templates\n  * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n  * @return {Object} Returns object that represents an array which contains a list of InspQuestionPanel for the template\n  */\n  getQA(inspTemplateIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection template question conditions\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of template IDs to get the matched inspection template Question conditions for\n   * @return {Object} Returns object that represents an array which contains a dictionary of InspQuestion IDs to configs\n   */\n   getQConditions(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/QuestionConditions', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  // Attachments\n\n  // AddInspectionAttachment InspAttachment\n  // Add an inspection attachment\n  // Request Parameters\n  // Int32 AttachmentType V15_4\n  // String Comments\n  // String Filename\n  // Int32 req InspectionId\n  // Ams/Attachments/AddInspectionAttachment?data={\n  //   \"Comments\": null,\n  //   \"Filename\": null,\n  //   \"InspectionId\": null,\n  //   \"AttachmentType\": null\n  // }\n\n  /**\n   * Delete inspection attachments\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} attachmentIds - An array of inspection attachment IDs to delete\n   * @return {Object} Returns object that represents a boolean for action resolution\n   */\n   deleteAttachments(attachmentIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentIds: attachmentIds\n       }\n       this.cw.runRequest('Ams/Attachments/DeleteInspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Download an inspection attachment\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - ID of an inspection attachment to download\n   * @return {Object} Returns object that represents a file stream\n   */\n   downloadAttachment(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/DownloadInspectionAttachment', data).then(r => {\n         // TODO, pass file through // resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - An attachment ID to get info for\n   * @return {Object} Returns object that represents an object that describes the matched inspection attachment\n   */\n   getAttachmentById(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachmentById', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} inspectionIds - An array of inspection IDs to get attachments for\n   * @return {Object} Returns object that represents a collection of attachments from the matched inspections\n   */\n   getAttachments(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class WorkOrderAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { WorkOrderAdmin } from './workorder_admin'\nimport { Comments } from './comments'\n\nexport class WorkOrder {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * WorkOrder Administration methods\n   */\n  admin: Object\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new WorkOrderAdmin(cw)\n    this.comment = new Comments(cw, 'WorkOrder')\n  }\n\n  /**\n   * Create new workorders, including linkin to Requests & Inspections (optionally)\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {Array<number>} [inspectionIds] - The inspection IDs which the workorder should be linked to.\n   * @param {Array<number>} [requestIds] - The inspection IDs which the workorder should be linked to.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  create(wo_data: Object, inspectionIds?: Array<number>, requestIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(typeof inspectionIds != 'undefined' && inspectionIds != null && !_.has(data, 'InspectionIds')) {\n          _.set(data, 'InspectionIds', inspectionIds);\n        }\n        if(typeof requestIds != 'undefined' && requestIds != null && !_.has(data, 'RequestIds')) {\n          _.set(data, 'RequestIds', requestIds);\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create new workorder linked to parent workorder\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  createFromParent(wo_data: Object, workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a WorkOrder\n   *\n   * @category WorkOrders\n   * @param {object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  update(wo_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WorkOrderSid') && !_.has(wo_data, 'WorkOrderId')) {\n        reject(new CWError(3, 'WorkOrderId or WorkOrderSid must be provided.', {'provided': wo_data}))\n      } else {\n        this.cw.runRequest('Ams/WorkOrder/Update', wo_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Combine WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<string>} fromWorkOrderIds - The workorder IDs which should be combined.\n   * @param {string} toWorkOrderId - The work order ID for the single work order that should contain the info/entities from the other work orders\n   * @param {boolean} cancelCombinedWorkOrders - If the work orders combined into the single should then be canceled, default is true.\n   * @return {Object} Returns object that represents a collection of WorkOrders\n   */\n   combine(fromWorkOrderIds: Array<string>, toWorkOrderId: string, cancelCombinedWorkOrders: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         CancelCombinedWorkOrders: cancelCombinedWorkOrders,\n         ToWorkOrderId: toWorkOrderId,\n         FromWorkOrderIds: fromWorkOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Combine', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  /**\n   * Move a workorder's point\n   *\n   * @category WorkOrders\n   * @param {string} workOrderId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include WKT or WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  move(workOrderId: string, x: number, y: number, projection: Object, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        WorkOrderId: workOrderId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/WorkOrder/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Get a workorder by S/ID\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The S/ID of the workorder to retrieve. # for SID, string for ID.\n   * @param {boolean} s - Whether first argument is an SID (true) or an ID (false). Defaults to true.\n   * @return {Object} Returns Promise that represents an object describing the workorder\n   */\n  getById(workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n        var path = 'Ams/WorkOrder/ById';\n      } else {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n        var path = 'Ams/WorkOrder/BySid';\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get workorders by an array of S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getByIds(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(10, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/ByIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/BySids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get instructions by an array of workorders S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents an array of String, String describing the workorder instructions\n   */\n  getInstructions(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(10, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderSids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get the audit log for a specific workorder\n   *\n   * @category WorkOrder\n   * @param {number} workOrderSId - A WorkOrder S/ID to get the audit log for. SID is default.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(workOrderSId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n      } else if(_.isNumber(workOrderSId)) {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'Workorder S/IDs was not provided.', {'workorderSId': workOrderSId}))\n      }\n      this.cw.runRequest('Ams/WorkOrder/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field values for the workorder S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. #s for SID, strings for ID.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getCustomFieldValues(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      var path = 'Ams/WorkOrder/CustomFields';\n      if(_.isString(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderIds', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFields';\n      } else if(_.isNumber(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderSids', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFieldsByWorkOrderSids';\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSIds': workOrderSIds}))\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entities on an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs which the entities should be added to. # for SID, string for ID.\n   * @param {boolean} getGisData - Query gis to populate Entity.Attributes with current gis data. Defaults to true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n  getEntities(workOrderSIds: Array<string|number>, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        GetGisData: getGisData\n      }\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(11, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n        } else {\n          reject(new CWError(12, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n      }\n      this.cw.runRequest('Ams/WorkOrder/Entities', data).then(r => {\n        if(r.Status>0) {\n          reject(new CWError(4, r.Message, {'response': r}))\n        } else {\n          resolve(r.Value)\n        }\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add entities to an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUids: {Array<string>}, Facility_Id: {string}, Level_Id: {string}\n   * @param {boolean} updateXY - Update work order xy after adding entit(y|ies), default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   addEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'Facility_Id'))\n         _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n       if(_.has(entityInfo, 'Level_Id'))\n         _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n       if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/AddEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Update a WorkOrder entity\n    *\n    * @category WorkOrders\n    * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n    * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUid: {string}, Facility_Id: {string}, Level_Id: {string}\n    * @param {boolean} workComplete - Update WorkOrder completeness, default is true.\n    * @return {Object} Returns object that represents a list of entities removed.\n    */\n    updateEntity(workOrderSId: string|number, entityInfo: Object, workComplete: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkComplete: workComplete\n        }\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        if(_.has(entityInfo, 'Facility_Id'))\n          _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n        if(_.has(entityInfo, 'Level_Id'))\n          _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n        if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n          _.set(data, 'EntityUid', _.get(entityInfo, 'EntityUid'))\n          _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n        } else {\n          reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n        }\n\n        this.cw.runRequest('Ams/WorkOrder/UpdateEntity', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(4, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Remove entities from a work order. Provide WorkOrderId and either ObjectIds or EntityType and EntityUids\n   *\n   * @category WorkOrders\n   * @param {number} workOrderSId - The workorder S/ID which the entities should be removed from. # for SID, string for ID.\n   * @param {Object} entityInfo - Remove entities by WorkOrderEntity.ObjectId (not gis objectId).\n   * @param {boolean} updateXY - Update work order xy after removing entities, default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   removeEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'ObjectIds')) {\n         _.set(data, 'ObjectIds', _.get(entityInfo, 'ObjectIds'))\n       } else if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(8, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/RemoveEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Cancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to cancel the matched workorders\n   * @param {string} [cancelReason] - A reason for cancelling the workorder(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the workorder was cancelled\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n  cancel(workOrderIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n    return new Promise((resolve, reject) => {\n      var m = new Date()\n      var data: {WorkOrderIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { WorkOrderIds: workOrderIds }\n      if(typeof(cancelReason)!=='undefined')\n        _.set(data, 'CancelReason', cancelReason);\n      if(typeof(dateCancelled)!=='undefined')\n        _.set(data, 'DateCancelled', dateCancelled);\n      this.cw.runRequest('Ams/WorkOrder/Cancel', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Uncancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to uncancel the matched workorders\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n   uncancel(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Uncancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Close WorkOrders\n    *\n    * @category WorkOrders\n    * @param {Array<number>} workOrderIds - An array of the IDs to close the matched WorkOrders\n    * @return {Object} Returns object that represents a collection of WorkOrders\n    */\n    close(workOrderIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkOrderIds: workOrderIds\n        }\n        this.cw.runRequest('Ams/WorkOrder/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed WorkOrders\n     *\n     * @category WorkOrders\n     * @param {Array<number>} workOrderIds - An array of the IDs to reopen the matched WorkOrders\n     * @return {Object} Returns object that represents a collection of WorkOrders\n     */\n     reopen(workOrderIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           WorkOrderIds: workOrderIds\n         }\n         this.cw.runRequest('Ams/WorkOrder/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to delete the matched WorkOrders\n   * @return {Object} Returns object that represents a collection of WorkOrder Ids which have been deleted\n   */\n   delete(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderS/IDs connected to provided entities\n    *\n    * @category WorkOrder Search\n    * @param {string} entityType - The entity type to find connected work orders\n    * @param {Array<string>} entityUIDs - The list of entities to search for connected WorkOrders\n    * @param {boolean} s - Get WorkOrderSids. Defaults to true. When false, returned list is WorkOrderIds\n    * @param {Object} [search] - Any additional search properties of the work order (open/closed, etc)\n    * @return {Object} Returns Promise that represents an array of WorkOrderS/IDs\n    */\n   getWOsByEntities(entityType: string, entityUids: Array<string>, search?: Array<string|number>, s: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       if(typeof(search)!='undefined') {\n         _.merge(data, search)\n       }\n       if(!_.has(data, 'EntityType')) {\n         _.set(data, 'EntityType', entityType)\n       }\n       if(!_.has(data, 'EntityUids')) {\n         _.set(data, 'EntityUids', entityUids)\n       }\n       var path = 'Ams/WorkOrder/SearchForSids'\n       if(!s) {\n         path = 'Ams/WorkOrder/Search'\n       }\n       this.cw.runRequest(path, data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderSid and description for provided WorkOrderId\n    *\n    * @category WorkOrder Search\n    * @param {string} workOrderId - The WorkOrderId for which to get the WorkOrderSid and description\n    * @return {Object} Returns Promise that represents an object with WorkOrderS/IDs & Description\n    */\n   getSearchList(workOrderId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       _.set(data, 'WorkOrderId', workOrderId)\n       this.cw.runRequest('Ams/WorkOrder/SearchObject', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrder Employee lists\n    *\n    * @category WorkOrder Options\n    * @param {string} listType - Which list (endpoint) to get. Includes Supervisors & SubmitTos.\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         IncludeInactiveEmployees: includeInactiveEmployees\n       }\n       if(typeof(domainIds)!='undefined' && domainIds!=null) {\n         _.set(data, 'DomainIds', domainIds)\n       }\n       if(!_.includes(['Supervisors', 'SubmitTos'], listType)) {\n         reject(new CWError(2, 'listType must be either SubmitTos or Supervisors.', {'provided': listType}))\n       } else {\n         this.cw.runRequest(`Ams/WorkOrder/${listType}`, data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       }\n     })\n   }\n\n   /**\n    * Get SubmitTo list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Supervisors list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSupervisors(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('Supervisors', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Status Options\n    *\n    * @category WorkOrder Options\n    * @return {Object} Returns Promise that represents a collection of codes. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CodeDesc\n    */\n   getStatuses() {\n     return new Promise((resolve, reject) => {\n       this.cw.runRequest('Ams/WorkOrder/Statuses', {}).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get Categories\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder category code descriptions\n   */\n  getCategories() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Categories', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Priorities\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder priorities\n   */\n  getPriorities() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Priorities', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle From\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle From options for workorders\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Intervals\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Interval options for workorders\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Type options for workorders\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get WorkOrder Stages\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Stage options for WorkOrders\n   */\n  getStages() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Stages', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Expense Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Expense Type options for workorders\n   */\n  getExpenseTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/ExpenseTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseData {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Case Data Group\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} caseDataGroupId - CaseDataGroupId as defined in CaseDataGroup admin.\n   * @param {string} groupCode - The Group Code.\n   * @param {Object} [options] - Options for CaseDataGroup including GroupDesc, GroupSum, and SumFlag\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addGroup(caObjectId: number, caseDataGroupId: number, groupCode: string, options?: {GroupDesc?: string, GroupSum?: number, SumFlag?: string}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaseDataGroupId: caseDataGroupId,\n        GroupCode: groupCode\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Default Case Data Groups\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} busCaseId - The business case ID\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   addDefaultGroups(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a data detail entry to the case data group specified by the CaDataGroupId. The CaDataGroupId is associated to a case.\n   *\n   * @category Data Groups\n   * @param {number} caseDataDetailId - The Data Detail template ID\n   * @param {number} caDataGroupId - The Case Instance Data Group ID\n   * @param {string} columnSequence - The column sequence\n   * @param {string} detailCode - The detail Code\n   * @param {number} detailSequence - The detail order number\n   * @param {Object} [options] - Other options for CaseDataDetail. See WIPAdd here: /{subdirectory}/apidocs/#/service-info/Pll/CaseDataDetail\n   * @return {Object} Returns Promise that represents an object describing CaDataDetailItemBase.\n   */\n   wipAddDetail(caseDataDetailId: number, caDataGroupId: number, columnSequence: string, detailCode: string, detailSequence: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseDataDetailId: caseDataDetailId,\n        CaDataGroupId: caDataGroupId,\n        ColumnSequence: columnSequence,\n        DetailCode: detailCode,\n        DetailSequence: detailSequence\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get groups by CaObjectId\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to get the attached data groups.\n   * @return {Object} Returns Promise that represents a collection of the CaDataGroupItemBases.\n   */\n   getGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Data Groups by Case Object ID.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   deleteGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Data Groups. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data Groups\n   * @param {Object} filters - The parameters to search by. (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag)\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   searchForGroups(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaDataGroupId', 'CaseDataGroupId', 'GroupCode', 'GroupDesc', 'GroupSum', 'SumFlag']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Data Groups by Case ObjectId\n   *\n   * @category Data Groups\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {Object} options - The other options for checkGIS. Either CaObjectId or CaseDataGroupId is required.\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   checkGIS(entityType: string, entityUid: string, options: {CaObjectId?:number, CaseDataGroupId?: number, CaseDataDetailId?: number}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(_.has(options, 'CaObjectId')) {\n        _.set(data, 'CaObjectId', _.get(options, 'CaObjectId'))\n      } else if(_.has(options, 'CaseDataGroupId')) {\n        _.set(data, 'CaseDataGroupId', _.get(options, 'CaseDataGroupId'))\n      } else {\n        reject(new CWError(1, 'Either CaObjectId or CaseDataGroupId is required.', {'provided': options}))\n      }\n      if(_.has(options, 'CaseDataDetailId')) {\n        _.set(data, 'CaseDataDetailId', _.get(options, 'CaseDataDetailId'))\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/CheckGISChanges', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update data groups on a case based on asset value mappings.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The case to update\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {number} [caDataGroupId] - The specific data group ID to limit updates to\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   updateGroupsFromAsset(caObjectId: number, entityType: string, entityUid: string, caDataGroupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(typeof(caDataGroupId)!='undefined') {\n        _.set(data, 'CaDataGroupId', caDataGroupId)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/UpdateFromAsset', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Attach Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataGroupId - The Case Data Group ID to attach the data detail to.\n   * @param {number} caseDataDetailId - caseDataDetailId to attach.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addDetail(caDataGroupId: number, caseDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataGroupId: caDataGroupId,\n        CaseDataDetailId: caseDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to attach the data detail to.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   updateDetail(caDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Lock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to lock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   lockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: true\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Unlock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to unlock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   unlockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: false\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a list of possible values to the data detail entry specified by the CaDataDetailId.\n   *\n   * @category Data List Values\n   * @param {number} caDataDetailId - The Case Object to attach the data group to.\n   * @param {string} listValue - The Group Code.\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   addListValue(caDataDetailId: number, listValue: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        ListValue: listValue\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete by Id (Ca Data List Id)\n   *\n   * @category Data List Values\n   * @param {number} CaDataListId - The Case Data List ID\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   deleteListValue(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value IDs. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue)\n   * @return {Object} Returns Promise that represents an Array of resulting CaDataListIds\n   */\n   searchForListValueIds(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaDataDetailId', 'CaDataListId', 'ListValue']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue)\n   * @return {Object} Returns Promise that represents a collection of resulting CaDataListValuesItemBase objects\n   */\n   searchForListValueObjects(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaDataDetailId', 'CaDataListId', 'ListValue']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseFinancial {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw: Object) {\n    this.cw = cw\n  }\n\n  /**\n   * Adds a fee to the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} feeSetupId - The fee setup id for the fee to add to the case.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addFee(caObjectId: number, feeSetupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        FeeSetupId: feeSetupId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Fee Payment. Adds a payment to the case fee specified by caObjectId.\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addPayment(caObjectId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Payment Refund. Refunds a payment on the case payment specified by caPaymentId.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentId - The Case Payment ID for the case payment which to refund\n   * @param {number} refundAmount - The amount to refund\n   * @param {string} comment - A comment to append to the refund\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  addRefund(caPaymentId: number, refundAmount: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentId: caPaymentId,\n        RefundAmount: refundAmount,\n        Comments: comment\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Deposit Payment. Adds a payment to the case deposit specified by CaDepositId.\n   *\n   * @category Case Payments\n   * @param {number} caDepositId - The Case Deposit ID for the case deposit to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addDepositPayment(caDepositId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaDepositId: caDepositId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/AddDeposit', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a deposit to the case specified by the CaObectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} depositId - The deposit setup id for the deposit to add to the case.\n   * @param {number} [amount] - The amount of the deposit (optional)\n   * @param {string} [comment] - Comment text to add to the deposit (optional)\n   * @return {Object} Returns Promise that represents an object describing the newly-added deposit. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDeposit(caObjectId: number, depositId: number, amount?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        DepositId: depositId\n      }\n      if(typeof(amount)!='undefined') {\n        _.set(data, 'Amount', amount)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('CaseDeposit/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds an instrument to the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the instrument\n   * @param {number} instTypeId - The instrument type id for the instrument being added to the case.\n   * @param {number} amount - The amount of the instrument\n   * @param {Date} dateExpire - The datetime for the instrument to expire.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument for more options.\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument. See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument\n   */\n  addInstrument(caObjectId: number, instTypeId: number, amount: number, dateExpire: Date, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        InstTypeId: instTypeId,\n        Amount: amount,\n        DateExpire: dateExpire\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseInstrument/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a fee specified by the CaFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Fee ID for the specific instance of the fee you wish to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the updated fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  updateFee(caFeeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaFeeId: caFeeId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Void a refund.\n   *\n   * @category Case Refund Payment\n   * @param {number} caPaymentRefundId - The Refund ID for the specific refund to void\n   * @param {String} voided - A string. No clue.\n   * @return {Object} Returns Promise that represents an object describing the voided refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  voidRefund(caPaymentRefundId: number, voided: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId,\n        Voided: voided\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Fees. Adds fees to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default fees\n   * @param {number} busCaseId - The business case ID whose default fees should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Fee Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addDefaultFees(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseFees/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Deposits. Adds deposits to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default deposits\n   * @param {number} busCaseId - The business case ID whose default deposits should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Deposit Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDefaultDeposits(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the fees from the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Fees.\n   */\n  getFees(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Deposit by Case ObjectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the deposits\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  getDeposits(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Payments by Case ObjectId\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the payments\n   * @return {Object} Returns Promise that represents a collection of Case Payments.\n   */\n  getPayments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the instruments from the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Instruments.\n   */\n  getInstruments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Case Fee ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Fee object.\n   */\n  deleteFee(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CaseFees/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteFeesByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete a Case Payment by Id. Delete a specific case payment by CaPaymentId.\n   *\n   * @category Case Payments\n   * @param {number} caPaymentId - The Case Payment ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Payment object.\n   */\n  deletePayment(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CasePayment/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payment Refund. Removes a refund on a payment.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentRefundId - The Case Payment ID for the case payment which to refund\n   * @return {Object} Returns Promise that represents an object describing the deleted payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  deleteRefund(caPaymentRefundId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payments by Case ObjectId. Delete from the system all payments associated to a specific case as specified by the case id (CaObjectId)\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID whose payments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deletePaymentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Deposits\n   * @param {number} caDepositId - The Case Deposit ID which should be deleted\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  deleteDeposit(caDepositId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDepositId: caDepositId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteDepositsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the instrument specified by the caInstrumentId.\n   *\n   * @category Case Instruments\n   * @param {number} caInstrumentId - The Case Instrument ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Instrument.\n   */\n  deleteInstrument(caInstrumentId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Instruments by Case ObjectId. Delete from the system all Instruments linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID whose instruments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteInstrumentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFees(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaFeeId', 'CaObjectId', 'FeeCode', 'FeeDesc']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseFees/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payments. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payments\n   * @param {Object} filters - The filters to search for matched Case Payments\n   * @return {Object} Returns Promise that represents an Array of case payment IDs\n   */\n  searchPayments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaPaymentId', 'CommentText', 'FeeAmount', 'FeeCode', 'FeeDesc', 'PaymentAccount', 'PaymentAmount', 'TenderType']).length==0) {\n        reject(new CWError(5, 'At least one of the attributes (CaPaymentId, CommentText, FeeAmount, FeeCode, FeeDesc, PaymentAccount, PaymentAmount, TenderType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payment Refunds. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payment Refunds\n   * @param {Object} filters - The filters to search for matched Case Payments.\n   * @return {Object} Returns Promise that represents an Array of case payment refund IDs\n   */\n  searchRefunds(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaPaymentId', 'CaPaymentRefundId', 'Comments', 'RefundAmount']).length==0) {\n        reject(new CWError(6, 'At least one of the attributes (CaPaymentId, CaPaymentRefundId, Comments, RefundAmount) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Deposits\n   * @param {Object} filters - The parameters to search by.\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchDeposits(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaDepositId', 'CaObjectId', 'DepositCode', 'DepositDesc']).length==0) {\n        reject(new CWError(1, 'At least one of the arguments (CaDepositId, CaObjectId, DepositCode, DepositDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDeposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fee Templates\n   *\n   * @category Case Fees\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  getAllFeeTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameters to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFeeTemplates(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['FeeSetupId', 'FeeTypeId', 'FeeCode', 'FeeDesc', 'AccountCode']).length==0) {\n        reject(new CWError(7, 'At least one of the arguments (FeeSetupId, FeeTypeId, FeeCode, FeeDesc, AccountCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instruments. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Instruments\n   * @param {Object} filters - The parameters to search by (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of case instrument IDs\n   */\n  searchCaseInstruments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['AddressLine1', 'Amount', 'CaInstrumentId', 'CityName', 'CommentText', 'Company', 'ContactEmail', 'ContactName', 'ContactPhone', 'CountryCode', 'InstTypeId', 'SerialNumber', 'StateCode', 'ZipCode']).length==0) {\n        reject(new CWError(9, 'At least one of the arguments (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseInstrument/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the Defined Instruments\n   *\n   * @category Instruments\n   * @param {Object} options - the options to filter the instruments returned by\n   * @return {Object} Returns Promise that represents an Array of CaInstrumentItem\n   */\n  getInstrumentList(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/CaseInstrument/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a release to a case instrument specified by the caInstrumentId. Must provide either amountReleased OR percentReleased\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstrumentId - The Case Instrument ID to which to add the instrument release\n   * @param {number} releasedBy - UserID to attach to the release.\n   * @param {Date} dateReleased - The date of the release\n   * @param {number} [amountReleased] - The amount to be released\n   * @param {number} [percentReleased] - OR the percent to be released\n   * @param {string} [comment] - Comment to attach to the release\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  addCaseInstrumentRelease(caInstrumentId: number, releasedBy: number, dateReleased: Date, amountReleased?: number, percentReleased?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId,\n        DateReleased: dateReleased,\n        ReleasedBy: releasedBy\n      }\n      if((typeof(percentReleased)!='undefined' || percentReleased!=null) && (typeof(amountReleased)!='undefined' || amountReleased!=null)) {\n        reject(new CWError(2, 'Either amountReleased or percentReleased must be specified.'))\n      } else if(typeof(percentReleased)!='undefined' && percentReleased!=null) {\n        _.set(data, 'PercentReleased', percentReleased)\n      } else if(typeof(amountReleased)!='undefined' && amountReleased!=null) {\n        _.set(data, 'AmountReleased', amountReleased)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a release specified by the caInstReleasesId.\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstReleasesId - The Case Instrument Release ID to delete\n   * @return {Object} Returns Promise that represents an object describing the deleted instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  deleteCaseInstrumentRelease(caInstReleasesId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstReleasesId: caInstReleasesId\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instrument Releases. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Case Instrument Releases\n   * @param {Object} filters - Specify at least one of the following: AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy\n   * @return {Object} Returns Promise that represents an Array of Case Instruments resulting from the search\n   */\n  searchCaseInstrumentReleases(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      if(_.intersectionBy(filters, ['AmountReleased', 'CaInstReleasesId', 'CaInstrumentId', 'CommentText', 'PercentReleased', 'ReleasedBy']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy) must be defined.'))\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  fees() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/FeeSetup/All', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Fees\n   * @param {Object} filters - Specify at least one.\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  searchAvailableFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(8, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all tender types configured\n   *\n   * @category Tender Types\n   * @return {Object} Returns Promise that represents a collection of tender type objects. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  getTenderTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TenderType/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a tender type configuration\n   *\n   * @category Tender Types\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  addTenderType(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TenderType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a tender type configuration\n   *\n   * @category Tender Types\n   * @param {number} tenderTypeId - ID of the tender type to update\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  updateTenderType(tenderTypeId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        TenderTypeId: tenderTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/TenderType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { Comments } from './comments'\n\nexport class CaseWorkflow {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Task sub-methods\n   */\n  task: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.task = {\n      comment: new Comments(cw, 'CaTask')\n    }\n  }\n\n  /**\n   * Adds a task to the case specified by the CaObectId.\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} taskId - The task ID to add to the case workflow\n   * @param {number} startPoint - The start point in the workflow for the task\n   * @param {number} endPoint - The end point in the workflow for the task\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   addTask(caObjectId: number, taskId: number, startPoint: number, endPoint: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        TaskId: taskId,\n        StartPoint: startPoint,\n        EndPoint: endPoint\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Result\n   *\n   * @category Task Results\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} caTaskId - The Case task ID to add the result to\n   * @param {number} resultCode - The result Code\n   * @param {number} resultID - The result ID\n   * @param {number} resultSetID - The result set ID\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents an object describing CaTaskResultsItem.\n   */\n   addTaskResult(caObjectId: number, caTaskId: number, resultCode: number, resultID: number, resultSetID: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaTaskId: caTaskId,\n        ResultCode: resultCode,\n        ResultID: resultID,\n        ResultSetID: resultSetID\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   addTaskComment(caTaskId: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId,\n        CommentText: comment\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by CaObjectId\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to get the attached tasks\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksByCaseId(caObjectId: number, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by TaskIds\n   *\n   * @category Tasks\n   * @param {Array<number>} caTaskIds - The IDs of the tasks to retrieve\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksById(caTaskIds: Array<number>, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get CaTaskResultsItem by CaTaskIds\n   *\n   * @category Task Results\n   * @param {Array<number>} caTaskIds - The IDs of the tasks for which to retrieve results\n   * @return {Object} Returns Promise that represents a collection of CaTaskResultsItems.\n   */\n   getResultsByTaskId(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {number} caTaskId - The task ID for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CommentRecords.\n   */\n   getCommentsForTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskIds - The task IDs for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CaTaskCommentsItemBase.\n   */\n   getCommentsForTasks(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {Object} [options] - Options for Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   updateTask(caTaskId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskCommentId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @param {number} commentId - Probably unnecessary?\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   updateTaskComment(caTaskCommentId: number, comment: string, commentId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentId: caTaskCommentId,\n        CommentText: comment\n      }\n      if(typeof(commentId)!='undefined') {\n        _.set(data, 'CommentId', commentId)\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {string} resultCode - The result code to set for the specified Task\n   * @param {Object} [options] - Options for Task. Specify either or both TaskCompletedBy & TaskCompleteDate. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   setTaskResult(caTaskId: number, resultCode: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(_.intersectionBy(options, ['TaskCompleteDate', 'TaskCompletedBy']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (TaskCompletedBy, TaskCompleteDate) must be defined.'))\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/SetResult', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   deleteTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTask/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents the number of the CaObjectID\n   */\n   deleteTasksOnCase(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseTask/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes tasks by TaskID\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskCommentIds - The comments to delete\n   * @return {Object} Returns Promise that represents a dictionary of comment IDs.\n   */\n   deleteTaskComments(caTaskCommentIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentIds: caTaskCommentIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Tasks. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Tasks\n   * @param {Object} filters - The parameters to search by. (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType)\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskIDs\n   */\n   searchForTasks(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['ResponsibleUserId', 'TaskAvailable', 'TaskComplete', 'TaskType']).length==0) {\n        reject(new CWError(1, 'At least one of the attributes (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseTask/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskResults Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Task Results\n   * @param {Object} filters - The parameters to search by. See: /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskResultsItem\n   */\n   searchForTaskResults(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseTaskResults/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Business Case Template\n   *\n   * @category Case Templates\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the created case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  addBusinessCaseTemplate(data: Object) {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/BusinessCase/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Business Case Template\n   *\n   * @category Case Templates\n   * @param {number} busCaseId - The Business Case ID to update\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the updated case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  updateBusinessCaseTemplate(busCaseId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/BusinessCase/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Business Case Templates\n   *\n   * @category Case Templates\n   * @return {Object} Returns Promise that represents a collection of Business Case Templates\n   */\n  getBusinessCaseTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/BusinessCase/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Type\n   *\n   * @category Types & SubTypes\n   * @param {string} caseTypeName - The case type name\n   * @param {string} caseTypeDesciption - The case type description\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the added case type\n   */\n  addCaseType(caseTypeName: string, caseTypeDesciption: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseType: caseTypeName,\n        CaseTypeDesciption: caseTypeDesciption\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Type\n   *\n   * @category Types & SubTypes\n   * @param {number} caseTypeId - The case Type ID\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the updated case type\n   */\n  updateCaseType(caseTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Types\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems\n   */\n  getCaseTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents an Array of CaseTypeIDs\n   */\n  searchCaseTypeIDs(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CaseTypeItem\n   */\n  searchCaseTypeObjects(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaseType, CaseTypeDesc, CaseTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add SubType\n   *\n   * @category Types & SubTypes\n   * @param {string} subTypeName - The SubTypeId\n   * @param {string} subTypeDescription - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  addSubtype(subTypeName: string, subTypeDescription: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubType: subTypeName,\n        SubTypeDesc: subTypeDescription\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update SubType\n   *\n   * @category Types & SubTypes\n   * @param {number} subTypeId - The SubTypeId\n   * @param {Object} options - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the updated SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  updateSubtype(subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get SubTypes\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  getSubtypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/SubType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getFees() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Expirations\n   *\n   * @category Expirations\n   * @return {Object} Returns Promise that represents a collection of ExpirationTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  getExpirations() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/ExpirationType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add an Expiration type\n   *\n   * @category Expirations\n   * @param {Object} options - Must specify OrgId and ExpirationDescType attributes. See: /{subdirectory}/apidocs/#/service-info/Pll/ExpirationType\n   * @return {Object} Returns Promise that represents an object describing the newly-added ExpirationTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  addExpiration(options?: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(options, 'OrgId') || !_.has(options, 'ExpirationTypeDesc')) {\n        reject(new CWError(5, 'OrgId and ExpirationTypeDesc must both be defined.'))\n      }\n      var data = options\n      this.cw.runRequest('Pll/ExpirationType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Deposits\n   *\n   * @category Deposits\n   * @return {Object} Returns Promise that represents a collection of DepositItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepositItemBase\n   */\n  getDeposits() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Deposit/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchDeposits(filters: {AccountCode?: string, DepositCode?: string, DepositDesc?: string, DepositId?: number, DepositTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['AccountCode', 'DepositCode', 'DepositDesc', 'DepositId', 'DepositTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/Deposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Disciplines\n   *\n   * @category Disciplines\n   * @return {Object} Returns Promise that represents a collection of DisciplineItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DisciplineItem\n   */\n  getDisciplines() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Discipline/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Department\n   *\n   * @category Departments & Divisions\n   * @param {string} departmentCode - The SubTypeId\n   * @param {string} departmentName - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  addDepartment(departmentCode: string, departmentName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentCode: departmentCode,\n        DepartmentName: departmentName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Department/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Departments\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getDepartments() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Department/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Division\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  addDivision(departmentId: number, divisionName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentId: departmentId,\n        DivisionName: divisionName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Division/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Divisions\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of DivisionItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  getDivisions() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Division/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Holiday\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  addHoliday(holidayDate: Date, holidayDesc: string, halfDayFlag?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayDate: holidayDate,\n        HolidayDesc: holidayDesc\n      }\n      if(typeof(halfDayFlag)!='undefined') {\n        _.set(data, 'HalfDayFlag', halfDayFlag)\n      }\n      this.cw.runRequest('Pll/Holiday/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Holiday\n   *\n   * @category Holidays\n   * @param {number} holidayId - ID of Holiday to delete\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  deleteHoliday(holidayId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayId: holidayId\n      }\n      this.cw.runRequest('Pll/Holiday/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Holidays\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents a collection of HolidaysItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  getHolidays() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Holiday/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Inspection Time Block\n   *\n   * @category Inspections\n   * @param {string} labelText - Label for the time block\n   * @param {string} startTime - Start time in 24 hour format (HH:mm)\n   * @param {string} endTime - End time in 24 hour format (HH:mm)\n   * @param {Object} inspTimeBlocksDetails - See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspTimeBlocksDetailItem\n   * @return {Object} Returns Promise that represents an object describing the newly-added InspectionTimeBlocksItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  addInspectionTimeBlock(labelText: string, startTime: string, endTime: string, inspTimeBlocksDetails?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        LabelText: labelText,\n        StartTime: startTime,\n        EndTime: endTime\n      }\n      if(typeof(inspTimeBlocksDetails)!='undefined') {\n        _.set(data, 'InspTimeBlocksDetails', inspTimeBlocksDetails)\n      }\n      this.cw.runRequest('Pll/InspectionTimeBlock/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Inspection Time Blocks\n   *\n   * @category Inspections\n   * @return {Object} Returns Promise that represents a collection of InspectionTimeBlocksItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  getInspectionTimeBlocks() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/InspectionTimeBlock/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all NotificationCases\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationCaseItem\n   */\n  getNotificationCases() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationCase/GetNotificationCaseList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Notification Types\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationTypeItem\n   */\n  getNotificationTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationType/GetNotificationTypeList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} options - attributes or update\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addNumberingGroup(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/NumberingGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} numberingGroupId - ID of NumberGroup to update\n   * @param {number} options - updates attributes\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  updateNumberingGroup(numberingGroupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        NumberingGroupId: numberingGroupId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/NumberingGroup/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Numbering Groups\n   *\n   * @category NumberingGroups\n   * @return {Object} Returns Promise that represents a collection of NumberingGroupItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  getNumberingGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NumberingGroup/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Person\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addPerson(name: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        Name: name\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all People\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleItem\n   */\n  getPeople() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/People/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add People Role\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/PeopleRole\n   * @return {Object} Returns Promise that represents an object describing the newly-added PeopleRoleItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  addPeopleRole(roleCode: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        RoleCode: roleCode\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all PeopleRoles\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getPeopleRoles() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/PeopleRole/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultDetail. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  addTaskResultDetail(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {string} resultDetailId - Result Detail ID\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  updateTaskResultDetail(resultDetailId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        ResultDetailId: resultDetailId\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all TaskResultDetails\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getTaskResultDetails() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultDetail/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultFeeInsert. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultFeeInsertItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  addTaskResultFeeInsert(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the deleted TaskResultFeeInsertItem.\n   */\n   deleteTaskResultFeeInsert(taskResultFeeInsertId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert(s) by Task ID\n   *\n   * @category TaskResults\n   * @param {number} taskId - ID for Task parent of TaskResultFeeInsert(s) to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the Task parent of the deleted TaskResultFeeInsertItem(s).\n   */\n   deleteTaskResultFeeInsertByTaskId(taskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskId: taskId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/DeleteByTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be updated.\n   * @param {number} taskId - Updated TaskID\n   * @param {number} taskResultId - Updated TaskResultId\n   * @param {number} [feeSetupId] - Fee setup ID update for TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents the ID Number of the updated TaskResultFeeInsertItem.\n   */\n   updateTaskResultFeeInsert(taskResultFeeInsertId: number, taskId: number, taskResultId: number, feeSetupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId,\n        TaskId: taskId,\n        TaskResultId: taskResultId\n      }\n      if(typeof(feeSetupId)!='undefined') {\n        _.set(data, 'FeeSetupId', feeSetupId)\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Get all TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of TaskResultFeeInsertItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  getTaskResultFeeInsert() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultFeeInsert/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nimport { CaseData } from './case_data'\nimport { CaseFinancial } from './case_financial'\nimport { CaseWorkflow} from './case_workflow'\nimport { CaseAdmin } from './case_admin'\nimport { Comments } from './comments'\n\nexport class Case {\n  /**\n   * @hidden\n   */\n  cw: any\n\n\n  /**\n   * Data Detail methods\n   */\n  data?: Object\n  /**\n   * Workflow & task methods\n   */\n  workflow?: Object\n  /**\n   * Payment, Receipt, & Fee methods\n   */\n  financial?: Object\n  /**\n   * Commenting methods\n   */\n  comment?: Object\n  /**\n   * PLL Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.data = new CaseData(cw)\n    this.workflow = new CaseWorkflow(cw)\n    this.financial = new CaseFinancial(cw)\n    this.comment = new Comments(cw, 'CaObject')\n    this.admin = new CaseAdmin(cw)\n  }\n\n  /**\n   * Create new case\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  create(caseTypeId: number, subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/Create', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a child case\n   *\n   * @category Cases\n   * @param {number} busCaseId - The case Type ID\n   * @param {number} parentCaObjectId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createChild(busCaseId: number, parentCaObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId,\n        ParentCaObjectId: parentCaObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/CreateChild', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a case from a Service Request\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {number} requestId - The service request ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createFromRequest(caseTypeId: number, subTypeId: number, requestId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId,\n        ServiceRequestId: requestId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/CreateCaseFromServiceRequest', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the updated case\n   */\n  update(caObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cases by IDs\n   *\n   * @category Cases\n   * @param {Array<number>} caObjectIds - The case Object ID to update\n   * @return {Object} Returns Promise that represents a collection of objects describing the cases\n   */\n  getByIds(caObjectIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectIds: caObjectIds\n      }\n      this.cw.runRequest('Pll/CaseObject/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Cases. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Cases\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case Object IDs\n   */\n  search(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseObject/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Move a Case point\n   *\n   * @category Cases\n   * @param {string} caObjectId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(caObjectId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(1, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        CaObjectId: caObjectId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Pll/CaseObject/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Delete case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the deleted case\n   */\n  delete(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n      }\n      this.cw.runRequest('Pll/CaseObject/DeleteCase', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport { General } from './general'\nimport { ActivityLinks } from './activity_link'\nimport { Gis } from './gis'\nimport { MessageQueue } from './message_queue'\nimport { Search } from './search'\nimport { Request } from './request'\nimport { Inspection } from './inspection'\nimport { WorkOrder } from './workorder'\n\nimport { Case } from './case'\n\nconst https = require('https')\nconst querystring = require('querystring')\nconst _ = require('lodash')\n\ninterface postData {\n  data?: string\n  token?: string\n}\n\n/**\n * Core interface Citywork which defines the access vars for many of the functions and the connection settings\n */\ninterface Citywork {\n  base_url: any\n  settings: Object\n  login?: string\n  password?: string\n  Token?: string\n  gisToken?: string\n  gisTokenUrl?: string\n\n  default_domain?: any\n\n  general?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  // case?: Object\n  inspection?: Object\n  workorder?: Object\n  request?: Object\n\n  case?: Object\n\n  extensions: Object\n  features: Object\n}\n\n/**\n * Core class Cityworks with most of the authentication and install capabilities functions\n */\nmodule.exports = class Cityworks implements Citywork {\n  /**\n   * The domain of the cityworks install. Defaults to Cityworks Online\n   */\n  base_url: string\n  /**\n   * Stores the currently in use authentication token\n   */\n  Token?: string\n  /**\n   * Stores the login username\n   */\n  login?: string\n  /**\n   * Holds the login password\n   */\n  password?: string\n  /**\n   * Holds the GIS Token for GIS-based Authentication (Portal)\n   */\n  gisToken?: string\n  /**\n   * Holds the GIS Token URL for GIS-based Authentication (Portal)\n   */\n  gisTokenUrl?: string\n  /**\n   * Stores settings including path (defaults to \"cityworks\"), secure (defaults to true), expires (defaults to null - does not expire), default_domain\n   */\n  settings: {\n    path: string,\n    secure: boolean,\n    expires: any,\n    default_domain?: any\n  }\n  error?: Object\n  general?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  search?: Object\n  request?: Object\n  inspection?: Object\n  workorder?: Object\n\n  case?: Object\n\n  extensions: Object\n  features: Object\n  potential_loads: Array<string>\n\n  /**\n     * Contructor for a new cityworks instance's object, allows one to optionally configure the domain and other settings right from the get-go\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'workorder', 'inspection', 'request', 'case']\n     */\n  constructor(base_url?: string, settings?: Object, load?: Array<string>) {\n    this.base_url = 'cityworksonline'\n    this.extensions = {\"UnknownExtension\": 0, \"CwAnalytics\": 1, \"WebHooks\": 2, \"PLLPublicApp\": 3, \"ActivityUpdate\": 4, \"SingleSignOn\": 5}\n    this.features = {\"UnknownFeature\": 0, \"ViewInspections\": 1, \"EditInspections\": 2, \"ViewServiceRequest\": 3, \"EditServiceRequest\": 4, \"ViewWorkOrder\": 5, \"EditWorkOrder\": 6, \"EquipmentCheckOut\": 7, \"OfficeField\": 8, \"Respond\": 9, \"Eurl\": 10, \"PaverInterface\": 11, \"Contracts\": 12, \"Storeroom\": 13, \"PLL\": 14, \"Cw4XL\": 15, \"TableEditor\": 16, \"CCTVInterface\": 17, \"MobileAndroid\": 18, \"MobileiOS\": 19, \"PerformanceBudgeting\": 20, \"Insights\": 21, \"RespondCase\": 22, \"RespondInspection\": 23, \"RespondServiceRequest\": 24, \"RespondTaskManager\": 25, \"RespondWorkOrder\": 26, \"Workload\": 27, \"OpX\": 28, \"TrimbleUnityMobile\": 29, \"TrimbleVegetationManager\": 30}\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n    this.potential_loads = ['general', 'activity_link', 'message_queue', 'gis', 'search', 'request', 'case', 'case_financial']\n    if(typeof(base_url)!='undefined') {\n      this.configure(base_url, settings, load)\n    }\n  }\n\n  /**\n     * Configure a new cityworks instance's domain and other settings\n     *\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'search', 'workorder', 'inspection', 'request', 'case']\n     * @return {boolean} Returns true if successful, otherwise, throws error\n     */\n  configure(base_url?: string, settings?: Object, load?: Array<string>) {\n    if(typeof base_url !== 'undefined') { this.base_url = base_url } else { this.base_url = 'cityworksonline' }\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n\n    if(typeof(settings)!='undefined') {\n      _.forEach(settings, (v,k) => {\n        if(typeof(this.settings[k])!='undefined') {this.settings[k] = v}\n      })\n    }\n\n    if(typeof(load)=='undefined') {\n      this.general = new General(this)\n      this.activity_link = new ActivityLinks(this)\n      this.message_queue = new MessageQueue(this)\n      this.request = new Request(this)\n      this.inspection = new Inspection(this)\n      this.workorder = new WorkOrder(this)\n      this.case = new Case(this)\n    } else {\n      let _this = this\n      _.forEach(this.potential_loads, function(v) {\n        switch(v) {\n          case 'general':\n            _this.general = new General(_this)\n          break\n          case 'activity_link':\n            _this.activity_link = new ActivityLinks(_this)\n          break\n          case 'message_queue':\n            _this.message_queue = new MessageQueue(_this)\n          break\n          case 'gis':\n            _this.gis = new Gis(_this)\n          break\n          case 'search':\n            _this.search = new Search(_this)\n          break\n          case 'request':\n            _this.request = new Request(_this)\n          break\n          case 'case':\n            _this.case = new Case(_this)\n          break\n          case 'inspection':\n            _this.inspection = new Inspection(_this)\n          break\n          case 'workorder':\n            _this.workorder = new WorkOrder(_this)\n          break\n        }\n      })\n    }\n  }\n\n  /**\n     * Send a request to the Cityworks API\n     *\n     * If one ever needs to access or call an unimplemented API endpoint of a Cityworks install, one can call this method directly with the path and data payload:\n     *\n     * `cityworks.runRequest(path, data)`\n     *\n     * @param {string} path - The path to the particular endpoint\n     * @param {Object} data - The data object to be sent to the Cityworks API\n     * @return {Object} Returns Promise object that represents the json object returned from the Cityworks API\n     */\n  runRequest(path, data) {\n    return new Promise((resolve, reject) => {\n      let pd = {} as postData\n      pd.data = JSON.stringify(data)\n\n      if(typeof(this.Token) !== 'undefined' && this.Token != '' && path!='General/Authentication/CityworksOnlineAuthenticate' && path!='General/Authentication/Authenticate') {\n        pd.token = this.Token\n      }\n      let obj: {\n        Status: number,\n        Message: string\n      }\n      let options = {\n        hostname: this.base_url,\n        port: 443,\n        path: '/' + this.settings.path + '/services/' + path,\n        method: 'POST',\n        headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n           'Content-Length': Buffer.byteLength(querystring.stringify(pd))\n        },\n        timeout: 10000000\n      }\n\n      let request = https.request(options, (response) => {\n          let str=''\n          response.on('error',function(e){\n              console.log(e, 'Caught on error')\n              reject(new CWError(13, \"Unknown error.\", e))\n          })\n\n          response.on('data',function(chunk){\n              str+=chunk\n          })\n\n          response.on('end',function(){\n            try {\n              var test_str = JSON.stringify(str) + \"[test string]\"\n              if(test_str.match(/\\<h2\\>Object\\ moved\\ to/)==null) {\n                var obj=JSON.parse(str)\n                // if(path=='General/ActivityNotification/UserWatching') {\n                //   console.log(str, options, pd, obj)\n                // }\n                if(typeof(obj)=='undefined') {\n                  // failed\n                  reject(new CWError(10, 'No response received from Cityworks API.'))\n                } else if(typeof(obj)!='undefined' && typeof(obj.Value)!='undefined') { // && typeof(response.Value.Token)!='undefined') {\n                  // console.log(str, options, pd, obj)\n                  resolve(obj)\n                } else {\n                  reject(new CWError(3, \"Unknown error.\", {options: options, postedData: pd, api_returned_string: obj}))\n                }\n              } else {\n                reject(new CWError(1, \"Error parsing JSON. Cityworks returned HTML.\", {response: str}))\n              }\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log('try/catch error on JSON')\n                reject(new CWError(1, \"Error parsing JSON.\", {error: e}))\n              } else {\n                console.log('try/catch error on JSON')\n                reject(new CWError(1, \"Error parsing JSON.\"))\n              }\n            }\n          })\n      })\n      request.write(querystring.stringify(pd))\n      request.end()\n    })\n  }\n\n  /**\n     * Authenticate with the Cityworks API and store an access token for use. Stores the token on cityworks.Token.\n     * @param {string} login - User's login name\n     * @param {password} password - User's password\n     * @return {Object} Returns Promise object that represents a boolean which tells you the login succeeded (true) or failed (false).\n     */\n  authenticate(login: string, password: string) {\n    return new Promise((resolve, reject) => {\n      let data = { LoginName:login, Password:password }\n      let path = 'General/Authentication/Authenticate'\n      if(this.base_url == 'cityworksonline') {\n        path = 'General/Authentication/CityworksOnlineAuthenticate'\n      }\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          reject(new CWError(10, response.Message))\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.login = login\n          this.password = password\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          reject(new CWError(11, 'Unknown Error'))\n        }\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  }\n\n  /**\n     * Authenticate a username with a GIS Token\n     * @param {login} - Gis user name, should match a Cityworks employee login name\n     * @param {string} gisToken - Gis Oauth2 access token\n     * @param {string} gisTokenUrl - Base url to GIS server (not the '/generateToken' endpoint)\n     * @param {number} [expires] - Authenticate to Cityworks for a specified number of milliseconds, defaults to 2 weeks\n     */\n  authenticateWithGISToken(login: string, gisToken: string, gisTokenUrl: string, expires?: number) {\n    this.login = login\n    this.gisToken = gisToken\n    this.gisTokenUrl = gisTokenUrl\n    if(typeof(expires)!='undefined') {\n      expires = 1209600000\n    }\n\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/AuthenticateGisToken'\n      let data = { LoginName:this.login, GisToken: this.gisToken, GisTokenUrl: this.gisTokenUrl, Expires: expires}\n\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          // TODO: CWError here.\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          resolve(false)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Validate provided token\n     * @param {string} token - User's login name\n     * @param {boolean} [set] - Set a valid token as the cityworks instance's active token\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the token's validity and that is was set (true) or throws an error if was not valid (and not set).\n     */\n  validateToken(token:string, set?:boolean) {\n    return new Promise((resolve, reject) => {\n      if(typeof(set)=='undefined') {\n        let set = false\n      }\n      let data = { Token: token }\n      let path = 'General/Authentication/Validate'\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          resolve(false)\n        } else {\n          if(set) {\n            this.Token = token\n          }\n          resolve(response.Value)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Set a token you've retrieved from your storage system as the active token for the cityworks instance. Note that this doesn't check the token for validity.\n     * @param {token} token - The token string to set as the active token.\n     * @return {boolean} Returns a boolean which apprises one that the token was set (true) or not set (false).\n     */\n  setToken(token) {\n    if(token!='' && token!=null) {\n      this.Token = token\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n     * Get currently set, valid token\n     * @param {token} token - The token string to set as the active token.\n     * @return {string} Returns a string which is the currently-set token or the boolean false value if no (valid) token set\n     */\n  getToken() {\n    if(this.Token=='' || this.Token==null) {\n      return false\n    } else {\n      return this.Token\n    }\n  }\n\n  /**\n     * Revoke all current user's tokens or only tokens created before a particular date and time.\n     * @param {number} [revokeBefore] - Datetime as an Epoch integer (number), if you wish to revoke only tokens created before a particular datetime\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the revocation outcome's success (true) or failure (false)\n     */\n  revokeToken(revokeBefore?:number) {\n    return new Promise((resolve, reject) => {\n      let data = { RevokeDate: revokeBefore }\n      let path = 'General/Token/RevokeUser'\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          resolve(false)\n        } else {\n          resolve(true)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  // App data\n\n  /**\n     * Get the localization settings for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the localization settings for the current Cityworks install\n     */\n  getLocalizationSettings() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/LocalizationSettings'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the system timezone options for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the timezone settings for the currentCityworks install\n     */\n  getTimezoneOptions() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/TimeZones'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the current install's location information\n     * @return {Object} Returns Promise object that represents an Object which contains the location information\n     */\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/CurrentLocation'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  // Licensing Checks\n  /**\n     * Check if a particular license is available to the currently-authenticated user\n     * @param {string} area - Area of access\n     * @param {string} service - Service to access\n     * @return {boolean} Returns Promise object that represents a boolean which informs access is granted (true) or denied (false)\n     */\n  licensedApiCheck(area: string, service: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"Area\": area,\n        \"Service\": service\n      }\n      let path = 'General/AppData/SelectedEntities'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if a current Cityworks install is licensed to use a particular extension\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {string} extension - Extension name\n     * @return {boolean} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionCheck(extension: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.extensions[extension])=='undefined') {\n        reject(new CWError(4, 'Extension provided does not exist or is mispelled.', {'provided': extension, 'available': this.extensions}))\n      }\n      let data = {\n        \"Extension\": this.extensions[extension]\n      }\n      let path = 'General/Authorization/LicensedExtensionCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check a whole list to see if current Cityworks install is licensed to use extensions\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {Array<string>} extension - Extension names\n     * @return {Object} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionsCheck(extensions: Array<string>) {\n    return new Promise((resolve, reject) => {\n        var data: { Extensions: Array<number> } = {\n          Extensions: []\n        }\n      _.forEach(extensions, (v) => {\n        if(typeof(this.extensions[v])=='undefined') {\n          reject(new CWError(5, 'Extension provided does not exist or is mispelled.', {'provided': v, 'available': this.extensions}))\n        } else {\n          data.Extensions.push(this.extensions[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedExtensionsCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_extensions = _.invert(this.extensions)\n        _.forEach(response, (ext_num, bool) => {\n          if(typeof(inv_extensions[ext_num])=='undefined') {\n            reject(new CWError(6, 'Extension index provided does not exist or isn\\'t configured properly.', {'provided_num_returned': ext_num, 'available': this.extensions}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_extensions[ext_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use a feature:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {string} [feature] - Feature to check to see if ciurrently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeatureCheck(feature: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.features[feature])=='undefined') {\n        reject(new CWError(7, 'Feature provided does not exist or is mispelled.', {'provided': feature, 'available': this.features}))\n      }\n      let data = {\n        \"Feature\": this.features[feature]\n      }\n      let path = 'General/Authorization/LicensedFeatureCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use features:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {Array<string>} [feature] - Features to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeaturesCheck(features: Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data: { Features: Array<number> } = {\n        Features: []\n      }\n      _.forEach(features, (v: string) => {\n        if(typeof(this.features[v])=='undefined') {\n          reject(new CWError(8, 'Feature provided does not exist or is mispelled.', {'provided': v, 'available': this.features}))\n        } else {\n          data.Features.push(this.features[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedFeaturesCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_features = _.invert(this.features)\n        _.forEach(response.Value, (feat_num, bool) => {\n          if(typeof(inv_features[feat_num])=='undefined') {\n            reject(new CWError(9, 'Feature index provided does not exist or isn\\'t configured properly.', {'provided': feat_num, 'available': inv_features}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_features[feat_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  // LicensedServicesCheck\n  // Check if current user is licensed to use services\n  // List req ServicesList of 'Area/Service', i.e. ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n  /**\n     * Check if current user is licensed to use services. List req ServicesList of 'Area/Service', i.e.:\n     *\n     * ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n     *\n     * @param {Array<string>} [services] - Services to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedServicesCheck(services: Array<string>) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authorization/LicensedServicesCheck'\n      var data: { Services: Array<string> } = {\n        Services: services\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of CityworksOnline sites for this user\n     *\n     * @param {string} [login] - Login Name to use when checking. Defaults to previously-stored login name.\n     * @param {string} [password] - Password to use when checking. Defaults to previously-stored password.\n     * @return {Object} Returns Promise object that represents an array of cityworks online sites available to this user.\n     */\n  cityworksOnlineSites(login?: string, password?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/CityworksOnlineSites'\n      var data = {\n        LoginName: (typeof(login)!='undefined') ? login: this.login,\n        Password:  (typeof(password)!='undefined') ? password : this.password\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a collection of the configured domains.\n     */\n  domains() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Domains'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @param {string} [login] - Optional login name to get user information for. Defaults to currently-set user name used for login.\n     * @return {Object} Returns Promise object that represents an Object with the user information\n     */\n  user(login?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/User'\n      let data = { LoginName: (typeof(login)!='undefined') ? login: this.login }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the software version number of the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a string of the version number\n     */\n  version() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Version'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n\n\n // export default new Cityworks() as cityworks\n"],"names":["CWError","code","message","info","name","this","JSON","stringify","_","require","General","cw","notifications","Promise","resolve","reject","_this","runRequest","then","response","Value","amIWatching","activityType","activityId","aType","null","case","task","provided","potential_activities","_this2","ActivityType","ActivityId","r","e","getActivityMetadataByIds","ids","table","tables","indexOf","available","_this3","Ids","TableName","console","log","getHistory","_this4","getWOEntityCostSummary","object_ids","_this5","ObjectIds","searchWOEntityCostSummary","search_id","_this6","SearchId","ActivityLinks","activityTypes","linkTypes","ReversibleMap","set","add","source_type","source_sid","destination_type","destination_sid","link_type","has","options","data","SourceType","get","SourceSid","DestType","DestSid","LinkType","type","sids","ActivitySids","return_data","Array","forEach","link","key","push","clone","SourceActivityType","SourceActivitySid","DestinationActivityType","DestinationActivitySid","activity_link_id","ActivityLinkId","remove","Gis","getConfig","whichType","whichId","getGisData","context","toLowerCase","domain","domainId","downloadMobile","cacheId","initialExtent","request","requestId","inspection","inspectionId","workOrder","workOrderSid","_this7","user","allDomains","allGroups","_this8","selectedEntities","_this9","MessageQueue","status","Pending","Processing","Complete","Failed","hook_types","Unknown","ActivityUpdate","Email","WebHook","processMessages","delete_successful","Delete","maxcount","MaxCount","Status","hours_to_keep","HoursToKeep","preferences","search","parameters","max_results","MaxResults","allowed_params","disallowed_params","v","k","value","concat","update","HookType","updateMessageStatus","getWebooks","hook_ids","HookIds","Search","searchTypes","Null","Request","WorkOrder","Inspection","Contract","Permit","GIS","PermitTask","PermitAddress","InspCommon","Case","WorkOrderEntity","StoreTransaction","Requisition","Material","WorkActivity","MaterialLeaf","WoTemplate","Employee","Analytics","TokenState","AssetCalculationResult","Equipment","CustomerAccount","InspTemplate","ProblemLeaf","AssetSplitRecord","PavementInsp","TvInspection","Projects","quick","text","QuickSearchText","execute","searchId","merge","getSaved","searchType","applyToEntities","employeeSid","savedEndpoint","displayFields","types","enableServices","searchIds","Enable","SearchIds","disableServices","getDefinition","getDefinitionNames","getDefinitions","_this10","deleteDefinitions","_this11","saveDefinition","searchFor","_this12","SearchFor","RequestAdmin","Comments","currentActivityType","sid","comment","ActivitySid","id","CommentId","length","getPredefined","problemSid","category","admin","create","sr_data","move","x","y","projection","z","base_data","RequestId","X","Y","changeProblem","ProblemSid","getById","getByIds","requestIds","RequestIds","getAuditLog","getCustomFields","changeCustomFieldCategory","categoryId","CategoryId","cancel","cancelReason","dateCancelled","uncancel","close","Message","reopen","_this13","_this14","searchData","_this15","searchObject","_this16","createSearchDefinition","searchName","sharedWithin","enableEurl","isString","_this17","getProblemNodes","viewOnly","displayMode","includeCancelled","DomainId","IncludeCancelled","ViewOnly","_this18","getProblems","forPublicOnly","onlyActiveTemplates","domainIds","ForPublicOnly","OnlyActiveTemplates","_this19","getProblemsByKeywords","keywords","_this20","Keywords","getPriorities","_this21","ProblemSids","getCustomFieldTemplate","_this22","getQASettings","_this23","getProblemLeaf","_this24","getStatuses","_this25","DomainIds","getEmployeeLists","listType","includes","_this26","getDispatchTos","getSubmitTos","streetCodes","_this27","getTemplatesById","problemSids","minimumDateModified","maximumDateModified","_this28","createTemplateSearchDefinition","_this29","getTemplateQAs","_this30","searchTemplates","_this31","getTemplates","templateIds","canCreate","includeInactiveIf","CanCreate","IncludeInactiveIf","_this32","getWOTemplates","includeInactive","_this33","IncludeInactive","InspectionAdmin","insp_data","createFromEntities","createFromParent","createFromServiceRequest","createFromWorkOrder","InspectionId","inspectionIds","InspectionIds","CancelReason","DateCancelled","statuses","submitTos","includeInactiveEmployees","IncludeInactiveEmployees","connectAsset","entity","updateXY","facility","EntityType","EntityUid","Entity","Facility_Id","Level_Id","getAnswers","inspections","getCycleFrom","getCycleIntervals","getCycleTypes","getDistricts","data_init","entityTypes","EntityTypes","forIn","getTemplatesByIds","inspTemplateIds","InspTemplateIds","getTemplateEntityTypes","getQA","getQConditions","deleteAttachments","attachmentIds","AttachmentIds","downloadAttachment","attachmentId","_this34","AttachmentId","getAttachmentById","_this35","getAttachments","_this36","WorkOrderAdmin","wo_data","workOrderSId","s","combine","fromWorkOrderIds","toWorkOrderId","cancelCombinedWorkOrders","CancelCombinedWorkOrders","ToWorkOrderId","FromWorkOrderIds","workOrderId","WorkOrderId","path","workOrderSIds","workorderSId","isNumber","getInstructions","getCustomFieldValues","workorderSIds","getEntities","GetGisData","addEntities","entityInfo","UpdateXY","updateEntity","workComplete","WorkComplete","removeEntities","workOrderIds","WorkOrderIds","getWOsByEntities","entityType","entityUids","getSearchList","getSupervisors","getCategories","getStages","getExpenseTypes","CaseData","addGroup","caObjectId","caseDataGroupId","groupCode","CaObjectId","CaseDataGroupId","GroupCode","addDefaultGroups","busCaseId","BusCaseId","wipAddDetail","caseDataDetailId","caDataGroupId","columnSequence","detailCode","detailSequence","CaseDataDetailId","CaDataGroupId","ColumnSequence","DetailCode","DetailSequence","getGroupsByCaseId","deleteGroupsByCaseId","searchForGroups","filters","intersectionBy","checkGIS","entityUid","updateGroupsFromAsset","addDetail","updateDetail","caDataDetailId","CaDataDetailId","lockDetail","Lock","unlockDetail","addListValue","listValue","ListValue","deleteListValue","searchForListValueIds","searchForListValueObjects","CaseFinancial","addFee","feeSetupId","FeeSetupId","addPayment","addRefund","caPaymentId","refundAmount","CaPaymentId","RefundAmount","addDepositPayment","caDepositId","CaDepositId","addDeposit","depositId","amount","DepositId","addInstrument","instTypeId","dateExpire","InstTypeId","Amount","DateExpire","updateFee","caFeeId","CaFeeId","voidRefund","caPaymentRefundId","voided","CaPaymentRefundId","Voided","addDefaultFees","addDefaultDeposits","getFees","getDeposits","getPayments","getInstruments","deleteFee","deleteFeesByCaseId","deletePayment","deleteRefund","deletePaymentsByCaseId","deleteDeposit","deleteDepositsByCaseId","deleteInstrument","caInstrumentId","CaInstrumentId","deleteInstrumentsByCaseId","searchFees","searchPayments","searchRefunds","searchDeposits","getAllFeeTemplates","searchFeeTemplates","searchCaseInstruments","getInstrumentList","addCaseInstrumentRelease","releasedBy","dateReleased","amountReleased","percentReleased","DateReleased","ReleasedBy","deleteCaseInstrumentRelease","caInstReleasesId","CaInstReleasesId","searchCaseInstrumentReleases","fees","searchAvailableFees","getTenderTypes","_this37","addTenderType","_this38","updateTenderType","tenderTypeId","TenderTypeId","_this39","CaseWorkflow","addTask","taskId","startPoint","endPoint","TaskId","StartPoint","EndPoint","addTaskResult","caTaskId","resultCode","resultID","resultSetID","CaTaskId","ResultCode","ResultID","ResultSetID","addTaskComment","CommentText","getTasksByCaseId","checkRelatedItems","CheckRelatedItems","getTasksById","caTaskIds","CaTaskIds","getResultsByTaskId","getCommentsForTask","getCommentsForTasks","updateTask","updateTaskComment","caTaskCommentId","commentId","CaTaskCommentId","setTaskResult","deleteTask","deleteTasksOnCase","deleteTaskComments","caTaskCommentIds","CaTaskCommentIds","searchForTasks","searchForTaskResults","CaseAdmin","addBusinessCaseTemplate","updateBusinessCaseTemplate","getBusinessCaseTemplates","addCaseType","caseTypeName","caseTypeDesciption","CaseType","CaseTypeDesciption","updateCaseType","caseTypeId","CaseTypeId","getCaseTypes","searchCaseTypeIDs","searchCaseTypeObjects","addSubtype","subTypeName","subTypeDescription","SubType","SubTypeDesc","updateSubtype","subTypeId","SubTypeId","getSubtypes","getExpirations","addExpiration","getDisciplines","addDepartment","departmentCode","departmentName","DepartmentCode","DepartmentName","getDepartments","addDivision","departmentId","divisionName","DepartmentId","DivisionName","getDivisions","addHoliday","holidayDate","holidayDesc","halfDayFlag","HolidayDate","HolidayDesc","deleteHoliday","holidayId","HolidayId","getHolidays","addInspectionTimeBlock","labelText","startTime","endTime","inspTimeBlocksDetails","LabelText","StartTime","EndTime","getInspectionTimeBlocks","getNotificationCases","getNotificationTypes","addNumberingGroup","updateNumberingGroup","numberingGroupId","NumberingGroupId","getNumberingGroups","addPerson","Name","getPeople","addPeopleRole","roleCode","RoleCode","getPeopleRoles","addTaskResultDetail","updateTaskResultDetail","resultDetailId","ResultDetailId","getTaskResultDetails","addTaskResultFeeInsert","_this40","deleteTaskResultFeeInsert","taskResultFeeInsertId","_this41","TaskResultFeeInsertId","deleteTaskResultFeeInsertByTaskId","_this42","updateTaskResultFeeInsert","taskResultId","TaskResultId","_this43","getTaskResultFeeInsert","_this44","workflow","financial","createChild","parentCaObjectId","ParentCaObjectId","createFromRequest","ServiceRequestId","caObjectIds","CaObjectIds","https","querystring","module","exports","base_url","settings","load","Token","login","password","gisToken","gisTokenUrl","error","general","activity_link","message_queue","gis","workorder","extensions","features","potential_loads","UnknownExtension","CwAnalytics","WebHooks","PLLPublicApp","SingleSignOn","UnknownFeature","ViewInspections","EditInspections","ViewServiceRequest","EditServiceRequest","ViewWorkOrder","EditWorkOrder","EquipmentCheckOut","OfficeField","Respond","Eurl","PaverInterface","Contracts","Storeroom","PLL","Cw4XL","TableEditor","CCTVInterface","MobileAndroid","MobileiOS","PerformanceBudgeting","Insights","RespondCase","RespondInspection","RespondServiceRequest","RespondTaskManager","RespondWorkOrder","Workload","OpX","TrimbleUnityMobile","TrimbleVegetationManager","secure","expires","default_domain","configure","pd","token","hostname","port","method","headers","Buffer","byteLength","timeout","str","on","chunk","match","obj","parse","postedData","api_returned_string","SyntaxError","write","end","authenticate","LoginName","Password","authenticateWithGISToken","GisToken","GisTokenUrl","Expires","validateToken","setToken","getToken","revokeToken","revokeBefore","RevokeDate","getLocalizationSettings","getTimezoneOptions","getCurrentLocation","licensedApiCheck","area","service","Area","Service","licensedExtensionCheck","extension","Extension","licensedExtensionsCheck","Extensions","rez","inv_extensions","invert","ext_num","bool","provided_num_returned","licensedFeatureCheck","feature","Feature","licensedFeaturesCheck","Features","inv_features","feat_num","licensedServicesCheck","services","Services","cityworksOnlineSites","domains","version"],"mappings":"kCAaaA,EA0BX,SAAYC,EAAaC,EAAgBC,QAtBzCC,iBAIAH,iBAIAC,oBAIAC,YAWEE,KAAKD,KAAO,sBACZC,KAAKJ,KAAOA,EACZI,KAAKH,QAAUA,OACK,IAAVC,IACRE,KAAKF,KAAOG,KAAKC,UAAUJ,KC3C3BK,EAAIC,QAAQ,UAKLC,aASX,WAAYC,QALZA,UAMEN,KAAKM,GAAKA,EAVd,2BAkBEC,cAAA,sBACE,WAAWC,QAAQ,SAACC,EAASC,GAC3BC,EAAKL,GAAGM,WAAW,oCAAqC,IAAIC,KAAK,SAACC,GAChEL,EAAQK,EAASC,cAavBC,YAAA,SAAYC,EAAcC,cACxB,WAAWV,QAAQ,SAACC,EAASC,GAC3B,IAAIS,EAAQ,CAACC,KAAQ,EAAGC,KAAQ,EAAGC,KAAQ,QACX,IAAtBH,EAAMF,GAEdP,EAAO,IAAIf,EAAQ,EAAG,yCAA0C,CAAC4B,SAAUN,EAAcO,qBAAsBL,KAG/GM,EAAKnB,GAAGM,WAAW,4CADR,CAACc,aAAgBP,EAAMF,GAAeU,WAAcT,IACOL,KAAK,SAAAe,GAEzEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAO,IAAIf,EAAQ,EAAG,0BAa9BmC,yBAAA,SAAyBC,EAAoBC,cAC3C,WAAWxB,QAAQ,SAACC,EAASC,GAC3B,IAAIuB,EAAS,CAAC,aAAc,UAAW,cACT,GAA3B9B,EAAE+B,QAAQD,EAAQD,IACnBtB,EAAO,IAAIf,EAAQ,EAAG,qDAAsD,CAAC4B,SAAYS,EAAOG,UAAYF,KAM9GG,EAAK9B,GAAGM,WAAW,qCAJR,CACTyB,IAAON,EACPO,UAAaN,IAEgDnB,KAAK,SAAAe,GAClEW,QAAQC,IAAIZ,GACZnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAUbY,WAAA,sBACE,WAAWjC,QAAQ,SAACC,EAASC,GAE3BgC,EAAKpC,GAAGM,WAAW,4BADR,IAC2CC,KAAK,SAAAe,GACzDW,QAAQC,IAAIZ,GACZnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbc,uBAAA,SAAuBC,cACrB,WAAWpC,QAAQ,SAACC,EAASC,GAI3BmC,EAAKvC,GAAGM,WAAW,sCAHR,CACTkC,UAAaF,IAEiD/B,KAAK,SAAAe,GACnEW,QAAQC,IAAIZ,GACZnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbkB,0BAAA,SAA0BC,cACxB,WAAWxC,QAAQ,SAACC,EAASC,GAI3BuC,EAAK3C,GAAGM,WAAW,4CAHR,CACTsC,SAAYF,IAEwDnC,KAAK,SAAAe,GACzEW,QAAQC,IAAIZ,GACZnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aCtIT1B,EAAIC,QAAQ,UAYL+C,aAqBX,WAAY7C,QAfZ8C,0BAMAC,sBAIA/C,UAMEN,KAAKM,GAAKA,EACVN,KAAKoD,cAAgB,IAAIE,EACzBtD,KAAKoD,cAAcG,IAAI,OAAQ,GAC/BvD,KAAKoD,cAAcG,IAAI,OAAQ,GAC/BvD,KAAKoD,cAAcG,IAAI,aAAc,GACrCvD,KAAKoD,cAAcG,IAAI,UAAW,GAClCvD,KAAKoD,cAAcG,IAAI,YAAa,GACpCvD,KAAKoD,cAAcG,IAAI,UAAW,GAElCvD,KAAKqD,UAAY,IAAIC,EACrBtD,KAAKqD,UAAUE,IAAI,OAAQ,GAC3BvD,KAAKqD,UAAUE,IAAI,SAAU,GAC7BvD,KAAKqD,UAAUE,IAAI,UAAW,GAlClC,2BAwDEC,IAAA,SAAIC,EAAqBC,EAAoBC,EAA0BC,EAAyBC,cAC9F,gBAD8FA,IAAAA,EAAoB,eACvGrD,QAAQ,SAACC,EAASC,GACvBe,EAAK2B,cAAcU,IAAIL,IACzB/C,EAAO,IAAIf,EAAQ,EAAG,yBAA0B,CAAC4B,SAAYkC,EAAaM,QAAUtC,EAAK2B,iBAEvF3B,EAAK2B,cAAcU,IAAIH,IACzBjD,EAAO,IAAIf,EAAQ,EAAG,8BAA+B,CAAC4B,SAAYoC,EAAkBI,QAAUtC,EAAK2B,iBAEjG3B,EAAK4B,UAAUS,IAAID,IACrBnD,EAAO,IAAIf,EAAQ,EAAG,uBAAwB,CAAC4B,SAAYsC,EAAWE,QAAUtC,EAAK4B,aAEvF,IAAIW,EAAO,CACTC,WAAYxC,EAAK2B,cAAcc,IAAIT,GACnCU,UAAWT,EACXU,SAAU3C,EAAK2B,cAAcc,IAAIP,GACjCU,QAAST,EACTU,SAAU7C,EAAK4B,UAAUa,IAAIL,IAG/BpC,EAAKnB,GAAGM,WADG,2BACcoD,GAAMnD,KAAK,SAACC,GACnCL,EAAQK,EAASC,cAevBmD,IAAA,SAAIK,EAAcC,cAChB,WAAWhE,QAAQ,SAACC,EAASC,GACvB0B,EAAKgB,cAAcU,IAAIS,IACzB7D,EAAO,IAAIf,EAAQ,EAAG,2BAA4B,CAAC4B,SAAYgD,EAAMR,QAAU3B,EAAKgB,iBAEtF,IAAIY,EAAO,CACTtC,aAAcU,EAAKgB,cAAcc,IAAIK,GACrCE,aAAcD,GAEZ7D,EAAQyB,EAEZA,EAAK9B,GAAGM,WADG,sCACcoD,GAAMnD,KAAK,SAACC,GACnC,IAAI4D,EAAc,IAAIC,MACtBxE,EAAEyE,QAAQ9D,EAASC,MAAO,SAAC8D,EAAMC,GAC/BD,EAAKT,SAAWzD,EAAMyC,cAAcc,IAAIW,EAAKT,UAC7CS,EAAKZ,WAAatD,EAAMyC,cAAcc,IAAIW,EAAKZ,YAC/CY,EAAKP,SAAW3D,EAAM0C,UAAUa,IAAIW,EAAKP,UACzCI,EAAYK,KAAKF,KAEnBpE,EAAQiE,UAoBdM,MAAA,SAAMvB,EAAqBC,EAAoBC,EAA0BC,cACvE,WAAWpD,QAAQ,SAACC,EAASC,GACvBgC,EAAKU,cAAcU,IAAIL,IACzB/C,EAAO,IAAIf,EAAQ,EAAG,yBAA0B,CAAC4B,SAAYkC,EAAaM,QAAUrB,EAAKU,iBAEvFV,EAAKU,cAAcU,IAAIH,IACzBjD,EAAO,IAAIf,EAAQ,EAAG,8BAA+B,CAAC4B,SAAYoC,EAAkBI,QAAUrB,EAAKU,iBAErG,IAAIY,EAAO,CACTiB,mBAAoBvC,EAAKU,cAAcc,IAAIT,GAC3CyB,kBAAmBxB,EACnByB,wBAAyBzC,EAAKU,cAAcc,IAAIP,GAChDyB,uBAAwBxB,GAG1BlB,EAAKpC,GAAGM,WADG,0CACcoD,GAAMnD,KAAK,SAACC,GACnCL,EAAQK,EAASC,qBAWvB,SAAOsE,cACL,WAAW7E,QAAQ,SAACC,EAASC,GAK3BmC,EAAKvC,GAAGM,WADG,8BAHA,CACT0E,eAAgBD,IAGaxE,KAAK,SAACC,GACnCL,EAAQK,EAASC,cAwBvBwE,OAAA,SAAO9B,EAAqBC,EAAoBC,EAA0BC,EAAyBC,cACjG,gBADiGA,IAAAA,EAAoB,eAC1GrD,QAAQ,SAACC,EAASC,GACvBuC,EAAKG,cAAcU,IAAIL,IACzB/C,EAAO,IAAIf,EAAQ,EAAG,yBAA0B,CAAC4B,SAAYkC,EAAaM,QAAUd,EAAKG,iBAEvFH,EAAKG,cAAcU,IAAIH,IACzBjD,EAAO,IAAIf,EAAQ,EAAG,8BAA+B,CAAC4B,SAAYoC,EAAkBI,QAAUd,EAAKG,iBAEjGH,EAAKI,UAAUS,IAAID,IACrBnD,EAAO,IAAIf,EAAQ,EAAG,uBAAwB,CAAC4B,SAAYsC,EAAWE,QAAUd,EAAKI,aAEvF,IAAIW,EAAO,CACTC,WAAYhB,EAAKG,cAAcc,IAAIT,GACnCU,UAAWT,EACXU,SAAUnB,EAAKG,cAAcc,IAAIP,GACjCU,QAAST,EACTU,SAAUrB,EAAKI,UAAUa,IAAIL,IAG/BZ,EAAK3C,GAAGM,WADG,8BACcoD,GAAMnD,KAAK,SAACC,GACnCL,EAAQK,EAASC,iBC7NfX,QAAQ,cAELoF,aASX,WAAYlF,QALZA,UAMEN,KAAKM,GAAKA,EAVd,2BAsBEmF,UAAA,SAAUC,EAAWC,EAASC,EAA4BC,cACxD,WAAWrF,QAAQ,SAACC,EAASC,GAE3BgF,EAAYA,EAAUI,cAgBtBnF,EAAKL,GAAGM,WAjBG,wBAiBc,IAAIC,KAAK,SAACC,GACjCL,EAAQK,EAASC,cAWvBgF,OAAA,SAAOC,EAAUJ,cACf,WAAWpF,QAAQ,SAACC,EAASC,GAK3Be,EAAKnB,GAAGM,WAJG,wBAIc,IAAIC,KAAK,SAACC,GACjCL,EAAQK,EAASC,cAWvBkF,eAAA,SAAeC,EAASN,cACtB,WAAWpF,QAAQ,SAACC,EAASC,GAK3B0B,EAAK9B,GAAGM,WAJG,wCAIc,IAAIC,KAAK,SAACC,GACjCL,EAAQK,EAASC,cAUvBoF,cAAA,sBACE,WAAW3F,QAAQ,SAACC,EAASC,GAG3BgC,EAAKpC,GAAGM,WAFG,+BAEc,IAAIC,KAAK,SAACC,GACjCL,EAAQK,EAASC,cAYvBqF,QAAA,SAAQC,EAAWT,cACjB,WAAWpF,QAAQ,SAACC,EAASC,GAM3BmC,EAAKvC,GAAGM,WALG,6CAKc,IAAIC,KAAK,SAACC,GACjCL,EAAQK,EAASC,cAYvBuF,WAAA,SAAWC,EAAcX,cACvB,WAAWpF,QAAQ,SAACC,EAASC,GAM3BuC,EAAK3C,GAAGM,WALG,yCAKc,IAAIC,KAAK,SAACC,GACjCL,EAAQK,EAASC,cAYvByF,UAAA,SAAUC,EAAcb,cACtB,WAAWpF,QAAQ,SAACC,EAASC,GAM3BgG,EAAKpG,GAAGM,WALG,wCAKc,IAAIC,KAAK,SAACC,GACjCL,EAAQK,EAASC,cAcvB4F,KAAA,SAAKd,EAA6Be,EAA4BC,EAA2BjB,cACvF,WAAWpF,QAAQ,SAACC,EAASC,GAQ3BoG,EAAKxG,GAAGM,WAPG,sBAOc,IAAIC,KAAK,SAACC,GACjCL,EAAQK,EAASC,cAUvBgG,iBAAA,sBACE,WAAWvG,QAAQ,SAACC,EAASC,GAE3BsG,EAAK1G,GAAGM,WADG,mCACc,IAAIC,KAAK,SAACC,GACjCL,EAAQK,EAASC,iBCjMnBZ,EAAIC,QAAQ,UAEL6G,aAmCX,WAAY3G,QA/BZA,eAQA4G,OAAiB,CACfC,QAAS,EACTC,WAAY,EACZC,SAAU,EACVC,OAAQ,QASVC,WAAqB,CACnBC,QAAS,EACTC,eAAgB,EAChBC,MAAO,EACPC,QAAS,GAOT3H,KAAKM,GAAKA,EApCd,2BA8CEsH,gBAAA,SAAgB7F,EAAoB8F,cAClC,gBADkCA,IAAAA,GAA6B,OACpDrH,QAAQ,SAACC,EAASC,GAG3BC,EAAKL,GAAGM,WADG,uCADA,CAAEyB,IAAKN,EAAK+F,OAAQD,IAEAhH,KAAK,SAACC,WAczCoD,IAAA,SAAInC,EAAoBmF,EAAgBa,cACtC,gBADsCA,IAAAA,EAAmB,QAC9CvH,QAAQ,SAACC,EAASC,QACK,IAAtBe,EAAKyF,OAAOA,IACpBxG,EAAO,IAAIf,EAAQ,EAAG,kDAAmD,CAAC4B,SAAY2F,EAAQ/E,UAAYV,EAAKyF,UAQjHzF,EAAKnB,GAAGM,WADG,6BALA,CACTyB,IAAON,EACPiG,cAA8B,IAAXD,EAAyBA,EAAW,GACvDE,OAAUxG,EAAKyF,OAAOA,KAGOrG,KAAK,SAACC,kBAczC,SAAOiB,EAAoBmF,EAAgBgB,cACzC,WAAW1H,QAAQ,SAACC,EAASC,QACK,IAAtB0B,EAAK8E,OAAOA,IACpBxG,EAAO,IAAIf,EAAQ,EAAG,kDAAmD,CAAC4B,SAAY2F,EAAQ/E,UAAYC,EAAK8E,UAQjH9E,EAAK9B,GAAGM,WADG,8BALA,CACTyB,IAAON,EACPkG,OAAU7F,EAAK8E,OAAOA,GACtBiB,YAAeD,IAGcrH,KAAK,SAACC,WAUzCsH,YAAA,sBACE,WAAW5H,QAAQ,SAACC,EAASC,GAG3BgC,EAAKpC,GAAGM,WADG,mCADA,IAEoBC,KAAK,SAACC,WAMzCuH,OAAA,SAAOC,EAAYC,OACbvE,SACJ,WAAWxD,QAAQ,SAACC,EAASC,QACI,IAArB4H,EAAWpB,aAAiE,IAAjCrE,EAAKqE,OAAOoB,EAAWpB,QAC1ExG,EAAO,IAAIf,EAAQ,EAAG,kDAAmD,CAAC4B,SAAY+G,EAAWpB,OAAQ/E,UAAYU,EAAKqE,eACtF,IAArBoB,EAAWpB,aAAkE,IAAlCrE,EAAKqE,OAAOoB,EAAWpB,UACjFlD,EAAKiE,OAASpF,EAAKqE,OAAOoB,EAAWpB,cAEd,IAAfqB,IACRvE,EAAKwE,WAAaD,GAEpB,IAAIE,EAAiB,CAAC,KAAM,SAAU,WAAY,SAAU,mBAAoB,iBAAkB,mBAAoB,kBAClHC,EAAoB,CAAC,SAAU,cACnCvI,EAAEyE,QAAQ0D,EAAY,SAACK,EAAGC,IACS,GAA9BzI,EAAE+B,QAAQuG,EAAeG,KAA4C,GAAlCzI,EAAE+B,QAAQwG,EAAmBE,GACjE5E,EAAK4E,GAAKD,GACgC,GAAlCxI,EAAE+B,QAAQwG,EAAmBE,IACrClI,EAAO,IAAIf,EAAQ,EAAG,qDAAsD,CAAC4B,SAAYqH,EAAGC,MAASF,EAAGxG,UAAYhC,EAAE2I,OAAOL,EAAgBC,QAIjJ7F,EAAKvC,GAAGM,WADG,8BACcoD,GAAMnD,KAAK,SAACC,QAER,IAAjBA,EAASC,QACjBD,EAASC,MAAQ,IAEnBN,EAAQK,EAASC,cAqBvBgI,OAAA,SAAOT,OACDtE,SACJ,WAAWxD,QAAQ,SAACC,EAASC,QACI,IAArB4H,EAAWpB,aAAiE,IAAjCjE,EAAKiE,OAAOoB,EAAWpB,QAC1ExG,EAAO,IAAIf,EAAQ,EAAG,kDAAmD,CAAC4B,SAAY+G,EAAWpB,OAAQ/E,UAAYc,EAAKiE,eACtF,IAArBoB,EAAWpB,aAAkE,IAAlCjE,EAAKiE,OAAOoB,EAAWpB,UACjFlD,EAAKiE,OAAShF,EAAKiE,OAAOoB,EAAWpB,cAEJ,IAAzBoB,EAAWf,iBAA6E,IAAzCtE,EAAKsE,WAAWe,EAAWf,YAClF7G,EAAO,IAAIf,EAAQ,EAAG,kDAAmD,CAAC4B,SAAY+G,EAAWf,WAAYpF,UAAYc,EAAKsE,mBACtF,IAAzBe,EAAWf,iBAA8E,IAA1CtE,EAAKsE,WAAWe,EAAWf,cACzFvD,EAAKgF,SAAW/F,EAAKsE,WAAWe,EAAWf,aAE7C,IAAIkB,EAAiB,CAAC,KAAM,SAAU,SAAU,UAC5CC,EAAoB,CAAC,SAAU,YACnCvI,EAAEyE,QAAQ0D,EAAY,SAACK,EAAGC,IACS,GAA9BzI,EAAE+B,QAAQuG,EAAeG,KAA4C,GAAlCzI,EAAE+B,QAAQwG,EAAmBE,GACjE5E,EAAK4E,GAAKD,GACgC,GAAlCxI,EAAE+B,QAAQwG,EAAmBE,IACrClI,EAAO,IAAIf,EAAQ,EAAG,qDAAsD,CAAC4B,SAAYqH,EAAGC,MAASF,EAAGxG,UAAYhC,EAAE2I,OAAOL,EAAgBC,QAKjJzF,EAAK3C,GAAGM,WADG,8BACcoD,GAAMnD,KAAK,SAACC,QAER,IAAjBA,EAASC,QACjBD,EAASC,MAAQ,IAEnBN,EAAQK,EAASC,cAKvBkI,oBAAA,SAAoBlH,EAAemF,EAAgBgB,cACjD,WAAW1H,QAAQ,SAACC,EAASC,QACK,IAAtBgG,EAAKQ,OAAOA,IACpBxG,EAAO,IAAIf,EAAQ,EAAG,kDAAmD,CAAC4B,SAAY2F,EAAQ/E,UAAYuE,EAAKQ,UAQjHR,EAAKpG,GAAGM,WADG,2CALA,CACTyB,IAAON,EACPkG,OAAUvB,EAAKQ,OAAOA,GACtBiB,YAAeD,IAGcrH,KAAK,SAACC,WAMzCoI,WAAA,SAAWC,cACT,WAAW3I,QAAQ,SAACC,EAASC,GAK3BoG,EAAKxG,GAAGM,WADG,gCAHA,CACTwI,QAAWD,IAGkBtI,KAAK,SAACC,cClOrCX,EAAIC,QAAQ,UAELiJ,aA+CX,WAAY/I,QA3CZA,eAKAgJ,YAAsB,CACpBC,KAAQ,EACRC,QAAW,EACXC,UAAa,EACbC,WAAc,EACdC,SAAY,EACZC,OAAU,EACVC,IAAO,EACPC,WAAc,EACdC,cAAiB,EACjBC,WAAc,EACdC,KAAQ,GACRC,gBAAmB,GACnBC,iBAAoB,GACpBC,YAAe,GACfC,SAAY,GACZC,aAAgB,GAChBC,aAAgB,GAChBC,WAAc,GACdhD,QAAW,GACXiD,SAAY,GACZxD,aAAgB,GAChByD,UAAa,GACbC,WAAc,GACdC,uBAA0B,GAC1BC,UAAa,GACbC,gBAAmB,GACnBC,aAAgB,GAChBC,YAAe,GACfC,iBAAoB,GACpBC,aAAgB,GAChBC,aAAgB,GAChBC,SAAY,IAOZpL,KAAKM,GAAKA,EAhDd,2BA0DE+K,MAAA,SAAMC,cACJ,WAAW9K,QAAQ,SAACC,EAASC,GAI3BC,EAAKL,GAAGM,WAAW,kCAHR,CACT2K,gBAAmBD,IAEuCzK,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab2J,QAAA,SAAQC,EAAkB1H,cACxB,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,GACXA,EAAO7D,EAAEuL,MAAM1H,EAAMD,GACrBtC,EAAKnB,GAAGM,WAAW,qBAAsBoD,GAAMnD,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAeb8J,SAAA,SAASC,EAAoBC,EAAiCC,EAAsB9F,cAClF,WAAWxF,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAI1B,EAAKkH,YAAasC,QAEO,IAAlBC,GAAkD,MAAjBA,QAA+C,IAAdC,QAA+C,IAAX9F,GACrHtF,EAAO,IAAIf,EAAQ,EAAG,qEAFtBe,EAAO,IAAIf,EAAQ,EAAG,sDAAuD,CAAC4B,SAAYqK,EAAYzJ,UAAYC,EAAKkH,eAIzH,IAAItF,EAAO,GACP+H,EAAgB,QACI,IAAdD,QAA+C,IAAX9F,GAC5C+F,EAAgB,mBACQ,IAAdD,GAA0C,MAAbA,GACrC3L,EAAEoD,IAAIS,EAAM,cAAe8H,QAER,IAAX9F,GAAoC,MAAVA,GAClC7F,EAAEoD,IAAIS,EAAM,WAAYgC,KAIxB+F,EADa,QAAZH,EACe,gBAEAA,EAAa,aAEH,IAAlBC,GAAkD,MAAjBA,GACzC1L,EAAEoD,IAAIS,EAAM,kBAAmB6H,IAGnCzJ,EAAK9B,GAAGM,WAAW,cAAcmL,EAAe/H,GAAMnD,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbmK,cAAA,SAAcJ,cACZ,WAAWpL,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIpB,EAAK4G,YAAasC,IAC1BlL,EAAO,IAAIf,EAAQ,EAAG,sDAAuD,CAAC4B,SAAYqK,EAAYzJ,UAAYO,EAAK4G,eAEzH,IAAItF,EAAO,CACT4H,WAAYzL,EAAE+D,IAAIxB,EAAK4G,YAAasC,IAEtClJ,EAAKpC,GAAGM,WAAW,2BAA4BoD,GAAMnD,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWboK,MAAA,sBACE,WAAWzL,QAAQ,SAACC,EAASC,GAE3BmC,EAAKvC,GAAGM,WAAW,mBADR,IACkCC,KAAK,SAAAe,GAChDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbqK,eAAA,SAAeC,cACb,WAAW3L,QAAQ,SAACC,EAASC,GAK3BuC,EAAK3C,GAAGM,WAAW,wBAJR,CACTwL,QAAQ,EACRC,UAAWF,IAEqCtL,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbyK,gBAAA,SAAgBH,cACd,WAAW3L,QAAQ,SAACC,EAASC,GAK3BgG,EAAKpG,GAAGM,WAAW,wBAJR,CACTwL,QAAQ,EACRC,UAAWF,IAEqCtL,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab0K,cAAA,SAAcd,EAAkBK,cAC9B,WAAWtL,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTd,SAAUuI,QAEY,IAAdK,GACR3L,EAAEoD,IAAIS,EAAM,cAAe8H,GAE7BhF,EAAKxG,GAAGM,WAAW,wBAAyBoD,GAAMnD,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb2K,mBAAA,SAAmBL,cACjB,WAAW3L,QAAQ,SAACC,EAASC,GAI3BsG,EAAK1G,GAAGM,WAAW,6BAHR,CACTyL,UAAWF,IAE0CtL,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab4K,eAAA,SAAeN,EAA0BL,cACvC,WAAWtL,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTqI,UAAWF,QAEW,IAAdL,GACR3L,EAAEoD,IAAIS,EAAM,cAAe8H,GAE7BY,EAAKpM,GAAGM,WAAW,yBAA0BoD,GAAMnD,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb8K,kBAAA,SAAkBR,cAChB,WAAW3L,QAAQ,SAACC,EAASC,GAI3BkM,EAAKtM,GAAGM,WAAW,+BAHR,CACTyL,UAAWF,IAE4CtL,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcbgL,eAAA,SAAeC,EAAmB/I,EAAkB0H,cAClD,gBADkDA,IAAAA,EAAmB,OAC1DjL,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIiJ,EAAKzD,YAAawD,IAC1BpM,EAAO,IAAIf,EAAQ,EAAG,sDAAuD,CAAC4B,SAAYuL,EAAW3K,UAAY4K,EAAKzD,eAExH,IAAItF,EAAO,CACTgJ,UAAW7M,EAAE+D,IAAI6I,EAAKzD,YAAawD,GACnC5J,SAAUuI,GAEZzH,EAAO7D,EAAEuL,MAAM1H,EAAMD,GACrBgJ,EAAKzM,GAAGM,WAAW,4BAA6BoD,GAAMnD,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aC1ULzB,QAAQ,cAEL6M,EASX,SAAY3M,QALZA,UAMEN,KAAKM,GAAKA,GCXRH,EAAIC,QAAQ,UAML8M,aAmBX,WAAY5M,EAAIW,GAYd,QA3BFX,eAKA8C,0BAKA+J,2BAMEnN,KAAKM,GAAKA,EACVN,KAAKoD,cAAgB,IAAIE,EACzBtD,KAAKoD,cAAcG,IAAI,UAAW,GAClCvD,KAAKoD,cAAcG,IAAI,UAAW,GAClCvD,KAAKoD,cAAcG,IAAI,YAAa,GACpCvD,KAAKoD,cAAcG,IAAI,SAAU,GACjCvD,KAAKoD,cAAcG,IAAI,WAAY,GACnCvD,KAAKoD,cAAcG,IAAI,eAAgB,GACvCvD,KAAKoD,cAAcG,IAAI,UAAW,GAClCvD,KAAKoD,cAAcG,IAAI,WAAY,IAE/BvD,KAAKoD,cAAcU,IAAI7C,GACzB,UAAUtB,EAAQ,EAAG,2BAA4B,CAAC4B,SAAYN,EAAc8C,QAAU/D,KAAKoD,gBAE7FpD,KAAKmN,oBAAsBlM,EAlC/B,2BA4CEuC,IAAA,SAAI4J,EAAaC,cACf,WAAW7M,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTtC,aAAcf,EAAKyC,cAAcc,IAAIvD,EAAKwM,qBAC1CG,YAAaF,EACbF,SAAUG,GAEZ1M,EAAKL,GAAGM,WAAW,kBAAmBoD,GAAMnD,KAAK,SAACC,GAChDL,EAAQK,EAASC,cAYvBgI,OAAA,SAAOwE,EAAYF,cACjB,WAAW7M,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTtC,aAAcD,EAAK2B,cAAcc,IAAIzC,EAAK0L,qBAC1CK,UAAWD,EACXL,SAAUG,GAEZ5L,EAAKnB,GAAGM,WAAW,qBAAsBoD,GAAMnD,KAAK,SAACC,GACnDL,EAAQK,EAASC,cAWvBmD,IAAA,SAAIM,cACF,WAAWhE,QAAQ,SAACC,EAASC,GAC3B,QAAiB,IAAP8D,GAA6B,MAAPA,EAAa,CAC3C,IAAIR,EAAO,CACTS,aAAcD,EACd9C,aAAcU,EAAKgB,cAAcc,IAAI9B,EAAK+K,sBAE5C/K,EAAK9B,GAAGM,WAAW,6BAA8BoD,GAAMnD,KAAK,SAACC,GAEzDL,EADc,GAAb+D,EAAKiJ,OACE3M,EAASC,MAAMyD,EAAK,IAEpB1D,EAASC,eAc3B2M,cAAA,SAAcC,EAAqBC,cACjC,WAAWpN,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,GACkB,WAA1BtB,EAAKyK,qBACNhN,EAAEoD,IAAIS,EAAM,aAAc2J,QAEP,IAAXC,GAAqD,WAA1BlL,EAAKyK,qBAA4D,aAA1BzK,EAAKyK,qBAC/EhN,EAAEoD,IAAIS,EAAM,WAAY4J,GAE1BzN,EAAEoD,IAAIS,EAAM,eAAgBtB,EAAKU,cAAcc,IAAIxB,EAAKyK,sBACxDzK,EAAKpC,GAAGM,WAAW,iCAAkCoD,GAAMnD,KAAK,SAACC,GAC/DL,EAAQK,EAASC,iBC9HnBZ,EAAIC,QAAQ,UAILoJ,aAmBX,WAAYlJ,QAfZA,eAKAuN,kBAKAR,eAMErN,KAAKM,GAAKA,EACVN,KAAK6N,MAAQ,IAAIZ,EAAa3M,GAC9BN,KAAKqN,QAAU,IAAIH,EAAS5M,EAAI,WAtBpC,2BAgCEwN,OAAA,SAAOC,cACL,WAAWvN,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIiK,EAAS,cAGjBpN,EAAKL,GAAGM,WAAW,4BAA6BmN,GAASlN,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,+BAAgC,CAAC4B,SAAYwM,UAkBzEhF,OAAA,SAAOgF,cACL,WAAWvN,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIiK,EAAS,aAGjBtM,EAAKnB,GAAGM,WAAW,4BAA6BmN,GAASlN,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,8BAA+B,CAAC4B,SAAYwM,UAsBxEC,KAAA,SAAK3H,EAAmB4H,EAAWC,EAAWC,EAA6DC,cACzG,WAAW5N,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIqK,EAAY,SAAYhO,EAAE2D,IAAIqK,EAAY,QAElDzN,EAAO,IAAIf,EAAQ,EAAG,mEAAoE,CAACwO,WAAcA,KAE3G,IAAIE,EAAY,CACdC,UAAWjI,EACXkI,EAAGN,EACHO,EAAGN,QAES,IAAJE,GACRjO,EAAEoD,IAAI8K,EAAW,IAAKD,GAExB,IAAIpK,EAAO7D,EAAEuL,MAAM2C,EAAWF,GAC9B/L,EAAK9B,GAAGM,WAAW,0BAA2BoD,GAAMnD,KAAK,SAAAe,GACvDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab4M,cAAA,SAAcpI,EAAmBsH,cAC/B,WAAWnN,QAAQ,SAACC,EAASC,GAK3BgC,EAAKpC,GAAGM,WAAW,mCAJR,CACT0N,UAAWjI,EACXqI,WAAYf,IAE+C9M,KAAK,SAAAe,GAChEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb8M,QAAA,SAAQtI,cACN,WAAW7F,QAAQ,SAACC,EAASC,GAI3BmC,EAAKvC,GAAGM,WAAW,0BAHR,CACT0N,UAAWjI,IAEuCxF,KAAK,SAAAe,GACvDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb+M,SAAA,SAASC,cACP,WAAWrO,QAAQ,SAACC,EAASC,GAI3BuC,EAAK3C,GAAGM,WAAW,2BAHR,CACTkO,WAAYD,IAEuChO,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbkN,YAAA,SAAY1I,cACV,WAAW7F,QAAQ,SAACC,EAASC,GAE3BgG,EAAKpG,GAAGM,WAAW,8BADR,CAAC0N,UAAWjI,IACiCxF,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbmN,gBAAA,SAAgBH,cACd,WAAWrO,QAAQ,SAACC,EAASC,GAI3BoG,EAAKxG,GAAGM,WAAW,kCAHR,CACTkO,WAAYD,IAE8ChO,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAaboN,0BAAA,SAA0BJ,EAA2BK,cACnD,WAAW1O,QAAQ,SAACC,EAASC,GAK3BsG,EAAK1G,GAAGM,WAAW,+CAJR,CACTkO,WAAYD,EACZM,WAAYD,IAE2DrO,KAAK,SAAAe,GAC5EnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcZuN,OAAA,SAAOP,EAA2BQ,EAAuBC,cACvD,WAAW9O,QAAQ,SAACC,EAASC,GAE3B,IAAIsD,EAAiF,CAAE8K,WAAYD,QACzE,IAAhBQ,GACRlP,EAAEoD,IAAIS,EAAM,eAAgBqL,QACH,IAAjBC,GACRnP,EAAEoD,IAAIS,EAAM,gBAAiBsL,GAC/B5C,EAAKpM,GAAGM,WAAW,4BAA6BoD,GAAMnD,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ0N,SAAA,SAASV,cACP,WAAWrO,QAAQ,SAACC,EAASC,GAI3BkM,EAAKtM,GAAGM,WAAW,8BAHR,CACTkO,WAAYD,IAE0ChO,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb2N,MAAA,SAAMX,cACJ,WAAWrO,QAAQ,SAACC,EAASC,GAI3BqM,EAAKzM,GAAGM,WAAW,2BAHR,CACTkO,WAAYD,IAEuChO,KAAK,SAAAe,GACrDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAYZ6N,OAAA,SAAOb,cACL,WAAWrO,QAAQ,SAACC,EAASC,GAI3BiP,EAAKrP,GAAGM,WAAW,4BAHR,CACTkO,WAAYD,IAEwChO,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,iBAYf,SAAOgN,cACL,WAAWrO,QAAQ,SAACC,EAASC,GAI3BkP,EAAKtP,GAAGM,WAAW,4BAHR,CACTkO,WAAYD,IAEwChO,KAAK,SAAAe,GACtDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAYbwG,OAAA,SAAOwH,cACL,WAAWrP,QAAQ,SAACC,EAASC,GAE3BoP,EAAKxP,GAAGM,WAAW,4BADRiP,GAC2ChP,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbkO,aAAA,SAAa1J,cACX,WAAW7F,QAAQ,SAACC,EAASC,GAI3BsP,EAAK1P,GAAGM,WAAW,kCAHR,CACT0N,UAAWjI,IAE+CxF,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAgBboO,uBAAA,SAAuBJ,EAAoBK,EAAqBC,EAAuBtD,EAAgCuD,cACrH,gBADqFvD,IAAAA,GAA0B,YAAMuD,IAAAA,GAAsB,OAChI5P,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO6L,EACR1P,EAAEkQ,SAASH,KACZ/P,EAAEoD,IAAIS,EAAM,aAAckM,GAC1B/P,EAAEoD,IAAIS,EAAM,iBAAkB6I,GAC9B1M,EAAEoD,IAAIS,EAAM,aAAcoM,IAI5BE,EAAKhQ,GAAGM,WAAW,4CAA6CoD,GAAMnD,KAAK,SAAAe,GACzEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAed0O,gBAAA,SAAgBvK,EAAkBwK,EAA2BC,EAAsBC,cACjF,gBADgCF,IAAAA,GAAoB,YAA6BE,IAAAA,GAA4B,OAClGlQ,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACT2M,SAAU3K,EACV4K,iBAAkBF,EAClBG,SAAUL,GAET,MAAOC,GAAsDtQ,EAAE2D,IAAI2M,EAAa,qBACjFtQ,EAAEoD,IAAIS,EAAM,kBAAmB7D,EAAE+D,IAAIuM,EAAa,oBACR,MAAvCtQ,EAAE+D,IAAIuM,EAAa,oBAA4BtQ,EAAE2D,IAAI2M,EAAa,yBACnEtQ,EAAEoD,IAAIS,EAAM,uBAAwB7D,EAAE+D,IAAIuM,EAAa,0BAG3DK,EAAKxQ,GAAGM,WAAW,kCAAmCoD,GAAMnD,KAAK,SAAAe,GAG/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabkP,YAAA,SAAYC,EAAgCC,EAAqCC,cAC/E,gBADUF,IAAAA,GAAyB,YAAOC,IAAAA,GAA+B,OAC9DzQ,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTmN,cAAeH,EACfI,oBAAqBH,QAEA,IAAbC,GACR/Q,EAAEoD,IAAIS,EAAM,YAAakN,GAE3BG,EAAK/Q,GAAGM,WAAW,8BAA+BoD,GAAMnD,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbyP,sBAAA,SAAsBC,cACpB,WAAW/Q,QAAQ,SAACC,EAASC,GAI3B8Q,EAAKlR,GAAGM,WAAW,wCAHR,CACT6Q,SAAUF,IAEsD1Q,KAAK,SAAAe,GACrEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb6P,cAAA,SAAc/D,cACZ,WAAWnN,QAAQ,SAACC,EAASC,GAI3BiR,EAAKrR,GAAGM,WAAW,gCAHR,CACTgR,YAAajE,IAE2C9M,KAAK,SAAAe,GAC7DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbgQ,uBAAA,SAAuBlE,cACrB,WAAWnN,QAAQ,SAACC,EAASC,GAI3BoR,EAAKxR,GAAGM,WAAW,0CAHR,CACTgR,YAAajE,IAEqD9M,KAAK,SAAAe,GACvEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbkQ,cAAA,SAAcpE,cACZ,WAAWnN,QAAQ,SAACC,EAASC,GAI3BsR,EAAK1R,GAAGM,WAAW,wBAHR,CACTgR,YAAajE,IAEmC9M,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYboQ,eAAA,SAAetE,cACb,WAAWnN,QAAQ,SAACC,EAASC,GAI3BwR,EAAK5R,GAAGM,WAAW,sCAHR,CACT8N,WAAYf,IAEkD9M,KAAK,SAAAe,GACnEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbsQ,YAAA,SAAYjB,cACV,WAAW1Q,QAAQ,SAACC,EAASC,GAI3B0R,EAAK9R,GAAGM,WAAW,mCAHR,CACTyR,UAAWnB,IAEgDrQ,KAAK,SAAAe,GAChEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabyQ,iBAAA,SAAiBC,EAAkBvM,cACjC,WAAWxF,QAAQ,SAACC,EAASC,GAE3B,IAAIsD,EAAO,CACT2M,SAAU3K,GAER7F,EAAEqS,SAAS,CAAC,aAAc,YAAaD,GAGzCE,EAAKnS,GAAGM,iCAAiC2R,EAAYvO,GAAMnD,KAAK,SAAAe,GAC9DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,kDAAmD,CAAC4B,SAAYgR,UAkB5FG,eAAA,SAAe1M,GAEb,YAAYsM,iBAAiB,aAActM,MAU7C2M,aAAA,SAAa3M,GAEX,YAAYsM,iBAAiB,WAAYtM,MAS3C4M,YAAA,sBACE,WAAWpS,QAAQ,SAACC,EAASC,GAC3BmS,EAAKvS,GAAGM,WAAW,mCAAoC,IAAIC,KAAK,SAAAe,GAC9DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcZiR,iBAAA,SAAiBC,EAA4BC,EAA4BC,cACvE,WAAWzS,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACT4N,YAAa,WAEkB,IAAvBoB,GACR7S,EAAEoD,IAAIS,EAAM,sBAAuBgP,QAEJ,IAAvBC,GACR9S,EAAEoD,IAAIS,EAAM,sBAAuBiP,GAGrCC,EAAK5S,GAAGM,WAAW,mCAAoCoD,GAAMnD,KAAK,SAAAe,GAChEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAebsR,+BAAA,SAA+BtD,EAAoBK,EAAqBC,EAAuBtD,cAC7F,gBAD6FA,IAAAA,GAA0B,OAC5GrM,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO6L,EACR1P,EAAEkQ,SAASH,KACZ/P,EAAEoD,IAAIS,EAAM,aAAckM,GAC1B/P,EAAEoD,IAAIS,EAAM,iBAAkB6I,IAIhCuG,EAAK9S,GAAGM,WAAW,oDAAqDoD,GAAMnD,KAAK,SAAAe,GACjFnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZwR,eAAA,SAAeN,EAA4BC,EAA4BC,cACrE,WAAWzS,QAAQ,SAACC,EAASC,GAI3B4S,EAAKhT,GAAGM,WAAW,gCAHR,CACTgR,YAAa,OAE2C/Q,KAAK,SAAAe,GAC7DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb0R,gBAAA,SAAgB1D,cACd,WAAWrP,QAAQ,SAACC,EAASC,GAE3B8S,EAAKlT,GAAGM,WAAW,oCADRiP,GACmDhP,KAAK,SAAAe,GACjEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAgBb4R,aAAA,SAAaC,EAA4BC,EAA4BC,EAAoCZ,EAA4BC,cACnI,gBADuCU,IAAAA,GAAqB,YAAOC,IAAAA,GAA6B,OACrFpT,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACT6P,UAAWF,EACXG,kBAAmBF,QAEI,IAAfF,GACRvT,EAAEoD,IAAIS,EAAM,cAAe0P,QAEI,IAAvBV,GACR7S,EAAEoD,IAAIS,EAAM,sBAAuBgP,QAEJ,IAAvBC,GACR9S,EAAEoD,IAAIS,EAAM,sBAAuBiP,GAErCc,EAAKzT,GAAGM,WAAW,uCAAwCoD,GAAMnD,KAAK,SAAAe,GACpEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabmS,eAAA,SAAejB,EAA4BkB,cACzC,gBADyCA,IAAAA,GAA2B,OACzDzT,QAAQ,SAACC,EAASC,GAK3BwT,EAAK5T,GAAGM,WAAW,gDAJR,CACTgR,YAAamB,EACboB,gBAAiBF,IAEuDpT,KAAK,SAAAe,GAC7EnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aC5xBPzB,QAAQ,cAELgU,EASX,SAAY9T,QALZA,UAMEN,KAAKM,GAAKA,GCZRH,EAAIC,QAAQ,UAGLsJ,aAcX,WAAYpJ,QAVZA,eAKAuN,aAME7N,KAAKM,GAAKA,EACVN,KAAK6N,MAAQ,IAAIuG,EAAgB9T,GAhBrC,2BA0BEwN,OAAA,SAAOuG,cACL,WAAW7T,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIuQ,EAAW,eAAkBlU,EAAE2D,IAAIuQ,EAAW,kBAGtD1T,EAAKL,GAAGM,WAAW,wBAAyByT,GAAWxT,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,6DAA8D,CAAC4B,SAAY8S,UAkBtGC,mBAAA,SAAmBD,cAClB,WAAW7T,QAAQ,SAACC,EAASC,GACxBP,EAAE2D,IAAIuQ,EAAW,eAAkBlU,EAAE2D,IAAIuQ,EAAW,kBAGtD5S,EAAKnB,GAAGM,WAAW,oCAAqCyT,GAAWxT,KAAK,SAAAe,GACtEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,6DAA8D,CAAC4B,SAAY8S,UAkBrGE,iBAAA,SAAiBF,cAChB,WAAW7T,QAAQ,SAACC,EAASC,GAExBP,EAAE2D,IAAIuQ,EAAW,eAAkBlU,EAAE2D,IAAIuQ,EAAW,mBAAsBlU,EAAE2D,IAAIuQ,EAAW,gBAG7FjS,EAAK9B,GAAGM,WAAW,kCAAmCyT,GAAWxT,KAAK,SAAAe,GACpEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,6DAA8D,CAAC4B,SAAY8S,UAkBrGG,yBAAA,SAAyBH,cACxB,WAAW7T,QAAQ,SAACC,EAASC,GACxBP,EAAE2D,IAAIuQ,EAAW,eAAkBlU,EAAE2D,IAAIuQ,EAAW,mBAAsBlU,EAAE2D,IAAIuQ,EAAW,aAG7F3R,EAAKpC,GAAGM,WAAW,0CAA2CyT,GAAWxT,KAAK,SAAAe,GAC5EnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,6DAA8D,CAAC4B,SAAY8S,UAkBrGI,oBAAA,SAAoBJ,cACnB,WAAW7T,QAAQ,SAACC,EAASC,GAIxBP,EAAE2D,IAAIuQ,EAAW,eAAkBlU,EAAE2D,IAAIuQ,EAAW,mBAAsBlU,EAAE2D,IAAIuQ,EAAW,gBAG7FxR,EAAKvC,GAAGM,WAAW,qCAAsCyT,GAAWxT,KAAK,SAAAe,GACvEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,6DAA8D,CAAC4B,SAAY8S,UAkBtGtL,OAAA,SAAOsL,cACL,WAAW7T,QAAQ,SAACC,EAASC,GAC3B,WAAWF,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIuQ,EAAW,gBAGnBpR,EAAK3C,GAAGM,WAAW,wBAAyByT,GAAWxT,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,iCAAkC,CAAC4B,SAAY8S,YAmB7E1F,QAAA,SAAQpI,cACN,WAAW/F,QAAQ,SAACC,EAASC,GAI3BgG,EAAKpG,GAAGM,WAAW,sBAHR,CACT8T,aAAcnO,IAEgC1F,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb+M,SAAA,SAAS+F,cACP,WAAWnU,QAAQ,SAACC,EAASC,GAI3BoG,EAAKxG,GAAGM,WAAW,uBAHR,CACTgU,cAAeD,IAEgC9T,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcZuN,OAAA,SAAOuF,EAA8BtF,EAAuBC,cAC1D,WAAW9O,QAAQ,SAACC,EAASC,GAE3B,IAAIsD,EAAoF,CAAE4Q,cAAeD,QAC/E,IAAhBtF,IACRrL,EAAK6Q,aAAexF,QAEK,IAAjBC,IACRtL,EAAK8Q,cAAgBxF,GAEvBtI,EAAK1G,GAAGM,WAAW,wBAAyBoD,GAAMnD,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ0N,SAAA,SAASoF,cACP,WAAWnU,QAAQ,SAACC,EAASC,GAI3BgM,EAAKpM,GAAGM,WAAW,0BAHR,CACTgU,cAAeD,IAEmC9T,KAAK,SAAAe,GACvDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb2N,MAAA,SAAMmF,cACJ,WAAWnU,QAAQ,SAACC,EAASC,GAI3BkM,EAAKtM,GAAGM,WAAW,uBAHR,CACTgU,cAAeD,IAEgC9T,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYd6N,OAAA,SAAOiF,cACL,WAAWnU,QAAQ,SAACC,EAASC,GAI3BqM,EAAKzM,GAAGM,WAAW,wBAHR,CACTgU,cAAeD,IAEiC9T,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,iBAYb,SAAO8S,cACL,WAAWnU,QAAQ,SAACC,EAASC,GAI3BiP,EAAKrP,GAAGM,WAAW,wBAHR,CACTgU,cAAeD,IAEiC9T,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYdwG,OAAA,SAAOwH,cACL,WAAWrP,QAAQ,SAACC,EAASC,GAE3BkP,EAAKtP,GAAGM,WAAW,wBADRiP,GACuChP,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbkO,aAAA,SAAaxJ,cACX,WAAW/F,QAAQ,SAACC,EAASC,GAI3BoP,EAAKxP,GAAGM,WAAW,kCAHR,CACT8T,aAAcnO,IAE4C1F,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbkT,SAAA,sBACE,WAAWvU,QAAQ,SAACC,EAASC,GAC3BsP,EAAK1P,GAAGM,WAAW,0BAA2B,IAAIC,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabmT,UAAA,SAAUC,EAA2C/D,cACnD,gBADQ+D,IAAAA,GAAoC,OACjCzU,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAwE,GACzEiR,IACDjR,EAAKkR,0BAA2B,QAEX,IAAbhE,IACRlN,EAAKqO,UAAYnB,GAEnBZ,EAAKhQ,GAAGM,WAAW,2BAA4BoD,GAAMnD,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAiBbsT,aAAA,SAAaC,EAAoE7O,EAAsB8O,EAA0BC,cAChI,gBADgIA,IAAAA,EAAsD,QAC3K9U,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAkI,CACpI0Q,aAAcnO,GAEbpG,EAAE2D,IAAIsR,EAAQ,eAAiBjV,EAAE2D,IAAIsR,EAAQ,cAC9CpR,EAAKuR,WAAaH,EAAOG,WACzBvR,EAAKwR,UAAYJ,EAAOI,WAChBrV,EAAE2D,IAAIsR,EAAQ,YACtBpR,EAAKyR,OAASL,EAAOK,QAIpBtV,EAAE2D,IAAIwR,EAAU,iBACjBtR,EAAK0R,YAAcJ,EAASI,aAE3BvV,EAAE2D,IAAIwR,EAAU,cACjBtR,EAAK2R,SAAWL,EAASK,UAE3B7E,EAAKxQ,GAAGM,WAAW,2BAA4BoD,GAAMnD,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GAOPnB,EAAOmB,UAYZ+T,WAAA,SAAWC,cACT,WAAWrV,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAA+D,GAC5C,GAApB6R,EAAYpI,OACbzJ,EAAK0Q,aAAemB,EAAY,GAEhC7R,EAAK4Q,cAAgBiB,EAEvBxE,EAAK/Q,GAAGM,WAAW,yBAA0BoD,GAAMnD,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbkN,YAAA,SAAYxI,cACV,WAAW/F,QAAQ,SAACC,EAASC,GAE3B8Q,EAAKlR,GAAGM,WAAW,0BADR,CAAC8T,aAAcnO,IAC0B1F,KAAK,SAAAe,GACvDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAgBboO,uBAAA,SAAuBJ,EAAoBK,EAAqBC,EAAuBtD,EAAgCuD,cACrH,gBADqFvD,IAAAA,GAA0B,YAAMuD,IAAAA,GAAsB,OAChI5P,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO6L,EACR1P,EAAEkQ,SAASH,KACZ/P,EAAEoD,IAAIS,EAAM,aAAckM,GAC1B/P,EAAEoD,IAAIS,EAAM,iBAAkB6I,GAC9B1M,EAAEoD,IAAIS,EAAM,aAAcoM,IAI5BuB,EAAKrR,GAAGM,WAAW,wCAAyCoD,GAAMnD,KAAK,SAAAe,GACrEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbiU,aAAA,sBACE,WAAWtV,QAAQ,SAACC,EAASC,GAC3BoR,EAAKxR,GAAGM,WAAW,2BAA4B,IAAIC,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbkU,kBAAA,sBACE,WAAWvV,QAAQ,SAACC,EAASC,GAC3BsR,EAAK1R,GAAGM,WAAW,gCAAiC,IAAIC,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbmU,cAAA,sBACE,WAAWxV,QAAQ,SAACC,EAASC,GAC3BwR,EAAK5R,GAAGM,WAAW,4BAA6B,IAAIC,KAAK,SAAAe,GACvDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWboU,aAAA,sBACE,WAAWzV,QAAQ,SAACC,EAASC,GAC3B0R,EAAK9R,GAAGM,WAAW,2BAA4B,IAAIC,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcbyQ,iBAAA,SAAiBC,EAAkB0C,EAA2C/D,cAC5E,gBADiC+D,IAAAA,GAAoC,OAC1DzU,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTkR,yBAA0BD,QAEN,IAAZ/D,GAAsC,MAAXA,GACnC/Q,EAAEoD,IAAIS,EAAM,YAAakN,GAEd,aAAVqB,EACD7R,EAAO,IAAIf,EAAQ,EAAG,gCAAiC,CAAC4B,SAAYgR,KAEpEE,EAAKnS,GAAGM,6BAA6B2R,EAAYvO,GAAMnD,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcf8Q,aAAA,SAAasC,EAA2C/D,GACtD,gBADW+D,IAAAA,GAAoC,QACnC3C,iBAAiB,YAAa2C,EAA0B/D,MActElD,KAAA,SAAKzH,EAAsB0H,EAAWC,EAAWC,EAA6DC,cAC5G,WAAW5N,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIqK,EAAY,SAAYhO,EAAE2D,IAAIqK,EAAY,QAElDzN,EAAO,IAAIf,EAAQ,EAAG,mEAAoE,CAACwO,WAAcA,KAE3G,IAAI+H,EAAY,CACdxB,aAAcnO,EACdgI,EAAGN,EACHO,EAAGN,QAEU,IAALE,GACRjO,EAAEoD,IAAI2S,EAAW,IAAK9H,GAExB,IAAIpK,EAAO7D,EAAEuL,MAAMwK,EAAW/H,GAC9B0E,EAAKvS,GAAGM,WAAW,sBAAuBoD,GAAMnD,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAkBb4R,aAAA,SAAa0C,EAA6BxC,EAAqB5P,cAC7D,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAA2K,QACtJ,IAAfmS,IACRnS,EAAKoS,YAAcD,GAErBnS,EAAK6P,eAAgC,IAAbF,GAA2BA,EAC9B,iBAAX5P,GACR5D,EAAEkW,MAAMtS,EAAS,SAAC4E,EAAGC,GACnB5E,EAAK4E,GAAKD,IAGduK,EAAK5S,GAAGM,WAAW,mCAAoCoD,GAAMnD,KAAK,SAAAe,GAChEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabyU,kBAAA,SAAkBC,EAAgCxS,cAChD,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTwS,gBAAiBD,GAEE,iBAAXxS,GACR5D,EAAEkW,MAAMtS,EAAS,SAAC4E,EAAGC,GACnB5E,EAAK4E,GAAKD,IAGdyK,EAAK9S,GAAGM,WAAW,+BAAgCoD,GAAMnD,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ4U,uBAAA,SAAuBF,cACrB,WAAW/V,QAAQ,SAACC,EAASC,GAI3B4S,EAAKhT,GAAGM,WAAW,qCAHR,CACT4V,gBAAiBD,IAE4C1V,KAAK,SAAAe,GAClEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYd6U,MAAA,SAAMH,cACJ,WAAW/V,QAAQ,SAACC,EAASC,GAI3B8S,EAAKlT,GAAGM,WAAW,4BAHR,CACT4V,gBAAiBD,IAEmC1V,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ8U,eAAA,SAAeJ,cACb,WAAW/V,QAAQ,SAACC,EAASC,GAI3BqT,EAAKzT,GAAGM,WAAW,4CAHR,CACT4V,gBAAiBD,IAEmD1V,KAAK,SAAAe,GACzEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UA6Bb+U,kBAAA,SAAkBC,cAChB,WAAWrW,QAAQ,SAACC,EAASC,GAI3BwT,EAAK5T,GAAGM,WAAW,8CAHR,CACTkW,cAAeD,IAEuDhW,KAAK,SAAAe,GAC3EnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbkV,mBAAA,SAAmBC,cACjB,WAAWxW,QAAQ,SAACC,EAASC,GAI3BuW,EAAK3W,GAAGM,WAAW,+CAHR,CACTsW,aAAcF,IAEyDnW,KAAK,SAAAe,YAErE,SAAAC,GACPnB,EAAOmB,UAYbsV,kBAAA,SAAkBH,cAChB,WAAWxW,QAAQ,SAACC,EAASC,GAI3B0W,EAAK9W,GAAGM,WAAW,2CAHR,CACTsW,aAAcF,IAEqDnW,KAAK,SAAAe,GACxEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbwV,eAAA,SAAe1C,cACb,WAAWnU,QAAQ,SAACC,EAASC,GAI3B4W,EAAKhX,GAAGM,WAAW,wCAHR,CACTgU,cAAeD,IAEiD9T,KAAK,SAAAe,GACrEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aC70BNzB,QAAQ,cAELmX,EASX,SAAYjX,QALZA,UAMEN,KAAKM,GAAKA,GCZRH,EAAIC,QAAQ,UAILqJ,aAmBX,WAAYnJ,QAfZA,eAKAuN,kBAKAR,eAMErN,KAAKM,GAAKA,EACVN,KAAK6N,MAAQ,IAAI0J,EAAejX,GAChCN,KAAKqN,QAAU,IAAIH,EAAS5M,EAAI,aAtBpC,2BAkCEwN,OAAA,SAAO0J,EAAiB7C,EAA+B9F,cACrD,WAAWrO,QAAQ,SAACC,EAASC,GAC3B,GAAIP,EAAE2D,IAAI0T,EAAS,iBAAoBrX,EAAE2D,IAAI0T,EAAS,cAE/C,CACL,IAAIxT,EAAOwT,OACgB,IAAjB7C,GAAiD,MAAjBA,GAA0BxU,EAAE2D,IAAIE,EAAM,kBAC9E7D,EAAEoD,IAAIS,EAAM,gBAAiB2Q,QAEP,IAAd9F,GAA2C,MAAdA,GAAuB1O,EAAE2D,IAAIE,EAAM,eACxE7D,EAAEoD,IAAIS,EAAM,aAAc6K,GAE5BlO,EAAKL,GAAGM,WAAW,uBAAwBoD,GAAMnD,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAZTnB,EAAO,IAAIf,EAAQ,EAAG,8CAA+C,CAAC4B,SAAYiW,UA0BxFjD,iBAAA,SAAiBiD,EAAiBC,EAA6BC,cAC7D,WAAWlX,QAAQ,SAACC,EAASC,GAC3B,GAAIP,EAAE2D,IAAI0T,EAAS,iBAAoBrX,EAAE2D,IAAI0T,EAAS,cAE/C,CACL,IAAIxT,EAAOwT,EACRrX,EAAEkQ,SAASoH,GACZtX,EAAEoD,IAAIS,EAAM,cAAeyT,GAE3BtX,EAAEoD,IAAIS,EAAM,eAAgByT,GAE9BhW,EAAKnB,GAAGM,WAAW,uBAAwBoD,GAAMnD,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAXTnB,EAAO,IAAIf,EAAQ,EAAG,8CAA+C,CAAC4B,SAAYiW,UAwBxFzO,OAAA,SAAOyO,cACL,WAAWhX,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAI0T,EAAS,iBAAoBrX,EAAE2D,IAAI0T,EAAS,eAGpDpV,EAAK9B,GAAGM,WAAW,uBAAwB4W,GAAS3W,KAAK,SAAAe,GACvDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,gDAAiD,CAAC4B,SAAYiW,UAoBzFG,QAAA,SAAQC,EAAiCC,EAAuBC,cAC9D,gBAD8DA,IAAAA,GAAoC,OACvFtX,QAAQ,SAACC,EAASC,GAM3BgC,EAAKpC,GAAGM,WAAW,wBALR,CACTmX,yBAA0BD,EAC1BE,cAAeH,EACfI,iBAAkBL,IAE8B/W,KAAK,SAAAe,GAClDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAiBdmM,KAAA,SAAKkK,EAAqBjK,EAAWC,EAAWC,EAAoBC,cAClE,WAAW5N,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIqK,EAAY,SAAYhO,EAAE2D,IAAIqK,EAAY,QAElDzN,EAAO,IAAIf,EAAQ,EAAG,mEAAoE,CAACwO,WAAcA,KAE3G,IAAIE,EAAY,CACd8J,YAAaD,EACb3J,EAAGN,EACHO,EAAGN,QAES,IAAJE,GACRjO,EAAEoD,IAAI8K,EAAW,IAAKD,GAExB,IAAIpK,EAAO7D,EAAEuL,MAAM2C,EAAWF,GAC9BtL,EAAKvC,GAAGM,WAAW,qBAAsBoD,GAAMnD,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab8M,QAAA,SAAQ8I,EAA6BC,cACnC,WAAWlX,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,GACX,GAAG7D,EAAEkQ,SAASoH,GAAe,CAC3BtX,EAAEoD,IAAIS,EAAM,cAAeyT,GAC3B,IAAIW,EAAO,0BAEXjY,EAAEoD,IAAIS,EAAM,eAAgByT,GACxBW,EAAO,sBAEbnV,EAAK3C,GAAGM,WAAWwX,EAAMpU,GAAMnD,KAAK,SAAAe,GAClCnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb+M,SAAA,SAASyJ,cACP,WAAW7X,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,GACX,GAAyB,GAAtBqU,EAAc5K,OAEf/M,EAAO,IAAIf,EAAQ,GAAI,oCAAqC,CAAC2Y,aAAgBD,SACxE,CACL,IAAID,EAAO,sBACRjY,EAAEkQ,SAASgI,EAAc,KAC1BlY,EAAEoD,IAAIS,EAAM,eAAgBqU,GAC5BD,EAAO,uBACCjY,EAAEoY,SAASF,EAAc,KACjClY,EAAEoD,IAAIS,EAAM,gBAAiBqU,GAC7BD,EAAO,wBAGP1X,EAAO,IAAIf,EAAQ,EAAG,oCAAqC,CAAC2Y,aAAgBD,KAE9E3R,EAAKpG,GAAGM,WAAWwX,EAAMpU,GAAMnD,KAAK,SAAAe,GAClCnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,WAaf2W,gBAAA,SAAgBH,cACd,WAAW7X,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,GACX,GAAyB,GAAtBqU,EAAc5K,OAEf/M,EAAO,IAAIf,EAAQ,GAAI,oCAAqC,CAAC2Y,aAAgBD,SACxE,CACL,IAAID,EAAO,sBACRjY,EAAEkQ,SAASgI,EAAc,KAC1BlY,EAAEoD,IAAIS,EAAM,eAAgBqU,GAC5BD,EAAO,4CACCjY,EAAEoY,SAASF,EAAc,KACjClY,EAAEoD,IAAIS,EAAM,gBAAiBqU,GAC7BD,EAAO,6CAGP1X,EAAO,IAAIf,EAAQ,EAAG,oCAAqC,CAAC2Y,aAAgBD,KAE9EvR,EAAKxG,GAAGM,WAAWwX,EAAMpU,GAAMnD,KAAK,SAAAe,GAClCnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,WAafkN,YAAA,SAAY0I,cACV,WAAWjX,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,GACR7D,EAAEkQ,SAASoH,GACZtX,EAAEoD,IAAIS,EAAM,cAAeyT,GACnBtX,EAAEoY,SAASd,GACnBtX,EAAEoD,IAAIS,EAAM,eAAgByT,GAG5B/W,EAAO,IAAIf,EAAQ,EAAG,oCAAqC,CAAC2Y,aAAgBb,KAE9EzQ,EAAK1G,GAAGM,WAAW,yBAA0BoD,GAAMnD,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb4W,qBAAA,SAAqBJ,cACnB,WAAW7X,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,GACPoU,EAAO,6BACRjY,EAAEkQ,SAASgI,EAAc,KAC1BlY,EAAEoD,IAAIS,EAAM,eAAgBqU,GACxBD,EAAO,8BACHjY,EAAEoY,SAASF,EAAc,KACjClY,EAAEoD,IAAIS,EAAM,gBAAiBqU,GACzBD,EAAO,6CAGX1X,EAAO,IAAIf,EAAQ,EAAG,oCAAqC,CAAC+Y,cAAiBL,KAE/E3L,EAAKpM,GAAGM,WAAWwX,EAAMpU,GAAMnD,KAAK,SAAAe,GAClCnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab8W,YAAA,SAAYN,EAAqCzS,cAC/C,gBAD+CA,IAAAA,GAAsB,OAC1DpF,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACT4U,WAAYhT,GAEW,GAAtByS,EAAc5K,OAEf/M,EAAO,IAAIf,EAAQ,GAAI,oCAAqC,CAAC2Y,aAAgBD,KAE1ElY,EAAEkQ,SAASgI,EAAc,IAC1BlY,EAAEoD,IAAIS,EAAM,eAAgBqU,GACpBlY,EAAEoY,SAASF,EAAc,IACjClY,EAAEoD,IAAIS,EAAM,gBAAiBqU,GAE7B3X,EAAO,IAAIf,EAAQ,GAAI,oCAAqC,CAAC2Y,aAAgBD,KAGjFzL,EAAKtM,GAAGM,WAAW,yBAA0BoD,GAAMnD,KAAK,SAAAe,GACnDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAcZgX,YAAA,SAAYpB,EAA6BqB,EAAoBzD,cAC3D,gBAD2DA,IAAAA,GAAoB,OACpE7U,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACT+U,SAAU1D,GAETlV,EAAEkQ,SAASoH,GACZtX,EAAEoD,IAAIS,EAAM,cAAeyT,GAE3BtX,EAAEoD,IAAIS,EAAM,eAAgByT,GAE3BtX,EAAE2D,IAAIgV,EAAY,gBACnB3Y,EAAEoD,IAAIS,EAAM,cAAe7D,EAAE+D,IAAI4U,EAAY,gBAC5C3Y,EAAE2D,IAAIgV,EAAY,aACnB3Y,EAAEoD,IAAIS,EAAM,WAAY7D,EAAE+D,IAAI4U,EAAY,aACzC3Y,EAAE2D,IAAIgV,EAAY,eAAiB3Y,EAAE2D,IAAIgV,EAAY,eACtD3Y,EAAEoD,IAAIS,EAAM,aAAc7D,EAAE+D,IAAI4U,EAAY,eAC5C3Y,EAAEoD,IAAIS,EAAM,aAAc7D,EAAE+D,IAAI4U,EAAY,gBAE5CpY,EAAO,IAAIf,EAAQ,EAAG,+BAAgC,CAAC2Y,aAAgBb,EAAaqB,WAAcA,KAGpG/L,EAAKzM,GAAGM,WAAW,4BAA6BoD,GAAMnD,KAAK,SAAAe,GACtDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAcZmX,aAAA,SAAavB,EAA6BqB,EAAoBG,cAC5D,gBAD4DA,IAAAA,GAAwB,OACzEzY,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTkV,aAAcD,GAEb9Y,EAAEkQ,SAASoH,GACZtX,EAAEoD,IAAIS,EAAM,cAAeyT,GAE3BtX,EAAEoD,IAAIS,EAAM,eAAgByT,GAE3BtX,EAAE2D,IAAIgV,EAAY,gBACnB3Y,EAAEoD,IAAIS,EAAM,cAAe7D,EAAE+D,IAAI4U,EAAY,gBAC5C3Y,EAAE2D,IAAIgV,EAAY,aACnB3Y,EAAEoD,IAAIS,EAAM,WAAY7D,EAAE+D,IAAI4U,EAAY,aACzC3Y,EAAE2D,IAAIgV,EAAY,eAAiB3Y,EAAE2D,IAAIgV,EAAY,eACtD3Y,EAAEoD,IAAIS,EAAM,YAAa7D,EAAE+D,IAAI4U,EAAY,cAC3C3Y,EAAEoD,IAAIS,EAAM,aAAc7D,EAAE+D,IAAI4U,EAAY,gBAE5CpY,EAAO,IAAIf,EAAQ,EAAG,+BAAgC,CAAC2Y,aAAgBb,EAAaqB,WAAcA,KAGpGnJ,EAAKrP,GAAGM,WAAW,6BAA8BoD,GAAMnD,KAAK,SAAAe,GACvDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAcdsX,eAAA,SAAe1B,EAA6BqB,EAAoBzD,cAC9D,gBAD8DA,IAAAA,GAAoB,OACvE7U,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACT+U,SAAU1D,GAETlV,EAAEkQ,SAASoH,GACZtX,EAAEoD,IAAIS,EAAM,cAAeyT,GAE3BtX,EAAEoD,IAAIS,EAAM,eAAgByT,GAE3BtX,EAAE2D,IAAIgV,EAAY,aACnB3Y,EAAEoD,IAAIS,EAAM,YAAa7D,EAAE+D,IAAI4U,EAAY,cACnC3Y,EAAE2D,IAAIgV,EAAY,eAAiB3Y,EAAE2D,IAAIgV,EAAY,eAC7D3Y,EAAEoD,IAAIS,EAAM,aAAc7D,EAAE+D,IAAI4U,EAAY,eAC5C3Y,EAAEoD,IAAIS,EAAM,aAAc7D,EAAE+D,IAAI4U,EAAY,gBAE5CpY,EAAO,IAAIf,EAAQ,EAAG,+BAAgC,CAAC2Y,aAAgBb,EAAaqB,WAAcA,KAGpGlJ,EAAKtP,GAAGM,WAAW,+BAAgCoD,GAAMnD,KAAK,SAAAe,GACzDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAcduN,OAAA,SAAOgK,EAA6B/J,EAAuBC,cACzD,WAAW9O,QAAQ,SAACC,EAASC,GAE3B,IAAIsD,EAAmF,CAAEqV,aAAcD,QAC7E,IAAhB/J,GACRlP,EAAEoD,IAAIS,EAAM,eAAgBqL,QACH,IAAjBC,GACRnP,EAAEoD,IAAIS,EAAM,gBAAiBsL,GAC/BQ,EAAKxP,GAAGM,WAAW,uBAAwBoD,GAAMnD,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ0N,SAAA,SAAS6J,cACP,WAAW5Y,QAAQ,SAACC,EAASC,GAI3BsP,EAAK1P,GAAGM,WAAW,yBAHR,CACTyY,aAAcD,IAEmCvY,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ2N,MAAA,SAAM4J,cACJ,WAAW5Y,QAAQ,SAACC,EAASC,GAI3B4P,EAAKhQ,GAAGM,WAAW,sBAHR,CACTyY,aAAcD,IAEgCvY,KAAK,SAAAe,GAChDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAYZ6N,OAAA,SAAO0J,cACL,WAAW5Y,QAAQ,SAACC,EAASC,GAI3BoQ,EAAKxQ,GAAGM,WAAW,uBAHR,CACTyY,aAAcD,IAEiCvY,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,iBAYf,SAAOuX,cACL,WAAW5Y,QAAQ,SAACC,EAASC,GAI3B2Q,EAAK/Q,GAAGM,WAAW,uBAHR,CACTyY,aAAcD,IAEiCvY,KAAK,SAAAe,GACjDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAebyX,iBAAA,SAAiBC,EAAoBC,EAA2BnR,EAA+BqP,cAC7F,gBAD6FA,IAAAA,GAAa,OAC/FlX,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,QACQ,IAATqE,GACRlI,EAAEuL,MAAM1H,EAAMqE,GAEZlI,EAAE2D,IAAIE,EAAM,eACd7D,EAAEoD,IAAIS,EAAM,aAAcuV,GAExBpZ,EAAE2D,IAAIE,EAAM,eACd7D,EAAEoD,IAAIS,EAAM,aAAcwV,GAE5B,IAAIpB,EAAO,8BACPV,IACFU,EAAO,wBAET5G,EAAKlR,GAAGM,WAAWwX,EAAMpU,GAAMnD,KAAK,SAAAe,GAC/BA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAYb4X,cAAA,SAAcvB,cACZ,WAAW1X,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,GACX7D,EAAEoD,IAAIS,EAAM,cAAekU,GAC3BvG,EAAKrR,GAAGM,WAAW,6BAA8BoD,GAAMnD,KAAK,SAAAe,GACvDA,EAAEqG,OAAO,EACVvH,EAAO,IAAIf,EAAQ,EAAGiC,EAAE6N,QAAS,CAAC3O,SAAYc,KAE9CnB,EAAQmB,EAAEb,eAEL,SAAAc,GACPnB,EAAOmB,UAcbyQ,iBAAA,SAAiBC,EAAkB0C,EAA2C/D,cAC5E,gBADiC+D,IAAAA,GAAoC,OAC1DzU,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTkR,yBAA0BD,QAEN,IAAZ/D,GAAsC,MAAXA,GACnC/Q,EAAEoD,IAAIS,EAAM,YAAakN,GAEvB/Q,EAAEqS,SAAS,CAAC,cAAe,aAAcD,GAG3CT,EAAKxR,GAAGM,4BAA4B2R,EAAYvO,GAAMnD,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,KALTnB,EAAO,IAAIf,EAAQ,EAAG,oDAAqD,CAAC4B,SAAYgR,UAmB9FI,aAAA,SAAasC,EAA2C/D,GACtD,gBADW+D,IAAAA,GAAoC,QACnC3C,iBAAiB,YAAa2C,EAA0B/D,MAWtEwI,eAAA,SAAezE,EAA2C/D,GACxD,gBADa+D,IAAAA,GAAoC,QACrC3C,iBAAiB,cAAe2C,EAA0B/D,MASxEiB,YAAA,sBACE,WAAW3R,QAAQ,SAACC,EAASC,GAC3BsR,EAAK1R,GAAGM,WAAW,yBAA0B,IAAIC,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWd8X,cAAA,sBACE,WAAWnZ,QAAQ,SAACC,EAASC,GAC3BwR,EAAK5R,GAAGM,WAAW,2BAA4B,IAAIC,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb6P,cAAA,sBACE,WAAWlR,QAAQ,SAACC,EAASC,GAC3B0R,EAAK9R,GAAGM,WAAW,2BAA4B,IAAIC,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbiU,aAAA,sBACE,WAAWtV,QAAQ,SAACC,EAASC,GAC3B+R,EAAKnS,GAAGM,WAAW,0BAA2B,IAAIC,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbkU,kBAAA,sBACE,WAAWvV,QAAQ,SAACC,EAASC,GAC3BmS,EAAKvS,GAAGM,WAAW,+BAAgC,IAAIC,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbmU,cAAA,sBACE,WAAWxV,QAAQ,SAACC,EAASC,GAC3BwS,EAAK5S,GAAGM,WAAW,2BAA4B,IAAIC,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb+X,UAAA,sBACE,WAAWpZ,QAAQ,SAACC,EAASC,GAC3B0S,EAAK9S,GAAGM,WAAW,uBAAwB,IAAIC,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbgY,gBAAA,sBACE,WAAWrZ,QAAQ,SAACC,EAASC,GAC3B4S,EAAKhT,GAAGM,WAAW,6BAA8B,IAAIC,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aC/zBT1B,EAAIC,QAAQ,UAEL0Z,aASX,WAAYxZ,QALZA,UAMEN,KAAKM,GAAKA,EAVd,2BAuBGyZ,SAAA,SAASC,EAAoBC,EAAyBC,EAAmBnW,cACxE,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTmW,WAAYH,EACZI,gBAAiBH,EACjBI,UAAWH,QAEO,IAAVnW,IACRC,EAAO7D,EAAEuL,MAAM1H,EAAMD,IAEvBpD,EAAKL,GAAGM,WAAW,wBAAyBoD,GAAMnD,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAaZyY,iBAAA,SAAiBN,EAAoBO,cACpC,WAAW/Z,QAAQ,SAACC,EAASC,GAK3Be,EAAKnB,GAAGM,WAAW,+BAJR,CACTuZ,WAAYH,EACZQ,UAAWD,IAE4C1Z,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAiBZ4Y,aAAA,SAAaC,EAA0BC,EAAuBC,EAAwBC,EAAoBC,EAAwB/W,cACjI,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAOIsD,EAAO7D,EAAEuL,MAPG,CACdqP,iBAAkBL,EAClBM,cAAeL,EACfM,eAAgBL,EAChBM,WAAYL,EACZM,eAAgBL,GAEY/W,GAC9B3B,EAAK9B,GAAGM,WAAW,wBAAyBoD,GAAMnD,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZuZ,kBAAA,SAAkBpB,cACjB,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BgC,EAAKpC,GAAGM,WAAW,iCAHR,CACTuZ,WAAYH,IAE6CnZ,KAAK,SAAAe,GAC9DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZwZ,qBAAA,SAAqBrB,cACpB,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BmC,EAAKvC,GAAGM,WAAW,uCAHR,CACTuZ,WAAYH,IAEmDnZ,KAAK,SAAAe,GACpEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZyZ,gBAAA,SAAgBC,cACf,WAAW/a,QAAQ,SAACC,EAASC,GACiG,GAAzHP,EAAEqb,eAAeD,EAAS,CAAC,gBAAiB,kBAAmB,YAAa,YAAa,WAAY,YAAY9N,QAClH/M,EAAO,IAAIf,EAAQ,EAAG,8HAGxBsD,EAAK3C,GAAGM,WAAW,2BADR2a,GAC0C1a,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcZ4Z,SAAA,SAASlC,EAAoBmC,EAAmB3X,cAC/C,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTuR,WAAYgE,EACZ/D,UAAWkG,GAEVvb,EAAE2D,IAAIC,EAAS,cAChB5D,EAAEoD,IAAIS,EAAM,aAAc7D,EAAE+D,IAAIH,EAAS,eACjC5D,EAAE2D,IAAIC,EAAS,mBACvB5D,EAAEoD,IAAIS,EAAM,kBAAmB7D,EAAE+D,IAAIH,EAAS,oBAE9CrD,EAAO,IAAIf,EAAQ,EAAG,oDAAqD,CAAC4B,SAAYwC,KAEvF5D,EAAE2D,IAAIC,EAAS,qBAChB5D,EAAEoD,IAAIS,EAAM,mBAAoB7D,EAAE+D,IAAIH,EAAS,qBAEjD2C,EAAKpG,GAAGM,WAAW,oCAAqCoD,GAAMnD,KAAK,SAAAe,GACjEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAeZ8Z,sBAAA,SAAsB3B,EAAoBT,EAAoBmC,EAAmBf,cAChF,WAAWna,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTmW,WAAYH,EACZzE,WAAYgE,EACZ/D,UAAWkG,QAEa,IAAhBf,GACRxa,EAAEoD,IAAIS,EAAM,gBAAiB2W,GAE/B7T,EAAKxG,GAAGM,WAAW,oCAAqCoD,GAAMnD,KAAK,SAAAe,GACjEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcZ+Z,UAAA,SAAUjB,EAAuBD,EAA0B3W,cAC1D,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTgX,cAAeL,EACfI,iBAAkBL,QAEA,IAAV3W,IACRC,EAAO7D,EAAEuL,MAAM1H,EAAMD,IAEvBiD,EAAK1G,GAAGM,WAAW,yBAA0BoD,GAAMnD,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAaZga,aAAA,SAAaC,EAAwB/X,cACpC,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACT+X,eAAgBD,QAEE,IAAV/X,IACRC,EAAO7D,EAAEuL,MAAM1H,EAAMD,IAEvB2I,EAAKpM,GAAGM,WAAW,4BAA6BoD,GAAMnD,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZma,WAAA,SAAWF,cACV,WAAWtb,QAAQ,SAACC,EAASC,GAK3BkM,EAAKtM,GAAGM,WAAW,gCAJR,CACTmb,eAAgBD,EAChBG,MAAM,IAEkDpb,KAAK,SAAAe,GAC7DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZqa,aAAA,SAAaJ,cACZ,WAAWtb,QAAQ,SAACC,EAASC,GAK3BqM,EAAKzM,GAAGM,WAAW,gCAJR,CACTmb,eAAgBD,EAChBG,MAAM,IAEkDpb,KAAK,SAAAe,GAC7DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAaZsa,aAAA,SAAaL,EAAwBM,cACpC,WAAW5b,QAAQ,SAACC,EAASC,GAK3BiP,EAAKrP,GAAGM,WAAW,6BAJR,CACTmb,eAAgBD,EAChBO,UAAWD,IAE0Cvb,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZya,gBAAA,SAAgBR,cACf,WAAWtb,QAAQ,SAACC,EAASC,GAI3BkP,EAAKtP,GAAGM,WAAW,gCAHR,CACTmb,eAAgBD,IAEwCjb,KAAK,SAAAe,GAC7DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ0a,sBAAA,SAAsBhB,cACrB,WAAW/a,QAAQ,SAACC,EAASC,GAC2D,GAAnFP,EAAEqb,eAAeD,EAAS,CAAC,iBAAkB,eAAgB,cAAc9N,QAC5E/M,EAAO,IAAIf,EAAQ,EAAG,8FAGxBmQ,EAAKxP,GAAGM,WAAW,2BADR2a,GAC0C1a,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ2a,0BAAA,SAA0BjB,cACzB,WAAW/a,QAAQ,SAACC,EAASC,GAC2D,GAAnFP,EAAEqb,eAAeD,EAAS,CAAC,iBAAkB,eAAgB,cAAc9N,QAC5E/M,EAAO,IAAIf,EAAQ,EAAG,8FAGxBqQ,EAAK1P,GAAGM,WAAW,iCADR2a,GACgD1a,KAAK,SAAAe,GAC9DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aCpYT1B,EAAIC,QAAQ,UAELqc,aASX,WAAYnc,QALZA,UAMEN,KAAKM,GAAKA,EAVd,2BAsBEoc,OAAA,SAAO1C,EAAoB2C,EAAoB5Y,cAC7C,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAIIsD,EAAO7D,EAAEuL,MAJG,CACdyO,WAAYH,EACZ4C,WAAYD,GAEgB5Y,GAC9BpD,EAAKL,GAAGM,WAAW,mBAAoBoD,GAAMnD,KAAK,SAAAe,GAChDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabgb,WAAA,SAAW7C,EAAoBjW,cAC7B,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAHG,CACdyO,WAAYH,GAEgBjW,GAC9BtC,EAAKnB,GAAGM,WAAW,sBAAuBoD,GAAMnD,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcbib,UAAA,SAAUC,EAAqBC,EAAsB3P,cACnD,WAAW7M,QAAQ,SAACC,EAASC,GAM3B0B,EAAK9B,GAAGM,WAAW,4BALR,CACTqc,YAAaF,EACbG,aAAcF,EACd9P,SAAUG,IAE0CxM,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabsb,kBAAA,SAAkBC,EAAqBrZ,cACrC,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAHG,CACd2R,YAAaD,GAEerZ,GAC9BrB,EAAKpC,GAAGM,WAAW,6BAA8BoD,GAAMnD,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAebyb,WAAA,SAAWtD,EAAoBuD,EAAmBC,EAAiBnQ,cACjE,WAAW7M,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTmW,WAAYH,EACZyD,UAAWF,QAEM,IAATC,GACRrd,EAAEoD,IAAIS,EAAM,SAAUwZ,QAEJ,IAAVnQ,GACRlN,EAAEoD,IAAIS,EAAM,cAAeqJ,GAE7BxK,EAAKvC,GAAGM,WAAW,kBAAmBoD,GAAMnD,KAAK,SAAAe,GAC/CnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAgBb6b,cAAA,SAAc1D,EAAoB2D,EAAoBH,EAAgBI,EAAkB7Z,cACtF,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAMIsD,EAAO7D,EAAEuL,MANG,CACdyO,WAAYH,EACZ6D,WAAYF,EACZG,OAAQN,EACRO,WAAYH,GAEgB7Z,GAC9Bd,EAAK3C,GAAGM,WAAW,yBAA0BoD,GAAMnD,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabmc,UAAA,SAAUC,EAAiBla,cACzB,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAHG,CACdwS,QAASD,GAEmBla,GAC9B2C,EAAKpG,GAAGM,WAAW,sBAAuBoD,GAAMnD,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabsc,WAAA,SAAWC,EAA2BC,cACpC,WAAW7d,QAAQ,SAACC,EAASC,GAK3BoG,EAAKxG,GAAGM,WAAW,+BAJR,CACT0d,kBAAmBF,EACnBG,OAAQF,IAE+Cxd,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab2c,eAAA,SAAexE,EAAoBO,cACjC,WAAW/Z,QAAQ,SAACC,EAASC,GAK3BsG,EAAK1G,GAAGM,WAAW,0BAJR,CACTuZ,WAAYH,EACZQ,UAAWD,IAEuC1Z,KAAK,SAAAe,GACvDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab4c,mBAAA,SAAmBzE,EAAoBO,cACrC,WAAW/Z,QAAQ,SAACC,EAASC,GAK3BgM,EAAKpM,GAAGM,WAAW,6BAJR,CACTuZ,WAAYH,EACZQ,UAAWD,IAE0C1Z,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb6c,QAAA,SAAQ1E,cACN,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BkM,EAAKtM,GAAGM,WAAW,4BAHR,CACTuZ,WAAYH,IAEwCnZ,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb8c,YAAA,SAAY3E,cACV,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BqM,EAAKzM,GAAGM,WAAW,+BAHR,CACTuZ,WAAYH,IAE2CnZ,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb+c,YAAA,SAAY5E,cACV,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BiP,EAAKrP,GAAGM,WAAW,+BAHR,CACTuZ,WAAYH,IAE2CnZ,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbgd,eAAA,SAAe7E,cACb,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BkP,EAAKtP,GAAGM,WAAW,kCAHR,CACTuZ,WAAYH,IAE8CnZ,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbid,UAAA,SAAUb,cACR,WAAWzd,QAAQ,SAACC,EAASC,GAI3BoP,EAAKxP,GAAGM,WAAW,sBAHR,CACTsd,QAASD,IAEqCpd,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbkd,mBAAA,SAAmB/E,cACjB,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BsP,EAAK1P,GAAGM,WAAW,kCAHR,CACTuZ,WAAYH,IAE8CnZ,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbmd,cAAA,SAAcf,cACZ,WAAWzd,QAAQ,SAACC,EAASC,GAI3B4P,EAAKhQ,GAAGM,WAAW,yBAHR,CACTsd,QAASD,IAEwCpd,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbod,aAAA,SAAab,cACX,WAAW5d,QAAQ,SAACC,EAASC,GAI3BoQ,EAAKxQ,GAAGM,WAAW,+BAHR,CACT0d,kBAAmBF,IAEoCvd,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbqd,uBAAA,SAAuBlF,cACrB,WAAWxZ,QAAQ,SAACC,EAASC,GAI3B2Q,EAAK/Q,GAAGM,WAAW,qCAHR,CACTuZ,WAAYH,IAEiDnZ,KAAK,SAAAe,GAClEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbsd,cAAA,SAAc/B,cACZ,WAAW5c,QAAQ,SAACC,EAASC,GAI3B8Q,EAAKlR,GAAGM,WAAW,yBAHR,CACTyc,YAAaD,IAEoCvc,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbud,uBAAA,SAAuBpF,cACrB,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BiR,EAAKrR,GAAGM,WAAW,qCAHR,CACTuZ,WAAYH,IAEiDnZ,KAAK,SAAAe,GAClEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbwd,iBAAA,SAAiBC,cACf,WAAW9e,QAAQ,SAACC,EAASC,GAI3BoR,EAAKxR,GAAGM,WAAW,4BAHR,CACT2e,eAAgBD,IAEoCze,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb2d,0BAAA,SAA0BxF,cACxB,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BsR,EAAK1R,GAAGM,WAAW,wCAHR,CACTuZ,WAAYH,IAEoDnZ,KAAK,SAAAe,GACrEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb4d,WAAA,SAAWlE,cACT,WAAW/a,QAAQ,SAACC,EAASC,GAC2D,GAAnFP,EAAEqb,eAAeD,EAAS,CAAC,UAAW,aAAc,UAAW,YAAY9N,QAC5E/M,EAAO,IAAIf,EAAQ,EAAG,4FAGxBuS,EAAK5R,GAAGM,WAAW,sBADR2a,GACqC1a,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb6d,eAAA,SAAenE,cACb,WAAW/a,QAAQ,SAACC,EAASC,GAC8H,GAAtJP,EAAEqb,eAAeD,EAAS,CAAC,cAAe,cAAe,YAAa,UAAW,UAAW,iBAAkB,gBAAiB,eAAe9N,QAC/I/M,EAAO,IAAIf,EAAQ,EAAG,uJAGxByS,EAAK9R,GAAGM,WAAW,yBADR2a,GACwC1a,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb8d,cAAA,SAAcpE,cACZ,WAAW/a,QAAQ,SAACC,EAASC,GAC4E,GAApGP,EAAEqb,eAAeD,EAAS,CAAC,cAAe,oBAAqB,WAAY,iBAAiB9N,QAC7F/M,EAAO,IAAIf,EAAQ,EAAG,6GAGxB8S,EAAKnS,GAAGM,WAAW,yBADR2a,GACwC1a,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb+d,eAAA,SAAerE,cACb,WAAW/a,QAAQ,SAACC,EAASC,GACuE,GAA/FP,EAAEqb,eAAeD,EAAS,CAAC,cAAe,aAAc,cAAe,gBAAgB9N,QACxF/M,EAAO,IAAIf,EAAQ,EAAG,uGAGxBkT,EAAKvS,GAAGM,WAAW,yBADR2a,GACwC1a,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbge,mBAAA,sBACE,WAAWrf,QAAQ,SAACC,EAASC,GAE3BwS,EAAK5S,GAAGM,WAAW,mBADR,IACkCC,KAAK,SAAAe,GAChDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbie,mBAAA,SAAmBvE,cACjB,WAAW/a,QAAQ,SAACC,EAASC,GAC4E,GAApGP,EAAEqb,eAAeD,EAAS,CAAC,aAAc,YAAa,UAAW,UAAW,gBAAgB9N,QAC7F/M,EAAO,IAAIf,EAAQ,EAAG,0GAGxByT,EAAK9S,GAAGM,WAAW,sBADR2a,GACqC1a,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbke,sBAAA,SAAsBxE,cACpB,WAAW/a,QAAQ,SAACC,EAASC,GACkN,GAA1OP,EAAEqb,eAAeD,EAAS,CAAC,eAAgB,SAAU,iBAAkB,WAAY,cAAe,UAAW,eAAgB,cAAe,eAAgB,cAAe,aAAc,eAAgB,YAAa,YAAY9N,QACnO/M,EAAO,IAAIf,EAAQ,EAAG,8NAGxB2T,EAAKhT,GAAGM,WAAW,4BADR2a,GAC2C1a,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbme,kBAAA,SAAkBjc,cAChB,WAAWvD,QAAQ,SAACC,EAASC,GAE3B8S,EAAKlT,GAAGM,WAAW,6BADRmD,GAC4ClD,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAiBboe,yBAAA,SAAyBX,EAAwBY,EAAoBC,EAAoBC,EAAyBC,EAA0BhT,cAC1I,WAAW7M,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTub,eAAgBD,EAChBgB,aAAcH,EACdI,WAAYL,QAEe,IAAlBG,GAAkD,MAAjBA,QAAmD,IAAjBD,GAAgD,MAAhBA,OAE3E,IAAlBC,GAAkD,MAAjBA,EAChDlgB,EAAEoD,IAAIS,EAAM,kBAAmBqc,QACC,IAAjBD,GAAgD,MAAhBA,GAC/CjgB,EAAEoD,IAAIS,EAAM,iBAAkBoc,GAJ9B1f,EAAO,IAAIf,EAAQ,EAAG,qEAMJ,IAAV0N,GACRlN,EAAEoD,IAAIS,EAAM,cAAeqJ,GAE7B0G,EAAKzT,GAAGM,WAAW,2BAA4BoD,GAAMnD,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb2e,4BAAA,SAA4BC,cAC1B,WAAWjgB,QAAQ,SAACC,EAASC,GAI3BwT,EAAK5T,GAAGM,WAAW,8BAHR,CACT8f,iBAAkBD,IAEoC5f,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb8e,6BAAA,SAA6BpF,cAC3B,WAAW/a,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAOuX,EACoI,GAA5Ipb,EAAEqb,eAAeD,EAAS,CAAC,iBAAkB,mBAAoB,iBAAkB,cAAe,kBAAmB,eAAe9N,QACrI/M,EAAO,IAAIf,EAAQ,EAAG,iJAExBsX,EAAK3W,GAAGM,WAAW,8BAA+BoD,GAAMnD,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb+e,KAAA,sBACE,WAAWpgB,QAAQ,SAACC,EAASC,GAC3B0W,EAAK9W,GAAGM,WAAW,mBAAoB,IAAIC,KAAK,SAAAe,GAC9CnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbgf,oBAAA,SAAoBtF,cAClB,WAAW/a,QAAQ,SAACC,EAASC,GAC4E,GAApGP,EAAEqb,eAAeD,EAAS,CAAC,cAAe,UAAW,UAAW,aAAc,cAAc9N,QAC7F/M,EAAO,IAAIf,EAAQ,EAAG,2GAGxB2X,EAAKhX,GAAGM,WAAW,sBADR2a,GACqC1a,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbif,eAAA,sBACE,WAAWtgB,QAAQ,SAACC,EAASC,GAE3BqgB,EAAKzgB,GAAGM,WAAW,qBADR,IACoCC,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbmf,cAAA,SAAcjd,cACZ,WAAWvD,QAAQ,SAACC,EAASC,GAE3BugB,EAAK3gB,GAAGM,WAAW,qBADRmD,GACoClD,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabqf,iBAAA,SAAiBC,EAAsBpd,cACrC,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAHG,CACd0V,aAAcD,GAEcpd,GAC9Bsd,EAAK/gB,GAAGM,WAAW,wBAAyBoD,GAAMnD,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aCz0BT1B,EAAIC,QAAQ,UAGLkhB,aAcX,WAAYhhB,QAVZA,eAKAgB,YAMEtB,KAAKM,GAAKA,EACVN,KAAKsB,KAAO,CACV+L,QAAS,IAAIH,EAAS5M,EAAI,WAjBhC,2BAgCGihB,QAAA,SAAQvH,EAAoBwH,EAAgBC,EAAoBC,EAAkB3d,cACjF,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTmW,WAAYH,EACZ2H,OAAQH,EACRI,WAAYH,EACZI,SAAUH,QAEQ,IAAV3d,IACRC,EAAO7D,EAAEuL,MAAM1H,EAAMD,IAEvBpD,EAAKL,GAAGM,WAAW,mBAAoBoD,GAAMnD,KAAK,SAAAe,GAChDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAiBZigB,cAAA,SAAc9H,EAAoB+H,EAAkBC,EAAoBC,EAAkBC,EAAqBne,cAC9G,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTmW,WAAYH,EACZmI,SAAUJ,EACVK,WAAYJ,EACZK,SAAUJ,EACVK,YAAaJ,QAEK,IAAVne,IACRC,EAAO7D,EAAEuL,MAAM1H,EAAMD,IAEvBtC,EAAKnB,GAAGM,WAAW,0BAA2BoD,GAAMnD,KAAK,SAAAe,GACvDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAaZ0gB,eAAA,SAAeR,EAAkB1U,cAChC,WAAW7M,QAAQ,SAACC,EAASC,GAK3B0B,EAAK9B,GAAGM,WAAW,2BAJR,CACTuhB,SAAUJ,EACVS,YAAanV,IAEsCxM,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAaZ4gB,iBAAA,SAAiBzI,EAAoB0I,cACpC,gBADoCA,IAAAA,GAA6B,OACtDliB,QAAQ,SAACC,EAASC,GAK3BgC,EAAKpC,GAAGM,WAAW,4BAJR,CACTuZ,WAAYH,EACZ2I,kBAAmBD,IAEiC7hB,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAaZ+gB,aAAA,SAAaC,EAA0BH,cACtC,gBADsCA,IAAAA,GAA6B,OACxDliB,QAAQ,SAACC,EAASC,GAK3BmC,EAAKvC,GAAGM,WAAW,qBAJR,CACTkiB,UAAWD,EACXF,kBAAmBD,IAE0B7hB,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZkhB,mBAAA,SAAmBF,cAClB,WAAWriB,QAAQ,SAACC,EAASC,GAI3BuC,EAAK3C,GAAGM,WAAW,kCAHR,CACTkiB,UAAWD,IAE+ChiB,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZmhB,mBAAA,SAAmBjB,cAClB,WAAWvhB,QAAQ,SAACC,EAASC,GAI3BgG,EAAKpG,GAAGM,WAAW,kCAHR,CACTmhB,SAAUA,IAEgDlhB,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZohB,oBAAA,SAAoBJ,cACnB,WAAWriB,QAAQ,SAACC,EAASC,GAI3BoG,EAAKxG,GAAGM,WAAW,mCAHR,CACTiiB,UAAWA,IAEgDhiB,KAAK,SAAAe,GAChEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAaZqhB,WAAA,SAAWnB,EAAkBhe,cAC5B,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTme,SAAUJ,QAEQ,IAAVhe,IACRC,EAAO7D,EAAEuL,MAAM1H,EAAMD,IAEvBiD,EAAK1G,GAAGM,WAAW,sBAAuBoD,GAAMnD,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcZshB,kBAAA,SAAkBC,EAAyB/V,EAAiBgW,cAC3D,WAAW7iB,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTsf,gBAAiBF,EACjBZ,YAAanV,QAEO,IAAZgW,GACRljB,EAAEoD,IAAIS,EAAM,YAAaqf,GAE3B3W,EAAKpM,GAAGM,WAAW,8BAA+BoD,GAAMnD,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcZ0hB,cAAA,SAAcxB,EAAkBC,EAAoBje,cACnD,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTme,SAAUJ,GAEkE,GAA3E5hB,EAAEqb,eAAezX,EAAS,CAAC,mBAAoB,oBAAoB0J,QACpE/M,EAAO,IAAIf,EAAQ,EAAG,6FAEJ,IAAVoE,IACRC,EAAO7D,EAAEuL,MAAM1H,EAAMD,IAEvB6I,EAAKtM,GAAGM,WAAW,yBAA0BoD,GAAMnD,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ2hB,WAAA,SAAWzB,cACV,WAAWvhB,QAAQ,SAACC,EAASC,GAI3BqM,EAAKzM,GAAGM,WAAW,sBAHR,CACTuhB,SAAUJ,IAEoClhB,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ4hB,kBAAA,SAAkBzJ,cACjB,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BiP,EAAKrP,GAAGM,WAAW,kCAHR,CACTuZ,WAAYH,IAE8CnZ,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZ6hB,mBAAA,SAAmBC,cAClB,WAAWnjB,QAAQ,SAACC,EAASC,GAI3BkP,EAAKtP,GAAGM,WAAW,8BAHR,CACTgjB,iBAAkBD,IAEoC9iB,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZgiB,eAAA,SAAetI,cACd,WAAW/a,QAAQ,SAACC,EAASC,GAC8E,GAAtGP,EAAEqb,eAAeD,EAAS,CAAC,oBAAqB,gBAAiB,eAAgB,aAAa9N,QAC/F/M,EAAO,IAAIf,EAAQ,EAAG,+GAGxBmQ,EAAKxP,GAAGM,WAAW,sBADR2a,GACqC1a,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZiiB,qBAAA,SAAqBvI,cACpB,WAAW/a,QAAQ,SAACC,EAASC,GAE3BsP,EAAK1P,GAAGM,WAAW,6BADR2a,GAC4C1a,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aChYT1B,EAAIC,QAAQ,UAEL2jB,aASX,WAAYzjB,QALZA,UAMEN,KAAKM,GAAKA,EAVd,2BAoBE0jB,wBAAA,SAAwBhgB,cACtB,WAAWxD,QAAQ,SAACC,EAASC,GAC3BC,EAAKL,GAAGM,WAAW,uBAAwBoD,GAAMnD,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAaboiB,2BAAA,SAA2B1J,EAAmBxW,cAC5C,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAHG,CACd8O,UAAWD,GAEiBxW,GAC9BtC,EAAKnB,GAAGM,WAAW,0BAA2BoD,GAAMnD,KAAK,SAAAe,GACvDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbqiB,yBAAA,sBACE,WAAW1jB,QAAQ,SAACC,EAASC,GAE3B0B,EAAK9B,GAAGM,WAAW,2BADR,IAC0CC,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcbsiB,YAAA,SAAYC,EAAsBC,EAA4BtgB,cAC5D,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAIIsD,EAAO7D,EAAEuL,MAJG,CACd4Y,SAAUF,EACVG,mBAAoBF,GAEQtgB,GAC9BrB,EAAKpC,GAAGM,WAAW,mBAAoBoD,GAAMnD,KAAK,SAAAe,GAChDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab2iB,eAAA,SAAeC,EAAoB1gB,cACjC,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAHG,CACdgZ,WAAYD,GAEgB1gB,GAC9BlB,EAAKvC,GAAGM,WAAW,uBAAwBoD,GAAMnD,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb8iB,aAAA,sBACE,WAAWnkB,QAAQ,SAACC,EAASC,GAE3BuC,EAAK3C,GAAGM,WAAW,uBADR,IACsCC,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb+iB,kBAAA,SAAkBrJ,cAChB,WAAW/a,QAAQ,SAACC,EAASC,GACsD,GAA9EP,EAAEqb,eAAeD,EAAS,CAAC,WAAY,eAAgB,eAAe9N,QACvE/M,EAAO,IAAIf,EAAQ,EAAG,4FAGxB+G,EAAKpG,GAAGM,WAAW,sBADR2a,GACqC1a,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbgjB,sBAAA,SAAsBtJ,cACpB,WAAW/a,QAAQ,SAACC,EAASC,GACsD,GAA9EP,EAAEqb,eAAeD,EAAS,CAAC,WAAY,eAAgB,eAAe9N,QACvE/M,EAAO,IAAIf,EAAQ,EAAG,yFAGxBmH,EAAKxG,GAAGM,WAAW,4BADR2a,GAC2C1a,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcbijB,WAAA,SAAWC,EAAqBC,EAA4BjhB,cAC1D,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAIIsD,EAAO7D,EAAEuL,MAJG,CACduZ,QAASF,EACTG,YAAaF,GAEejhB,GAC9BiD,EAAK1G,GAAGM,WAAW,kBAAmBoD,GAAMnD,KAAK,SAAAe,GAC/CnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabsjB,cAAA,SAAcC,EAAmBrhB,cAC/B,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAHG,CACd2Z,UAAWD,GAEiBrhB,GAC9B2I,EAAKpM,GAAGM,WAAW,qBAAsBoD,GAAMnD,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbyjB,YAAA,sBACE,WAAW9kB,QAAQ,SAACC,EAASC,GAE3BkM,EAAKtM,GAAGM,WAAW,sBADR,IACqCC,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb6c,QAAA,sBACE,WAAWle,QAAQ,SAACC,EAASC,GAE3BqM,EAAKzM,GAAGM,WAAW,mBADR,IACkCC,KAAK,SAAAe,GAChDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb4d,WAAA,SAAWlE,cACT,WAAW/a,QAAQ,SAACC,EAASC,GAC4E,GAApGP,EAAEqb,eAAeD,EAAS,CAAC,cAAe,UAAW,UAAW,aAAc,cAAc9N,QAC7F/M,EAAO,IAAIf,EAAQ,EAAG,2GAGxBgQ,EAAKrP,GAAGM,WAAW,sBADR2a,GACqC1a,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb0jB,eAAA,sBACE,WAAW/kB,QAAQ,SAACC,EAASC,GAE3BkP,EAAKtP,GAAGM,WAAW,6BADR,IAC4CC,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb2jB,cAAA,SAAczhB,cACZ,WAAWvD,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIC,EAAS,UAAa5D,EAAE2D,IAAIC,EAAS,uBAC7CrD,EAAO,IAAIf,EAAQ,EAAG,uDAGxBmQ,EAAKxP,GAAGM,WAAW,yBADRmD,GACwClD,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb8c,YAAA,sBACE,WAAWne,QAAQ,SAACC,EAASC,GAE3BsP,EAAK1P,GAAGM,WAAW,kBADR,IACiCC,KAAK,SAAAe,GAC/CnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb+d,eAAA,SAAerE,cACb,WAAW/a,QAAQ,SAACC,EAASC,GACuF,GAA/GP,EAAEqb,eAAeD,EAAS,CAAC,cAAe,cAAe,cAAe,YAAa,kBAAkB9N,QACxG/M,EAAO,IAAIf,EAAQ,EAAG,sHAGxB2Q,EAAKhQ,GAAGM,WAAW,qBADR2a,GACoC1a,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb4jB,eAAA,sBACE,WAAWjlB,QAAQ,SAACC,EAASC,GAE3BoQ,EAAKxQ,GAAGM,WAAW,qBADR,IACoCC,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcb6jB,cAAA,SAAcC,EAAwBC,EAAwB7hB,cAC5D,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAIIsD,EAAO7D,EAAEuL,MAJG,CACdma,eAAgBF,EAChBG,eAAgBF,GAEY7hB,GAC9BsN,EAAK/Q,GAAGM,WAAW,qBAAsBoD,GAAMnD,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbkkB,eAAA,sBACE,WAAWvlB,QAAQ,SAACC,EAASC,GAE3B8Q,EAAKlR,GAAGM,WAAW,yBADR,IACwCC,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbmkB,YAAA,SAAYC,EAAsBC,EAAsBniB,cACtD,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAIIsD,EAAO7D,EAAEuL,MAJG,CACdya,aAAcF,EACdG,aAAcF,GAEcniB,GAC9B4N,EAAKrR,GAAGM,WAAW,mBAAoBoD,GAAMnD,KAAK,SAAAe,GAChDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbwkB,aAAA,sBACE,WAAW7lB,QAAQ,SAACC,EAASC,GAE3BoR,EAAKxR,GAAGM,WAAW,uBADR,IACsCC,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbykB,WAAA,SAAWC,EAAmBC,EAAqBC,cACjD,WAAWjmB,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACT0iB,YAAaH,EACbI,YAAaH,QAES,IAAdC,GACRtmB,EAAEoD,IAAIS,EAAM,cAAeyiB,GAE7BzU,EAAK1R,GAAGM,WAAW,kBAAmBoD,GAAMnD,KAAK,SAAAe,GAC/CnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb+kB,cAAA,SAAcC,cACZ,WAAWrmB,QAAQ,SAACC,EAASC,GAI3BwR,EAAK5R,GAAGM,WAAW,qBAHR,CACTkmB,UAAWD,IAEkChmB,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbklB,YAAA,sBACE,WAAWvmB,QAAQ,SAACC,EAASC,GAE3B0R,EAAK9R,GAAGM,WAAW,sBADR,IACqCC,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAebmlB,uBAAA,SAAuBC,EAAmBC,EAAmBC,EAAiBC,cAC5E,WAAW5mB,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTqjB,UAAWJ,EACXK,UAAWJ,EACXK,QAASJ,QAEuB,IAAxBC,GACRjnB,EAAEoD,IAAIS,EAAM,wBAAyBojB,GAEvC3U,EAAKnS,GAAGM,WAAW,8BAA+BoD,GAAMnD,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb2lB,wBAAA,sBACE,WAAWhnB,QAAQ,SAACC,EAASC,GAE3BmS,EAAKvS,GAAGM,WAAW,kCADR,IACiDC,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb4lB,qBAAA,sBACE,WAAWjnB,QAAQ,SAACC,EAASC,GAE3BwS,EAAK5S,GAAGM,WAAW,+CADR,IAC8DC,KAAK,SAAAe,GAC5EnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb6lB,qBAAA,sBACE,WAAWlnB,QAAQ,SAACC,EAASC,GAE3B0S,EAAK9S,GAAGM,WAAW,+CADR,IAC8DC,KAAK,SAAAe,GAC5EnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb8lB,kBAAA,SAAkB5jB,cAChB,WAAWvD,QAAQ,SAACC,EAASC,GAE3B4S,EAAKhT,GAAGM,WAAW,yBADRmD,GACwClD,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab+lB,qBAAA,SAAqBC,EAA0B9jB,cAC7C,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAHG,CACdoc,iBAAkBD,GAEU9jB,GAC9ByP,EAAKlT,GAAGM,WAAW,4BAA6BoD,GAAMnD,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbkmB,mBAAA,sBACE,WAAWvnB,QAAQ,SAACC,EAASC,GAE3BqT,EAAKzT,GAAGM,WAAW,6BADR,IAC4CC,KAAK,SAAAe,GAC1DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabmmB,UAAA,SAAUjoB,EAAcgE,cACtB,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAAM3H,EAHH,CACdkkB,KAAMloB,IAGRmU,EAAK5T,GAAGM,WAAW,iBAAkBoD,GAAMnD,KAAK,SAAAe,GAC9CnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbqmB,UAAA,sBACE,WAAW1nB,QAAQ,SAACC,EAASC,GAE3BuW,EAAK3W,GAAGM,WAAW,qBADR,IACoCC,KAAK,SAAAe,GAClDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabsmB,cAAA,SAAcC,EAAkBrkB,cAC9B,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAAM3H,EAHH,CACdskB,SAAUD,IAGZhR,EAAK9W,GAAGM,WAAW,iBAAkBoD,GAAMnD,KAAK,SAAAe,GAC9CnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWbymB,eAAA,sBACE,WAAW9nB,QAAQ,SAACC,EAASC,GAE3B4W,EAAKhX,GAAGM,WAAW,yBADR,IACwCC,KAAK,SAAAe,GACtDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb0mB,oBAAA,SAAoBxkB,cAClB,WAAWvD,QAAQ,SAACC,EAASC,GAE3BqgB,EAAKzgB,GAAGM,WAAW,2BADRmD,GAC0ClD,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAab2mB,uBAAA,SAAuBC,EAAwB1kB,cAC7C,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAAM3H,EAHH,CACd2kB,eAAgBD,IAGlBxH,EAAK3gB,GAAGM,WAAW,2BAA4BoD,GAAMnD,KAAK,SAAAe,GACxDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAWb8mB,qBAAA,sBACE,WAAWnoB,QAAQ,SAACC,EAASC,GAE3B2gB,EAAK/gB,GAAGM,WAAW,+BADR,IAC8CC,KAAK,SAAAe,GAC5DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb+mB,uBAAA,SAAuB7kB,cACrB,WAAWvD,QAAQ,SAACC,EAASC,GAE3BmoB,EAAKvoB,GAAGM,WAAW,8BADRmD,GAC6ClD,KAAK,SAAAe,GAC3DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZinB,0BAAA,SAA0BC,cACzB,WAAWvoB,QAAQ,SAACC,EAASC,GAI3BsoB,EAAK1oB,GAAGM,WAAW,iCAHR,CACTqoB,sBAAuBF,IAEkCloB,KAAK,SAAAe,GAC9DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYZqnB,kCAAA,SAAkC1H,cACjC,WAAWhhB,QAAQ,SAACC,EAASC,GAI3ByoB,EAAK7oB,GAAGM,WAAW,yCAHR,CACT+gB,OAAQH,IAEyD3gB,KAAK,SAAAe,GACtEnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAeZunB,0BAAA,SAA0BL,EAA+BvH,EAAgB6H,EAAsB1M,cAC9F,WAAWnc,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAO,CACTilB,sBAAuBF,EACvBpH,OAAQH,EACR8H,aAAcD,QAEO,IAAb1M,GACRxc,EAAEoD,IAAIS,EAAM,aAAc2Y,GAE5B4M,EAAKjpB,GAAGM,WAAW,iCAAkCoD,GAAMnD,KAAK,SAAAe,GAC9DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb2nB,uBAAA,sBACE,WAAWhpB,QAAQ,SAACC,EAASC,GAE3B+oB,EAAKnpB,GAAGM,WAAW,kCADR,IACiDC,KAAK,SAAAe,GAC/DnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aC72BT1B,EAAIC,QAAQ,UAQL6J,aA+BX,WAAY3J,QA3BZA,eAMA0D,iBAIA0lB,qBAIAC,sBAIAtc,oBAIAQ,aAME7N,KAAKM,GAAKA,EACVN,KAAKgE,KAAO,IAAI8V,EAASxZ,GACzBN,KAAK0pB,SAAW,IAAIpI,EAAahhB,GACjCN,KAAK2pB,UAAY,IAAIlN,EAAcnc,GACnCN,KAAKqN,QAAU,IAAIH,EAAS5M,EAAI,YAChCN,KAAK6N,MAAQ,IAAIkW,EAAUzjB,GArC/B,2BAiDEwN,OAAA,SAAO2W,EAAoBW,EAAmBrhB,cAC5C,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAIIsD,EAAO7D,EAAEuL,MAJG,CACdgZ,WAAYD,EACZY,UAAWD,GAEiBrhB,GAC9BpD,EAAKL,GAAGM,WAAW,kBAAmBoD,GAAMnD,KAAK,SAAAe,GAC/CnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAcb+nB,YAAA,SAAYrP,EAAmBsP,EAA0B9lB,cACvD,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAIIsD,EAAO7D,EAAEuL,MAJG,CACd8O,UAAWD,EACXuP,iBAAkBD,GAEU9lB,GAC9BtC,EAAKnB,GAAGM,WAAW,uBAAwBoD,GAAMnD,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAebkoB,kBAAA,SAAkBtF,EAAoBW,EAAmB/e,EAAmBtC,cAC1E,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAKIsD,EAAO7D,EAAEuL,MALG,CACdgZ,WAAYD,EACZY,UAAWD,EACX4E,iBAAkB3jB,GAEUtC,GAC9B3B,EAAK9B,GAAGM,WAAW,8CAA+CoD,GAAMnD,KAAK,SAAAe,GAC3EnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAabkH,OAAA,SAAOiR,EAAoBjW,cACzB,WAAWvD,QAAQ,SAACC,EAASC,GAC3B,IAGIsD,EAAO7D,EAAEuL,MAHG,CACdyO,WAAYH,GAEgBjW,GAC9BrB,EAAKpC,GAAGM,WAAW,wBAAyBoD,GAAMnD,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYb+M,SAAA,SAASqb,cACP,WAAWzpB,QAAQ,SAACC,EAASC,GAI3BmC,EAAKvC,GAAGM,WAAW,uBAHR,CACTspB,YAAaD,IAEkCppB,KAAK,SAAAe,GACpDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAYbwG,OAAA,SAAOkT,cACL,WAAW/a,QAAQ,SAACC,EAASC,GAE3BuC,EAAK3C,GAAGM,WAAW,wBADR2a,GACuC1a,KAAK,SAAAe,GACrDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,UAgBbmM,KAAA,SAAKgM,EAAoB/L,EAAWC,EAAWC,EAA6DC,cAC1G,WAAW5N,QAAQ,SAACC,EAASC,GACvBP,EAAE2D,IAAIqK,EAAY,SAAYhO,EAAE2D,IAAIqK,EAAY,QAElDzN,EAAO,IAAIf,EAAQ,EAAG,mEAAoE,CAACwO,WAAcA,KAE3G,IAAI+H,EAAY,CACdiE,WAAYH,EACZzL,EAAGN,EACHO,EAAGN,QAES,IAAJE,GACRjO,EAAEoD,IAAI2S,EAAW,IAAK9H,GAExB,IAAIpK,EAAO7D,EAAEuL,MAAMwK,EAAW/H,GAC9BzH,EAAKpG,GAAGM,WAAW,sBAAuBoD,GAAMnD,KAAK,SAAAe,GACnDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,iBAYb,SAAOmY,cACL,WAAWxZ,QAAQ,SAACC,EAASC,GAI3BoG,EAAKxG,GAAGM,WAAW,4BAHR,CACTuZ,WAAYH,IAEwCnZ,KAAK,SAAAe,GACzDnB,EAAQmB,EAAEb,eACH,SAAAc,GACPnB,EAAOmB,aC5NTsoB,EAAQ/pB,QAAQ,SAChBgqB,EAAchqB,QAAQ,eACtBD,EAAIC,QAAQ,UAuClBiqB,OAAOC,mBAwDL,WAAYC,EAAmBC,EAAmBC,QApDlDF,qBAIAG,kBAIAC,kBAIAC,qBAIAC,qBAIAC,wBAIAN,qBAMAO,kBACAC,oBACAC,0BACAC,0BACAC,gBACA9iB,mBACAjC,oBACAE,uBACA8kB,uCAIAC,uBACAC,qBACAC,uBASEvrB,KAAKuqB,SAAW,kBAChBvqB,KAAKqrB,WAAa,CAACG,iBAAoB,EAAGC,YAAe,EAAGC,SAAY,EAAGC,aAAgB,EAAGlkB,eAAkB,EAAGmkB,aAAgB,GACnI5rB,KAAKsrB,SAAW,CAACO,eAAkB,EAAGC,gBAAmB,EAAGC,gBAAmB,EAAGC,mBAAsB,EAAGC,mBAAsB,EAAGC,cAAiB,EAAGC,cAAiB,EAAGC,kBAAqB,EAAGC,YAAe,EAAGC,QAAW,EAAGC,KAAQ,GAAIC,eAAkB,GAAIC,UAAa,GAAIC,UAAa,GAAIC,IAAO,GAAIC,MAAS,GAAIC,YAAe,GAAIC,cAAiB,GAAIC,cAAiB,GAAIC,UAAa,GAAIC,qBAAwB,GAAIC,SAAY,GAAIC,YAAe,GAAIC,kBAAqB,GAAIC,sBAAyB,GAAIC,mBAAsB,GAAIC,iBAAoB,GAAIC,SAAY,GAAIC,IAAO,GAAIC,mBAAsB,GAAIC,yBAA4B,IACtoB3tB,KAAKwqB,SAAW,CACdpS,KAAM,YACNwV,QAAQ,EACRC,QAAS,KACTC,eAAgB,MAElB9tB,KAAKurB,gBAAkB,CAAC,UAAW,gBAAiB,gBAAiB,MAAO,SAAU,UAAW,OAAQ,uBACpF,IAAXhB,GACRvqB,KAAK+tB,UAAUxD,EAAUC,EAAUC,GApEzC,2BAgFEsD,UAAA,SAAUxD,EAAmBC,EAAmBC,cAe9C,GAdsCzqB,KAAKuqB,cAApB,IAAbA,EAA4CA,EAAkC,kBACxFvqB,KAAKwqB,SAAW,CACdpS,KAAM,YACNwV,QAAQ,EACRC,QAAS,KACTC,eAAgB,WAGG,IAAXtD,GACRrqB,EAAEyE,QAAQ4lB,EAAU,SAAC7hB,EAAEC,QACQ,IAAnBnH,EAAK+oB,SAAS5hB,KAAmBnH,EAAK+oB,SAAS5hB,GAAKD,UAIjD,IAAP8hB,EACRzqB,KAAKgrB,QAAU,IAAI3qB,EAAQL,MAC3BA,KAAKirB,cAAgB,IAAI9nB,EAAcnD,MACvCA,KAAKkrB,cAAgB,IAAIjkB,EAAajH,MACtCA,KAAKoG,QAAU,IAAIoD,EAAQxJ,MAC3BA,KAAKsG,WAAa,IAAIoD,EAAW1J,MACjCA,KAAKorB,UAAY,IAAI3hB,EAAUzJ,MAC/BA,UAAY,IAAIiK,EAAKjK,UAChB,CACL,IAAIW,EAAQX,KACZG,EAAEyE,QAAQ5E,KAAKurB,gBAAiB,SAAS5iB,GACvC,OAAOA,GACL,IAAK,UACHhI,EAAMqqB,QAAU,IAAI3qB,EAAQM,GAC9B,MACA,IAAK,gBACHA,EAAMsqB,cAAgB,IAAI9nB,EAAcxC,GAC1C,MACA,IAAK,gBACHA,EAAMuqB,cAAgB,IAAIjkB,EAAatG,GACzC,MACA,IAAK,MACHA,EAAMwqB,IAAM,IAAI3lB,EAAI7E,GACtB,MACA,IAAK,SACHA,EAAM0H,OAAS,IAAIgB,EAAO1I,GAC5B,MACA,IAAK,UACHA,EAAMyF,QAAU,IAAIoD,EAAQ7I,GAC9B,MACA,IAAK,OACHA,OAAa,IAAIsJ,EAAKtJ,GACxB,MACA,IAAK,aACHA,EAAM2F,WAAa,IAAIoD,EAAW/I,GACpC,MACA,IAAK,YACHA,EAAMyqB,UAAY,IAAI3hB,EAAU9I,UAkB1CC,WAAA,SAAWwX,EAAMpU,cACf,WAAWxD,QAAQ,SAACC,EAASC,GAC3B,IAAIstB,EAAK,GACTA,EAAGhqB,KAAO/D,KAAKC,UAAU8D,QAEC,IAAhB5B,EAAKsoB,OAAwC,IAAdtoB,EAAKsoB,OAAqB,sDAANtS,GAAoE,uCAANA,IACzH4V,EAAGC,MAAQ7rB,EAAKsoB,OAMlB,IAAI3mB,EAAU,CACZmqB,SAAU9rB,EAAKmoB,SACf4D,KAAM,IACN/V,KAAM,IAAMhW,EAAKooB,SAASpS,KAAO,aAAeA,EAChDgW,OAAQ,OACRC,QAAS,CACN,eAAgB,oCAChB,iBAAkBC,OAAOC,WAAWnE,EAAYlqB,UAAU8tB,KAE7DQ,QAAS,KAGPpoB,EAAU+jB,EAAM/jB,QAAQrC,EAAS,SAACjD,GAClC,IAAI2tB,EAAI,GACR3tB,EAAS4tB,GAAG,QAAQ,SAAS7sB,GACzBU,QAAQC,IAAIX,EAAG,mBACfnB,EAAO,IAAIf,EAAQ,GAAI,iBAAkBkC,MAG7Cf,EAAS4tB,GAAG,OAAO,SAASC,GACxBF,GAAKE,IAGT7tB,EAAS4tB,GAAG,MAAM,WAChB,IAEE,GAA8C,OAD/BzuB,KAAKC,UAAUuuB,GAAO,iBACzBG,MAAM,2BAAkC,CAClD,IAAIC,EAAI5uB,KAAK6uB,MAAML,QAIH,IAANI,EAERnuB,EAAO,IAAIf,EAAQ,GAAI,kDACF,IAANkvB,QAAwC,IAAZA,EAAI9tB,MAE/CN,EAAQouB,GAERnuB,EAAO,IAAIf,EAAQ,EAAG,iBAAkB,CAACoE,QAASA,EAASgrB,WAAYf,EAAIgB,oBAAqBH,UAGlGnuB,EAAO,IAAIf,EAAQ,EAAG,+CAAgD,CAACmB,SAAU2tB,KAEnF,MAAO5sB,GACHA,aAAaotB,aACf1sB,QAAQC,IAAI,2BACZ9B,EAAO,IAAIf,EAAQ,EAAG,sBAAuB,CAACorB,MAAOlpB,OAErDU,QAAQC,IAAI,2BACZ9B,EAAO,IAAIf,EAAQ,EAAG,8BAKhCyG,EAAQ8oB,MAAM9E,EAAYlqB,UAAU8tB,IACpC5nB,EAAQ+oB,WAUZC,aAAA,SAAazE,EAAeC,cAC1B,WAAWpqB,QAAQ,SAACC,EAASC,GAC3B,IACI0X,EAAO,sCACS,mBAAjB1V,EAAK6nB,WACNnS,EAAO,sDAET1V,EAAK9B,WAAWwX,EALL,CAAEiX,UAAU1E,EAAO2E,SAAS1E,IAKX/pB,KAAK,SAACC,GAC7BA,EAASmH,OAAO,EAEjBvH,EAAO,IAAIf,EAAQ,GAAImB,EAAS2O,eACA,IAAjB3O,EAASC,YAAqD,IAAvBD,EAASC,MAAM2pB,OACrEhoB,EAAKioB,MAAQA,EACbjoB,EAAKkoB,SAAWA,EAChBloB,EAAKgoB,MAAQ5pB,EAASC,MAAM2pB,MAC5BjqB,GAAQ,IAGRC,EAAO,IAAIf,EAAQ,GAAI,0BAElB,SAAAorB,GACPrqB,EAAOqqB,UAYbwE,yBAAA,SAAyB5E,EAAeE,EAAkBC,EAAqB+C,cAQ7E,OAPA7tB,KAAK2qB,MAAQA,EACb3qB,KAAK6qB,SAAWA,EAChB7qB,KAAK8qB,YAAcA,OACC,IAAV+C,IACRA,EAAU,aAGDrtB,QAAQ,SAACC,EAASC,GAI3BmC,EAAKjC,WAHM,8CACA,CAAEyuB,UAAUxsB,EAAK8nB,MAAO6E,SAAU3sB,EAAKgoB,SAAU4E,YAAa5sB,EAAKioB,YAAa4E,QAAS7B,IAExEhtB,KAAK,SAACC,QACH,IAAlBA,EAASmH,QAAwBnH,EAASmH,OAAO,SAG1B,IAAjBnH,EAASC,YAAqD,IAAvBD,EAASC,MAAM2pB,OACrE7nB,EAAK6nB,MAAQ5pB,EAASC,MAAM2pB,MAC5BjqB,GAAQ,IAGRA,GAAQ,YAEH,SAAAsqB,GACP,MAAMA,SAWZ4E,cAAA,SAAc1B,EAAc1qB,cAC1B,WAAW/C,QAAQ,SAACC,EAASC,GAM3BuC,EAAKrC,WADM,kCADA,CAAE8pB,MAAOuD,IAEQptB,KAAK,SAACC,GAC7BA,EAASmH,OAAO,EAEjBxH,GAAQ,IAEL8C,IACDN,EAAKynB,MAAQuD,GAEfxtB,EAAQK,EAASC,gBAEZ,SAAAgqB,GACP,MAAMA,SAUZ6E,SAAA,SAAS3B,GACP,MAAU,IAAPA,GAAoB,MAAPA,IACdjuB,KAAK0qB,MAAQuD,SAYjB4B,SAAA,WACE,MAAe,IAAZ7vB,KAAK0qB,OAAyB,MAAZ1qB,KAAK0qB,YAGZA,SAShBoF,YAAA,SAAYC,cACV,WAAWvvB,QAAQ,SAACC,EAASC,GAG3BgG,EAAK9F,WADM,2BADA,CAAEovB,WAAYD,IAEGlvB,KAAK,SAACC,GAG9BL,SAF2B,IAAlBK,EAASmH,QAAwBnH,EAASmH,OAAO,YAMrD,SAAA8iB,GACP,MAAMA,SAWZkF,wBAAA,sBACE,WAAWzvB,QAAQ,SAACC,EAASC,GAE3BoG,EAAKlG,WADM,4CACW,IAAIC,KAAK,SAACC,GAC9BL,EAAQK,EAASC,cASvBmvB,mBAAA,sBACE,WAAW1vB,QAAQ,SAACC,EAASC,GAE3BsG,EAAKpG,WADM,iCACW,IAAIC,KAAK,SAACC,GAC9BL,EAAQK,EAASC,cASvBovB,mBAAA,sBACE,WAAW3vB,QAAQ,SAACC,EAASC,GAE3BgM,EAAK9L,WADM,kCACW,IAAIC,KAAK,SAACC,GAC9BL,EAAQK,EAASC,cAYvBqvB,iBAAA,SAAiBC,EAAcC,cAC7B,WAAW9vB,QAAQ,SAACC,EAASC,GAM3BkM,EAAKhM,WADM,mCAJA,CACT2vB,KAAQF,EACRG,QAAWF,IAGezvB,KAAK,SAACC,GAChCL,EAAQK,EAASC,cAavB0vB,uBAAA,SAAuBC,cACrB,WAAWlwB,QAAQ,SAACC,EAASC,QACY,IAA7BqM,EAAKse,WAAWqF,IACxBhwB,EAAO,IAAIf,EAAQ,EAAG,qDAAsD,CAAC4B,SAAYmvB,EAAWvuB,UAAa4K,EAAKse,cAMxHte,EAAKnM,WADM,+CAHA,CACT+vB,UAAa5jB,EAAKse,WAAWqF,KAGH7vB,KAAK,SAACC,GAChCL,EAAQK,EAASC,cAavB6vB,wBAAA,SAAwBvF,cACtB,WAAW7qB,QAAQ,SAACC,EAASC,GACzB,IAAIsD,EAAsC,CACxC6sB,WAAY,IAEhB1wB,EAAEyE,QAAQymB,EAAY,SAAC1iB,QACU,IAArBgH,EAAK0b,WAAW1iB,GACxBjI,EAAO,IAAIf,EAAQ,EAAG,qDAAsD,CAAC4B,SAAYoH,EAAGxG,UAAawN,EAAK0b,cAE9GrnB,EAAK6sB,WAAW9rB,KAAK4K,EAAK0b,WAAW1iB,MAIzCgH,EAAK/O,WADM,gDACWoD,GAAMnD,KAAK,SAACC,GAChC,IAAIgwB,EAAc,GAEdC,EAAiB5wB,EAAE6wB,OAAOrhB,EAAK0b,YACnClrB,EAAEyE,QAAQ9D,EAAU,SAACmwB,EAASC,QACQ,IAA1BH,EAAeE,GACvBvwB,EAAO,IAAIf,EAAQ,EAAG,wEAA0E,CAACwxB,sBAAyBF,EAAS9uB,UAAawN,EAAK0b,cAGrJyF,EAAIC,EAAeE,IAAYC,IAGnCzwB,EAAQqwB,UAadM,qBAAA,SAAqBC,cACnB,WAAW7wB,QAAQ,SAACC,EAASC,QACQ,IAAzBkP,EAAK0b,SAAS+F,IACtB3wB,EAAO,IAAIf,EAAQ,EAAG,mDAAoD,CAAC4B,SAAY8vB,EAASlvB,UAAayN,EAAK0b,YAMpH1b,EAAKhP,WADM,6CAHA,CACT0wB,QAAW1hB,EAAK0b,SAAS+F,KAGCxwB,KAAK,SAACC,GAChCL,EAAQK,EAASC,cAavBwwB,sBAAA,SAAsBjG,cACpB,WAAW9qB,QAAQ,SAACC,EAASC,GAC3B,IAAIsD,EAAoC,CACtCwtB,SAAU,IAEZrxB,EAAEyE,QAAQ0mB,EAAU,SAAC3iB,QACU,IAAnBmH,EAAKwb,SAAS3iB,GACtBjI,EAAO,IAAIf,EAAQ,EAAG,mDAAoD,CAAC4B,SAAYoH,EAAGxG,UAAa2N,EAAKwb,YAE5GtnB,EAAKwtB,SAASzsB,KAAK+K,EAAKwb,SAAS3iB,MAIrCmH,EAAKlP,WADM,8CACWoD,GAAMnD,KAAK,SAACC,GAChC,IAAIgwB,EAAc,GAEdW,EAAetxB,EAAE6wB,OAAOlhB,EAAKwb,UACjCnrB,EAAEyE,QAAQ9D,EAASC,MAAO,SAAC2wB,EAAUR,QACA,IAAzBO,EAAaC,GACrBhxB,EAAO,IAAIf,EAAQ,EAAG,sEAAwE,CAAC4B,SAAYmwB,EAAUvvB,UAAasvB,KAGlIX,EAAIW,EAAaC,IAAaR,IAGlCzwB,EAAQqwB,UAgBda,sBAAA,SAAsBC,cACpB,WAAWpxB,QAAQ,SAACC,EAASC,GAK3BsP,EAAKpP,WAJM,8CAC6B,CACtCixB,SAAUD,IAEgB/wB,KAAK,SAACC,GAChCL,EAAQK,EAASC,cAYvB+wB,qBAAA,SAAqBnH,EAAgBC,cACnC,WAAWpqB,QAAQ,SAACC,EAASC,GAM3B4P,EAAK1P,WALM,8CACA,CACTyuB,eAA2B,IAAR1E,EAAuBA,EAAOra,EAAKqa,MACtD2E,cAA8B,IAAX1E,EAA0BA,EAAWta,EAAKsa,WAEnC/pB,KAAK,SAACC,GAChCL,EAAQK,EAASC,cAUvBgxB,QAAA,sBACE,WAAWvxB,QAAQ,SAACC,EAASC,GAG3BoQ,EAAKlQ,WAFM,iCACA,IACiBC,KAAK,SAACC,GAChCL,EAAQK,EAASC,cAWvB4F,KAAA,SAAKgkB,cACH,WAAWnqB,QAAQ,SAACC,EAASC,GAG3B2Q,EAAKzQ,WAFM,8BACA,CAAEyuB,eAA2B,IAAR1E,EAAuBA,EAAOtZ,EAAKsZ,QACvC9pB,KAAK,SAACC,GAChCL,EAAQK,EAASC,cAUvBixB,QAAA,sBACE,WAAWxxB,QAAQ,SAACC,EAASC,GAG3B8Q,EAAK5Q,WAFM,iCACA,IACiBC,KAAK,SAACC,GAChCL,EAAQK,EAASC"}