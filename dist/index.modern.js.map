{"version":3,"file":"index.modern.js","sources":["../src/error.ts","../src/general.ts","../src/activity_link.ts","../src/gis.ts","../src/message_queue.ts","../src/search.ts","../src/cityworks.ts"],"sourcesContent":["interface CWErrorInt {\n  name: string;\n  code: number;\n  message: string;\n  info?: string;\n}\n\n/**\n * CWError implements a custom error class for this codebase with additional information\n *\n * `{name: string, code:number, info: object}`\n *\n */\nexport class CWError implements CWErrorInt {\n  /**\n   * Just statically set to \"Cityworks Exception\" for now\n   */\n  name: string;\n  /**\n   * Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   */\n  code: number;\n  /**\n   * The error message\n   */\n  message: string;\n  /**\n   * Object stuffed with any other information one wishes to include in the thrown error\n   */\n  info?: string;\n\n  /**\n   * CWError implements a custom error class for this codebase with additional information\n   *\n   * @param {number} code - Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   * @param {string} message - The error message\n   * @param {Object} info - Object stuffed with any other information one wishes to include in the thrown error\n   * @return {Object} Returns instance of CWError object\n   */\n  constructor(code:number, message:string, info?:object) {\n    this.name = \"Cityworks Exception\";\n    this.code = code;\n    this.message = message;\n    if(typeof(info) !== 'undefined') {\n      this.info = JSON.stringify(info);\n    }\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n/**\n * A plugin that contains \"general\" methods for a Cityworks install\n */\nexport class General {\n  cw: any;\n\n  constructor(cw) {\n    this.cw = cw;\n  }\n\n  /**\n   * Get notifications for currently authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of available notifications\n   */\n  notifications() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('General/ActivityNotification/User', {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n\n  /**\n   * Find out if the current user is watching a particular activity (case, task, null [as a string])\n   *\n   * @param {string} activityType - which activity type the following ID will be for.\n   * @param {number} activityId - activity Case or CaseTask (task instance) ID to check\n   * @return {Object} Returns Promise object that represents a boolean indicating the currently authenticated user is watching the provided activity\n   */\n  amIWatching(activityType, activityId: number) {\n    return new Promise((resolve, reject) => {\n      let aType = {'null': 0, 'case': 1, 'task': 2}\n      if(typeof(aType[activityType])=='undefined') {\n        // reject with error\n        reject(new CWError(1, \"Activity type provided does not exist.\", {provided: activityType, potential_activities: aType}));\n      } else {\n        let data = {\"ActivityType\": aType[activityType], \"ActivityId\": activityId}\n        this.cw.runRequest('General/ActivityNotification/UserWatching', data).then(r => {\n          // console.log(r, 'response');\n          resolve(r.Value);\n        }).catch(e => {\n          reject(new CWError(2, \"Unknown error.\"));\n        });\n      }\n    });\n  }\n\n  /**\n   * Do a \"quick\" search for any string (an ID is best)\n   *\n   * @param {string} text - text to search the system for\n   * @return {Object} Returns Promise object that represents a collection of the currently authenticated user's notifications\n   */\n  quickSearch(text: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"QuickSearchText\": text,\n      }\n      this.cw.runRequest('General/QuickSearch/QuickSearch', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  /**\n   * Get CwMetatData by Type and CwSid\n   *\n   * @param {Array<number>} Ids\n   * @param {string} TableName - INSPECTION, REQUEST, WORKORDER require View permission on the activities\n   * @return {Object} Returns Promise object that represents a\n   */\n  getActivityMetadataByIds(ids: Array<number>, table: string) {\n    return new Promise((resolve, reject) => {\n      let tables = [\"INSPECTION\", \"REQUEST\", \"WORKORDER\"];\n      if(_.indexOf(tables, table)==-1) {\n        reject(new CWError(2, 'TableName provided does not exist or is mispelled.', {'provided': table, 'available':tables}));\n      }\n      let data = {\n        \"Ids\": ids,\n        \"TableName\": table\n      }\n      this.cw.runRequest('General/CwMetaData/ByTableNameSids', data).then(r => {\n        console.log(r);\n        resolve(r.Value);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  /**\n   * Get cost summary for work order entities\n   *\n   * @param {Array<number>} ObjectIds\n   * @return {Object} Returns Promise object that represents a\n   */\n  getWOEntityCostSummary(object_ids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"ObjectIds\": object_ids\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntity', data).then(r => {\n        console.log(r);\n        resolve(r.Value);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  /**\n   * Get cost summary for work order entities selected through a search definition\n   *\n   * @param {number} SearchId - Search Definition Id\n   * @return {Object} Returns Promise object that represents a\n   */\n  searchWOEntityCostSummary(search_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"SearchId\": search_id\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntitySearch', data).then(r => {\n        console.log(r);\n        resolve(r.Value);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map';\nconst _ = require('lodash')\n\ninterface ActivityLink {\n  linkTypes: ReversibleMap<string, number>;\n  activityTypes: ReversibleMap<string, number>;\n  cw: any;\n}\n\n/**\n * ActivityLinks implements the activity link functions\n *\n */\nexport class ActivityLinks implements ActivityLink {\n  /**\n   * Activity types to map string to number for internal use. Activity types available are:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   */\n  activityTypes: ReversibleMap<string, number>;\n  /**\n   * Link types to map string to number for internal use. Link types available are:\n   *\n   *      \"null\", \"parent\", \"related\"\n   */\n  linkTypes: ReversibleMap<string, number>;\n  /**\n   * Holds the recursively-linked Cityworks instance object\n   */\n  cw: any;\n\n  /**\n   * Construct activity link object for Activity Link function\n   *\n   * @param {object} cw - Feed in the cityworks object instance so that this instance has access to the runRequest from the recursively-linked Cityworks instance\n   * @return {Object} Returns object that is this module\n   */\n  constructor(cw) {\n    this.cw = cw;\n    this.activityTypes = new ReversibleMap<string, number>();\n    this.activityTypes.set(\"null\", 0);\n    this.activityTypes.set(\"case\", 1);\n    this.activityTypes.set(\"inspection\", 2);\n    this.activityTypes.set(\"request\", 3);\n    this.activityTypes.set(\"workorder\", 4);\n    this.activityTypes.set(\"wipcase\", 5);\n\n    this.linkTypes = new ReversibleMap<string, number>();\n    this.linkTypes.set(\"null\", 0);\n    this.linkTypes.set(\"parent\", 1);\n    this.linkTypes.set(\"related\", 2);\n  }\n\n  /**\n   * Create a new activity link between two items.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  add(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(3, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Add';\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get the links for a particular node type by ID.\n   *\n   * @param {string} type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {Array<number>} sids - Array of numeric (S)IDs you wish to get of the specified type\n   * @return {Object} Returns Promise object that represents a collection\n   */\n  get(type: string, sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(type)) {\n        reject(new CWError(4, 'Activity type not found.', {'provided': type, 'options':this.activityTypes}))\n      }\n      let data = {\n        ActivityType: this.activityTypes.get(type),\n        ActivitySids: sids\n      }\n      let _this = this\n      let path = 'General/ActivityLink/ByActivitySids'\n      this.cw.runRequest(path, data).then((response: any) => {\n        let return_data = new Array();\n        _.forEach(response.Value, (link, key) => {\n          link.DestType = _this.activityTypes.get(link.DestType);\n          link.SourceType = _this.activityTypes.get(link.SourceType);\n          link.LinkType = _this.linkTypes.get(link.LinkType);\n          return_data.push(link);\n        })\n        resolve(return_data)\n      });\n    });\n  }\n\n  /**\n   * Clone a current activity link.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to clone a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to clone a link between SID as destination and a particular source\n   * @return {Object} Returns Promise object that represents a\n   */\n  clone(source_type: string, source_sid: number, destination_type: string, destination_sid: number) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      let data = {\n        SourceActivityType: this.activityTypes.get(source_type),\n        SourceActivitySid: source_sid,\n        DestinationActivityType: this.activityTypes.get(destination_type),\n        DestinationActivitySid: destination_sid\n      }\n      let path = 'General/ActivityLink/CloneByActivitySid';\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Delete an activity link by ID\n   *\n   * @param {number} activity_link_id - The ID of the activity link one wishes to delete\n   * @return {Object} Returns Promise object that represents a\n   */\n  delete(activity_link_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        ActivityLinkId: activity_link_id\n      }\n      let path = 'General/ActivityLink/Delete';\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Remove a link by specifying everything.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  remove(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(1, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Remove';\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Gis {\n  cw: any;\n\n  constructor(cw) {\n    this.cw = cw;\n  }\n\n  /**\n   * Get gis service configuration for user, group, domain, or service id\n   *\n   * @param {string} [whichType] - domain, group, mapservice, or user\n   * @param {number} [whichId] - domain, group, mapservice, or user Id\n   * @param {number} [getGisData] - If true, check for feature server JSON data, default is true\n   * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  getConfig(whichType, whichId, getGisData: boolean = true, context: Array<string> = []) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      whichType = whichType.toLowerCase();\n      let data: {DomainId?: any, GroupId?: any, MapServiceId?: any, UserId?: any, GetGisData: boolean, Security: Array<string>}\n      switch(whichType) {\n        case 'domain':\n          data = {DomainId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'group':\n          data = {GroupId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'mapservice':\n          data = {MapServiceId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'user':\n          data = {UserId:whichId, GetGisData: getGisData, Security: context}\n          break;\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n    * Get domain gis services\n    *\n    * @param {number} domainId - The mobile map cache Id to download\n    * @return {Object} Returns Promise object that represents an Object with the domain's default GIS services\n    */\n  domain(domainId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      let data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Download mobile map cache\n     *\n     * @param {number} cacheId - The mobile map cache Id to download\n     * @return {Object} Returns Promise object that represents a streaming download (?)\n     */\n  downloadMobile(cacheId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/DownloadMobileMapCache';\n      let data = {\n        MobileMapCacheId: cacheId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get initial extent for user\n   *\n   * @return {Object} Returns Promise object that represents ... (?)\n   */\n  initialExtent() {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InitialExtent';\n      let data = {};\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get service request gis services\n   *\n   * @param {number} requestId - The work order to check against.\n   * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n   * @return {Object} Returns Promise object that represents an Object with the specified request's entit(y|ies)\n   */\n  request(requestId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/ServiceRequestConfiguration';\n      let data = {\n        RequestId: requestId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get inspection gis services\n     *\n     * @param {number} inspectionId - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified inspection's entity\n     */\n  inspection(inspectionId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InspectionConfiguration';\n      let data = {\n        InspectionId: inspectionId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get workorder gis services\n     *\n     * @param {number} workOrderSid - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified work order's entit(y|ies)\n     */\n  workOrder(workOrderSid, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/WorkOrderConfiguration';\n      let data = {\n        WorkOrderSid: workOrderSid,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get service request gis services\n     *\n     * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n     * @param {boolean} [allDomains] services assigned to any domain the user belongs to, default is true\n     * @param {boolean} [allGroups] services assigned to any groups the user belongs to regardless of domain, default is true\n     * @param {boolean} [getGisData] If true, check for feature server JSON data, default is true\n     * @return {Object} Returns Promise object that represents an Object with the user's GIS services\n     */\n  user(context: Array<string> = [], allDomains: boolean = true, allGroups: boolean = true, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/User';\n      let data = {\n        AllDomains: allDomains,\n        AllGroups: allGroups,\n        GetGisData: getGisData,\n        Security: context\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n\n  /**\n     * Get currently selected entities from the Cityworks install's session for your user\n     * @return {Object} Returns Promise object that represents an Object with the currently-selected entities\n     */\n  selectedEntities() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/SelectedEntities';\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get Geocode server info by ServerId\n   *\n   * @param {number} ServiceId\n   * @return {Object} Returns Promise object that represents an object describing the provided Geocoder service configuration\n   */\n   // gis/GeoCode/GeocodeServer\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class MessageQueue {\n  cw: any;\n  status: Object;\n  hook_types: Object;\n\n  /**\n   * Construct activity link object for Message Queue function\n   *\n   * @param {object} cw - Feed in the cityworks object instance so that this instance has access to the runRequest from the recursively-linked Cityworks instance\n   * @return {Object} Returns object that is this module\n   */\n  constructor(cw) {\n    this.cw = cw;\n    this.status = {\n      Pending: 0,\n      Processing: 1,\n      Complete: 2,\n      Failed: 3\n    }\n    this.hook_types = {\n      Unknown: 0,\n      ActivityUpdate: 1,\n      Email: 2,\n      WebHook: 3\n    }\n  }\n\n  /**\n   * Process Webhook MessageQueue records by MessageQueueId\n   *\n   * @param {Array<number>} [ids] - List of MessageQueueId values\n   * @param {boolean} [delete_successful] - automatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  processMessages(ids: Array<number>, delete_successful: boolean = false) {\n    return new Promise((resolve, reject) => {\n      let data = { Ids: ids, Delete: delete_successful};\n      let path = 'General/WebHookEvent/ProcessMessages';\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      });\n    });\n  }\n\n  /**\n   * Get Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status -\n   * @param {number} [maxcount] - Maximum number returned. Defaults to 15\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  get(ids: Array<number>, status: string, maxcount: number = 15) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(1, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}));\n      }\n      let data = {\n        \"Ids\": ids,\n        \"MaxCount\": typeof(maxcount)!='undefined' ? maxcount : 15,\n        \"Status\": this.status[status]\n      };\n      let path = 'General/MessageQueue/ByIds';\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      });\n    });\n  }\n\n  /**\n   * Delete Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status - automatically delete messages that complete with successful execution, default is false\n   * @param {number} [hours_to_keep] - utomatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  delete(ids: Array<number>, status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}));\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      };\n      let path = 'General/MessageQueue/Delete';\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      });\n    });\n  }\n\n  // PreferencesList<GlobalPreference>\n  // Base response type: CoreResponseBase\n  // Get a list of message queue preferences\n  // This method has no parameters\n  preferences() {\n    return new Promise((resolve, reject) => {\n      let data = {};\n      let path = 'General/MessageQueue/Preferences';\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      });\n    });\n  }\n\n  search(parameters, max_results?: number) {\n    let data: any;\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}));\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status];\n      }\n      if(typeof(max_results)!=='undefined') {\n        data.MaxResults = max_results;\n      }\n      let allowed_params = ['Id', 'HookId', 'HookType', 'Result', 'DateCreatedBegin', 'DateCreatedEnd', 'DateUpdatedBegin', 'DateUpdatedEnd'];\n      let disallowed_params = ['Status', 'MaxResults'];\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v;\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(4, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}));\n        }\n      });\n      let path = 'General/MessageQueue/Search';\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = [];\n        }\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Update queue message\n   *\n   * @param {Object} parameters - Provide allowed parameters:\n   *\n   *      {\n   *        HookId: number,\n   *        Id: number,\n   *        Packet: string,\n   *        Result: string,\n   *        Status: string, // Available options: Pending, Processing, Complete, Failed\n   *        HookType: string // Available options: Unknown, ActivityUpdate, Email, WebHook\n   *      }\n   *\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  update(parameters: any) {\n    let data: any;\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}));\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status];\n      }\n      if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.hook_types, 'available':this.hook_types}));\n      } else if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])!=='undefined') {\n        data.HookType = this.hook_types[parameters.hook_types];\n      }\n      let allowed_params = ['Id', 'HookId', 'Packet', 'Result'];\n      let disallowed_params = ['Status', 'HookType'];\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v;\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(5, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}));\n        }\n      });\n\n      let path = 'General/MessageQueue/Update';\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = [];\n        }\n        resolve(response.Value);\n      });\n    });\n  }\n\n  updateMessageStatus(ids: number[], status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}));\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      };\n      let path = 'General/MessageQueue/UpdateMessageStatus';\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      });\n    });\n  }\n\n  getWebooks(hook_ids) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"HookIds\": hook_ids\n      };\n      let path = 'General/MessageQueue/WebHooks';\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      });\n    });\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Search {\n  cw: any;\n\n  /**\n   * Construct activity link object for Activity Link function\n   *\n   * @param {object} cw - Feed in the cityworks object instance so that this instance has access to the runRequest from the recursively-linked Cityworks instance\n   * @return {Object} Returns object that is this module\n   */\n  constructor(cw) {\n    this.cw = cw;\n  }\n\n}\n","import { CWError } from './error'\nimport { General } from './general'\nimport { ActivityLinks } from './activity_link'\nimport { Gis } from './gis'\nimport { MessageQueue } from './message_queue'\nimport { Search } from './search'\n\nconst https = require('https');\nconst querystring = require('querystring');\nconst _ = require('lodash')\n\ninterface postData {\n  data?: string;\n  token?: string;\n}\n\n/**\n * Core interface Citywork which defines the access vars for many of the functions and the connection settings\n */\ninterface Citywork {\n  domain: any;\n  settings: Object;\n  login?: string;\n  password?: string;\n  Token?: string;\n  gisToken?: string;\n  gisTokenUrl?: string;\n\n  general?: Object;\n  activity_link?: Object;\n  message_queue?: Object;\n  gis?: Object;\n  // case: Object;\n  // inspection: Object;\n  // workorder: Object;\n  // request: Object;\n\n  extensions: Object;\n  features: Object;\n}\n\n/**\n * Core class Cityworks with most of the authentication and install capabilities functions\n */\nmodule.exports = class Cityworks implements Citywork {\n  /**\n   * The domain of the cityworks install. Defaults to Cityworks Online\n   */\n  domain: string;\n  /**\n   * Stores the currently in use authentication token\n   */\n  Token?: string;\n  /**\n   * Stores the login username\n   */\n  login?: string;\n  /**\n   * Holds the login password\n   */\n  password?: string;\n  /**\n   * Holds the GIS Token for GIS-based Authentication (Portal)\n   */\n  gisToken?: string;\n  /**\n   * Holds the GIS Token URL for GIS-based Authentication (Portal)\n   */\n  gisTokenUrl?: string;\n  /**\n   * Stores settings including path (defaults to \"cityworks\"), secure (defaults to true), expires (defaults to null - does not expire)\n   */\n  settings: {\n    path: string,\n    secure: boolean,\n    expires: any\n  }\n  error?: Object;\n  general?: Object;\n  activity_link?: Object;\n  message_queue?: Object;\n  gis?: Object;\n  search?: Object;\n\n  extensions: Object;\n  features: Object;\n  potential_loads: Array<string>;\n\n  /**\n     * Contructor for a new cityworks instance's object, allows one to optionally configure the domain and other settings right from the get-go\n     * @param {string} [domain] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'workorder', 'inspection', 'request', 'case']\n     */\n  constructor(domain?: string, settings?: Object, load?: Array<string>) {\n    this.domain = 'cityworksonline';\n    this.extensions = {\"UnknownExtension\": 0, \"CwAnalytics\": 1, \"WebHooks\": 2, \"PLLPublicApp\": 3, \"ActivityUpdate\": 4, \"SingleSignOn\": 5};\n    this.features = {\"UnknownFeature\": 0, \"ViewInspections\": 1, \"EditInspections\": 2, \"ViewServiceRequest\": 3, \"EditServiceRequest\": 4, \"ViewWorkOrder\": 5, \"EditWorkOrder\": 6, \"EquipmentCheckOut\": 7, \"OfficeField\": 8, \"Respond\": 9, \"Eurl\": 10, \"PaverInterface\": 11, \"Contracts\": 12, \"Storeroom\": 13, \"PLL\": 14, \"Cw4XL\": 15, \"TableEditor\": 16, \"CCTVInterface\": 17, \"MobileAndroid\": 18, \"MobileiOS\": 19, \"PerformanceBudgeting\": 20, \"Insights\": 21, \"RespondCase\": 22, \"RespondInspection\": 23, \"RespondServiceRequest\": 24, \"RespondTaskManager\": 25, \"RespondWorkOrder\": 26, \"Workload\": 27, \"OpX\": 28, \"TrimbleUnityMobile\": 29, \"TrimbleVegetationManager\": 30};\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null\n    }\n    this.potential_loads = ['general', 'activity_link', 'message_queue', 'gis', 'search'];\n    if(typeof(domain)!='undefined') {\n      this.configure(domain, settings, load);\n    }\n  }\n\n  /**\n     * Configure a new cityworks instance's domain and other settings\n     *\n     * @param {string} [domain] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'search', 'workorder', 'inspection', 'request', 'case']\n     * @return {boolean} Returns true if successful, otherwise, throws error\n     */\n  configure(domain?: string, settings?: Object, load?: Array<string>) {\n    if(typeof domain !== 'undefined') { this.domain = domain; } else { this.domain = 'cityworksonline' }\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null\n    }\n\n    if(typeof(settings)!='undefined') {\n      _.forEach(settings, (v,k) => {\n        if(typeof(this.settings[k])!='undefined') {this.settings[k] = v;}\n      })\n    }\n\n    if(typeof(load)=='undefined') {\n      this.general = new General(this);\n      this.activity_link = new ActivityLinks(this);\n      this.message_queue = new MessageQueue(this);\n    } else {\n      let _this = this;\n      _.forEach(this.potential_loads, function(v) {\n        switch(v) {\n          case 'general':\n            _this.general = new General(_this);\n          break;\n          case 'activity_link':\n            _this.activity_link = new ActivityLinks(_this);\n          break;\n          case 'message_queue':\n            _this.message_queue = new MessageQueue(_this);\n          break;\n          case 'gis':\n            _this.gis = new Gis(_this);\n          break;\n          case 'search':\n            _this.search = new Search(_this);\n          break;\n        }\n      });\n    }\n  }\n\n  /**\n     * Send a request to the Cityworks API\n     *\n     * If one ever needs to access or call an unimplemented API endpoint of a Cityworks install, one can call this method directly with the path and data payload:\n     *\n     * `cityworks.runRequest(path, data);`\n     *\n     * @param {string} path - The path to the particular endpoint\n     * @param {Object} data - The data object to be sent to the Cityworks API\n     * @return {Object} Returns Promise object that represents the json object returned from the Cityworks API\n     */\n  runRequest(path, data) {\n    return new Promise((resolve, reject) => {\n      let pd = {} as postData;\n      pd.data = JSON.stringify(data);\n\n      if(typeof(this.Token) !== 'undefined' && this.Token != '' && path!='General/Authentication/CityworksOnlineAuthenticate' && path!='General/Authentication/Authenticate') {\n        pd.token = this.Token;\n      }\n      let obj: {\n        Status: number,\n        Message: string\n      };\n      let options = {\n        hostname: this.domain,\n        port: 443,\n        path: '/' + this.settings.path + '/services/' + path,\n        method: 'POST',\n        headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n           'Content-Length': Buffer.byteLength(querystring.stringify(pd))\n        },\n        timeout: 10000000\n      };\n\n      let request = https.request(options, (response) => {\n          let str='';\n          response.on('error',function(e){\n              console.log(e, 'Caught on error');\n              reject(new CWError(13, \"Unknown error.\", e));\n          });\n\n          response.on('data',function(chunk){\n              str+=chunk;\n          });\n\n          response.on('end',function(){\n            try {\n              var test_str = JSON.stringify(str) + \"[test string]\";\n              if(test_str.match(/\\<h2\\>Object\\ moved\\ to/)==null) {\n                var obj=JSON.parse(str);\n                // if(path=='General/ActivityNotification/UserWatching') {\n                //   console.log(str, options, pd, obj);\n                // }\n                if(typeof(obj)=='undefined') {\n                  // failed\n                  reject(new CWError(10, 'No response received from Cityworks API.'));\n                } else if(typeof(obj)!='undefined' && typeof(obj.Value)!='undefined') { // && typeof(response.Value.Token)!='undefined') {\n                  // console.log(str, options, pd, obj);\n                  resolve(obj);\n                } else {\n                  reject(new CWError(3, \"Unknown error.\", {options: options, postedData: pd, api_returned_string: obj}));\n                }\n              } else {\n                reject(new CWError(1, \"Error parsing JSON. Cityworks returned HTML.\", {response: str}));\n              }\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log('try/catch error on JSON');\n                reject(new CWError(1, \"Error parsing JSON.\", {error: e}));\n              } else {\n                console.log('try/catch error on JSON');\n                reject(new CWError(1, \"Error parsing JSON.\"));\n              }\n            }\n          });\n      });\n      request.write(querystring.stringify(pd));\n      request.end();\n    });\n  }\n\n  /**\n     * Authenticate with the Cityworks API and store an access token for use. Stores the token on cityworks.Token.\n     * @param {string} login - User's login name\n     * @param {password} password - User's password\n     * @return {Object} Returns Promise object that represents a boolean which tells you the login succeeded (true) or failed (false).\n     */\n  authenticate(login: string, password: string) {\n    return new Promise((resolve, reject) => {\n      let data = { LoginName:login, Password:password };\n      let path = 'General/Authentication/Authenticate';\n      if(this.domain == 'cityworksonline') {\n        path = 'General/Authentication/CityworksOnlineAuthenticate';\n      }\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          reject(new CWError(10, response.Message));\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.login = login;\n          this.password = password;\n          this.Token = response.Value.Token;\n          resolve(true);\n        } else {\n          // failed\n          reject(new CWError(11, 'Unknown Error'));\n        }\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n     * Authenticate a username with a GIS Token\n     * @param {login} - Gis user name, should match a Cityworks employee login name\n     * @param {string} gisToken - Gis Oauth2 access token\n     * @param {string} gisTokenUrl - Base url to GIS server (not the '/generateToken' endpoint)\n     * @param {number} [expires] - Authenticate to Cityworks for a specified number of milliseconds, defaults to 2 weeks\n     */\n  authenticateWithGISToken(login: string, gisToken: string, gisTokenUrl: string, expires?: number) {\n    this.login = login;\n    this.gisToken = gisToken;\n    this.gisTokenUrl = gisTokenUrl;\n    if(typeof(expires)!='undefined') {\n      expires = 1209600000;\n    }\n\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/AuthenticateGisToken';\n      let data = { LoginName:this.login, GisToken: this.gisToken, GisTokenUrl: this.gisTokenUrl, Expires: expires};\n\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          // TODO: CWError here.\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.Token = response.Value.Token;\n          resolve(true);\n        } else {\n          // failed\n          resolve(false);\n        }\n      }).catch(error => {\n        throw error;\n      });\n    });\n  }\n\n  /**\n     * Validate provided token\n     * @param {string} token - User's login name\n     * @param {boolean} [set] - Set a valid token as the cityworks instance's active token\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the token's validity and that is was set (true) or throws an error if was not valid (and not set).\n     */\n  validateToken(token:string, set?:boolean) {\n    return new Promise((resolve, reject) => {\n      if(typeof(set)=='undefined') {\n        let set = false;\n      }\n      let data = { Token: token };\n      let path = 'General/Authentication/Validate';\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          resolve(false);\n        } else {\n          if(set) {\n            this.Token = token;\n          }\n          resolve(response.Value);\n        }\n      }).catch(error => {\n        throw error;\n      });\n    });\n  }\n\n  /**\n     * Set a token you've retrieved from your storage system as the active token for the cityworks instance. Note that this doesn't check the token for validity.\n     * @param {token} token - The token string to set as the active token.\n     * @return {boolean} Returns a boolean which apprises one that the token was set (true) or not set (false).\n     */\n  setToken(token) {\n    if(token!='' && token!=null) {\n      this.Token = token;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n     * Get currently set, valid token\n     * @param {token} token - The token string to set as the active token.\n     * @return {string} Returns a string which is the currently-set token or the boolean false value if no (valid) token set\n     */\n  getToken() {\n    if(this.Token=='' || this.Token==null) {\n      return false;\n    } else {\n      return this.Token;\n    }\n  }\n\n  /**\n     * Revoke all current user's tokens or only tokens created before a particular date and time.\n     * @param {number} [revokeBefore] - Datetime as an Epoch integer (number), if you wish to revoke only tokens created before a particular datetime\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the revocation outcome's success (true) or failure (false)\n     */\n  revokeToken(revokeBefore?:number) {\n    return new Promise((resolve, reject) => {\n      let data = { RevokeDate: revokeBefore };\n      let path = 'General/Token/RevokeUser';\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          resolve(false);\n        } else {\n          resolve(true);\n        }\n      }).catch(error => {\n        throw error;\n      });\n    });\n  }\n\n  // App data\n\n  /**\n     * Get the localization settings for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the localization settings for the current Cityworks install\n     */\n  getLocalizationSettings() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/LocalizationSettings';\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get the system timezone options for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the timezone settings for the currentCityworks install\n     */\n  getTimezoneOptions() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/TimeZones';\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get the current install's location information\n     * @return {Object} Returns Promise object that represents an Object which contains the location information\n     */\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/CurrentLocation';\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  // Licensing Checks\n  /**\n     * Check if a particular license is available to the currently-authenticated user\n     * @param {string} area - Area of access\n     * @param {string} service - Service to access\n     * @return {boolean} Returns Promise object that represents a boolean which informs access is granted (true) or denied (false)\n     */\n  licensedApiCheck(area: string, service: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"Area\": area,\n        \"Service\": service\n      }\n      let path = 'General/AppData/SelectedEntities';\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Check if a current Cityworks install is licensed to use a particular extension\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {string} extension - Extension name\n     * @return {boolean} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionCheck(extension: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.extensions[extension])=='undefined') {\n        reject(new CWError(4, 'Extension provided does not exist or is mispelled.', {'provided': extension, 'available': this.extensions}));\n      }\n      let data = {\n        \"Extension\": this.extensions[extension]\n      }\n      let path = 'General/Authorization/LicensedExtensionCheck';\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Check a whole list to see if current Cityworks install is licensed to use extensions\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {Array<string>} extension - Extension names\n     * @return {Object} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionsCheck(extensions: Array<string>) {\n    return new Promise((resolve, reject) => {\n        var data: { Extensions: Array<number> } = {\n          Extensions: []\n        };\n      _.forEach(extensions, (v) => {\n        if(typeof(this.extensions[v])=='undefined') {\n          reject(new CWError(5, 'Extension provided does not exist or is mispelled.', {'provided': v, 'available': this.extensions}));\n        } else {\n          data.Extensions.push(this.extensions[v]);\n        }\n      });\n      let path = 'General/Authorization/LicensedExtensionsCheck';\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {};\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_extensions = _.invert(this.extensions);\n        _.forEach(response, (ext_num, bool) => {\n          if(typeof(inv_extensions[ext_num])=='undefined') {\n            reject(new CWError(6, 'Extension index provided does not exist or isn\\'t configured properly.', {'provided_num_returned': ext_num, 'available': this.extensions}));\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_extensions[ext_num]] = bool;\n          }\n        });\n        resolve(rez);\n      });\n    });\n  }\n\n  /**\n     * Check if current user is licensed to use a feature:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {string} [feature] - Feature to check to see if ciurrently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeatureCheck(feature: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.features[feature])=='undefined') {\n        reject(new CWError(7, 'Feature provided does not exist or is mispelled.', {'provided': feature, 'available': this.features}));\n      }\n      let data = {\n        \"Feature\": this.features[feature]\n      }\n      let path = 'General/Authorization/LicensedFeatureCheck';\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Check if current user is licensed to use features:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {Array<string>} [feature] - Features to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeaturesCheck(features: Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data: { Features: Array<number> } = {\n        Features: []\n      };\n      _.forEach(features, (v: string) => {\n        if(typeof(this.features[v])=='undefined') {\n          reject(new CWError(8, 'Feature provided does not exist or is mispelled.', {'provided': v, 'available': this.features}));\n        } else {\n          data.Features.push(this.features[v]);\n        }\n      });\n      let path = 'General/Authorization/LicensedFeaturesCheck';\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {};\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_features = _.invert(this.features);\n        _.forEach(response.Value, (feat_num, bool) => {\n          if(typeof(inv_features[feat_num])=='undefined') {\n            reject(new CWError(9, 'Feature index provided does not exist or isn\\'t configured properly.', {'provided': feat_num, 'available': inv_features}));\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_features[feat_num]] = bool;\n          }\n        });\n        resolve(rez);\n      });\n    });\n  }\n\n  // LicensedServicesCheck\n  // Check if current user is licensed to use services\n  // List req ServicesList of 'Area/Service', i.e. ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n  /**\n     * Check if current user is licensed to use services. List req ServicesList of 'Area/Service', i.e.:\n     *\n     * ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n     *\n     * @param {Array<string>} [services] - Services to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedServicesCheck(services: Array<string>) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authorization/LicensedServicesCheck';\n      var data: { Services: Array<string> } = {\n        Services: services\n      };\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get a list of CityworksOnline sites for this user\n     *\n     * @param {string} [login] - Login Name to use when checking. Defaults to previously-stored login name.\n     * @param {string} [password] - Password to use when checking. Defaults to previously-stored password.\n     * @return {Object} Returns Promise object that represents an array of cityworks online sites available to this user.\n     */\n  cityworksOnlineSites(login?: string, password?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/CityworksOnlineSites';\n      var data = {\n        LoginName: (typeof(login)!='undefined') ? login: this.login,\n        Password:  (typeof(password)!='undefined') ? password : this.password\n      };\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a collection of the configured domains.\n     */\n  domains() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Domains';\n      var data = {};\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @param {string} [login] - Optional login name to get user information for. Defaults to currently-set user name used for login.\n     * @return {Object} Returns Promise object that represents an Object with the user information\n     */\n  user(login?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/User';\n      let data = { LoginName: (typeof(login)!='undefined') ? login: this.login }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get the software version number of the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a string of the version number\n     */\n  version() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Version';\n      var data = {};\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n}\n\n\n // export default new Cityworks() as cityworks;\n"],"names":["CWError","constructor","code","message","info","name","this","JSON","stringify","_","require","General","cw","notifications","Promise","resolve","reject","runRequest","then","response","Value","amIWatching","activityType","activityId","aType","null","case","task","provided","potential_activities","ActivityType","ActivityId","r","catch","e","quickSearch","text","QuickSearchText","getActivityMetadataByIds","ids","table","tables","indexOf","available","Ids","TableName","console","log","getWOEntityCostSummary","object_ids","ObjectIds","searchWOEntityCostSummary","search_id","SearchId","ActivityLinks","activityTypes","linkTypes","ReversibleMap","set","add","source_type","source_sid","destination_type","destination_sid","link_type","has","options","data","SourceType","get","SourceSid","DestType","DestSid","LinkType","type","sids","ActivitySids","_this","return_data","Array","forEach","link","key","push","clone","SourceActivityType","SourceActivitySid","DestinationActivityType","DestinationActivitySid","delete","activity_link_id","ActivityLinkId","remove","Gis","getConfig","whichType","whichId","getGisData","context","toLowerCase","domain","domainId","downloadMobile","cacheId","initialExtent","request","requestId","inspection","inspectionId","workOrder","workOrderSid","user","allDomains","allGroups","selectedEntities","MessageQueue","status","hook_types","Pending","Processing","Complete","Failed","Unknown","ActivityUpdate","Email","WebHook","processMessages","delete_successful","Delete","maxcount","MaxCount","Status","hours_to_keep","HoursToKeep","preferences","search","parameters","max_results","MaxResults","allowed_params","disallowed_params","v","k","value","concat","update","HookType","updateMessageStatus","getWebooks","hook_ids","HookIds","Search","https","querystring","module","exports","settings","load","Token","login","password","gisToken","gisTokenUrl","error","general","activity_link","message_queue","gis","extensions","features","potential_loads","UnknownExtension","CwAnalytics","WebHooks","PLLPublicApp","SingleSignOn","UnknownFeature","ViewInspections","EditInspections","ViewServiceRequest","EditServiceRequest","ViewWorkOrder","EditWorkOrder","EquipmentCheckOut","OfficeField","Respond","Eurl","PaverInterface","Contracts","Storeroom","PLL","Cw4XL","TableEditor","CCTVInterface","MobileAndroid","MobileiOS","PerformanceBudgeting","Insights","RespondCase","RespondInspection","RespondServiceRequest","RespondTaskManager","RespondWorkOrder","Workload","OpX","TrimbleUnityMobile","TrimbleVegetationManager","path","secure","expires","configure","pd","token","hostname","port","method","headers","Buffer","byteLength","timeout","str","on","chunk","match","obj","parse","postedData","api_returned_string","SyntaxError","write","end","authenticate","LoginName","Password","Message","authenticateWithGISToken","GisToken","GisTokenUrl","Expires","validateToken","setToken","getToken","revokeToken","revokeBefore","RevokeDate","getLocalizationSettings","getTimezoneOptions","getCurrentLocation","licensedApiCheck","area","service","Area","Service","licensedExtensionCheck","extension","Extension","licensedExtensionsCheck","Extensions","rez","inv_extensions","invert","ext_num","bool","provided_num_returned","licensedFeatureCheck","feature","Feature","licensedFeaturesCheck","Features","inv_features","feat_num","licensedServicesCheck","services","Services","cityworksOnlineSites","domains","version"],"mappings":"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"}