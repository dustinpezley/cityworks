{"version":3,"file":"index.modern.js","sources":["../src/error.ts","../src/general.ts","../src/activity_link.ts","../src/gis.ts","../src/message_queue.ts","../src/search.ts","../src/request.ts","../src/inspection.ts","../src/cityworks.ts"],"sourcesContent":["interface CWErrorInt {\n  name: string\n  code: number\n  message: string\n  info?: string\n}\n\n/**\n * CWError implements a custom error class for this codebase with additional information\n *\n * `{name: string, code:number, info: object}`\n *\n */\nexport class CWError implements CWErrorInt {\n  /**\n   * Just statically set to \"Cityworks Exception\" for now\n   */\n  name: string\n  /**\n   * Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   */\n  code: number\n  /**\n   * The error message\n   */\n  message: string\n  /**\n   * Object stuffed with any other information one wishes to include in the thrown error\n   */\n  info?: string\n\n  /**\n   * CWError implements a custom error class for this codebase with additional information\n   *\n   * @param {number} code - Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   * @param {string} message - The error message\n   * @param {Object} info - Object stuffed with any other information one wishes to include in the thrown error\n   * @return {Object} Returns instance of CWError object\n   */\n  constructor(code:number, message:string, info?:object) {\n    this.name = \"Cityworks Exception\"\n    this.code = code\n    this.message = message\n    if(typeof(info) !== 'undefined') {\n      this.info = JSON.stringify(info)\n    }\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n/**\n * A plugin that contains \"general\" methods for a Cityworks install\n */\nexport class General {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get notifications for currently authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of available notifications\n   */\n  notifications() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('General/ActivityNotification/User', {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n\n  /**\n   * Find out if the current user is watching a particular activity (case, task, null [as a string])\n   *\n   * @param {string} activityType - which activity type the following ID will be for.\n   * @param {number} activityId - activity Case or CaseTask (task instance) ID to check\n   * @return {Object} Returns Promise object that represents a boolean indicating the currently authenticated user is watching the provided activity\n   */\n  amIWatching(activityType, activityId: number) {\n    return new Promise((resolve, reject) => {\n      let aType = {'null': 0, 'case': 1, 'task': 2}\n      if(typeof(aType[activityType])=='undefined') {\n        // reject with error\n        reject(new CWError(1, \"Activity type provided does not exist.\", {provided: activityType, potential_activities: aType}))\n      } else {\n        let data = {\"ActivityType\": aType[activityType], \"ActivityId\": activityId}\n        this.cw.runRequest('General/ActivityNotification/UserWatching', data).then(r => {\n          // console.log(r, 'response')\n          resolve(r.Value)\n        }).catch(e => {\n          reject(new CWError(2, \"Unknown error.\"))\n        })\n      }\n    })\n  }\n\n  /**\n   * Do a \"quick\" search for any string (an ID is best)\n   *\n   * @param {string} text - text to search the system for\n   * @return {Object} Returns Promise object that represents a collection of the currently authenticated user's notifications\n   */\n  quickSearch(text: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"QuickSearchText\": text,\n      }\n      this.cw.runRequest('General/QuickSearch/QuickSearch', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get CwMetatData by Type and CwSid\n   *\n   * @param {Array<number>} Ids\n   * @param {string} TableName - INSPECTION, REQUEST, WORKORDER require View permission on the activities\n   * @return {Object} Returns Promise object that represents a\n   */\n  getActivityMetadataByIds(ids: Array<number>, table: string) {\n    return new Promise((resolve, reject) => {\n      let tables = [\"INSPECTION\", \"REQUEST\", \"WORKORDER\"]\n      if(_.indexOf(tables, table)==-1) {\n        reject(new CWError(2, 'TableName provided does not exist or is mispelled.', {'provided': table, 'available':tables}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"TableName\": table\n      }\n      this.cw.runRequest('General/CwMetaData/ByTableNameSids', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities\n   *\n   * @param {Array<number>} ObjectIds\n   * @return {Object} Returns Promise object that represents a\n   */\n  getWOEntityCostSummary(object_ids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"ObjectIds\": object_ids\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities selected through a search definition\n   *\n   * @param {number} SearchId - Search Definition Id\n   * @return {Object} Returns Promise object that represents a\n   */\n  searchWOEntityCostSummary(search_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"SearchId\": search_id\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntitySearch', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\ninterface ActivityLink {\n  linkTypes: ReversibleMap<string, number>\n  activityTypes: ReversibleMap<string, number>\n  cw: any\n}\n\n/**\n * ActivityLinks implements the activity link functions\n *\n */\nexport class ActivityLinks implements ActivityLink {\n  /**\n   * Activity types to map string to number for internal use. Activity types available are:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   */\n  activityTypes: ReversibleMap<string, number>\n  /**\n   * Link types to map string to number for internal use. Link types available are:\n   *\n   *      \"null\", \"parent\", \"related\"\n   */\n  linkTypes: ReversibleMap<string, number>\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"null\", 0)\n    this.activityTypes.set(\"case\", 1)\n    this.activityTypes.set(\"inspection\", 2)\n    this.activityTypes.set(\"request\", 3)\n    this.activityTypes.set(\"workorder\", 4)\n    this.activityTypes.set(\"wipcase\", 5)\n\n    this.linkTypes = new ReversibleMap<string, number>()\n    this.linkTypes.set(\"null\", 0)\n    this.linkTypes.set(\"parent\", 1)\n    this.linkTypes.set(\"related\", 2)\n  }\n\n  /**\n   * Create a new activity link between two items.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  add(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(3, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Add'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Get the links for a particular node type by ID.\n   *\n   * @param {string} type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {Array<number>} sids - Array of numeric (S)IDs you wish to get of the specified type\n   * @return {Object} Returns Promise object that represents a collection\n   */\n  get(type: string, sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(type)) {\n        reject(new CWError(4, 'Activity type not found.', {'provided': type, 'options':this.activityTypes}))\n      }\n      let data = {\n        ActivityType: this.activityTypes.get(type),\n        ActivitySids: sids\n      }\n      let _this = this\n      let path = 'General/ActivityLink/ByActivitySids'\n      this.cw.runRequest(path, data).then((response: any) => {\n        let return_data = new Array()\n        _.forEach(response.Value, (link, key) => {\n          link.DestType = _this.activityTypes.get(link.DestType)\n          link.SourceType = _this.activityTypes.get(link.SourceType)\n          link.LinkType = _this.linkTypes.get(link.LinkType)\n          return_data.push(link)\n        })\n        resolve(return_data)\n      })\n    })\n  }\n\n  /**\n   * Clone a current activity link.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to clone a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to clone a link between SID as destination and a particular source\n   * @return {Object} Returns Promise object that represents a\n   */\n  clone(source_type: string, source_sid: number, destination_type: string, destination_sid: number) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      let data = {\n        SourceActivityType: this.activityTypes.get(source_type),\n        SourceActivitySid: source_sid,\n        DestinationActivityType: this.activityTypes.get(destination_type),\n        DestinationActivitySid: destination_sid\n      }\n      let path = 'General/ActivityLink/CloneByActivitySid'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Delete an activity link by ID\n   *\n   * @param {number} activity_link_id - The ID of the activity link one wishes to delete\n   * @return {Object} Returns Promise object that represents a\n   */\n  delete(activity_link_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        ActivityLinkId: activity_link_id\n      }\n      let path = 'General/ActivityLink/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Remove a link by specifying everything.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  remove(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(1, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Remove'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Gis {\n  /**\n   * @hidden\n   */\n  cw: any;\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw;\n  }\n\n  /**\n   * Get gis service configuration for user, group, domain, or service id\n   *\n   * @param {string} [whichType] - domain, group, mapservice, or user\n   * @param {number} [whichId] - domain, group, mapservice, or user Id\n   * @param {number} [getGisData] - If true, check for feature server JSON data, default is true\n   * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  getConfig(whichType, whichId, getGisData: boolean = true, context: Array<string> = []) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      whichType = whichType.toLowerCase();\n      let data: {DomainId?: any, GroupId?: any, MapServiceId?: any, UserId?: any, GetGisData: boolean, Security: Array<string>}\n      switch(whichType) {\n        case 'domain':\n          data = {DomainId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'group':\n          data = {GroupId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'mapservice':\n          data = {MapServiceId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'user':\n          data = {UserId:whichId, GetGisData: getGisData, Security: context}\n          break;\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n    * Get domain gis services\n    *\n    * @param {number} domainId - The mobile map cache Id to download\n    * @return {Object} Returns Promise object that represents an Object with the domain's default GIS services\n    */\n  domain(domainId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      let data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Download mobile map cache\n     *\n     * @param {number} cacheId - The mobile map cache Id to download\n     * @return {Object} Returns Promise object that represents a streaming download (?)\n     */\n  downloadMobile(cacheId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/DownloadMobileMapCache';\n      let data = {\n        MobileMapCacheId: cacheId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get initial extent for user\n   *\n   * @return {Object} Returns Promise object that represents ... (?)\n   */\n  initialExtent() {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InitialExtent';\n      let data = {};\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get service request gis services\n   *\n   * @param {number} requestId - The work order to check against.\n   * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n   * @return {Object} Returns Promise object that represents an Object with the specified request's entit(y|ies)\n   */\n  request(requestId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/ServiceRequestConfiguration';\n      let data = {\n        RequestId: requestId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get inspection gis services\n     *\n     * @param {number} inspectionId - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified inspection's entity\n     */\n  inspection(inspectionId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InspectionConfiguration';\n      let data = {\n        InspectionId: inspectionId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get workorder gis services\n     *\n     * @param {number} workOrderSid - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified work order's entit(y|ies)\n     */\n  workOrder(workOrderSid, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/WorkOrderConfiguration';\n      let data = {\n        WorkOrderSid: workOrderSid,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get service request gis services\n     *\n     * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n     * @param {boolean} [allDomains] services assigned to any domain the user belongs to, default is true\n     * @param {boolean} [allGroups] services assigned to any groups the user belongs to regardless of domain, default is true\n     * @param {boolean} [getGisData] If true, check for feature server JSON data, default is true\n     * @return {Object} Returns Promise object that represents an Object with the user's GIS services\n     */\n  user(context: Array<string> = [], allDomains: boolean = true, allGroups: boolean = true, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/User';\n      let data = {\n        AllDomains: allDomains,\n        AllGroups: allGroups,\n        GetGisData: getGisData,\n        Security: context\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n\n  /**\n     * Get currently selected entities from the Cityworks install's session for your user\n     * @return {Object} Returns Promise object that represents an Object with the currently-selected entities\n     */\n  selectedEntities() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/SelectedEntities';\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get Geocode server info by ServerId\n   *\n   * @param {number} ServiceId\n   * @return {Object} Returns Promise object that represents an object describing the provided Geocoder service configuration\n   */\n   // gis/GeoCode/GeocodeServer\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class MessageQueue {\n  /**\n   * @hidden\n   */\n  cw: any\n  /**\n   * Statuses -\n   * Pending: 0,\n   * Processing: 1,\n   * Complete: 2,\n   * Failed: 3\n   */\n  status: Object\n  /**\n   * Hook Types -\n   * Unknown: 0,\n   * ActivityUpdate: 1,\n   * Email: 2,\n   * WebHook: 3\n   */\n  hook_types: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.status = {\n      Pending: 0,\n      Processing: 1,\n      Complete: 2,\n      Failed: 3\n    }\n    this.hook_types = {\n      Unknown: 0,\n      ActivityUpdate: 1,\n      Email: 2,\n      WebHook: 3\n    }\n  }\n\n  /**\n   * Process Webhook MessageQueue records by MessageQueueId\n   *\n   * @param {Array<number>} [ids] - List of MessageQueueId values\n   * @param {boolean} [delete_successful] - automatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  processMessages(ids: Array<number>, delete_successful: boolean = false) {\n    return new Promise((resolve, reject) => {\n      let data = { Ids: ids, Delete: delete_successful}\n      let path = 'General/WebHookEvent/ProcessMessages'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  /**\n   * Get Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status -\n   * @param {number} [maxcount] - Maximum number returned. Defaults to 15\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  get(ids: Array<number>, status: string, maxcount: number = 15) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(1, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"MaxCount\": typeof(maxcount)!='undefined' ? maxcount : 15,\n        \"Status\": this.status[status]\n      }\n      let path = 'General/MessageQueue/ByIds'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  /**\n   * Delete Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status - automatically delete messages that complete with successful execution, default is false\n   * @param {number} [hours_to_keep] - utomatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  delete(ids: Array<number>, status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  // PreferencesList<GlobalPreference>\n  // Base response type: CoreResponseBase\n  // Get a list of message queue preferences\n  // This method has no parameters\n  preferences() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      let path = 'General/MessageQueue/Preferences'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  search(parameters, max_results?: number) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(max_results)!=='undefined') {\n        data.MaxResults = max_results\n      }\n      let allowed_params = ['Id', 'HookId', 'HookType', 'Result', 'DateCreatedBegin', 'DateCreatedEnd', 'DateUpdatedBegin', 'DateUpdatedEnd']\n      let disallowed_params = ['Status', 'MaxResults']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(4, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n      let path = 'General/MessageQueue/Search'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Update queue message\n   *\n   * @param {Object} parameters - Provide allowed parameters:\n   *\n   *      {\n   *        HookId: number,\n   *        Id: number,\n   *        Packet: string,\n   *        Result: string,\n   *        Status: string, // Available options: Pending, Processing, Complete, Failed\n   *        HookType: string // Available options: Unknown, ActivityUpdate, Email, WebHook\n   *      }\n   *\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  update(parameters: any) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.hook_types, 'available':this.hook_types}))\n      } else if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])!=='undefined') {\n        data.HookType = this.hook_types[parameters.hook_types]\n      }\n      let allowed_params = ['Id', 'HookId', 'Packet', 'Result']\n      let disallowed_params = ['Status', 'HookType']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(5, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n\n      let path = 'General/MessageQueue/Update'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  updateMessageStatus(ids: number[], status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/UpdateMessageStatus'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  getWebooks(hook_ids) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"HookIds\": hook_ids\n      }\n      let path = 'General/MessageQueue/WebHooks'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Search {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Request {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Create new requests\n   *\n   * @category Requests\n   * @param {Object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created request\n   */\n  create(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'ProblemSid')) {\n        reject(new CWError(2, 'ProblemSid must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Create', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a request\n   *\n   * @category Requests\n   * @param {object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  update(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'RequestId')) {\n        reject(new CWError(3, 'RequestId must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Update', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Change a request's problem code\n   *\n   * @category Requests\n   * @param {number} requestId - The request ID to change\n   * @param {number} problemSid - The request's new ProblemSID\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  changeProblem(requestId: number, problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId,\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeProblem', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a request by ID\n   *\n   * @category Requests\n   * @param {number} requestId - The ID of the request to retrieve\n   * @return {Object} Returns Promise that represents an object describing the request\n   */\n  getById(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get requests by array of IDs\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The request IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the requests\n   */\n  getByIds(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific request\n   *\n   * @category Requests\n   * @param {number} requestId - A Request ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {RequestId: requestId}\n      this.cw.runRequest('Ams/ServiceRequest/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom fields for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFields(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/CustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Change custom field category for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @param {number} categoryId - The new custom field grouping/category which should be assigned to the provided requests\n   * @return {Object} Returns Promise that represents a collection of requests\n   */\n  changeCustomFieldCategory(requestIds: Array<number>, categoryId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n        CategoryId: categoryId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeCustomFieldCategory', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add a comment to a request\n   *\n   * @category Requests\n   * @param {number} requestId - The ID of the request to retrieve\n   * @param {number} comment - The comment text to add\n   * @return {Object} Returns Promise that represents an object describing the comment added\n   */\n  comment(requestId: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/ServiceRequest/AddComments', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to cancel the matched requests\n   * @param {string} [cancelReason] - A reason for cancelling the request(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the request was cancelled\n   * @return {Object} Returns object that represents a collection of requests\n   */\n   cancel(requestIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {RequestIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { RequestIds: requestIds }\n       if(typeof(cancelReason)!=='undefined') {\n         data.CancelReason = cancelReason\n       }\n       if(typeof(dateCancelled)!=='undefined') {\n         data.DateCancelled = dateCancelled\n       }\n       this.cw.runRequest('Ams/ServiceRequest/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to close the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    close(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed requests\n     *\n     * @category Requests\n     * @param {Array<number>} requestIds - An array of the IDs to reopen the matched requests\n     * @return {Object} Returns object that represents a collection of requests\n     */\n     reopen(requestIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           RequestIds: requestIds\n         }\n         this.cw.runRequest('Ams/ServiceRequest/Reopen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to delete the matched requests\n   * @return {Object} Returns object that represents a collection of request Ids which have been deleted\n   */\n   delete(requestIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestIds: requestIds\n       }\n       this.cw.runRequest('Ams/ServiceRequest/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Search for requests\n    *\n    * @category Request Search\n    * @param {Object} searchData - The search information to retrieve matched requests, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents an Array of the matching request IDs\n    */\n   search(searchData: Object) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       this.cw.runRequest('Ams/ServiceRequest/Search', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the records on the basis of RequestId, only populates RequestId, Description, ProblemCode properties\n    *\n    * @category Request Object Search\n    * @param {string} requestId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents a collection of the matching (limited) request objects\n    */\n   searchObject(requestId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestId: requestId\n       }\n       this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Requests\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n    */\n   createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         _.set(data, 'EnableEurl', enableEurl)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequest/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get a list of problem nodes for a domain\n   *\n   * @category Request Categorization\n   * @param {number} domainId - The domain ID for which to retrieve problem nodes.\n   * @param {boolean} viewOnly - Return only view only problem nodes. Defaults to false.\n   * @param {Object} [displayMode] - Object that should contain two properties if you provide it: DisplayTextMode: string (C = Code, D = Description, CD = Code ~ Description). DisplayTextDelimeter: string, only impacts CD display text mode.\n   * @param {boolean} includeCancelled - Return only cancelled problem nodes as well. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of problem node objects.\n   */\n  getProblemNodes(domainId: number, viewOnly: boolean = false, displayMode?: Object, includeCancelled: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainId: domainId,\n        IncludeCancelled: includeCancelled,\n        ViewOnly: viewOnly\n      }\n      if(typeof displayMode != 'undefined' && displayMode !== null && _.has(displayMode, 'DisplayTextMode')) {\n        _.set(data, 'DisplayTextMode', _.get(displayMode, 'DisplayTextMode'))\n        if(_.get(displayMode, 'DisplayTextMode')=='CD' && _.has(displayMode, 'DisplayTextDelimeter')) {\n          _.set(data, 'DisplayTextDelimeter', _.get(displayMode, 'DisplayTextDelimeter'))\n        }\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemNodes', data).then(r => {\n        // console.log(_.filter(r, function(o) { return !o.Cancel; }), 'filter');\n        // console.log(_.some(r.Value, ['Cancel', true]), 'some');\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes\n   *\n   * @category Request Options\n   * @param {boolean} forPublicOnly - Return only publicly-available service requests. Defaults to false.\n   * @param {boolean} onlyActiveTemplates - Return only active templates. Defaults to true.\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblems(forPublicOnly: boolean = false, onlyActiveTemplates: boolean = true, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ForPublicOnly: forPublicOnly,\n        OnlyActiveTemplates: onlyActiveTemplates\n      }\n      if(typeof domainIds != 'undefined') {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Problems', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes by keywords\n   *\n   * @category Request Options\n   * @param {string} keywords - Keywords to search for potential problem codes\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblemsByKeywords(keywords: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Keywords: keywords\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemsByKeywords', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of a problem code's priorities\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return priorities for given problemSid\n   * @return {Object} Returns Promise that represents an Array of priorities\n   */\n  getPriorities(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Priorities', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field templates for problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose template custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFieldTemplate(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/TemplateCustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the questions and answer options for a problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose Q&A should be returned\n   * @return {Object} Returns Promise that represents a collection of questions and answer settings\n   */\n  getQASettings(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get problem leaf (template) by Sid\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return problem leaf for given problemSid\n   * @return {Object} Returns Promise that represents an Object that describes the problem leaf (template)\n   */\n  getProblemLeaf(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemLeafBySid', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of default statuses\n   *\n   * @category Request Options\n   * @param {Array<number>} domainIds - List of domains to return default statuses for\n   * @return {Object} Returns Promise that represents an Array of statuses.\n   */\n  getStatuses(domainIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainIds: domainIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/DefaultStatus', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of possible DispatchTo values\n   *\n   * @category Request Options\n   * @param {Array<number>} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of dispatchTo options.\n   */\n  getDispatchTo(domainId: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/DispatchTo', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of possible SubmitTo values\n   *\n   * @category Request Options\n   * @param {Array<number>} domainId - Domain to return possible submitTo values for\n   * @return {Object} Returns Promise that represents an Array of submitTo options.\n   */\n  getSubmitTo(domainId: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DmainId: domainId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/SubmitTo', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get street codes\n   *\n   * @category Request Options\n   * @return {Object} Returns Promise that represents an Array of Street Codes.\n   */\n  streetCodes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/ServiceRequest/AllStreetCode', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates\n   *\n   * @category Request Templates\n   * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n   * @param {Date} [minimumDateModified] - ?\n   * @param {Date} [maximumDateModified] - ?\n   * @return {Object} Returns Promise that represents\n   */\n   getTemplatesById(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         ProblemSids: null\n       }\n       if(typeof minimumDateModified != 'undefined') {\n         _.set(data, 'MinimumDateModified', minimumDateModified)\n       }\n       if(typeof maximumDateModified != 'undefined') {\n         _.set(data, 'MaximumDateModified', maximumDateModified)\n       }\n\n       this.cw.runRequest('Ams/ServiceRequestTemplate/ByIds', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Request Templates\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CWMetadata\n    */\n   createTemplateSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequestTemplate/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the questions and answers for a(many) request template(s)\n    *\n    * @category Request Templates\n    * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n    * @return {Object} Returns Promise that represents a collection of ProblemQAs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemQA\n    */\n    getTemplateQAs(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: null\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/QA', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get a list of template id results for a provided search parameters\n     *\n     * @category Request Templates\n     * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n     * @return {Object} Returns Promise that represents a list of template IDs.\n     */\n    searchTemplates(searchData: Object) {\n      return new Promise((resolve, reject) => {\n        var data = searchData\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Search', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get request templates (problem leaf[s])\n     *\n     * @category Request Templates\n     * @param {Array<number>} [templateIds] - Array of specific template IDs to retrieve\n     * @param {number} canCreate - If true, only return templates the user can create, ignored if false or null, default is false\n     * @param {boolean} includeInactiveIf - If true, returns inactive templates, default is false\n     * @param {Date} [minimumDateModified] - ?\n     * @param {Date} [maximumDateModified] - ?\n     * @return {Object} Returns Promise that represents a collection of Problem Leafs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemLeaf\n     */\n    getTemplates(templateIds: Array<number>, canCreate: boolean = false, includeInactiveIf: boolean = false, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          CanCreate: canCreate,\n          IncludeInactiveIf: includeInactiveIf\n        }\n        if(typeof templateIds != 'undefined') {\n          _.set(data, 'TemplateIds', templateIds)\n        }\n        if(typeof minimumDateModified != 'undefined') {\n          _.set(data, 'MinimumDateModified', minimumDateModified)\n        }\n        if(typeof maximumDateModified != 'undefined') {\n          _.set(data, 'MaximumDateModified', maximumDateModified)\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get work order templates that are associated to this request template type\n     *\n     * @category Request Templates\n     * @param {Array<number>} problemSids - An array list of problemSids to retrieve Problem WO templates for\n     * @param {boolean} includeInactiveIf - Include inactive work order templates, default is false\n     * @return {Object} Returns Promise that represents a collection of Problem WO Templates. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemWOTemplate\n     */\n    getWOTemplates(problemSids: Array<number>, includeInactive: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: problemSids,\n          IncludeInactive: includeInactive\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/WorkOrderTemplates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Inspection {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Create new inspection\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created inspection\n   */\n  create(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n        reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n      } else {\n        this.cw.runRequest('Ams/Inspection/Create', insp_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create inspections from an array of entities\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents a collection of objects describing the newly-created inspections\n   */\n   createFromEntities(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromEntities', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a parent inspection (TODO: what parent!?)\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromParent(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // see if it's just InspectionId\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'InspectionId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromParent', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a service request\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromServiceRequest(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'RequestId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromServiceRequest', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a work order\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromWorkOrder(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // Are they  both actually required?!?!\n      // WorkOrderId\n      // WorkOrderSid ...do with only SID first then check\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'WorkOrderSid')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromWorkOrder', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Update an inspection\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated inspection\n   */\n  update(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      return new Promise((resolve, reject) => {\n        if(!_.has(insp_data, 'InspectionId')) {\n          reject(new CWError(1, 'InspectionId must be provided.', {'provided': insp_data}))\n        } else {\n          this.cw.runRequest('Ams/Inspection/Update', insp_data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Get an inspection by ID\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The inspection ID to retrieve\n   * @return {Object} Returns Promise that represents an object describing the inspection\n   */\n  getById(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/Inspection/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections by array of IDs\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - The inspection IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the inspections\n   */\n  getByIds(inspectionIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionIds: inspectionIds\n      }\n      this.cw.runRequest('Ams/Inspection/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to cancel the matched inspections\n   * @param {string} [cancelReason] - A reason for cancelling the inspection(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the inspection was cancelled\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   cancel(inspectionIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {InspectionIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { InspectionIds: inspectionIds }\n       if(typeof(cancelReason)!=='undefined') {\n         data.CancelReason = cancelReason\n       }\n       if(typeof(dateCancelled)!=='undefined') {\n         data.DateCancelled = dateCancelled\n       }\n       this.cw.runRequest('Ams/Inspection/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel inspections\n    *\n    * @category Requests\n    * @param {Array<number>} inspectionIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close inspections\n    *\n    * @category Inspections\n    * @param {Array<number>} inspectionIds - An array of the IDs to close the matched inspections\n    * @return {Object} Returns object that represents a collection of inspections\n    */\n    close(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Close', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Reopen closed inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   reopen(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Reopen', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Delete inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to delete the matched inspections\n   * @return {Object} Returns object that represents a collection of inspection Ids which have been deleted\n   */\n   delete(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Delete', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Search for inspections\n   *\n   * @category Inspection Search\n   * @param {Object} searchData - The search information to retrieve matched inspections, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents an array of the matching inspection IDs\n   */\n  search(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/Inspection/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the records on the basis of inspectionId, only populates InspectionId, InspTemplateName, and Location properties\n   *\n   * @category Inspection Object Search\n   * @param {string} inspectionId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents a collection of the matching (limited) inspection objects\n   */\n  searchObject(inspectionId: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get list of statuses\n   *\n   * @category Inspection Options\n   * @return {Object} Returns object that represents an array of all possible statuses for an Inspection\n   */\n  statuses() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Statuses', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection submit to list\n   *\n   * @category Inspection Options\n   * @param {boolean} [includeInactiveEmployees] - whether to include inactive employees in the return. Defaults to false.\n   * @param {boolean} [domainIds] - which domains to include in the return, default to All domains\n   * @return {Object} Returns object that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  submitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {IncludeInactiveEmployees?: boolean, DomainIds?: Array<number>} = {}\n      if(includeInactiveEmployees) {\n        data.IncludeInactiveEmployees = true\n      }\n      if(typeof(domainIds)!=='undefined') {\n        data.DomainIds = domainIds\n      }\n      this.cw.runRequest('Ams/Inspection/SubmitTos', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Add an entity to an existing inspection\n   * This method requires an Entity/Asset to be specified. You can either specify the Entity Type and its UID or a WorkOrderEntityBase Object.\n   *\n   * @category Inspections\n   * @param {Object} entity - Either of two attribute combinations are valid: entityType & entityUid OR Entity as a fully-inflated WorkOrderEntity (WorkOrderEntityBase) object.\n   * @param {number} inspectionId - An Inspection ID to attach the entity/asset to.\n   * @param {boolean} updateXY - Provide a boolean to whether the inspection's X/Y coordinates should be updated. Default is true.\n   * @param {Object} facility - Add Facility_Id for the Facility Identifier and Level_id for the Facility Level Identifier. Defaults to empty so that no facility is specified.\n   * @return {Object} Returns object that represents an object which describes an Inspection Entity\n   */\n  connectAsset(entity: {EntityType?: string, EntityUid?: string, Entity?: Object}, inspectionId: number, updateXY: boolean = true, facility: {Facility_Id?: string, Level_Id?: string} = {}) {\n   return new Promise((resolve, reject) => {\n     var data: {InspectionId: number, EntityType?: string, EntityUid?: string, Entity?: Object, Facility_Id?: string, Level_Id?: string} = {\n       InspectionId: inspectionId\n     }\n     if(_.has(entity, 'EntityType') && _.has(entity, 'EntityUid')) {\n       data.EntityType = entity.EntityType\n       data.EntityUid = entity.EntityUid\n     } else if(_.has(entity, 'Entity')) {\n       data.Entity = entity.Entity\n     } else {\n       // Throw error, no entity/asset provided\n     }\n     if(_.has(facility, 'Facility_Id')) {\n       data.Facility_Id = facility.Facility_Id\n     }\n     if(_.has(facility, 'Level_Id')) {\n       data.Level_Id = facility.Level_Id\n     }\n     this.cw.runRequest('Ams/Inspection/AddEntity', data).then(r => {\n       resolve(r.Value)\n     }).catch(e => {\n       // 4 NotAuthorizedToUpdateInspection\n       // 9 InvalidActivityMapLogicXY\n       // 21 ErrorUnknownEntityType\n       // 30 InvalidField\n       // 60 WarningItemNotFound\n       // 68 MoveInvalidCityworksWkid\n       reject(e)\n     })\n   })\n  }\n\n  /**\n   * Get the answers for inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspections - An Array of one or more Inspection IDs\n   * @return {Object} Returns Promise that represents a collection of Inspection Answers\n   */\n  getAnswers(inspections: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {InspectionId?: number, InspectionIds?: Array<number>} = {}\n      if(inspections.length==0) {\n        data.InspectionId = inspections[0]\n      } else {\n        data.InspectionIds = inspections\n      }\n      this.cw.runRequest('Ams/Inspection/Answers', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific Inspection\n   *\n   * @category Inspections\n   * @param {number} inspectionId - An Inspection ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {InspectionId: inspectionId}\n      this.cw.runRequest('Ams/Inspection/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n   *\n   * @category Inspections\n   * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @param {number} [searchName] - What to name your search (if it should be saved)\n   * @param {number} [sharedWithin] - What group or domain to share the search to.\n   * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n   * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      if(_.isString(searchName)) {\n        _.set(data, 'SearchName', searchName)\n        _.set(data, 'SaveDefinition', saveDefinition)\n        _.set(data, 'EnableEurl', enableEurl)\n        // not sure how to handle sharedWithin...\n        // _.set(data, 'SharedWithin', sharedWithin)\n      }\n      this.cw.runRequest('Ams/Inspection/CreateSearchDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle from\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents ... I have no idea what this endpoint does\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle intervals\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle intervals available\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle types\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle types available\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get districts\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents an Array of the districts\n   */\n  getDistricts() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Districts', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Move inspection by InspectionId. Must provide well known id (WKID) or well known text (WKT)\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The ID of the inspection that should be moved\n   * @param {number} x - The X coordinate for the move\n   * @param {number} y - The Y coordinate for the move\n   * @param {Object} projection_info - An object which must include either WKID: Int32 or WKT: String. Can also include VcsWKID.\n   * @param {number} [z] - the optional z coordinate for the move\n   * @return {Object} Returns Promise which represents a GISPoint object\n   */\n  move(inspectionId: number, x: number, y: number, projection_info?: Object, z?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId,\n        x: x,\n        y: y\n      }\n      if(typeof z != 'undefined') {\n        _.set(data, 'z', z)\n      }\n      if(typeof projection_info != 'undefined') {\n        if(_.has(projection_info, 'WKID')) {\n          _.set(data, 'WKID', _.get(projection_info, 'WKID'))\n        } else if(_.has(projection_info, 'WKT')) {\n          _.set(data, 'WKT', _.get(projection_info, 'WKT'))\n        }\n\n        if(_.has(projection_info, 'VcsWKID')) {\n          _.set(data, 'VcsWKID', _.get(projection_info, 'VcsWKID'))\n        }\n      }\n      this.cw.runRequest('Ams/Inspection/Move', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /////\n  // INSPECTION TEMPLATES\n  /////\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates by IDs\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspectionIds - An array of the IDs to retrieve the matched inspections\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns object that represents an object describing the inspection\n   */\n  getTemplatesByIds(inspTemplateIds: Array<number>, options?: {MaximumDateModified?: Date, MinimumDateModified?: Date}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types for inspection template(s)\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents an array of Entity Types\n   */\n   getTemplateEntityTypes(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/EntityTypes', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n  * Get the questions and answers for inspection template(s)\n  *\n  * @category Inspection Templates\n  * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n  * @return {Object} Returns object that represents an array which contains a list of InspQuestionPanel for the template\n  */\n  getQA(inspTemplateIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection template question conditions\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of template IDs to get the matched inspection template Question conditions for\n   * @return {Object} Returns object that represents an array which contains a dictionary of InspQuestion IDs to configs\n   */\n   getQConditions(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/QuestionConditions', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  // Attachments\n\n  // AddInspectionAttachment InspAttachment\n  // Add an inspection attachment\n  // Request Parameters\n  // Int32 AttachmentType V15_4\n  // String Comments\n  // String Filename\n  // Int32 req InspectionId\n  // Ams/Attachments/AddInspectionAttachment?data={\n  //   \"Comments\": null,\n  //   \"Filename\": null,\n  //   \"InspectionId\": null,\n  //   \"AttachmentType\": null\n  // }\n\n  /**\n   * Delete inspection attachments\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} attachmentIds - An array of inspection attachment IDs to delete\n   * @return {Object} Returns object that represents a boolean for action resolution\n   */\n   deleteAttachments(attachmentIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentIds: attachmentIds\n       }\n       this.cw.runRequest('Ams/Attachments/DeleteInspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Download an inspection attachment\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - ID of an inspection attachment to download\n   * @return {Object} Returns object that represents a file stream\n   */\n   downloadAttachment(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/DownloadInspectionAttachment', data).then(r => {\n         // TODO, pass file through // resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - An attachment ID to get info for\n   * @return {Object} Returns object that represents an object that describes the matched inspection attachment\n   */\n   getAttachmentById(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachmentById', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} inspectionIds - An array of inspection IDs to get attachments for\n   * @return {Object} Returns object that represents a collection of attachments from the matched inspections\n   */\n   getAttachments(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nimport { General } from './general'\nimport { ActivityLinks } from './activity_link'\nimport { Gis } from './gis'\nimport { MessageQueue } from './message_queue'\nimport { Search } from './search'\nimport { Request } from './request'\nimport { Inspection } from './inspection'\n\nconst https = require('https')\nconst querystring = require('querystring')\nconst _ = require('lodash')\n\ninterface postData {\n  data?: string\n  token?: string\n}\n\n/**\n * Core interface Citywork which defines the access vars for many of the functions and the connection settings\n */\ninterface Citywork {\n  base_url: any\n  settings: Object\n  login?: string\n  password?: string\n  Token?: string\n  gisToken?: string\n  gisTokenUrl?: string\n\n  default_domain?: any\n\n  general?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  // case?: Object\n  inspection?: Object\n  // workorder?: Object\n  request?: Object\n\n  extensions: Object\n  features: Object\n}\n\n/**\n * Core class Cityworks with most of the authentication and install capabilities functions\n */\nmodule.exports = class Cityworks implements Citywork {\n  /**\n   * The domain of the cityworks install. Defaults to Cityworks Online\n   */\n  base_url: string\n  /**\n   * Stores the currently in use authentication token\n   */\n  Token?: string\n  /**\n   * Stores the login username\n   */\n  login?: string\n  /**\n   * Holds the login password\n   */\n  password?: string\n  /**\n   * Holds the GIS Token for GIS-based Authentication (Portal)\n   */\n  gisToken?: string\n  /**\n   * Holds the GIS Token URL for GIS-based Authentication (Portal)\n   */\n  gisTokenUrl?: string\n  /**\n   * Stores settings including path (defaults to \"cityworks\"), secure (defaults to true), expires (defaults to null - does not expire), default_domain\n   */\n  settings: {\n    path: string,\n    secure: boolean,\n    expires: any,\n    default_domain?: any\n  }\n  error?: Object\n  general?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  search?: Object\n  request?: Object\n  inspection?: Object\n\n  extensions: Object\n  features: Object\n  potential_loads: Array<string>\n\n  /**\n     * Contructor for a new cityworks instance's object, allows one to optionally configure the domain and other settings right from the get-go\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'workorder', 'inspection', 'request', 'case']\n     */\n  constructor(base_url?: string, settings?: Object, load?: Array<string>) {\n    this.base_url = 'cityworksonline'\n    this.extensions = {\"UnknownExtension\": 0, \"CwAnalytics\": 1, \"WebHooks\": 2, \"PLLPublicApp\": 3, \"ActivityUpdate\": 4, \"SingleSignOn\": 5}\n    this.features = {\"UnknownFeature\": 0, \"ViewInspections\": 1, \"EditInspections\": 2, \"ViewServiceRequest\": 3, \"EditServiceRequest\": 4, \"ViewWorkOrder\": 5, \"EditWorkOrder\": 6, \"EquipmentCheckOut\": 7, \"OfficeField\": 8, \"Respond\": 9, \"Eurl\": 10, \"PaverInterface\": 11, \"Contracts\": 12, \"Storeroom\": 13, \"PLL\": 14, \"Cw4XL\": 15, \"TableEditor\": 16, \"CCTVInterface\": 17, \"MobileAndroid\": 18, \"MobileiOS\": 19, \"PerformanceBudgeting\": 20, \"Insights\": 21, \"RespondCase\": 22, \"RespondInspection\": 23, \"RespondServiceRequest\": 24, \"RespondTaskManager\": 25, \"RespondWorkOrder\": 26, \"Workload\": 27, \"OpX\": 28, \"TrimbleUnityMobile\": 29, \"TrimbleVegetationManager\": 30}\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n    this.potential_loads = ['general', 'activity_link', 'message_queue', 'gis', 'search', 'request']\n    if(typeof(base_url)!='undefined') {\n      this.configure(base_url, settings, load)\n    }\n  }\n\n  /**\n     * Configure a new cityworks instance's domain and other settings\n     *\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'search', 'workorder', 'inspection', 'request', 'case']\n     * @return {boolean} Returns true if successful, otherwise, throws error\n     */\n  configure(base_url?: string, settings?: Object, load?: Array<string>) {\n    if(typeof base_url !== 'undefined') { this.base_url = base_url } else { this.base_url = 'cityworksonline' }\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n\n    if(typeof(settings)!='undefined') {\n      _.forEach(settings, (v,k) => {\n        if(typeof(this.settings[k])!='undefined') {this.settings[k] = v}\n      })\n    }\n\n    if(typeof(load)=='undefined') {\n      this.general = new General(this)\n      this.activity_link = new ActivityLinks(this)\n      this.message_queue = new MessageQueue(this)\n      this.request = new Request(this)\n      this.inspection = new Inspection(this)\n    } else {\n      let _this = this\n      _.forEach(this.potential_loads, function(v) {\n        switch(v) {\n          case 'general':\n            _this.general = new General(_this)\n          break\n          case 'activity_link':\n            _this.activity_link = new ActivityLinks(_this)\n          break\n          case 'message_queue':\n            _this.message_queue = new MessageQueue(_this)\n          break\n          case 'gis':\n            _this.gis = new Gis(_this)\n          break\n          case 'search':\n            _this.search = new Search(_this)\n          break\n          case 'request':\n            _this.request = new Request(_this)\n          break\n          case 'inspection':\n            _this.inspection = new Inspection(_this)\n          break\n        }\n      })\n    }\n  }\n\n  /**\n     * Send a request to the Cityworks API\n     *\n     * If one ever needs to access or call an unimplemented API endpoint of a Cityworks install, one can call this method directly with the path and data payload:\n     *\n     * `cityworks.runRequest(path, data)`\n     *\n     * @param {string} path - The path to the particular endpoint\n     * @param {Object} data - The data object to be sent to the Cityworks API\n     * @return {Object} Returns Promise object that represents the json object returned from the Cityworks API\n     */\n  runRequest(path, data) {\n    return new Promise((resolve, reject) => {\n      let pd = {} as postData\n      pd.data = JSON.stringify(data)\n\n      if(typeof(this.Token) !== 'undefined' && this.Token != '' && path!='General/Authentication/CityworksOnlineAuthenticate' && path!='General/Authentication/Authenticate') {\n        pd.token = this.Token\n      }\n      let obj: {\n        Status: number,\n        Message: string\n      }\n      let options = {\n        hostname: this.base_url,\n        port: 443,\n        path: '/' + this.settings.path + '/services/' + path,\n        method: 'POST',\n        headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n           'Content-Length': Buffer.byteLength(querystring.stringify(pd))\n        },\n        timeout: 10000000\n      }\n\n      let request = https.request(options, (response) => {\n          let str=''\n          response.on('error',function(e){\n              console.log(e, 'Caught on error')\n              reject(new CWError(13, \"Unknown error.\", e))\n          })\n\n          response.on('data',function(chunk){\n              str+=chunk\n          })\n\n          response.on('end',function(){\n            try {\n              var test_str = JSON.stringify(str) + \"[test string]\"\n              if(test_str.match(/\\<h2\\>Object\\ moved\\ to/)==null) {\n                var obj=JSON.parse(str)\n                // if(path=='General/ActivityNotification/UserWatching') {\n                //   console.log(str, options, pd, obj)\n                // }\n                if(typeof(obj)=='undefined') {\n                  // failed\n                  reject(new CWError(10, 'No response received from Cityworks API.'))\n                } else if(typeof(obj)!='undefined' && typeof(obj.Value)!='undefined') { // && typeof(response.Value.Token)!='undefined') {\n                  // console.log(str, options, pd, obj)\n                  resolve(obj)\n                } else {\n                  reject(new CWError(3, \"Unknown error.\", {options: options, postedData: pd, api_returned_string: obj}))\n                }\n              } else {\n                reject(new CWError(1, \"Error parsing JSON. Cityworks returned HTML.\", {response: str}))\n              }\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log('try/catch error on JSON')\n                reject(new CWError(1, \"Error parsing JSON.\", {error: e}))\n              } else {\n                console.log('try/catch error on JSON')\n                reject(new CWError(1, \"Error parsing JSON.\"))\n              }\n            }\n          })\n      })\n      request.write(querystring.stringify(pd))\n      request.end()\n    })\n  }\n\n  /**\n     * Authenticate with the Cityworks API and store an access token for use. Stores the token on cityworks.Token.\n     * @param {string} login - User's login name\n     * @param {password} password - User's password\n     * @return {Object} Returns Promise object that represents a boolean which tells you the login succeeded (true) or failed (false).\n     */\n  authenticate(login: string, password: string) {\n    return new Promise((resolve, reject) => {\n      let data = { LoginName:login, Password:password }\n      let path = 'General/Authentication/Authenticate'\n      if(this.base_url == 'cityworksonline') {\n        path = 'General/Authentication/CityworksOnlineAuthenticate'\n      }\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          reject(new CWError(10, response.Message))\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.login = login\n          this.password = password\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          reject(new CWError(11, 'Unknown Error'))\n        }\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  }\n\n  /**\n     * Authenticate a username with a GIS Token\n     * @param {login} - Gis user name, should match a Cityworks employee login name\n     * @param {string} gisToken - Gis Oauth2 access token\n     * @param {string} gisTokenUrl - Base url to GIS server (not the '/generateToken' endpoint)\n     * @param {number} [expires] - Authenticate to Cityworks for a specified number of milliseconds, defaults to 2 weeks\n     */\n  authenticateWithGISToken(login: string, gisToken: string, gisTokenUrl: string, expires?: number) {\n    this.login = login\n    this.gisToken = gisToken\n    this.gisTokenUrl = gisTokenUrl\n    if(typeof(expires)!='undefined') {\n      expires = 1209600000\n    }\n\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/AuthenticateGisToken'\n      let data = { LoginName:this.login, GisToken: this.gisToken, GisTokenUrl: this.gisTokenUrl, Expires: expires}\n\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          // TODO: CWError here.\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          resolve(false)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Validate provided token\n     * @param {string} token - User's login name\n     * @param {boolean} [set] - Set a valid token as the cityworks instance's active token\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the token's validity and that is was set (true) or throws an error if was not valid (and not set).\n     */\n  validateToken(token:string, set?:boolean) {\n    return new Promise((resolve, reject) => {\n      if(typeof(set)=='undefined') {\n        let set = false\n      }\n      let data = { Token: token }\n      let path = 'General/Authentication/Validate'\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          resolve(false)\n        } else {\n          if(set) {\n            this.Token = token\n          }\n          resolve(response.Value)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Set a token you've retrieved from your storage system as the active token for the cityworks instance. Note that this doesn't check the token for validity.\n     * @param {token} token - The token string to set as the active token.\n     * @return {boolean} Returns a boolean which apprises one that the token was set (true) or not set (false).\n     */\n  setToken(token) {\n    if(token!='' && token!=null) {\n      this.Token = token\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n     * Get currently set, valid token\n     * @param {token} token - The token string to set as the active token.\n     * @return {string} Returns a string which is the currently-set token or the boolean false value if no (valid) token set\n     */\n  getToken() {\n    if(this.Token=='' || this.Token==null) {\n      return false\n    } else {\n      return this.Token\n    }\n  }\n\n  /**\n     * Revoke all current user's tokens or only tokens created before a particular date and time.\n     * @param {number} [revokeBefore] - Datetime as an Epoch integer (number), if you wish to revoke only tokens created before a particular datetime\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the revocation outcome's success (true) or failure (false)\n     */\n  revokeToken(revokeBefore?:number) {\n    return new Promise((resolve, reject) => {\n      let data = { RevokeDate: revokeBefore }\n      let path = 'General/Token/RevokeUser'\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          resolve(false)\n        } else {\n          resolve(true)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  // App data\n\n  /**\n     * Get the localization settings for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the localization settings for the current Cityworks install\n     */\n  getLocalizationSettings() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/LocalizationSettings'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the system timezone options for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the timezone settings for the currentCityworks install\n     */\n  getTimezoneOptions() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/TimeZones'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the current install's location information\n     * @return {Object} Returns Promise object that represents an Object which contains the location information\n     */\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/CurrentLocation'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  // Licensing Checks\n  /**\n     * Check if a particular license is available to the currently-authenticated user\n     * @param {string} area - Area of access\n     * @param {string} service - Service to access\n     * @return {boolean} Returns Promise object that represents a boolean which informs access is granted (true) or denied (false)\n     */\n  licensedApiCheck(area: string, service: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"Area\": area,\n        \"Service\": service\n      }\n      let path = 'General/AppData/SelectedEntities'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if a current Cityworks install is licensed to use a particular extension\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {string} extension - Extension name\n     * @return {boolean} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionCheck(extension: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.extensions[extension])=='undefined') {\n        reject(new CWError(4, 'Extension provided does not exist or is mispelled.', {'provided': extension, 'available': this.extensions}))\n      }\n      let data = {\n        \"Extension\": this.extensions[extension]\n      }\n      let path = 'General/Authorization/LicensedExtensionCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check a whole list to see if current Cityworks install is licensed to use extensions\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {Array<string>} extension - Extension names\n     * @return {Object} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionsCheck(extensions: Array<string>) {\n    return new Promise((resolve, reject) => {\n        var data: { Extensions: Array<number> } = {\n          Extensions: []\n        }\n      _.forEach(extensions, (v) => {\n        if(typeof(this.extensions[v])=='undefined') {\n          reject(new CWError(5, 'Extension provided does not exist or is mispelled.', {'provided': v, 'available': this.extensions}))\n        } else {\n          data.Extensions.push(this.extensions[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedExtensionsCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_extensions = _.invert(this.extensions)\n        _.forEach(response, (ext_num, bool) => {\n          if(typeof(inv_extensions[ext_num])=='undefined') {\n            reject(new CWError(6, 'Extension index provided does not exist or isn\\'t configured properly.', {'provided_num_returned': ext_num, 'available': this.extensions}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_extensions[ext_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use a feature:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {string} [feature] - Feature to check to see if ciurrently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeatureCheck(feature: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.features[feature])=='undefined') {\n        reject(new CWError(7, 'Feature provided does not exist or is mispelled.', {'provided': feature, 'available': this.features}))\n      }\n      let data = {\n        \"Feature\": this.features[feature]\n      }\n      let path = 'General/Authorization/LicensedFeatureCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use features:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {Array<string>} [feature] - Features to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeaturesCheck(features: Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data: { Features: Array<number> } = {\n        Features: []\n      }\n      _.forEach(features, (v: string) => {\n        if(typeof(this.features[v])=='undefined') {\n          reject(new CWError(8, 'Feature provided does not exist or is mispelled.', {'provided': v, 'available': this.features}))\n        } else {\n          data.Features.push(this.features[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedFeaturesCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_features = _.invert(this.features)\n        _.forEach(response.Value, (feat_num, bool) => {\n          if(typeof(inv_features[feat_num])=='undefined') {\n            reject(new CWError(9, 'Feature index provided does not exist or isn\\'t configured properly.', {'provided': feat_num, 'available': inv_features}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_features[feat_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  // LicensedServicesCheck\n  // Check if current user is licensed to use services\n  // List req ServicesList of 'Area/Service', i.e. ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n  /**\n     * Check if current user is licensed to use services. List req ServicesList of 'Area/Service', i.e.:\n     *\n     * ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n     *\n     * @param {Array<string>} [services] - Services to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedServicesCheck(services: Array<string>) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authorization/LicensedServicesCheck'\n      var data: { Services: Array<string> } = {\n        Services: services\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of CityworksOnline sites for this user\n     *\n     * @param {string} [login] - Login Name to use when checking. Defaults to previously-stored login name.\n     * @param {string} [password] - Password to use when checking. Defaults to previously-stored password.\n     * @return {Object} Returns Promise object that represents an array of cityworks online sites available to this user.\n     */\n  cityworksOnlineSites(login?: string, password?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/CityworksOnlineSites'\n      var data = {\n        LoginName: (typeof(login)!='undefined') ? login: this.login,\n        Password:  (typeof(password)!='undefined') ? password : this.password\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a collection of the configured domains.\n     */\n  domains() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Domains'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @param {string} [login] - Optional login name to get user information for. Defaults to currently-set user name used for login.\n     * @return {Object} Returns Promise object that represents an Object with the user information\n     */\n  user(login?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/User'\n      let data = { LoginName: (typeof(login)!='undefined') ? login: this.login }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the software version number of the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a string of the version number\n     */\n  version() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Version'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n\n\n // export default new Cityworks() as cityworks\n"],"names":["CWError","constructor","code","message","info","name","this","JSON","stringify","_","require","General","cw","notifications","Promise","resolve","reject","runRequest","then","response","Value","amIWatching","activityType","activityId","aType","null","case","task","provided","potential_activities","ActivityType","ActivityId","r","catch","e","quickSearch","text","QuickSearchText","getActivityMetadataByIds","ids","table","tables","indexOf","available","Ids","TableName","console","log","getWOEntityCostSummary","object_ids","ObjectIds","searchWOEntityCostSummary","search_id","SearchId","ActivityLinks","activityTypes","linkTypes","ReversibleMap","set","add","source_type","source_sid","destination_type","destination_sid","link_type","has","options","data","SourceType","get","SourceSid","DestType","DestSid","LinkType","type","sids","ActivitySids","_this","return_data","Array","forEach","link","key","push","clone","SourceActivityType","SourceActivitySid","DestinationActivityType","DestinationActivitySid","delete","activity_link_id","ActivityLinkId","remove","Gis","getConfig","whichType","whichId","getGisData","context","toLowerCase","domain","domainId","downloadMobile","cacheId","initialExtent","request","requestId","inspection","inspectionId","workOrder","workOrderSid","user","allDomains","allGroups","selectedEntities","MessageQueue","status","hook_types","Pending","Processing","Complete","Failed","Unknown","ActivityUpdate","Email","WebHook","processMessages","delete_successful","Delete","maxcount","MaxCount","Status","hours_to_keep","HoursToKeep","preferences","search","parameters","max_results","MaxResults","allowed_params","disallowed_params","v","k","value","concat","update","HookType","updateMessageStatus","getWebooks","hook_ids","HookIds","Search","Request","create","sr_data","changeProblem","problemSid","RequestId","ProblemSid","getById","getByIds","requestIds","RequestIds","getAuditLog","getCustomFields","changeCustomFieldCategory","categoryId","CategoryId","comment","Comments","cancel","cancelReason","dateCancelled","CancelReason","DateCancelled","uncancel","close","Message","reopen","searchData","searchObject","createSearchDefinition","searchName","sharedWithin","saveDefinition","enableEurl","isString","getProblemNodes","viewOnly","displayMode","includeCancelled","DomainId","IncludeCancelled","ViewOnly","getProblems","forPublicOnly","onlyActiveTemplates","domainIds","ForPublicOnly","OnlyActiveTemplates","getProblemsByKeywords","keywords","Keywords","getPriorities","ProblemSids","getCustomFieldTemplate","getQASettings","getProblemLeaf","getStatuses","DomainIds","getDispatchTo","getSubmitTo","DmainId","streetCodes","getTemplatesById","problemSids","minimumDateModified","maximumDateModified","createTemplateSearchDefinition","getTemplateQAs","searchTemplates","getTemplates","templateIds","canCreate","includeInactiveIf","CanCreate","IncludeInactiveIf","getWOTemplates","includeInactive","IncludeInactive","Inspection","insp_data","createFromEntities","createFromParent","createFromServiceRequest","createFromWorkOrder","InspectionId","inspectionIds","InspectionIds","statuses","submitTos","includeInactiveEmployees","IncludeInactiveEmployees","connectAsset","entity","updateXY","facility","EntityType","EntityUid","Entity","Facility_Id","Level_Id","getAnswers","inspections","length","getCycleFrom","getCycleIntervals","getCycleTypes","getDistricts","move","x","y","projection_info","z","entityTypes","EntityTypes","forIn","getTemplatesByIds","inspTemplateIds","InspTemplateIds","getTemplateEntityTypes","getQA","getQConditions","deleteAttachments","attachmentIds","AttachmentIds","downloadAttachment","attachmentId","AttachmentId","getAttachmentById","getAttachments","https","querystring","module","exports","base_url","settings","load","Token","login","password","gisToken","gisTokenUrl","error","general","activity_link","message_queue","gis","extensions","features","potential_loads","UnknownExtension","CwAnalytics","WebHooks","PLLPublicApp","SingleSignOn","UnknownFeature","ViewInspections","EditInspections","ViewServiceRequest","EditServiceRequest","ViewWorkOrder","EditWorkOrder","EquipmentCheckOut","OfficeField","Respond","Eurl","PaverInterface","Contracts","Storeroom","PLL","Cw4XL","TableEditor","CCTVInterface","MobileAndroid","MobileiOS","PerformanceBudgeting","Insights","RespondCase","RespondInspection","RespondServiceRequest","RespondTaskManager","RespondWorkOrder","Workload","OpX","TrimbleUnityMobile","TrimbleVegetationManager","path","secure","expires","default_domain","configure","pd","token","hostname","port","method","headers","Buffer","byteLength","timeout","str","on","chunk","match","obj","parse","postedData","api_returned_string","SyntaxError","write","end","authenticate","LoginName","Password","authenticateWithGISToken","GisToken","GisTokenUrl","Expires","validateToken","setToken","getToken","revokeToken","revokeBefore","RevokeDate","getLocalizationSettings","getTimezoneOptions","getCurrentLocation","licensedApiCheck","area","service","Area","Service","licensedExtensionCheck","extension","Extension","licensedExtensionsCheck","Extensions","rez","inv_extensions","invert","ext_num","bool","provided_num_returned","licensedFeatureCheck","feature","Feature","licensedFeaturesCheck","Features","inv_features","feat_num","licensedServicesCheck","services","Services","cityworksOnlineSites","domains","version"],"mappings":"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"}