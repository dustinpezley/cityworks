{"version":3,"file":"index.modern.js","sources":["../src/error.ts","../src/general.ts","../src/activity_link.ts","../src/gis.ts","../src/message_queue.ts","../src/search.ts","../src/request_admin.ts","../src/request.ts","../src/inspection_admin.ts","../src/inspection.ts","../src/workorder_admin.ts","../src/workorder.ts","../src/case_data.ts","../src/case_financial.ts","../src/case_workflow.ts","../src/case_admin.ts","../src/case.ts","../src/cityworks.ts"],"sourcesContent":["interface CWErrorInt {\n  name: string\n  code: number\n  message: string\n  info?: string\n}\n\n/**\n * CWError implements a custom error class for this codebase with additional information\n *\n * `{name: string, code:number, info: object}`\n *\n */\nexport class CWError implements CWErrorInt {\n  /**\n   * Just statically set to \"Cityworks Exception\" for now\n   */\n  name: string\n  /**\n   * Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   */\n  code: number\n  /**\n   * The error message\n   */\n  message: string\n  /**\n   * Object stuffed with any other information one wishes to include in the thrown error\n   */\n  info?: string\n\n  /**\n   * CWError implements a custom error class for this codebase with additional information\n   *\n   * @param {number} code - Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   * @param {string} message - The error message\n   * @param {Object} info - Object stuffed with any other information one wishes to include in the thrown error\n   * @return {Object} Returns instance of CWError object\n   */\n  constructor(code:number, message:string, info?:object) {\n    this.name = \"Cityworks Exception\"\n    this.code = code\n    this.message = message\n    if(typeof(info) !== 'undefined') {\n      this.info = JSON.stringify(info)\n    }\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n/**\n * A plugin that contains \"general\" methods for a Cityworks install\n */\nexport class General {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get notifications for currently authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of available notifications\n   */\n  notifications() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('General/ActivityNotification/User', {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n\n  /**\n   * Find out if the current user is watching a particular activity (case, task, null [as a string])\n   *\n   * @param {string} activityType - which activity type the following ID will be for.\n   * @param {number} activityId - activity Case or CaseTask (task instance) ID to check\n   * @return {Object} Returns Promise object that represents a boolean indicating the currently authenticated user is watching the provided activity\n   */\n  amIWatching(activityType, activityId: number) {\n    return new Promise((resolve, reject) => {\n      let aType = {'null': 0, 'case': 1, 'task': 2}\n      if(typeof(aType[activityType])=='undefined') {\n        // reject with error\n        reject(new CWError(1, \"Activity type provided does not exist.\", {provided: activityType, potential_activities: aType}))\n      } else {\n        let data = {\"ActivityType\": aType[activityType], \"ActivityId\": activityId}\n        this.cw.runRequest('General/ActivityNotification/UserWatching', data).then(r => {\n          // console.log(r, 'response')\n          resolve(r.Value)\n        }).catch(e => {\n          reject(new CWError(2, \"Unknown error.\"))\n        })\n      }\n    })\n  }\n\n  /**\n   * Do a \"quick\" search for any string (an ID is best)\n   *\n   * @param {string} text - text to search the system for\n   * @return {Object} Returns Promise object that represents a collection of the currently authenticated user's notifications\n   */\n  quickSearch(text: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"QuickSearchText\": text,\n      }\n      this.cw.runRequest('General/QuickSearch/QuickSearch', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get CwMetatData by Type and CwSid\n   *\n   * @param {Array<number>} Ids\n   * @param {string} TableName - INSPECTION, REQUEST, WORKORDER require View permission on the activities\n   * @return {Object} Returns Promise object that represents a\n   */\n  getActivityMetadataByIds(ids: Array<number>, table: string) {\n    return new Promise((resolve, reject) => {\n      let tables = [\"INSPECTION\", \"REQUEST\", \"WORKORDER\"]\n      if(_.indexOf(tables, table)==-1) {\n        reject(new CWError(2, 'TableName provided does not exist or is mispelled.', {'provided': table, 'available':tables}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"TableName\": table\n      }\n      this.cw.runRequest('General/CwMetaData/ByTableNameSids', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities\n   *\n   * @param {Array<number>} ObjectIds\n   * @return {Object} Returns Promise object that represents a\n   */\n  getWOEntityCostSummary(object_ids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"ObjectIds\": object_ids\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities selected through a search definition\n   *\n   * @param {number} SearchId - Search Definition Id\n   * @return {Object} Returns Promise object that represents a\n   */\n  searchWOEntityCostSummary(search_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"SearchId\": search_id\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntitySearch', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\ninterface ActivityLink {\n  linkTypes: ReversibleMap<string, number>\n  activityTypes: ReversibleMap<string, number>\n  cw: any\n}\n\n/**\n * ActivityLinks implements the activity link functions\n *\n */\nexport class ActivityLinks implements ActivityLink {\n  /**\n   * Activity types to map string to number for internal use. Activity types available are:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   */\n  activityTypes: ReversibleMap<string, number>\n  /**\n   * Link types to map string to number for internal use. Link types available are:\n   *\n   *      \"null\", \"parent\", \"related\"\n   */\n  linkTypes: ReversibleMap<string, number>\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"null\", 0)\n    this.activityTypes.set(\"case\", 1)\n    this.activityTypes.set(\"inspection\", 2)\n    this.activityTypes.set(\"request\", 3)\n    this.activityTypes.set(\"workorder\", 4)\n    this.activityTypes.set(\"wipcase\", 5)\n\n    this.linkTypes = new ReversibleMap<string, number>()\n    this.linkTypes.set(\"null\", 0)\n    this.linkTypes.set(\"parent\", 1)\n    this.linkTypes.set(\"related\", 2)\n  }\n\n  /**\n   * Create a new activity link between two items.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  add(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(3, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Add'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Get the links for a particular node type by ID.\n   *\n   * @param {string} type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {Array<number>} sids - Array of numeric (S)IDs you wish to get of the specified type\n   * @return {Object} Returns Promise object that represents a collection\n   */\n  get(type: string, sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(type)) {\n        reject(new CWError(4, 'Activity type not found.', {'provided': type, 'options':this.activityTypes}))\n      }\n      let data = {\n        ActivityType: this.activityTypes.get(type),\n        ActivitySids: sids\n      }\n      let _this = this\n      let path = 'General/ActivityLink/ByActivitySids'\n      this.cw.runRequest(path, data).then((response: any) => {\n        let return_data = new Array()\n        _.forEach(response.Value, (link, key) => {\n          link.DestType = _this.activityTypes.get(link.DestType)\n          link.SourceType = _this.activityTypes.get(link.SourceType)\n          link.LinkType = _this.linkTypes.get(link.LinkType)\n          return_data.push(link)\n        })\n        resolve(return_data)\n      })\n    })\n  }\n\n  /**\n   * Clone a current activity link.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to clone a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to clone a link between SID as destination and a particular source\n   * @return {Object} Returns Promise object that represents a\n   */\n  clone(source_type: string, source_sid: number, destination_type: string, destination_sid: number) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      let data = {\n        SourceActivityType: this.activityTypes.get(source_type),\n        SourceActivitySid: source_sid,\n        DestinationActivityType: this.activityTypes.get(destination_type),\n        DestinationActivitySid: destination_sid\n      }\n      let path = 'General/ActivityLink/CloneByActivitySid'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Delete an activity link by ID\n   *\n   * @param {number} activity_link_id - The ID of the activity link one wishes to delete\n   * @return {Object} Returns Promise object that represents a\n   */\n  delete(activity_link_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        ActivityLinkId: activity_link_id\n      }\n      let path = 'General/ActivityLink/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Remove a link by specifying everything.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  remove(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(1, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Remove'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Gis {\n  /**\n   * @hidden\n   */\n  cw: any;\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw;\n  }\n\n  /**\n   * Get gis service configuration for user, group, domain, or service id\n   *\n   * @param {string} [whichType] - domain, group, mapservice, or user\n   * @param {number} [whichId] - domain, group, mapservice, or user Id\n   * @param {number} [getGisData] - If true, check for feature server JSON data, default is true\n   * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  getConfig(whichType, whichId, getGisData: boolean = true, context: Array<string> = []) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      whichType = whichType.toLowerCase();\n      let data: {DomainId?: any, GroupId?: any, MapServiceId?: any, UserId?: any, GetGisData: boolean, Security: Array<string>}\n      switch(whichType) {\n        case 'domain':\n          data = {DomainId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'group':\n          data = {GroupId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'mapservice':\n          data = {MapServiceId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'user':\n          data = {UserId:whichId, GetGisData: getGisData, Security: context}\n          break;\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n    * Get domain gis services\n    *\n    * @param {number} domainId - The mobile map cache Id to download\n    * @return {Object} Returns Promise object that represents an Object with the domain's default GIS services\n    */\n  domain(domainId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      let data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Download mobile map cache\n     *\n     * @param {number} cacheId - The mobile map cache Id to download\n     * @return {Object} Returns Promise object that represents a streaming download (?)\n     */\n  downloadMobile(cacheId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/DownloadMobileMapCache';\n      let data = {\n        MobileMapCacheId: cacheId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get initial extent for user\n   *\n   * @return {Object} Returns Promise object that represents ... (?)\n   */\n  initialExtent() {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InitialExtent';\n      let data = {};\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get service request gis services\n   *\n   * @param {number} requestId - The work order to check against.\n   * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n   * @return {Object} Returns Promise object that represents an Object with the specified request's entit(y|ies)\n   */\n  request(requestId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/ServiceRequestConfiguration';\n      let data = {\n        RequestId: requestId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get inspection gis services\n     *\n     * @param {number} inspectionId - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified inspection's entity\n     */\n  inspection(inspectionId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InspectionConfiguration';\n      let data = {\n        InspectionId: inspectionId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get workorder gis services\n     *\n     * @param {number} workOrderSid - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified work order's entit(y|ies)\n     */\n  workOrder(workOrderSid, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/WorkOrderConfiguration';\n      let data = {\n        WorkOrderSid: workOrderSid,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get service request gis services\n     *\n     * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n     * @param {boolean} [allDomains] services assigned to any domain the user belongs to, default is true\n     * @param {boolean} [allGroups] services assigned to any groups the user belongs to regardless of domain, default is true\n     * @param {boolean} [getGisData] If true, check for feature server JSON data, default is true\n     * @return {Object} Returns Promise object that represents an Object with the user's GIS services\n     */\n  user(context: Array<string> = [], allDomains: boolean = true, allGroups: boolean = true, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/User';\n      let data = {\n        AllDomains: allDomains,\n        AllGroups: allGroups,\n        GetGisData: getGisData,\n        Security: context\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n\n  /**\n     * Get currently selected entities from the Cityworks install's session for your user\n     * @return {Object} Returns Promise object that represents an Object with the currently-selected entities\n     */\n  selectedEntities() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/SelectedEntities';\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get Geocode server info by ServerId\n   *\n   * @param {number} ServiceId\n   * @return {Object} Returns Promise object that represents an object describing the provided Geocoder service configuration\n   */\n   // Gis/GeoCode/GeocodeServer\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class MessageQueue {\n  /**\n   * @hidden\n   */\n  cw: any\n  /**\n   * Statuses -\n   * Pending: 0,\n   * Processing: 1,\n   * Complete: 2,\n   * Failed: 3\n   */\n  status: Object\n  /**\n   * Hook Types -\n   * Unknown: 0,\n   * ActivityUpdate: 1,\n   * Email: 2,\n   * WebHook: 3\n   */\n  hook_types: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.status = {\n      Pending: 0,\n      Processing: 1,\n      Complete: 2,\n      Failed: 3\n    }\n    this.hook_types = {\n      Unknown: 0,\n      ActivityUpdate: 1,\n      Email: 2,\n      WebHook: 3\n    }\n  }\n\n  /**\n   * Process Webhook MessageQueue records by MessageQueueId\n   *\n   * @param {Array<number>} [ids] - List of MessageQueueId values\n   * @param {boolean} [delete_successful] - automatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  processMessages(ids: Array<number>, delete_successful: boolean = false) {\n    return new Promise((resolve, reject) => {\n      let data = { Ids: ids, Delete: delete_successful}\n      let path = 'General/WebHookEvent/ProcessMessages'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  /**\n   * Get Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status -\n   * @param {number} [maxcount] - Maximum number returned. Defaults to 15\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  get(ids: Array<number>, status: string, maxcount: number = 15) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(1, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"MaxCount\": typeof(maxcount)!='undefined' ? maxcount : 15,\n        \"Status\": this.status[status]\n      }\n      let path = 'General/MessageQueue/ByIds'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  /**\n   * Delete Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status - automatically delete messages that complete with successful execution, default is false\n   * @param {number} [hours_to_keep] - utomatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  delete(ids: Array<number>, status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  // PreferencesList<GlobalPreference>\n  // Base response type: CoreResponseBase\n  // Get a list of message queue preferences\n  // This method has no parameters\n  preferences() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      let path = 'General/MessageQueue/Preferences'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  search(parameters, max_results?: number) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(max_results)!=='undefined') {\n        data.MaxResults = max_results\n      }\n      let allowed_params = ['Id', 'HookId', 'HookType', 'Result', 'DateCreatedBegin', 'DateCreatedEnd', 'DateUpdatedBegin', 'DateUpdatedEnd']\n      let disallowed_params = ['Status', 'MaxResults']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(4, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n      let path = 'General/MessageQueue/Search'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Update queue message\n   *\n   * @param {Object} parameters - Provide allowed parameters:\n   *\n   *      {\n   *        HookId: number,\n   *        Id: number,\n   *        Packet: string,\n   *        Result: string,\n   *        Status: string, // Available options: Pending, Processing, Complete, Failed\n   *        HookType: string // Available options: Unknown, ActivityUpdate, Email, WebHook\n   *      }\n   *\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  update(parameters: any) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.hook_types, 'available':this.hook_types}))\n      } else if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])!=='undefined') {\n        data.HookType = this.hook_types[parameters.hook_types]\n      }\n      let allowed_params = ['Id', 'HookId', 'Packet', 'Result']\n      let disallowed_params = ['Status', 'HookType']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(5, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n\n      let path = 'General/MessageQueue/Update'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  updateMessageStatus(ids: number[], status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/UpdateMessageStatus'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  getWebooks(hook_ids) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"HookIds\": hook_ids\n      }\n      let path = 'General/MessageQueue/WebHooks'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Search {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class RequestAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { RequestAdmin } from './request_admin'\n\nexport class Request {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Request Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new RequestAdmin(cw)\n  }\n\n  /**\n   * Create new requests\n   *\n   * @category Requests\n   * @param {Object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created request\n   */\n  create(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'ProblemSid')) {\n        reject(new CWError(2, 'ProblemSid must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Create', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a request\n   *\n   * @category Requests\n   * @param {object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  update(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'RequestId')) {\n        reject(new CWError(3, 'RequestId must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Update', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Move a request's point\n   *\n   * @category Requests\n   * @param {number} requestId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(requestId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        RequestId: requestId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'Z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/ServiceRequest/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Change a request's problem code\n   *\n   * @category Requests\n   * @param {number} requestId - The request ID to change\n   * @param {number} problemSid - The request's new ProblemSID\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  changeProblem(requestId: number, problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId,\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeProblem', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a request by ID\n   *\n   * @category Requests\n   * @param {number} requestId - The ID of the request to retrieve\n   * @return {Object} Returns Promise that represents an object describing the request\n   */\n  getById(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get requests by array of IDs\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The request IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the requests\n   */\n  getByIds(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific request\n   *\n   * @category Requests\n   * @param {number} requestId - A Request ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {RequestId: requestId}\n      this.cw.runRequest('Ams/ServiceRequest/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom fields for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFields(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/CustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Change custom field category for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @param {number} categoryId - The new custom field grouping/category which should be assigned to the provided requests\n   * @return {Object} Returns Promise that represents a collection of requests\n   */\n  changeCustomFieldCategory(requestIds: Array<number>, categoryId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n        CategoryId: categoryId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeCustomFieldCategory', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add a comment to a request\n   *\n   * @category Requests\n   * @param {number} requestId - The ID of the request to retrieve\n   * @param {string} comment - The comment text to add\n   * @return {Object} Returns Promise that represents an object describing the comment added\n   */\n  comment(requestId: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/ServiceRequest/AddComments', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to cancel the matched requests\n   * @param {string} [cancelReason] - A reason for cancelling the request(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the request was cancelled\n   * @return {Object} Returns object that represents a collection of requests\n   */\n   cancel(requestIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {RequestIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { RequestIds: requestIds }\n       if(typeof(cancelReason)!=='undefined')\n         _.set(data, 'CancelReason', cancelReason);\n       if(typeof(dateCancelled)!=='undefined')\n         _.set(data, 'DateCancelled', dateCancelled);\n       this.cw.runRequest('Ams/ServiceRequest/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to close the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    close(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed requests\n     *\n     * @category Requests\n     * @param {Array<number>} requestIds - An array of the IDs to reopen the matched requests\n     * @return {Object} Returns object that represents a collection of requests\n     */\n     reopen(requestIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           RequestIds: requestIds\n         }\n         this.cw.runRequest('Ams/ServiceRequest/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to delete the matched requests\n   * @return {Object} Returns object that represents a collection of request Ids which have been deleted\n   */\n   delete(requestIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestIds: requestIds\n       }\n       this.cw.runRequest('Ams/ServiceRequest/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Search for requests\n    *\n    * @category Request Search\n    * @param {Object} searchData - The search information to retrieve matched requests, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents an Array of the matching request IDs\n    */\n   search(searchData: Object) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       this.cw.runRequest('Ams/ServiceRequest/Search', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the records on the basis of RequestId, only populates RequestId, Description, ProblemCode properties\n    *\n    * @category Request Object Search\n    * @param {string} requestId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents a collection of the matching (limited) request objects\n    */\n   searchObject(requestId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestId: requestId\n       }\n       this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Requests\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n    */\n   createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         _.set(data, 'EnableEurl', enableEurl)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequest/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get a list of problem nodes for a domain\n   *\n   * @category Request Categorization\n   * @param {number} domainId - The domain ID for which to retrieve problem nodes.\n   * @param {boolean} viewOnly - Return only view only problem nodes. Defaults to false.\n   * @param {Object} [displayMode] - Object that should contain two properties if you provide it: DisplayTextMode: string (C = Code, D = Description, CD = Code ~ Description). DisplayTextDelimeter: string, only impacts CD display text mode.\n   * @param {boolean} includeCancelled - Return only cancelled problem nodes as well. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of problem node objects.\n   */\n  getProblemNodes(domainId: number, viewOnly: boolean = false, displayMode?: Object, includeCancelled: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainId: domainId,\n        IncludeCancelled: includeCancelled,\n        ViewOnly: viewOnly\n      }\n      if(typeof displayMode != 'undefined' && displayMode !== null && _.has(displayMode, 'DisplayTextMode')) {\n        _.set(data, 'DisplayTextMode', _.get(displayMode, 'DisplayTextMode'))\n        if(_.get(displayMode, 'DisplayTextMode')=='CD' && _.has(displayMode, 'DisplayTextDelimeter')) {\n          _.set(data, 'DisplayTextDelimeter', _.get(displayMode, 'DisplayTextDelimeter'))\n        }\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemNodes', data).then(r => {\n        // console.log(_.filter(r, function(o) { return !o.Cancel; }), 'filter');\n        // console.log(_.some(r.Value, ['Cancel', true]), 'some');\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes\n   *\n   * @category Request Options\n   * @param {boolean} forPublicOnly - Return only publicly-available service requests. Defaults to false.\n   * @param {boolean} onlyActiveTemplates - Return only active templates. Defaults to true.\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblems(forPublicOnly: boolean = false, onlyActiveTemplates: boolean = true, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ForPublicOnly: forPublicOnly,\n        OnlyActiveTemplates: onlyActiveTemplates\n      }\n      if(typeof domainIds != 'undefined') {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Problems', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes by keywords\n   *\n   * @category Request Options\n   * @param {string} keywords - Keywords to search for potential problem codes\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblemsByKeywords(keywords: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Keywords: keywords\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemsByKeywords', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of a problem code's priorities\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return priorities for given problemSid\n   * @return {Object} Returns Promise that represents an Array of priorities\n   */\n  getPriorities(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Priorities', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field templates for problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose template custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFieldTemplate(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/TemplateCustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the questions and answer options for a problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose Q&A should be returned\n   * @return {Object} Returns Promise that represents a collection of questions and answer settings\n   */\n  getQASettings(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get problem leaf (template) by Sid\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return problem leaf for given problemSid\n   * @return {Object} Returns Promise that represents an Object that describes the problem leaf (template)\n   */\n  getProblemLeaf(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemLeafBySid', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of default statuses\n   *\n   * @category Request Options\n   * @param {Array<number>} domainIds - List of domains to return default statuses for\n   * @return {Object} Returns Promise that represents an Array of statuses.\n   */\n  getStatuses(domainIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainIds: domainIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/DefaultStatus', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of possible Employee values\n   *\n   * @category Request Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only DispatchTo & SubmitTo.\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of Employee options.\n   */\n  getEmployeeLists(listType: string, domainId: number) {\n    return new Promise((resolve, reject) => {\n      // TODO: make a default domain option on the CW object for cases like this.\n      var data = {\n        DomainId: domainId\n      }\n      if(!_.includes(['DispatchTo', 'SubmitTo'], listType)) {\n        reject(new CWError(2, 'listType must be either SubmitTo or DispatchTo.', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/ServiceRequest/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get a list of possible DispatchTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of dispatchTo options.\n   */\n  getDispatchTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('DispatchTo', domainId);\n  }\n\n  /**\n   * Get a list of possible SubmitTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible submitTo values for\n   * @return {Object} Returns Promise that represents an Array of submitTo options.\n   */\n  getSubmitTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('SubmitTo', domainId);\n  }\n\n  /**\n   * Get street codes\n   *\n   * @category Request Options\n   * @return {Object} Returns Promise that represents an Array of Street Codes.\n   */\n  streetCodes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/ServiceRequest/AllStreetCode', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates\n   *\n   * @category Request Templates\n   * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n   * @param {Date} [minimumDateModified] - ?\n   * @param {Date} [maximumDateModified] - ?\n   * @return {Object} Returns Promise that represents\n   */\n   getTemplatesById(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         ProblemSids: null\n       }\n       if(typeof minimumDateModified != 'undefined') {\n         _.set(data, 'MinimumDateModified', minimumDateModified)\n       }\n       if(typeof maximumDateModified != 'undefined') {\n         _.set(data, 'MaximumDateModified', maximumDateModified)\n       }\n\n       this.cw.runRequest('Ams/ServiceRequestTemplate/ByIds', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Request Templates\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CWMetadata\n    */\n   createTemplateSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequestTemplate/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the questions and answers for a(many) request template(s)\n    *\n    * @category Request Templates\n    * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n    * @return {Object} Returns Promise that represents a collection of ProblemQAs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemQA\n    */\n    getTemplateQAs(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: null\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/QA', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get a list of template id results for a provided search parameters\n     *\n     * @category Request Templates\n     * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n     * @return {Object} Returns Promise that represents a list of template IDs.\n     */\n    searchTemplates(searchData: Object) {\n      return new Promise((resolve, reject) => {\n        var data = searchData\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Search', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get request templates (problem leaf[s])\n     *\n     * @category Request Templates\n     * @param {Array<number>} [templateIds] - Array of specific template IDs to retrieve\n     * @param {number} canCreate - If true, only return templates the user can create, ignored if false or null, default is false\n     * @param {boolean} includeInactiveIf - If true, returns inactive templates, default is false\n     * @param {Date} [minimumDateModified] - ?\n     * @param {Date} [maximumDateModified] - ?\n     * @return {Object} Returns Promise that represents a collection of Problem Leafs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemLeaf\n     */\n    getTemplates(templateIds: Array<number>, canCreate: boolean = false, includeInactiveIf: boolean = false, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          CanCreate: canCreate,\n          IncludeInactiveIf: includeInactiveIf\n        }\n        if(typeof templateIds != 'undefined') {\n          _.set(data, 'TemplateIds', templateIds)\n        }\n        if(typeof minimumDateModified != 'undefined') {\n          _.set(data, 'MinimumDateModified', minimumDateModified)\n        }\n        if(typeof maximumDateModified != 'undefined') {\n          _.set(data, 'MaximumDateModified', maximumDateModified)\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get work order templates that are associated to this request template type\n     *\n     * @category Request Templates\n     * @param {Array<number>} problemSids - An array list of problemSids to retrieve Problem WO templates for\n     * @param {boolean} includeInactiveIf - Include inactive work order templates, default is false\n     * @return {Object} Returns Promise that represents a collection of Problem WO Templates. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemWOTemplate\n     */\n    getWOTemplates(problemSids: Array<number>, includeInactive: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: problemSids,\n          IncludeInactive: includeInactive\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/WorkOrderTemplates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class InspectionAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { InspectionAdmin } from './inspection_admin'\n\nexport class Inspection {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Inspection Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new InspectionAdmin(cw)\n  }\n\n  /**\n   * Create new inspection\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created inspection\n   */\n  create(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n        reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n      } else {\n        this.cw.runRequest('Ams/Inspection/Create', insp_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create inspections from an array of entities\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents a collection of objects describing the newly-created inspections\n   */\n   createFromEntities(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromEntities', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a parent inspection (TODO: what parent!?)\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromParent(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // see if it's just InspectionId\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'InspectionId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromParent', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a service request\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromServiceRequest(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'RequestId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromServiceRequest', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a work order\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromWorkOrder(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // Are they  both actually required?!?!\n      // WorkOrderId\n      // WorkOrderSid ...do with only SID first then check\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'WorkOrderSid')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromWorkOrder', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Update an inspection\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated inspection\n   */\n  update(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      return new Promise((resolve, reject) => {\n        if(!_.has(insp_data, 'InspectionId')) {\n          reject(new CWError(1, 'InspectionId must be provided.', {'provided': insp_data}))\n        } else {\n          this.cw.runRequest('Ams/Inspection/Update', insp_data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Get an inspection by ID\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The inspection ID to retrieve\n   * @return {Object} Returns Promise that represents an object describing the inspection\n   */\n  getById(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/Inspection/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections by array of IDs\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - The inspection IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the inspections\n   */\n  getByIds(inspectionIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionIds: inspectionIds\n      }\n      this.cw.runRequest('Ams/Inspection/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to cancel the matched inspections\n   * @param {string} [cancelReason] - A reason for cancelling the inspection(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the inspection was cancelled\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   cancel(inspectionIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {InspectionIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { InspectionIds: inspectionIds }\n       if(typeof(cancelReason)!=='undefined') {\n         data.CancelReason = cancelReason\n       }\n       if(typeof(dateCancelled)!=='undefined') {\n         data.DateCancelled = dateCancelled\n       }\n       this.cw.runRequest('Ams/Inspection/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel inspections\n    *\n    * @category Requests\n    * @param {Array<number>} inspectionIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close inspections\n    *\n    * @category Inspections\n    * @param {Array<number>} inspectionIds - An array of the IDs to close the matched inspections\n    * @return {Object} Returns object that represents a collection of inspections\n    */\n    close(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Close', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Reopen closed inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   reopen(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Reopen', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Delete inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to delete the matched inspections\n   * @return {Object} Returns object that represents a collection of inspection Ids which have been deleted\n   */\n   delete(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Delete', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Search for inspections\n   *\n   * @category Inspection Search\n   * @param {Object} searchData - The search information to retrieve matched inspections, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents an array of the matching inspection IDs\n   */\n  search(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/Inspection/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the records on the basis of inspectionId, only populates InspectionId, InspTemplateName, and Location properties\n   *\n   * @category Inspection Object Search\n   * @param {string} inspectionId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents a collection of the matching (limited) inspection objects\n   */\n  searchObject(inspectionId: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get list of statuses\n   *\n   * @category Inspection Options\n   * @return {Object} Returns object that represents an array of all possible statuses for an Inspection\n   */\n  statuses() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Statuses', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection submit to list\n   *\n   * @category Inspection Options\n   * @param {boolean} [includeInactiveEmployees] - whether to include inactive employees in the return. Defaults to false.\n   * @param {boolean} [domainIds] - which domains to include in the return, default to All domains\n   * @return {Object} Returns object that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  submitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {IncludeInactiveEmployees?: boolean, DomainIds?: Array<number>} = {}\n      if(includeInactiveEmployees) {\n        data.IncludeInactiveEmployees = true\n      }\n      if(typeof(domainIds)!=='undefined') {\n        data.DomainIds = domainIds\n      }\n      this.cw.runRequest('Ams/Inspection/SubmitTos', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Add an entity to an existing inspection\n   * This method requires an Entity/Asset to be specified. You can either specify the Entity Type and its UID or a WorkOrderEntityBase Object.\n   *\n   * @category Inspections\n   * @param {Object} entity - Either of two attribute combinations are valid: entityType & entityUid OR Entity as a fully-inflated WorkOrderEntity (WorkOrderEntityBase) object.\n   * @param {number} inspectionId - An Inspection ID to attach the entity/asset to.\n   * @param {boolean} updateXY - Provide a boolean to whether the inspection's X/Y coordinates should be updated. Default is true.\n   * @param {Object} facility - Add Facility_Id for the Facility Identifier and Level_id for the Facility Level Identifier. Defaults to empty so that no facility is specified.\n   * @return {Object} Returns object that represents an object which describes an Inspection Entity\n   */\n  connectAsset(entity: {EntityType?: string, EntityUid?: string, Entity?: Object}, inspectionId: number, updateXY: boolean = true, facility: {Facility_Id?: string, Level_Id?: string} = {}) {\n   return new Promise((resolve, reject) => {\n     var data: {InspectionId: number, EntityType?: string, EntityUid?: string, Entity?: Object, Facility_Id?: string, Level_Id?: string} = {\n       InspectionId: inspectionId\n     }\n     if(_.has(entity, 'EntityType') && _.has(entity, 'EntityUid')) {\n       data.EntityType = entity.EntityType\n       data.EntityUid = entity.EntityUid\n     } else if(_.has(entity, 'Entity')) {\n       data.Entity = entity.Entity\n     } else {\n       // Throw error, no entity/asset provided\n     }\n     if(_.has(facility, 'Facility_Id')) {\n       data.Facility_Id = facility.Facility_Id\n     }\n     if(_.has(facility, 'Level_Id')) {\n       data.Level_Id = facility.Level_Id\n     }\n     this.cw.runRequest('Ams/Inspection/AddEntity', data).then(r => {\n       resolve(r.Value)\n     }).catch(e => {\n       // 4 NotAuthorizedToUpdateInspection\n       // 9 InvalidActivityMapLogicXY\n       // 21 ErrorUnknownEntityType\n       // 30 InvalidField\n       // 60 WarningItemNotFound\n       // 68 MoveInvalidCityworksWkid\n       reject(e)\n     })\n   })\n  }\n\n  /**\n   * Get the answers for inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspections - An Array of one or more Inspection IDs\n   * @return {Object} Returns Promise that represents a collection of Inspection Answers\n   */\n  getAnswers(inspections: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {InspectionId?: number, InspectionIds?: Array<number>} = {}\n      if(inspections.length==0) {\n        data.InspectionId = inspections[0]\n      } else {\n        data.InspectionIds = inspections\n      }\n      this.cw.runRequest('Ams/Inspection/Answers', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific Inspection\n   *\n   * @category Inspections\n   * @param {number} inspectionId - An Inspection ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {InspectionId: inspectionId}\n      this.cw.runRequest('Ams/Inspection/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n   *\n   * @category Inspections\n   * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @param {number} [searchName] - What to name your search (if it should be saved)\n   * @param {number} [sharedWithin] - What group or domain to share the search to.\n   * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n   * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      if(_.isString(searchName)) {\n        _.set(data, 'SearchName', searchName)\n        _.set(data, 'SaveDefinition', saveDefinition)\n        _.set(data, 'EnableEurl', enableEurl)\n        // not sure how to handle sharedWithin...\n        // _.set(data, 'SharedWithin', sharedWithin)\n      }\n      this.cw.runRequest('Ams/Inspection/CreateSearchDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle from\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents ... I have no idea what this endpoint does\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle intervals\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle intervals available\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle types\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle types available\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get districts\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents an Array of the districts\n   */\n  getDistricts() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Districts', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Inspection Employee lists. Abstraction done here, though only one employee list field, AFAIK.\n   *\n   * @category Inspection Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only SubmitTos.\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        IncludeInactiveEmployees: includeInactiveEmployees\n      }\n      if(typeof(domainIds)!='undefined' && domainIds!=null) {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      if(listType!='SubmitTos') {\n        reject(new CWError(2, 'listType must be \"SubmitTos\".', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/Inspection/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get SubmitTo list\n   *\n   * @category WorkOrder Options\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n  }\n\n  /**\n   * Move inspection by InspectionId. Must provide well known id (WKID) or well known text (WKT)\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The ID of the inspection that should be moved\n   * @param {number} x - The X coordinate for the move\n   * @param {number} y - The Y coordinate for the move\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - the optional Z coordinate for the move\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(inspectionId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(3, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        InspectionId: inspectionId,\n        X: x,\n        Y: y\n      }\n      if(typeof z != 'undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Ams/Inspection/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /////\n  // INSPECTION TEMPLATES\n  /////\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates by IDs\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspectionIds - An array of the IDs to retrieve the matched inspections\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns object that represents an object describing the inspection\n   */\n  getTemplatesByIds(inspTemplateIds: Array<number>, options?: {MaximumDateModified?: Date, MinimumDateModified?: Date}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types for inspection template(s)\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents an array of Entity Types\n   */\n   getTemplateEntityTypes(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/EntityTypes', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n  * Get the questions and answers for inspection template(s)\n  *\n  * @category Inspection Templates\n  * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n  * @return {Object} Returns object that represents an array which contains a list of InspQuestionPanel for the template\n  */\n  getQA(inspTemplateIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection template question conditions\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of template IDs to get the matched inspection template Question conditions for\n   * @return {Object} Returns object that represents an array which contains a dictionary of InspQuestion IDs to configs\n   */\n   getQConditions(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/QuestionConditions', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  // Attachments\n\n  // AddInspectionAttachment InspAttachment\n  // Add an inspection attachment\n  // Request Parameters\n  // Int32 AttachmentType V15_4\n  // String Comments\n  // String Filename\n  // Int32 req InspectionId\n  // Ams/Attachments/AddInspectionAttachment?data={\n  //   \"Comments\": null,\n  //   \"Filename\": null,\n  //   \"InspectionId\": null,\n  //   \"AttachmentType\": null\n  // }\n\n  /**\n   * Delete inspection attachments\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} attachmentIds - An array of inspection attachment IDs to delete\n   * @return {Object} Returns object that represents a boolean for action resolution\n   */\n   deleteAttachments(attachmentIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentIds: attachmentIds\n       }\n       this.cw.runRequest('Ams/Attachments/DeleteInspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Download an inspection attachment\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - ID of an inspection attachment to download\n   * @return {Object} Returns object that represents a file stream\n   */\n   downloadAttachment(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/DownloadInspectionAttachment', data).then(r => {\n         // TODO, pass file through // resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - An attachment ID to get info for\n   * @return {Object} Returns object that represents an object that describes the matched inspection attachment\n   */\n   getAttachmentById(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachmentById', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} inspectionIds - An array of inspection IDs to get attachments for\n   * @return {Object} Returns object that represents a collection of attachments from the matched inspections\n   */\n   getAttachments(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class WorkOrderAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { WorkOrderAdmin } from './workorder_admin'\n\nexport class WorkOrder {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * WorkOrder Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new WorkOrderAdmin(cw)\n  }\n\n    /**\n     * Create new workorders, including linkin to Requests & Inspections (optionally)\n     *\n     * @category WorkOrders\n     * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n     * @param {Array<number>} [inspectionIds] - The inspection IDs which the workorder should be linked to.\n     * @param {Array<number>} [requestIds] - The inspection IDs which the workorder should be linked to.\n     * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n     */\n    create(wo_data: Object, inspectionIds?: Array<number>, requestIds?: Array<number>) {\n      return new Promise((resolve, reject) => {\n        if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n          reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n        } else {\n          var data = wo_data;\n          if(typeof inspectionIds != 'undefined' && inspectionIds != null && !_.has(data, 'InspectionIds')) {\n            _.set(data, 'InspectionIds', inspectionIds);\n          }\n          if(typeof requestIds != 'undefined' && requestIds != null && !_.has(data, 'RequestIds')) {\n            _.set(data, 'RequestIds', requestIds);\n          }\n          this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    }\n\n    /**\n     * Create new workorder linked to parent workorder\n     *\n     * @category WorkOrders\n     * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n     * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n     * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n     */\n    createFromParent(wo_data: Object, workOrderSId: string|number, s: boolean = true) {\n      return new Promise((resolve, reject) => {\n        if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n          reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n        } else {\n          var data = wo_data;\n          if(_.isString(workOrderSId)) {\n            _.set(data, 'WorkOrderId', workOrderSId)\n          } else {\n            _.set(data, 'WorkOrderSid', workOrderSId)\n          }\n          this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    }\n\n    /**\n     * Update a WorkOrder\n     *\n     * @category WorkOrders\n     * @param {object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n     * @return {Object} Returns Promise that represents an object describing the updated workorder\n     */\n    update(wo_data: Object) {\n      return new Promise((resolve, reject) => {\n        if(!_.has(wo_data, 'WorkOrderSid') && !_.has(wo_data, 'WorkOrderId')) {\n          reject(new CWError(3, 'WorkOrderId or WorkOrderSid must be provided.', {'provided': wo_data}))\n        } else {\n          this.cw.runRequest('Ams/WorkOrder/Update', wo_data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    }\n\n    /**\n     * Combine WorkOrders\n     *\n     * @category WorkOrders\n     * @param {Array<string>} fromWorkOrderIds - The workorder IDs which should be combined.\n     * @param {string} toWorkOrderId - The work order ID for the single work order that should contain the info/entities from the other work orders\n     * @param {boolean} cancelCombinedWorkOrders - If the work orders combined into the single should then be canceled, default is true.\n     * @return {Object} Returns object that represents a collection of WorkOrders\n     */\n     combine(fromWorkOrderIds: Array<string>, toWorkOrderId: string, cancelCombinedWorkOrders: boolean = true) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           CancelCombinedWorkOrders: cancelCombinedWorkOrders,\n           ToWorkOrderId: toWorkOrderId,\n           FromWorkOrderIds: fromWorkOrderIds\n         }\n         this.cw.runRequest('Ams/WorkOrder/Combine', data).then(r => {\n           if(r.Status>0) {\n             reject(new CWError(4, r.Message, {'response': r}))\n           } else {\n             resolve(r.Value)\n           }\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n\n  /**\n   * Move a workorder's point\n   *\n   * @category WorkOrders\n   * @param {string} workOrderId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include WKT or WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  move(workOrderId: string, x: number, y: number, projection: Object, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        WorkOrderId: workOrderId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/WorkOrder/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Get a workorder by S/ID\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The S/ID of the workorder to retrieve. # for SID, string for ID.\n   * @param {boolean} s - Whether first argument is an SID (true) or an ID (false). Defaults to true.\n   * @return {Object} Returns Promise that represents an object describing the workorder\n   */\n  getById(workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n        var path = 'Ams/WorkOrder/ById';\n      } else {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n        var path = 'Ams/WorkOrder/BySid';\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get workorders by an array of S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getByIds(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(10, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/ByIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/BySids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get instructions by an array of workorders S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents an array of String, String describing the workorder instructions\n   */\n  getInstructions(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(10, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderSids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get the audit log for a specific workorder\n   *\n   * @category WorkOrder\n   * @param {number} workOrderSId - A WorkOrder S/ID to get the audit log for. SID is default.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(workOrderSId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n      } else if(_.isNumber(workOrderSId)) {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'Workorder S/IDs was not provided.', {'workorderSId': workOrderSId}))\n      }\n      this.cw.runRequest('Ams/WorkOrder/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field values for the workorder S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. #s for SID, strings for ID.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getCustomFieldValues(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      var path = 'Ams/WorkOrder/CustomFields';\n      if(_.isString(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderIds', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFields';\n      } else if(_.isNumber(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderSids', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFieldsByWorkOrderSids';\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSIds': workOrderSIds}))\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Add a comment to a workorder\n   *\n   * @category WorkOrders\n   * @param {number} workOrderSId - The S/ID of the workorder to retrieve. SID is default.\n   * @param {string} comment - The comment text to add.\n   * @return {Object} Returns Promise that represents an object describing the comment added\n   */\n  comment(workOrderSId: string|number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Comments: comment\n      }\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n      } else if(_.isNumber(workOrderSId)) {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'Workorder S/IDs was not provided.', {'workorderSId': workOrderSId}))\n      }\n      this.cw.runRequest('Ams/WorkOrder/AddComments', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entities on an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs which the entities should be added to. # for SID, string for ID.\n   * @param {boolean} getGisData - Query gis to populate Entity.Attributes with current gis data. Defaults to true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n  getEntities(workOrderSIds: Array<string|number>, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        GetGisData: getGisData\n      }\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(11, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n        } else {\n          reject(new CWError(12, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n      }\n      this.cw.runRequest('Ams/WorkOrder/Entities', data).then(r => {\n        if(r.Status>0) {\n          reject(new CWError(4, r.Message, {'response': r}))\n        } else {\n          resolve(r.Value)\n        }\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add entities to an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUids: {Array<string>}, Facility_Id: {string}, Level_Id: {string}\n   * @param {boolean} updateXY - Update work order xy after adding entit(y|ies), default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   addEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'Facility_Id'))\n         _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n       if(_.has(entityInfo, 'Level_Id'))\n         _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n       if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/AddEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Update a WorkOrder entity\n    *\n    * @category WorkOrders\n    * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n    * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUid: {string}, Facility_Id: {string}, Level_Id: {string}\n    * @param {boolean} workComplete - Update WorkOrder completeness, default is true.\n    * @return {Object} Returns object that represents a list of entities removed.\n    */\n    updateEntity(workOrderSId: string|number, entityInfo: Object, workComplete: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkComplete: workComplete\n        }\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        if(_.has(entityInfo, 'Facility_Id'))\n          _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n        if(_.has(entityInfo, 'Level_Id'))\n          _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n        if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n          _.set(data, 'EntityUid', _.get(entityInfo, 'EntityUid'))\n          _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n        } else {\n          reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n        }\n\n        this.cw.runRequest('Ams/WorkOrder/UpdateEntity', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(4, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Remove entities from a work order. Provide WorkOrderId and either ObjectIds or EntityType and EntityUids\n   *\n   * @category WorkOrders\n   * @param {number} workOrderSId - The workorder S/ID which the entities should be removed from. # for SID, string for ID.\n   * @param {Object} entityInfo - Remove entities by WorkOrderEntity.ObjectId (not gis objectId).\n   * @param {boolean} updateXY - Update work order xy after removing entities, default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   removeEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'ObjectIds')) {\n         _.set(data, 'ObjectIds', _.get(entityInfo, 'ObjectIds'))\n       } else if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(8, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/RemoveEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Cancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to cancel the matched workorders\n   * @param {string} [cancelReason] - A reason for cancelling the workorder(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the workorder was cancelled\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n  cancel(workOrderIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n    return new Promise((resolve, reject) => {\n      var m = new Date()\n      var data: {WorkOrderIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { WorkOrderIds: workOrderIds }\n      if(typeof(cancelReason)!=='undefined')\n        _.set(data, 'CancelReason', cancelReason);\n      if(typeof(dateCancelled)!=='undefined')\n        _.set(data, 'DateCancelled', dateCancelled);\n      this.cw.runRequest('Ams/WorkOrder/Cancel', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Uncancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to uncancel the matched workorders\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n   uncancel(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Uncancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Close WorkOrders\n    *\n    * @category WorkOrders\n    * @param {Array<number>} workOrderIds - An array of the IDs to close the matched WorkOrders\n    * @return {Object} Returns object that represents a collection of WorkOrders\n    */\n    close(workOrderIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkOrderIds: workOrderIds\n        }\n        this.cw.runRequest('Ams/WorkOrder/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed WorkOrders\n     *\n     * @category WorkOrders\n     * @param {Array<number>} workOrderIds - An array of the IDs to reopen the matched WorkOrders\n     * @return {Object} Returns object that represents a collection of WorkOrders\n     */\n     reopen(workOrderIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           WorkOrderIds: workOrderIds\n         }\n         this.cw.runRequest('Ams/WorkOrder/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to delete the matched WorkOrders\n   * @return {Object} Returns object that represents a collection of WorkOrder Ids which have been deleted\n   */\n   delete(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderS/IDs connected to provided entities\n    *\n    * @category WorkOrder Search\n    * @param {string} entityType - The entity type to find connected work orders\n    * @param {Array<string>} entityUIDs - The list of entities to search for connected WorkOrders\n    * @param {boolean} s - Get WorkOrderSids. Defaults to true. When false, returned list is WorkOrderIds\n    * @param {Object} [search] - Any additional search properties of the work order (open/closed, etc)\n    * @return {Object} Returns Promise that represents an array of WorkOrderS/IDs\n    */\n   getWOsByEntities(entityType: string, entityUids: Array<string>, search?: Array<string|number>, s: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       if(typeof(search)!='undefined') {\n         _.merge(data, search)\n       }\n       if(!_.has(data, 'EntityType')) {\n         _.set(data, 'EntityType', entityType)\n       }\n       if(!_.has(data, 'EntityUids')) {\n         _.set(data, 'EntityUids', entityUids)\n       }\n       var path = 'Ams/WorkOrder/SearchForSids'\n       if(!s) {\n         path = 'Ams/WorkOrder/Search'\n       }\n       this.cw.runRequest(path, data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderSid and description for provided WorkOrderId\n    *\n    * @category WorkOrder Search\n    * @param {string} workOrderId - The WorkOrderId for which to get the WorkOrderSid and description\n    * @return {Object} Returns Promise that represents an object with WorkOrderS/IDs & Description\n    */\n   getSearchList(workOrderId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       _.set(data, 'WorkOrderId', workOrderId)\n       this.cw.runRequest('Ams/WorkOrder/SearchObject', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrder Employee lists\n    *\n    * @category WorkOrder Options\n    * @param {string} listType - Which list (endpoint) to get. Includes Supervisors & SubmitTos.\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         IncludeInactiveEmployees: includeInactiveEmployees\n       }\n       if(typeof(domainIds)!='undefined' && domainIds!=null) {\n         _.set(data, 'DomainIds', domainIds)\n       }\n       if(!_.includes(['Supervisors', 'SubmitTos'], listType)) {\n         reject(new CWError(2, 'listType must be either SubmitTos or Supervisors.', {'provided': listType}))\n       } else {\n         this.cw.runRequest(`Ams/WorkOrder/${listType}`, data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       }\n     })\n   }\n\n   /**\n    * Get SubmitTo list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Supervisors list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSupervisors(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('Supervisors', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Status Options\n    *\n    * @category WorkOrder Options\n    * @return {Object} Returns Promise that represents a collection of codes. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CodeDesc\n    */\n   getStatuses() {\n     return new Promise((resolve, reject) => {\n       this.cw.runRequest('Ams/WorkOrder/Statuses', {}).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get Categories\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder category code descriptions\n   */\n  getCategories() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Categories', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Priorities\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder priorities\n   */\n  getPriorities() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Priorities', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle From\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle From options for workorders\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Intervals\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Interval options for workorders\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Type options for workorders\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get WorkOrder Stages\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Stage options for WorkOrders\n   */\n  getStages() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Stages', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Expense Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Expense Type options for workorders\n   */\n  getExpenseTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/ExpenseTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseData {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseFinancial {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw: Object) {\n    this.cw = cw\n  }\n\n  /**\n   * Adds a fee to the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} feeSetupId - The fee setup id for the fee to add to the case.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addFee(caObjectId: number, feeSetupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        FeeSetupId: feeSetupId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Fee Payment. Adds a payment to the case fee specified by caObjectId.\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addPayment(caObjectId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Payment Refund. Refunds a payment on the case payment specified by caPaymentId.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentId - The Case Payment ID for the case payment which to refund\n   * @param {number} refundAmount - The amount to refund\n   * @param {string} comment - A comment to append to the refund\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  addRefund(caPaymentId: number, refundAmount: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentId: caPaymentId,\n        RefundAmount: refundAmount,\n        Comments: comment\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Deposit Payment. Adds a payment to the case deposit specified by CaDepositId.\n   *\n   * @category Case Payments\n   * @param {number} caDepositId - The Case Deposit ID for the case deposit to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addDepositPayment(caDepositId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaDepositId: caDepositId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/AddDeposit', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a deposit to the case specified by the CaObectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} depositId - The deposit setup id for the deposit to add to the case.\n   * @param {number} [amount] - The amount of the deposit (optional)\n   * @param {string} [comment] - Comment text to add to the deposit (optional)\n   * @return {Object} Returns Promise that represents an object describing the newly-added deposit. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDeposit(caObjectId: number, depositId: number, amount?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        DepositId: depositId\n      }\n      if(typeof(amount)!='undefined') {\n        _.set(data, 'Amount', amount)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('CaseDeposit/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds an instrument to the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the instrument\n   * @param {number} instTypeId - The instrument type id for the instrument being added to the case.\n   * @param {number} amount - The amount of the instrument\n   * @param {Date} dateExpire - The datetime for the instrument to expire.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument for more options.\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument. See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument\n   */\n  addInstrument(caObjectId: number, instTypeId: number, amount: number, dateExpire: Date, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        InstTypeId: instTypeId,\n        Amount: amount,\n        DateExpire: dateExpire\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseInstrument/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a fee specified by the CaFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Fee ID for the specific instance of the fee you wish to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the updated fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  updateFee(caFeeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaFeeId: caFeeId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Void a refund.\n   *\n   * @category Case Refund Payment\n   * @param {number} caPaymentRefundId - The Refund ID for the specific refund to void\n   * @param {String} voided - A string. No clue.\n   * @return {Object} Returns Promise that represents an object describing the voided refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  voidRefund(caPaymentRefundId: number, voided: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId,\n        Voided: voided\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Fees. Adds fees to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default fees\n   * @param {number} busCaseId - The business case ID whose default fees should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Fee Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addDefaultFees(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseFees/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Deposits. Adds deposits to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default deposits\n   * @param {number} busCaseId - The business case ID whose default deposits should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Deposit Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDefaultDeposits(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the fees from the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Fees.\n   */\n  getFees(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Deposit by Case ObjectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the deposits\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  getDeposits(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Payments by Case ObjectId\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the payments\n   * @return {Object} Returns Promise that represents a collection of Case Payments.\n   */\n  getPayments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the instruments from the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Instruments.\n   */\n  getInstruments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Case Fee ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Fee object.\n   */\n  deleteFee(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CaseFees/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteFeesByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete a Case Payment by Id. Delete a specific case payment by CaPaymentId.\n   *\n   * @category Case Payments\n   * @param {number} caPaymentId - The Case Payment ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Payment object.\n   */\n  deletePayment(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CasePayment/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payment Refund. Removes a refund on a payment.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentRefundId - The Case Payment ID for the case payment which to refund\n   * @return {Object} Returns Promise that represents an object describing the deleted payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  deleteRefund(caPaymentRefundId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payments by Case ObjectId. Delete from the system all payments associated to a specific case as specified by the case id (CaObjectId)\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID whose payments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deletePaymentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Deposits\n   * @param {number} caDepositId - The Case Deposit ID which should be deleted\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  deleteDeposit(caDepositId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDepositId: caDepositId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteDepositsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the instrument specified by the caInstrumentId.\n   *\n   * @category Case Instruments\n   * @param {number} caInstrumentId - The Case Instrument ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Instrument.\n   */\n  deleteInstrument(caInstrumentId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Instruments by Case ObjectId. Delete from the system all Instruments linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID whose instruments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteInstrumentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFees(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaFeeId', 'CaObjectId', 'FeeCode', 'FeeDesc']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseFees/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payments. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payments\n   * @param {Object} filters - The filters to search for matched Case Payments\n   * @return {Object} Returns Promise that represents an Array of case payment IDs\n   */\n  searchPayments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaPaymentId', 'CommentText', 'FeeAmount', 'FeeCode', 'FeeDesc', 'PaymentAccount', 'PaymentAmount', 'TenderType']).length==0) {\n        reject(new CWError(5, 'At least one of the attributes (CaPaymentId, CommentText, FeeAmount, FeeCode, FeeDesc, PaymentAccount, PaymentAmount, TenderType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payment Refunds. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payment Refunds\n   * @param {Object} filters - The filters to search for matched Case Payments.\n   * @return {Object} Returns Promise that represents an Array of case payment refund IDs\n   */\n  searchRefunds(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaPaymentId', 'CaPaymentRefundId', 'Comments', 'RefundAmount']).length==0) {\n        reject(new CWError(6, 'At least one of the attributes (CaPaymentId, CaPaymentRefundId, Comments, RefundAmount) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Deposits\n   * @param {Object} filters - The parameters to search by.\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchDeposits(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaDepositId', 'CaObjectId', 'DepositCode', 'DepositDesc']).length==0) {\n        reject(new CWError(1, 'At least one of the arguments (CaDepositId, CaObjectId, DepositCode, DepositDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDeposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fee Templates\n   *\n   * @category Case Fees\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  getAllFeeTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameters to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFeeTemplates(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['FeeSetupId', 'FeeTypeId', 'FeeCode', 'FeeDesc', 'AccountCode']).length==0) {\n        reject(new CWError(7, 'At least one of the arguments (FeeSetupId, FeeTypeId, FeeCode, FeeDesc, AccountCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instruments. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Instruments\n   * @param {Object} filters - The parameters to search by (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of case instrument IDs\n   */\n  searchCaseInstruments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['AddressLine1', 'Amount', 'CaInstrumentId', 'CityName', 'CommentText', 'Company', 'ContactEmail', 'ContactName', 'ContactPhone', 'CountryCode', 'InstTypeId', 'SerialNumber', 'StateCode', 'ZipCode']).length==0) {\n        reject(new CWError(9, 'At least one of the arguments (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseInstrument/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the Defined Instruments\n   *\n   * @category Instruments\n   * @param {Object} options - the options to filter the instruments returned by\n   * @return {Object} Returns Promise that represents an Array of CaInstrumentItem\n   */\n  getInstrumentList(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/CaseInstrument/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a release to a case instrument specified by the caInstrumentId. Must provide either amountReleased OR percentReleased\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstrumentId - The Case Instrument ID to which to add the instrument release\n   * @param {number} releasedBy - UserID to attach to the release.\n   * @param {Date} dateReleased - The date of the release\n   * @param {number} [amountReleased] - The amount to be released\n   * @param {number} [percentReleased] - OR the percent to be released\n   * @param {string} [comment] - Comment to attach to the release\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  addCaseInstrumentRelease(caInstrumentId: number, releasedBy: number, dateReleased: Date, amountReleased?: number, percentReleased?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId,\n        DateReleased: dateReleased,\n        ReleasedBy: releasedBy\n      }\n      if((typeof(percentReleased)!='undefined' || percentReleased!=null) && (typeof(amountReleased)!='undefined' || amountReleased!=null)) {\n        reject(new CWError(2, 'Either amountReleased or percentReleased must be specified.'))\n      } else if(typeof(percentReleased)!='undefined' && percentReleased!=null) {\n        _.set(data, 'PercentReleased', percentReleased)\n      } else if(typeof(amountReleased)!='undefined' && amountReleased!=null) {\n        _.set(data, 'AmountReleased', amountReleased)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a release specified by the caInstReleasesId.\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstReleasesId - The Case Instrument Release ID to delete\n   * @return {Object} Returns Promise that represents an object describing the deleted instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  deleteCaseInstrumentRelease(caInstReleasesId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstReleasesId: caInstReleasesId\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instrument Releases. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Case Instrument Releases\n   * @param {Object} filters - Specify at least one of the following: AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy\n   * @return {Object} Returns Promise that represents an Array of Case Instruments resulting from the search\n   */\n  searchCaseInstrumentReleases(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      if(_.intersectionBy(filters, ['AmountReleased', 'CaInstReleasesId', 'CaInstrumentId', 'CommentText', 'PercentReleased', 'ReleasedBy']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy) must be defined.'))\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  fees() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/FeeSetup/All', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Fees\n   * @param {Object} filters - Specify at least one.\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  searchAvailableFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(8, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all tender types configured\n   *\n   * @category Tender Types\n   * @return {Object} Returns Promise that represents a collection of tender type objects. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  getTenderTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TenderType/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a tender type configuration\n   *\n   * @category Tender Types\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  addTenderType(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TenderType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a tender type configuration\n   *\n   * @category Tender Types\n   * @param {number} tenderTypeId - ID of the tender type to update\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  updateTenderType(tenderTypeId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        TenderTypeId: tenderTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/TenderType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseWorkflow {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Business Case Template\n   *\n   * @category Case Templates\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the created case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  addBusinessCaseTemplate(data: Object) {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/BusinessCase/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Business Case Template\n   *\n   * @category Case Templates\n   * @param {number} busCaseId - The Business Case ID to update\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the updated case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  updateBusinessCaseTemplate(busCaseId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/BusinessCase/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Business Case Templates\n   *\n   * @category Case Templates\n   * @return {Object} Returns Promise that represents a collection of Business Case Templates\n   */\n  getBusinessCaseTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/BusinessCase/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Type\n   *\n   * @category Types & SubTypes\n   * @param {string} caseTypeName - The case type name\n   * @param {string} caseTypeDesciption - The case type description\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the added case type\n   */\n  addCaseType(caseTypeName: string, caseTypeDesciption: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseType: caseTypeName,\n        CaseTypeDesciption: caseTypeDesciption\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Type\n   *\n   * @category Types & SubTypes\n   * @param {number} caseTypeId - The case Type ID\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the updated case type\n   */\n  updateCaseType(caseTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Types\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems\n   */\n  getCaseTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents an Array of CaseTypeIDs\n   */\n  searchCaseTypeIDs(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CaseTypeItem\n   */\n  searchCaseTypeObjects(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaseType, CaseTypeDesc, CaseTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add SubType\n   *\n   * @category Types & SubTypes\n   * @param {string} subTypeName - The SubTypeId\n   * @param {string} subTypeDescription - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  addSubtype(subTypeName: string, subTypeDescription: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubType: subTypeName,\n        SubTypeDesc: subTypeDescription\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update SubType\n   *\n   * @category Types & SubTypes\n   * @param {number} subTypeId - The SubTypeId\n   * @param {Object} options - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the updated SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  updateSubtype(subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get SubTypes\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  getSubtypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/SubType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getFees() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Expirations\n   *\n   * @category Expirations\n   * @return {Object} Returns Promise that represents a collection of ExpirationTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  getExpirations() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/ExpirationType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add an Expiration type\n   *\n   * @category Expirations\n   * @param {Object} options - Must specify OrgId and ExpirationDescType attributes. See: /{subdirectory}/apidocs/#/service-info/Pll/ExpirationType\n   * @return {Object} Returns Promise that represents an object describing the newly-added ExpirationTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  addExpiration(options?: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(options, 'OrgId') || !_.has(options, 'ExpirationTypeDesc')) {\n        reject(new CWError(5, 'OrgId and ExpirationTypeDesc must both be defined.'))\n      }\n      var data = options\n      this.cw.runRequest('Pll/ExpirationType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Deposits\n   *\n   * @category Deposits\n   * @return {Object} Returns Promise that represents a collection of DepositItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepositItemBase\n   */\n  getDeposits() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Deposit/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchDeposits(filters: {AccountCode?: string, DepositCode?: string, DepositDesc?: string, DepositId?: number, DepositTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(filters, ['AccountCode', 'DepositCode', 'DepositDesc', 'DepositId', 'DepositTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/Deposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Disciplines\n   *\n   * @category Disciplines\n   * @return {Object} Returns Promise that represents a collection of DisciplineItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DisciplineItem\n   */\n  getDisciplines() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Discipline/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Department\n   *\n   * @category Departments & Divisions\n   * @param {string} departmentCode - The SubTypeId\n   * @param {string} departmentName - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  addDepartment(departmentCode: string, departmentName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentCode: departmentCode,\n        DepartmentName: departmentName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Department/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Departments\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getDepartments() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Department/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Division\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  addDivision(departmentId: number, divisionName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentId: departmentId,\n        DivisionName: divisionName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Division/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Divisions\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of DivisionItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  getDivisions() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Division/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Holiday\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  addHoliday(holidayDate: Date, holidayDesc: string, halfDayFlag?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayDate: holidayDate,\n        HolidayDesc: holidayDesc\n      }\n      if(typeof(halfDayFlag)!='undefined') {\n        _.set(data, 'HalfDayFlag', halfDayFlag)\n      }\n      this.cw.runRequest('Pll/Holiday/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Holiday\n   *\n   * @category Holidays\n   * @param {number} holidayId - ID of Holiday to delete\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  deleteHoliday(holidayId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayId: holidayId\n      }\n      this.cw.runRequest('Pll/Holiday/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Holidays\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents a collection of HolidaysItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  getHolidays() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Holiday/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Inspection Time Block\n   *\n   * @category Inspections\n   * @param {string} labelText - Label for the time block\n   * @param {string} startTime - Start time in 24 hour format (HH:mm)\n   * @param {string} endTime - End time in 24 hour format (HH:mm)\n   * @param {Object} inspTimeBlocksDetails - See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspTimeBlocksDetailItem\n   * @return {Object} Returns Promise that represents an object describing the newly-added InspectionTimeBlocksItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  addInspectionTimeBlock(labelText: string, startTime: string, endTime: string, inspTimeBlocksDetails?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        LabelText: labelText,\n        StartTime: startTime,\n        EndTime: endTime\n      }\n      if(typeof(inspTimeBlocksDetails)!='undefined') {\n        _.set(data, 'InspTimeBlocksDetails', inspTimeBlocksDetails)\n      }\n      this.cw.runRequest('Pll/InspectionTimeBlock/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Inspection Time Blocks\n   *\n   * @category Inspections\n   * @return {Object} Returns Promise that represents a collection of InspectionTimeBlocksItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  getInspectionTimeBlocks() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/InspectionTimeBlock/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all NotificationCases\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationCaseItem\n   */\n  getNotificationCases() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationCase/GetNotificationCaseList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Notification Types\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationTypeItem\n   */\n  getNotificationTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationType/GetNotificationTypeList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} options - attributes or update\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addNumberingGroup(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/NumberingGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} numberingGroupId - ID of NumberGroup to update\n   * @param {number} options - updates attributes\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  updateNumberingGroup(numberingGroupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        NumberingGroupId: numberingGroupId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/NumberingGroup/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Numbering Groups\n   *\n   * @category NumberingGroups\n   * @return {Object} Returns Promise that represents a collection of NumberingGroupItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  getNumberingGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NumberingGroup/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Person\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addPerson(name: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        Name: name\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all People\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleItem\n   */\n  getPeople() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/People/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add People Role\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/PeopleRole\n   * @return {Object} Returns Promise that represents an object describing the newly-added PeopleRoleItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  addPeopleRole(roleCode: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        RoleCode: roleCode\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all PeopleRoles\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getPeopleRoles() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/PeopleRole/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultDetail. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  addTaskResultDetail(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {string} resultDetailId - Result Detail ID\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  updateTaskResultDetail(resultDetailId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        ResultDetailId: resultDetailId\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all TaskResultDetails\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getTaskResultDetails() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultDetail/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultFeeInsert. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultFeeInsertItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  addTaskResultFeeInsert(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the deleted TaskResultFeeInsertItem.\n   */\n   deleteTaskResultFeeInsert(taskResultFeeInsertId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert(s) by Task ID\n   *\n   * @category TaskResults\n   * @param {number} taskId - ID for Task parent of TaskResultFeeInsert(s) to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the Task parent of the deleted TaskResultFeeInsertItem(s).\n   */\n   deleteTaskResultFeeInsertByTaskId(taskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskId: taskId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/DeleteByTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be updated.\n   * @param {number} taskId - Updated TaskID\n   * @param {number} taskResultId - Updated TaskResultId\n   * @param {number} [feeSetupId] - Fee setup ID update for TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents the ID Number of the updated TaskResultFeeInsertItem.\n   */\n   updateTaskResultFeeInsert(taskResultFeeInsertId: number, taskId: number, taskResultId: number, feeSetupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId,\n        TaskId: taskId,\n        TaskResultId: taskResultId\n      }\n      if(typeof(feeSetupId)!='undefined') {\n        _.set(data, 'FeeSetupId', feeSetupId)\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Get all TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of TaskResultFeeInsertItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  getTaskResultFeeInsert() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultFeeInsert/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nimport { CaseData } from './case_data'\nimport { CaseFinancial } from './case_financial'\nimport { CaseWorkflow} from './case_workflow'\nimport { CaseAdmin } from './case_admin'\n\nexport class Case {\n  /**\n   * @hidden\n   */\n  cw: any\n\n\n  /**\n   * Data Detail methods\n   */\n  data?: Object\n  /**\n   * Workflow & task methods\n   */\n  workflow?: Object\n  /**\n   * Payment, Receipt, & Fee methods\n   */\n  financial?: Object\n  /**\n   * PLL Administration methods\n   */\n  admin?: Object\n\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.data = new CaseData(cw)\n    this.workflow = new CaseWorkflow(cw)\n    this.financial = new CaseFinancial(cw)\n    this.admin = new CaseAdmin(cw)\n  }\n\n  /**\n   * Create new case\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  create(caseTypeId: number, subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/Create', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a child case\n   *\n   * @category Cases\n   * @param {number} busCaseId - The case Type ID\n   * @param {number} parentCaObjectId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createChild(busCaseId: number, parentCaObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId,\n        ParentCaObjectId: parentCaObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/CreateChild', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a case from a Service Request\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {number} requestId - The service request ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createFromRequest(caseTypeId: number, subTypeId: number, requestId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId,\n        ServiceRequestId: requestId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/CreateCaseFromServiceRequest', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the updated case\n   */\n  update(caObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cases by IDs\n   *\n   * @category Cases\n   * @param {Array<number>} caObjectIds - The case Object ID to update\n   * @return {Object} Returns Promise that represents a collection of objects describing the cases\n   */\n  getByIds(caObjectIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectIds: caObjectIds\n      }\n      this.cw.runRequest('Pll/CaseObject/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Cases. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Cases\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case Object IDs\n   */\n  search(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseObject/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Move a Case point\n   *\n   * @category Cases\n   * @param {string} caObjectId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(caObjectId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(1, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        CaObjectId: caObjectId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Pll/CaseObject/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Delete case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the deleted case\n   */\n  delete(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n      }\n      this.cw.runRequest('Pll/CaseObject/DeleteCase', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport { General } from './general'\nimport { ActivityLinks } from './activity_link'\nimport { Gis } from './gis'\nimport { MessageQueue } from './message_queue'\nimport { Search } from './search'\nimport { Request } from './request'\nimport { Inspection } from './inspection'\nimport { WorkOrder } from './workorder'\n\nimport { Case } from './case'\n\nconst https = require('https')\nconst querystring = require('querystring')\nconst _ = require('lodash')\n\ninterface postData {\n  data?: string\n  token?: string\n}\n\n/**\n * Core interface Citywork which defines the access vars for many of the functions and the connection settings\n */\ninterface Citywork {\n  base_url: any\n  settings: Object\n  login?: string\n  password?: string\n  Token?: string\n  gisToken?: string\n  gisTokenUrl?: string\n\n  default_domain?: any\n\n  general?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  // case?: Object\n  inspection?: Object\n  workorder?: Object\n  request?: Object\n\n  case?: Object\n\n  extensions: Object\n  features: Object\n}\n\n/**\n * Core class Cityworks with most of the authentication and install capabilities functions\n */\nmodule.exports = class Cityworks implements Citywork {\n  /**\n   * The domain of the cityworks install. Defaults to Cityworks Online\n   */\n  base_url: string\n  /**\n   * Stores the currently in use authentication token\n   */\n  Token?: string\n  /**\n   * Stores the login username\n   */\n  login?: string\n  /**\n   * Holds the login password\n   */\n  password?: string\n  /**\n   * Holds the GIS Token for GIS-based Authentication (Portal)\n   */\n  gisToken?: string\n  /**\n   * Holds the GIS Token URL for GIS-based Authentication (Portal)\n   */\n  gisTokenUrl?: string\n  /**\n   * Stores settings including path (defaults to \"cityworks\"), secure (defaults to true), expires (defaults to null - does not expire), default_domain\n   */\n  settings: {\n    path: string,\n    secure: boolean,\n    expires: any,\n    default_domain?: any\n  }\n  error?: Object\n  general?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  search?: Object\n  request?: Object\n  inspection?: Object\n  workorder?: Object\n\n  case?: Object\n\n  extensions: Object\n  features: Object\n  potential_loads: Array<string>\n\n  /**\n     * Contructor for a new cityworks instance's object, allows one to optionally configure the domain and other settings right from the get-go\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'workorder', 'inspection', 'request', 'case']\n     */\n  constructor(base_url?: string, settings?: Object, load?: Array<string>) {\n    this.base_url = 'cityworksonline'\n    this.extensions = {\"UnknownExtension\": 0, \"CwAnalytics\": 1, \"WebHooks\": 2, \"PLLPublicApp\": 3, \"ActivityUpdate\": 4, \"SingleSignOn\": 5}\n    this.features = {\"UnknownFeature\": 0, \"ViewInspections\": 1, \"EditInspections\": 2, \"ViewServiceRequest\": 3, \"EditServiceRequest\": 4, \"ViewWorkOrder\": 5, \"EditWorkOrder\": 6, \"EquipmentCheckOut\": 7, \"OfficeField\": 8, \"Respond\": 9, \"Eurl\": 10, \"PaverInterface\": 11, \"Contracts\": 12, \"Storeroom\": 13, \"PLL\": 14, \"Cw4XL\": 15, \"TableEditor\": 16, \"CCTVInterface\": 17, \"MobileAndroid\": 18, \"MobileiOS\": 19, \"PerformanceBudgeting\": 20, \"Insights\": 21, \"RespondCase\": 22, \"RespondInspection\": 23, \"RespondServiceRequest\": 24, \"RespondTaskManager\": 25, \"RespondWorkOrder\": 26, \"Workload\": 27, \"OpX\": 28, \"TrimbleUnityMobile\": 29, \"TrimbleVegetationManager\": 30}\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n    this.potential_loads = ['general', 'activity_link', 'message_queue', 'gis', 'search', 'request', 'case', 'case_financial']\n    if(typeof(base_url)!='undefined') {\n      this.configure(base_url, settings, load)\n    }\n  }\n\n  /**\n     * Configure a new cityworks instance's domain and other settings\n     *\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'search', 'workorder', 'inspection', 'request', 'case']\n     * @return {boolean} Returns true if successful, otherwise, throws error\n     */\n  configure(base_url?: string, settings?: Object, load?: Array<string>) {\n    if(typeof base_url !== 'undefined') { this.base_url = base_url } else { this.base_url = 'cityworksonline' }\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n\n    if(typeof(settings)!='undefined') {\n      _.forEach(settings, (v,k) => {\n        if(typeof(this.settings[k])!='undefined') {this.settings[k] = v}\n      })\n    }\n\n    if(typeof(load)=='undefined') {\n      this.general = new General(this)\n      this.activity_link = new ActivityLinks(this)\n      this.message_queue = new MessageQueue(this)\n      this.request = new Request(this)\n      this.inspection = new Inspection(this)\n      this.workorder = new WorkOrder(this)\n      this.case = new Case(this)\n    } else {\n      let _this = this\n      _.forEach(this.potential_loads, function(v) {\n        switch(v) {\n          case 'general':\n            _this.general = new General(_this)\n          break\n          case 'activity_link':\n            _this.activity_link = new ActivityLinks(_this)\n          break\n          case 'message_queue':\n            _this.message_queue = new MessageQueue(_this)\n          break\n          case 'gis':\n            _this.gis = new Gis(_this)\n          break\n          case 'search':\n            _this.search = new Search(_this)\n          break\n          case 'request':\n            _this.request = new Request(_this)\n          break\n          case 'case':\n            _this.case = new Case(_this)\n          break\n          case 'inspection':\n            _this.inspection = new Inspection(_this)\n          break\n          case 'workorder':\n            _this.workorder = new WorkOrder(_this)\n          break\n        }\n      })\n    }\n  }\n\n  /**\n     * Send a request to the Cityworks API\n     *\n     * If one ever needs to access or call an unimplemented API endpoint of a Cityworks install, one can call this method directly with the path and data payload:\n     *\n     * `cityworks.runRequest(path, data)`\n     *\n     * @param {string} path - The path to the particular endpoint\n     * @param {Object} data - The data object to be sent to the Cityworks API\n     * @return {Object} Returns Promise object that represents the json object returned from the Cityworks API\n     */\n  runRequest(path, data) {\n    return new Promise((resolve, reject) => {\n      let pd = {} as postData\n      pd.data = JSON.stringify(data)\n\n      if(typeof(this.Token) !== 'undefined' && this.Token != '' && path!='General/Authentication/CityworksOnlineAuthenticate' && path!='General/Authentication/Authenticate') {\n        pd.token = this.Token\n      }\n      let obj: {\n        Status: number,\n        Message: string\n      }\n      let options = {\n        hostname: this.base_url,\n        port: 443,\n        path: '/' + this.settings.path + '/services/' + path,\n        method: 'POST',\n        headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n           'Content-Length': Buffer.byteLength(querystring.stringify(pd))\n        },\n        timeout: 10000000\n      }\n\n      let request = https.request(options, (response) => {\n          let str=''\n          response.on('error',function(e){\n              console.log(e, 'Caught on error')\n              reject(new CWError(13, \"Unknown error.\", e))\n          })\n\n          response.on('data',function(chunk){\n              str+=chunk\n          })\n\n          response.on('end',function(){\n            try {\n              var test_str = JSON.stringify(str) + \"[test string]\"\n              if(test_str.match(/\\<h2\\>Object\\ moved\\ to/)==null) {\n                var obj=JSON.parse(str)\n                // if(path=='General/ActivityNotification/UserWatching') {\n                //   console.log(str, options, pd, obj)\n                // }\n                if(typeof(obj)=='undefined') {\n                  // failed\n                  reject(new CWError(10, 'No response received from Cityworks API.'))\n                } else if(typeof(obj)!='undefined' && typeof(obj.Value)!='undefined') { // && typeof(response.Value.Token)!='undefined') {\n                  // console.log(str, options, pd, obj)\n                  resolve(obj)\n                } else {\n                  reject(new CWError(3, \"Unknown error.\", {options: options, postedData: pd, api_returned_string: obj}))\n                }\n              } else {\n                reject(new CWError(1, \"Error parsing JSON. Cityworks returned HTML.\", {response: str}))\n              }\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log('try/catch error on JSON')\n                reject(new CWError(1, \"Error parsing JSON.\", {error: e}))\n              } else {\n                console.log('try/catch error on JSON')\n                reject(new CWError(1, \"Error parsing JSON.\"))\n              }\n            }\n          })\n      })\n      request.write(querystring.stringify(pd))\n      request.end()\n    })\n  }\n\n  /**\n     * Authenticate with the Cityworks API and store an access token for use. Stores the token on cityworks.Token.\n     * @param {string} login - User's login name\n     * @param {password} password - User's password\n     * @return {Object} Returns Promise object that represents a boolean which tells you the login succeeded (true) or failed (false).\n     */\n  authenticate(login: string, password: string) {\n    return new Promise((resolve, reject) => {\n      let data = { LoginName:login, Password:password }\n      let path = 'General/Authentication/Authenticate'\n      if(this.base_url == 'cityworksonline') {\n        path = 'General/Authentication/CityworksOnlineAuthenticate'\n      }\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          reject(new CWError(10, response.Message))\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.login = login\n          this.password = password\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          reject(new CWError(11, 'Unknown Error'))\n        }\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  }\n\n  /**\n     * Authenticate a username with a GIS Token\n     * @param {login} - Gis user name, should match a Cityworks employee login name\n     * @param {string} gisToken - Gis Oauth2 access token\n     * @param {string} gisTokenUrl - Base url to GIS server (not the '/generateToken' endpoint)\n     * @param {number} [expires] - Authenticate to Cityworks for a specified number of milliseconds, defaults to 2 weeks\n     */\n  authenticateWithGISToken(login: string, gisToken: string, gisTokenUrl: string, expires?: number) {\n    this.login = login\n    this.gisToken = gisToken\n    this.gisTokenUrl = gisTokenUrl\n    if(typeof(expires)!='undefined') {\n      expires = 1209600000\n    }\n\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/AuthenticateGisToken'\n      let data = { LoginName:this.login, GisToken: this.gisToken, GisTokenUrl: this.gisTokenUrl, Expires: expires}\n\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          // TODO: CWError here.\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          resolve(false)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Validate provided token\n     * @param {string} token - User's login name\n     * @param {boolean} [set] - Set a valid token as the cityworks instance's active token\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the token's validity and that is was set (true) or throws an error if was not valid (and not set).\n     */\n  validateToken(token:string, set?:boolean) {\n    return new Promise((resolve, reject) => {\n      if(typeof(set)=='undefined') {\n        let set = false\n      }\n      let data = { Token: token }\n      let path = 'General/Authentication/Validate'\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          resolve(false)\n        } else {\n          if(set) {\n            this.Token = token\n          }\n          resolve(response.Value)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Set a token you've retrieved from your storage system as the active token for the cityworks instance. Note that this doesn't check the token for validity.\n     * @param {token} token - The token string to set as the active token.\n     * @return {boolean} Returns a boolean which apprises one that the token was set (true) or not set (false).\n     */\n  setToken(token) {\n    if(token!='' && token!=null) {\n      this.Token = token\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n     * Get currently set, valid token\n     * @param {token} token - The token string to set as the active token.\n     * @return {string} Returns a string which is the currently-set token or the boolean false value if no (valid) token set\n     */\n  getToken() {\n    if(this.Token=='' || this.Token==null) {\n      return false\n    } else {\n      return this.Token\n    }\n  }\n\n  /**\n     * Revoke all current user's tokens or only tokens created before a particular date and time.\n     * @param {number} [revokeBefore] - Datetime as an Epoch integer (number), if you wish to revoke only tokens created before a particular datetime\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the revocation outcome's success (true) or failure (false)\n     */\n  revokeToken(revokeBefore?:number) {\n    return new Promise((resolve, reject) => {\n      let data = { RevokeDate: revokeBefore }\n      let path = 'General/Token/RevokeUser'\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          resolve(false)\n        } else {\n          resolve(true)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  // App data\n\n  /**\n     * Get the localization settings for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the localization settings for the current Cityworks install\n     */\n  getLocalizationSettings() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/LocalizationSettings'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the system timezone options for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the timezone settings for the currentCityworks install\n     */\n  getTimezoneOptions() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/TimeZones'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the current install's location information\n     * @return {Object} Returns Promise object that represents an Object which contains the location information\n     */\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/CurrentLocation'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  // Licensing Checks\n  /**\n     * Check if a particular license is available to the currently-authenticated user\n     * @param {string} area - Area of access\n     * @param {string} service - Service to access\n     * @return {boolean} Returns Promise object that represents a boolean which informs access is granted (true) or denied (false)\n     */\n  licensedApiCheck(area: string, service: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"Area\": area,\n        \"Service\": service\n      }\n      let path = 'General/AppData/SelectedEntities'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if a current Cityworks install is licensed to use a particular extension\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {string} extension - Extension name\n     * @return {boolean} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionCheck(extension: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.extensions[extension])=='undefined') {\n        reject(new CWError(4, 'Extension provided does not exist or is mispelled.', {'provided': extension, 'available': this.extensions}))\n      }\n      let data = {\n        \"Extension\": this.extensions[extension]\n      }\n      let path = 'General/Authorization/LicensedExtensionCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check a whole list to see if current Cityworks install is licensed to use extensions\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {Array<string>} extension - Extension names\n     * @return {Object} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionsCheck(extensions: Array<string>) {\n    return new Promise((resolve, reject) => {\n        var data: { Extensions: Array<number> } = {\n          Extensions: []\n        }\n      _.forEach(extensions, (v) => {\n        if(typeof(this.extensions[v])=='undefined') {\n          reject(new CWError(5, 'Extension provided does not exist or is mispelled.', {'provided': v, 'available': this.extensions}))\n        } else {\n          data.Extensions.push(this.extensions[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedExtensionsCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_extensions = _.invert(this.extensions)\n        _.forEach(response, (ext_num, bool) => {\n          if(typeof(inv_extensions[ext_num])=='undefined') {\n            reject(new CWError(6, 'Extension index provided does not exist or isn\\'t configured properly.', {'provided_num_returned': ext_num, 'available': this.extensions}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_extensions[ext_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use a feature:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {string} [feature] - Feature to check to see if ciurrently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeatureCheck(feature: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.features[feature])=='undefined') {\n        reject(new CWError(7, 'Feature provided does not exist or is mispelled.', {'provided': feature, 'available': this.features}))\n      }\n      let data = {\n        \"Feature\": this.features[feature]\n      }\n      let path = 'General/Authorization/LicensedFeatureCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use features:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {Array<string>} [feature] - Features to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeaturesCheck(features: Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data: { Features: Array<number> } = {\n        Features: []\n      }\n      _.forEach(features, (v: string) => {\n        if(typeof(this.features[v])=='undefined') {\n          reject(new CWError(8, 'Feature provided does not exist or is mispelled.', {'provided': v, 'available': this.features}))\n        } else {\n          data.Features.push(this.features[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedFeaturesCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_features = _.invert(this.features)\n        _.forEach(response.Value, (feat_num, bool) => {\n          if(typeof(inv_features[feat_num])=='undefined') {\n            reject(new CWError(9, 'Feature index provided does not exist or isn\\'t configured properly.', {'provided': feat_num, 'available': inv_features}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_features[feat_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  // LicensedServicesCheck\n  // Check if current user is licensed to use services\n  // List req ServicesList of 'Area/Service', i.e. ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n  /**\n     * Check if current user is licensed to use services. List req ServicesList of 'Area/Service', i.e.:\n     *\n     * ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n     *\n     * @param {Array<string>} [services] - Services to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedServicesCheck(services: Array<string>) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authorization/LicensedServicesCheck'\n      var data: { Services: Array<string> } = {\n        Services: services\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of CityworksOnline sites for this user\n     *\n     * @param {string} [login] - Login Name to use when checking. Defaults to previously-stored login name.\n     * @param {string} [password] - Password to use when checking. Defaults to previously-stored password.\n     * @return {Object} Returns Promise object that represents an array of cityworks online sites available to this user.\n     */\n  cityworksOnlineSites(login?: string, password?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/CityworksOnlineSites'\n      var data = {\n        LoginName: (typeof(login)!='undefined') ? login: this.login,\n        Password:  (typeof(password)!='undefined') ? password : this.password\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a collection of the configured domains.\n     */\n  domains() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Domains'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @param {string} [login] - Optional login name to get user information for. Defaults to currently-set user name used for login.\n     * @return {Object} Returns Promise object that represents an Object with the user information\n     */\n  user(login?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/User'\n      let data = { LoginName: (typeof(login)!='undefined') ? login: this.login }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the software version number of the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a string of the version number\n     */\n  version() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Version'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n\n\n // export default new Cityworks() as cityworks\n"],"names":["CWError","constructor","code","message","info","name","this","JSON","stringify","_","require","General","cw","notifications","Promise","resolve","reject","runRequest","then","response","Value","amIWatching","activityType","activityId","aType","null","case","task","provided","potential_activities","ActivityType","ActivityId","r","catch","e","quickSearch","text","QuickSearchText","getActivityMetadataByIds","ids","table","tables","indexOf","available","Ids","TableName","console","log","getWOEntityCostSummary","object_ids","ObjectIds","searchWOEntityCostSummary","search_id","SearchId","ActivityLinks","activityTypes","linkTypes","ReversibleMap","set","add","source_type","source_sid","destination_type","destination_sid","link_type","has","options","data","SourceType","get","SourceSid","DestType","DestSid","LinkType","type","sids","ActivitySids","_this","return_data","Array","forEach","link","key","push","clone","SourceActivityType","SourceActivitySid","DestinationActivityType","DestinationActivitySid","delete","activity_link_id","ActivityLinkId","remove","Gis","getConfig","whichType","whichId","getGisData","context","toLowerCase","domain","domainId","downloadMobile","cacheId","initialExtent","request","requestId","inspection","inspectionId","workOrder","workOrderSid","user","allDomains","allGroups","selectedEntities","MessageQueue","status","hook_types","Pending","Processing","Complete","Failed","Unknown","ActivityUpdate","Email","WebHook","processMessages","delete_successful","Delete","maxcount","MaxCount","Status","hours_to_keep","HoursToKeep","preferences","search","parameters","max_results","MaxResults","allowed_params","disallowed_params","v","k","value","concat","update","HookType","updateMessageStatus","getWebooks","hook_ids","HookIds","Search","RequestAdmin","Request","admin","create","sr_data","move","x","y","projection","z","base_data","RequestId","X","Y","merge","changeProblem","problemSid","ProblemSid","getById","getByIds","requestIds","RequestIds","getAuditLog","getCustomFields","changeCustomFieldCategory","categoryId","CategoryId","comment","Comments","cancel","cancelReason","dateCancelled","uncancel","close","Message","reopen","searchData","searchObject","createSearchDefinition","searchName","sharedWithin","saveDefinition","enableEurl","isString","getProblemNodes","viewOnly","displayMode","includeCancelled","DomainId","IncludeCancelled","ViewOnly","getProblems","forPublicOnly","onlyActiveTemplates","domainIds","ForPublicOnly","OnlyActiveTemplates","getProblemsByKeywords","keywords","Keywords","getPriorities","ProblemSids","getCustomFieldTemplate","getQASettings","getProblemLeaf","getStatuses","DomainIds","getEmployeeLists","listType","includes","getDispatchTos","getSubmitTos","streetCodes","getTemplatesById","problemSids","minimumDateModified","maximumDateModified","createTemplateSearchDefinition","getTemplateQAs","searchTemplates","getTemplates","templateIds","canCreate","includeInactiveIf","CanCreate","IncludeInactiveIf","getWOTemplates","includeInactive","IncludeInactive","InspectionAdmin","Inspection","insp_data","createFromEntities","createFromParent","createFromServiceRequest","createFromWorkOrder","InspectionId","inspectionIds","InspectionIds","CancelReason","DateCancelled","statuses","submitTos","includeInactiveEmployees","IncludeInactiveEmployees","connectAsset","entity","updateXY","facility","EntityType","EntityUid","Entity","Facility_Id","Level_Id","getAnswers","inspections","length","getCycleFrom","getCycleIntervals","getCycleTypes","getDistricts","data_init","entityTypes","EntityTypes","forIn","getTemplatesByIds","inspTemplateIds","InspTemplateIds","getTemplateEntityTypes","getQA","getQConditions","deleteAttachments","attachmentIds","AttachmentIds","downloadAttachment","attachmentId","AttachmentId","getAttachmentById","getAttachments","WorkOrderAdmin","WorkOrder","wo_data","workOrderSId","s","combine","fromWorkOrderIds","toWorkOrderId","cancelCombinedWorkOrders","CancelCombinedWorkOrders","ToWorkOrderId","FromWorkOrderIds","workOrderId","WorkOrderId","path","workOrderSIds","workorderSId","isNumber","getInstructions","getCustomFieldValues","workorderSIds","getEntities","GetGisData","addEntities","entityInfo","UpdateXY","updateEntity","workComplete","WorkComplete","removeEntities","workOrderIds","WorkOrderIds","getWOsByEntities","entityType","entityUids","getSearchList","getSupervisors","getCategories","getStages","getExpenseTypes","CaseData","CaseFinancial","addFee","caObjectId","feeSetupId","CaObjectId","FeeSetupId","addPayment","addRefund","caPaymentId","refundAmount","CaPaymentId","RefundAmount","addDepositPayment","caDepositId","CaDepositId","addDeposit","depositId","amount","DepositId","addInstrument","instTypeId","dateExpire","InstTypeId","Amount","DateExpire","updateFee","caFeeId","CaFeeId","voidRefund","caPaymentRefundId","voided","CaPaymentRefundId","Voided","addDefaultFees","busCaseId","BusCaseId","addDefaultDeposits","getFees","getDeposits","getPayments","getInstruments","deleteFee","deleteFeesByCaseId","deletePayment","deleteRefund","deletePaymentsByCaseId","deleteDeposit","deleteDepositsByCaseId","deleteInstrument","caInstrumentId","CaInstrumentId","deleteInstrumentsByCaseId","searchFees","filters","intersectionBy","searchPayments","searchRefunds","searchDeposits","getAllFeeTemplates","searchFeeTemplates","searchCaseInstruments","getInstrumentList","addCaseInstrumentRelease","releasedBy","dateReleased","amountReleased","percentReleased","DateReleased","ReleasedBy","deleteCaseInstrumentRelease","caInstReleasesId","CaInstReleasesId","searchCaseInstrumentReleases","fees","searchAvailableFees","getTenderTypes","addTenderType","updateTenderType","tenderTypeId","TenderTypeId","CaseWorkflow","CaseAdmin","addBusinessCaseTemplate","updateBusinessCaseTemplate","getBusinessCaseTemplates","addCaseType","caseTypeName","caseTypeDesciption","CaseType","CaseTypeDesciption","updateCaseType","caseTypeId","CaseTypeId","getCaseTypes","searchCaseTypeIDs","searchCaseTypeObjects","addSubtype","subTypeName","subTypeDescription","SubType","SubTypeDesc","updateSubtype","subTypeId","SubTypeId","getSubtypes","getExpirations","addExpiration","getDisciplines","addDepartment","departmentCode","departmentName","DepartmentCode","DepartmentName","getDepartments","addDivision","departmentId","divisionName","DepartmentId","DivisionName","getDivisions","addHoliday","holidayDate","holidayDesc","halfDayFlag","HolidayDate","HolidayDesc","deleteHoliday","holidayId","HolidayId","getHolidays","addInspectionTimeBlock","labelText","startTime","endTime","inspTimeBlocksDetails","LabelText","StartTime","EndTime","getInspectionTimeBlocks","getNotificationCases","getNotificationTypes","addNumberingGroup","updateNumberingGroup","numberingGroupId","NumberingGroupId","getNumberingGroups","addPerson","Name","getPeople","addPeopleRole","roleCode","RoleCode","getPeopleRoles","addTaskResultDetail","updateTaskResultDetail","resultDetailId","ResultDetailId","getTaskResultDetails","addTaskResultFeeInsert","deleteTaskResultFeeInsert","taskResultFeeInsertId","TaskResultFeeInsertId","deleteTaskResultFeeInsertByTaskId","taskId","TaskId","updateTaskResultFeeInsert","taskResultId","TaskResultId","getTaskResultFeeInsert","Case","workflow","financial","createChild","parentCaObjectId","ParentCaObjectId","createFromRequest","ServiceRequestId","caObjectIds","CaObjectIds","https","querystring","module","exports","base_url","settings","load","Token","login","password","gisToken","gisTokenUrl","error","general","activity_link","message_queue","gis","workorder","extensions","features","potential_loads","UnknownExtension","CwAnalytics","WebHooks","PLLPublicApp","SingleSignOn","UnknownFeature","ViewInspections","EditInspections","ViewServiceRequest","EditServiceRequest","ViewWorkOrder","EditWorkOrder","EquipmentCheckOut","OfficeField","Respond","Eurl","PaverInterface","Contracts","Storeroom","PLL","Cw4XL","TableEditor","CCTVInterface","MobileAndroid","MobileiOS","PerformanceBudgeting","Insights","RespondCase","RespondInspection","RespondServiceRequest","RespondTaskManager","RespondWorkOrder","Workload","OpX","TrimbleUnityMobile","TrimbleVegetationManager","secure","expires","default_domain","configure","pd","token","hostname","port","method","headers","Buffer","byteLength","timeout","str","on","chunk","match","obj","parse","postedData","api_returned_string","SyntaxError","write","end","authenticate","LoginName","Password","authenticateWithGISToken","GisToken","GisTokenUrl","Expires","validateToken","setToken","getToken","revokeToken","revokeBefore","RevokeDate","getLocalizationSettings","getTimezoneOptions","getCurrentLocation","licensedApiCheck","area","service","Area","Service","licensedExtensionCheck","extension","Extension","licensedExtensionsCheck","Extensions","rez","inv_extensions","invert","ext_num","bool","provided_num_returned","licensedFeatureCheck","feature","Feature","licensedFeaturesCheck","Features","inv_features","feat_num","licensedServicesCheck","services","Services","cityworksOnlineSites","domains","version"],"mappings":"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"}