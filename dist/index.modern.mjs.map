{"version":3,"file":"index.modern.mjs","sources":["../src/error.ts","../src/general.ts","../src/activity_link.ts","../src/gis.ts","../src/message_queue.ts","../src/search.ts","../src/request_admin.ts","../src/comments.ts","../src/request.ts","../src/inspection_admin.ts","../src/inspection.ts","../src/workorder_admin.ts","../src/workorder.ts","../src/case_data.ts","../src/case_financial.ts","../src/case_workflow.ts","../src/case_admin.ts","../src/case_assets.ts","../src/case.ts","../src/cityworks.ts"],"sourcesContent":["const _ = require('lodash')\n\n/**\n * CWErrorInt interface definition for implementation by CWError\n *\n * `{name: string, code: number, message: string, info?: string}`\n *\n */\nexport interface CWErrorInt {\n  name: string\n  code: number\n  message: string\n  info?: string\n}\n\n/**\n * CWError implements a custom error class for this codebase with additional information\n *\n */\nexport class CWError implements CWErrorInt {\n  /**\n   * Just statically set to \"Cityworks Exception\" for now\n   */\n  name: string\n  /**\n   * Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   */\n  code: number\n  /**\n   * The error message\n   */\n  message: string\n  /**\n   * Object stuffed with any other information one wishes to include in the thrown error\n   */\n  info?: string\n\n  /**\n   * CWError implements a custom error class for this codebase with additional information\n   *\n   * @param {number} code - Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   * @param {string} message - The error message\n   * @param {Object} info - Object stuffed with any other information one wishes to include in the thrown error\n   * @return {Object} Returns instance of CWError object\n   */\n  constructor(code:number, message:string, info?:object) {\n    this.name = \"Cityworks Exception\"\n    this.code = code\n    this.message = message\n    if(typeof(info) !== 'undefined') {\n      if(_.has(info, 'Message'))\n        this.message = _.get(info, 'Message')\n      this.info = JSON.stringify(info)\n    }\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n/**\n * A plugin that contains \"general\" methods for a Cityworks install\n */\nexport class General {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get notifications for currently authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of available notifications\n   */\n  notifications() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('General/ActivityNotification/User', {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Find out if the current user is watching a particular activity (case, task, null [as a string])\n   *\n   * @param {string} activityType - which activity type the following ID will be for.\n   * @param {number} activityId - activity Case or CaseTask (task instance) ID to check\n   * @return {Object} Returns Promise object that represents a boolean indicating the currently authenticated user is watching the provided activity\n   */\n  amIWatching(activityType, activityId: number) {\n    return new Promise((resolve, reject) => {\n      let aType = {'null': 0, 'case': 1, 'task': 2}\n      if(typeof(aType[activityType])=='undefined') {\n        // reject with error\n        reject(new CWError(1, \"Activity type provided does not exist.\", {provided: activityType, potential_activities: aType}))\n      } else {\n        let data = {\"ActivityType\": aType[activityType], \"ActivityId\": activityId}\n        this.cw.runRequest('General/ActivityNotification/UserWatching', data).then(r => {\n          // console.log(r, 'response')\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get CwMetatData by Type and CwSid\n   *\n   * @param {Array<number>} Ids\n   * @param {string} TableName - INSPECTION, REQUEST, WORKORDER require View permission on the activities\n   * @return {Object} Returns Promise object that represents a\n   */\n  getActivityMetadataByIds(ids: Array<number>, table: string) {\n    return new Promise((resolve, reject) => {\n      let tables = [\"INSPECTION\", \"REQUEST\", \"WORKORDER\"]\n      if(_.indexOf(tables, table)==-1) {\n        reject(new CWError(2, 'TableName provided does not exist or is mispelled.', {'provided': table, 'available':tables}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"TableName\": table\n      }\n      this.cw.runRequest('General/CwMetaData/ByTableNameSids', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get recent history for authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of RecentActivity objects\n   */\n  getHistory() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      this.cw.runRequest('Ams/Search/RecentActivity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for WorkOrder entities\n   *\n   * @param {Array<number>} ObjectIds\n   * @return {Object} Returns Promise object that represents a\n   */\n  getWOEntityCostSummary(object_ids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"ObjectIds\": object_ids\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for WorkOrder entities selected through a search definition\n   *\n   * @param {number} SearchId - Search Definition Id\n   * @return {Object} Returns Promise object that represents a\n   */\n  searchWOEntityCostSummary(search_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"SearchId\": search_id\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntitySearch', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\n/**\n * ActivityLink interface for ActivityLinks\n *\n */\nexport interface ActivityLink {\n  linkTypes: ReversibleMap<string, number>\n  activityTypes: ReversibleMap<string, number>\n  cw: any\n}\n\n/**\n * ActivityLinks implements the activity link functions via using the ActivityLink interface\n *\n */\nexport class ActivityLinks implements ActivityLink {\n  /**\n   * Activity types to map string to number for internal use. Activity types available are:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   */\n  activityTypes: ReversibleMap<string, number>\n  /**\n   * Link types to map string to number for internal use. Link types available are:\n   *\n   *      \"null\", \"parent\", \"related\"\n   */\n  linkTypes: ReversibleMap<string, number>\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"null\", 0)\n    this.activityTypes.set(\"case\", 1)\n    this.activityTypes.set(\"inspection\", 2)\n    this.activityTypes.set(\"request\", 3)\n    this.activityTypes.set(\"workorder\", 4)\n    this.activityTypes.set(\"wipcase\", 5)\n\n    this.linkTypes = new ReversibleMap<string, number>()\n    this.linkTypes.set(\"null\", 0)\n    this.linkTypes.set(\"parent\", 1)\n    this.linkTypes.set(\"related\", 2)\n  }\n\n  /**\n   * Create a new activity link between two items.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  add(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(3, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Add'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the links for a particular node type by ID.\n   *\n   * @param {string} type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {Array<number>} sids - Array of numeric (S)IDs you wish to get of the specified type\n   * @return {Object} Returns Promise object that represents a collection\n   */\n  get(type: string, sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(type)) {\n        reject(new CWError(4, 'Activity type not found.', {'provided': type, 'options':this.activityTypes}))\n      }\n      let data = {\n        ActivityType: this.activityTypes.get(type),\n        ActivitySids: sids\n      }\n      let _this = this\n      let path = 'General/ActivityLink/ByActivitySids'\n      this.cw.runRequest(path, data).then((response: any) => {\n        let return_data = new Array()\n        _.forEach(response.Value, (link, key) => {\n          link.DestType = _this.activityTypes.get(link.DestType)\n          link.SourceType = _this.activityTypes.get(link.SourceType)\n          link.LinkType = _this.linkTypes.get(link.LinkType)\n          return_data.push(link)\n        })\n        resolve(return_data)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Clone a current activity link.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to clone a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to clone a link between SID as destination and a particular source\n   * @return {Object} Returns Promise object that represents a\n   */\n  clone(source_type: string, source_sid: number, destination_type: string, destination_sid: number) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      let data = {\n        SourceActivityType: this.activityTypes.get(source_type),\n        SourceActivitySid: source_sid,\n        DestinationActivityType: this.activityTypes.get(destination_type),\n        DestinationActivitySid: destination_sid\n      }\n      let path = 'General/ActivityLink/CloneByActivitySid'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete an activity link by ID\n   *\n   * @param {number} activity_link_id - The ID of the activity link one wishes to delete\n   * @return {Object} Returns Promise object that represents a\n   */\n  delete(activity_link_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        ActivityLinkId: activity_link_id\n      }\n      let path = 'General/ActivityLink/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Remove a link by specifying everything.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  remove(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(1, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Remove'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Gis {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get gis service configuration for user, group, domain, or service id\n   *\n   * @param {string} [whichType] - domain, group, mapservice, or user\n   * @param {number} [whichId] - domain, group, mapservice, or user Id\n   * @param {number} [getGisData] - If true, check for feature server JSON data, default is true\n   * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  getConfig(whichType, whichId, getGisData: boolean = true, context: Array<string> = []) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain'\n      whichType = whichType.toLowerCase()\n      let data: {DomainId?: any, GroupId?: any, MapServiceId?: any, UserId?: any, GetGisData: boolean, Security: Array<string>}\n      switch(whichType) {\n        case 'domain':\n          data = {DomainId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'group':\n          data = {GroupId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'mapservice':\n          data = {MapServiceId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'user':\n          data = {UserId:whichId, GetGisData: getGisData, Security: context}\n          break\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n    * Get domain gis services\n    *\n    * @param {number} domainId - The mobile map cache Id to download\n    * @return {Object} Returns Promise object that represents an Object with the domain's default GIS services\n    */\n  domain(domainId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain'\n      let data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Download mobile map cache\n     *\n     * @param {number} cacheId - The mobile map cache Id to download\n     * @return {Object} Returns Promise object that represents a streaming download (?)\n     */\n  downloadMobile(cacheId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/DownloadMobileMapCache'\n      let data = {\n        MobileMapCacheId: cacheId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get initial extent for user\n   *\n   * @return {Object} Returns Promise object that represents ... (?)\n   */\n  initialExtent() {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InitialExtent'\n      let data = {};\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get service request gis services\n   *\n   * @param {number} requestId - The WorkOrder to check against.\n   * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n   * @return {Object} Returns Promise object that represents an Object with the specified request's entit(y|ies)\n   */\n  request(requestId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/ServiceRequestConfiguration'\n      let data = {\n        RequestId: requestId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get inspection gis services\n     *\n     * @param {number} inspectionId - The WorkOrder to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified inspection's entity\n     */\n  inspection(inspectionId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InspectionConfiguration'\n      let data = {\n        InspectionId: inspectionId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get workorder gis services\n     *\n     * @param {number} workOrderSid - The WorkOrder to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified WorkOrder's entit(y|ies)\n     */\n  workOrder(workOrderSid, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/WorkOrderConfiguration'\n      let data = {\n        WorkOrderSid: workOrderSid,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get service request gis services\n     *\n     * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n     * @param {boolean} [allDomains] services assigned to any domain the user belongs to, default is true\n     * @param {boolean} [allGroups] services assigned to any groups the user belongs to regardless of domain, default is true\n     * @param {boolean} [getGisData] If true, check for feature server JSON data, default is true\n     * @return {Object} Returns Promise object that represents an Object with the user's GIS services\n     */\n  user(context: Array<string> = [], allDomains: boolean = true, allGroups: boolean = true, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/User'\n      let data = {\n        AllDomains: allDomains,\n        AllGroups: allGroups,\n        GetGisData: getGisData,\n        Security: context\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Geocode server info by ServerId\n   *\n   * @param {number} ServiceId\n   * @return {Object} Returns Promise object that represents an object describing the provided Geocoder service configuration\n   */\n   // Gis/GeoCode/GeocodeServer\n\n   /**\n      * Get currently selected entities from the Cityworks install's session for your user\n      * @return {Object} Returns Promise object that represents an Object with the currently-selected entities\n      */\n   selectedEntities() {\n     return new Promise((resolve, reject) => {\n       let path = 'General/AppData/SelectedEntities'\n       this.cw.runRequest(path, {}).then((response: any) => {\n         resolve(response.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n      * Get attributes available for provided entity\n      *\n      * @param {string} entityType - The entity type to describe\n      * @return {Object} Returns Promise object that represents a collection of attribute description objects\n      */\n   getEntityAttributes(entityType:string) {\n     return new Promise((resolve, reject) => {\n       let data = {EntityType: entityType}\n       let path = 'AMS/Entity/Attributes'\n       this.cw.runRequest(path, data).then((response: any) => {\n         resolve(response.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class MessageQueue {\n  /**\n   * @hidden\n   */\n  cw: any\n  /**\n   * Statuses -\n   * Pending: 0,\n   * Processing: 1,\n   * Complete: 2,\n   * Failed: 3\n   */\n  status: Object = {\n    Pending: 0,\n    Processing: 1,\n    Complete: 2,\n    Failed: 3\n  }\n  /**\n   * Hook Types -\n   * Unknown: 0,\n   * ActivityUpdate: 1,\n   * Email: 2,\n   * WebHook: 3\n   */\n  hook_types: Object = {\n    Unknown: 0,\n    ActivityUpdate: 1,\n    Email: 2,\n    WebHook: 3\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Process Webhook MessageQueue records by MessageQueueId\n   *\n   * @param {Array<number>} [ids] - List of MessageQueueId values\n   * @param {boolean} [delete_successful] - automatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  processMessages(ids: Array<number>, delete_successful: boolean = false) {\n    return new Promise((resolve, reject) => {\n      let data = { Ids: ids, Delete: delete_successful}\n      let path = 'General/WebHookEvent/ProcessMessages'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status -\n   * @param {number} [maxcount] - Maximum number returned. Defaults to 15\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  get(ids: Array<number>, status: string, maxcount: number = 15) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(1, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"MaxCount\": typeof(maxcount)!='undefined' ? maxcount : 15,\n        \"Status\": this.status[status]\n      }\n      let path = 'General/MessageQueue/ByIds'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status - automatically delete messages that complete with successful execution, default is false\n   * @param {number} [hours_to_keep] - utomatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  delete(ids: Array<number>, status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // PreferencesList<GlobalPreference>\n  // Base response type: CoreResponseBase\n  // Get a list of message queue preferences\n  // This method has no parameters\n  preferences() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      let path = 'General/MessageQueue/Preferences'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  search(parameters, max_results?: number) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(max_results)!=='undefined') {\n        data.MaxResults = max_results\n      }\n      let allowed_params = ['Id', 'HookId', 'HookType', 'Result', 'DateCreatedBegin', 'DateCreatedEnd', 'DateUpdatedBegin', 'DateUpdatedEnd']\n      let disallowed_params = ['Status', 'MaxResults']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(4, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n      let path = 'General/MessageQueue/Search'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update queue message\n   *\n   * @param {Object} parameters - Provide allowed parameters:\n   *\n   *      {\n   *        HookId: number,\n   *        Id: number,\n   *        Packet: string,\n   *        Result: string,\n   *        Status: string, // Available options: Pending, Processing, Complete, Failed\n   *        HookType: string // Available options: Unknown, ActivityUpdate, Email, WebHook\n   *      }\n   *\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  update(parameters: any) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.hook_types, 'available':this.hook_types}))\n      } else if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])!=='undefined') {\n        data.HookType = this.hook_types[parameters.hook_types]\n      }\n      let allowed_params = ['Id', 'HookId', 'Packet', 'Result']\n      let disallowed_params = ['Status', 'HookType']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(5, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n\n      let path = 'General/MessageQueue/Update'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  updateMessageStatus(ids: number[], status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/UpdateMessageStatus'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  getWebooks(hook_ids) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"HookIds\": hook_ids\n      }\n      let path = 'General/MessageQueue/WebHooks'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Search {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Search Types: Null, Request, WorkOrder, Inspection, Contract, Permit, GIS, PermitTask, PermitAddress, InspCommon, Case, WorkOrderEntity, StoreTransaction, Requisition, Material, WorkActivity, MaterialLeaf, WoTemplate, Unknown, Employee, MessageQueue, Analytics, TokenState, AssetCalculationResult, Equipment, CustomerAccount, InspTemplate, ProblemLeaf, AssetSplitRecord, PavementInsp, TvInspection, Projects\n   */\n  searchTypes: Object = {\n    \"Null\": 0,\n    \"Request\": 1,\n    \"WorkOrder\": 2,\n    \"Inspection\": 3,\n    \"Contract\": 4,\n    \"Permit\": 5,\n    \"GIS\": 6,\n    \"PermitTask\": 7,\n    \"PermitAddress\": 8,\n    \"InspCommon\": 9,\n    \"Case\": 10,\n    \"WorkOrderEntity\": 11,\n    \"StoreTransaction\": 12,\n    \"Requisition\": 13,\n    \"Material\": 14,\n    \"WorkActivity\": 15,\n    \"MaterialLeaf\": 16,\n    \"WoTemplate\": 17,\n    \"Unknown\": 18,\n    \"Employee\": 19,\n    \"MessageQueue\": 20,\n    \"Analytics\": 21,\n    \"TokenState\": 22,\n    \"AssetCalculationResult\": 23,\n    \"Equipment\": 24,\n    \"CustomerAccount\": 25,\n    \"InspTemplate\": 26,\n    \"ProblemLeaf\": 27,\n    \"AssetSplitRecord\": 28,\n    \"PavementInsp\": 29,\n    \"TvInspection\": 30,\n    \"Projects\": 31\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Do a \"quick\" search for any string (an ID is best)\n   *\n   * @category Quick Search\n   * @param {string} text - text to search the system for\n   * @return {Object} Returns Promise object that represents a collection of the currently authenticated user's notifications\n   */\n  quick(text: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"QuickSearchText\": text,\n      }\n      this.cw.runRequest('General/QuickSearch/QuickSearch', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Execute a saved search\n   *\n   * @category Search\n   * @param {number} searchId - SearchId to execute\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @return {Object} Returns Promise object that represents a list of Objects\n   */\n  execute(searchId: number, options?: {EmployeeSid?: number, ExcludeEmptyXY?: boolean, Extent?: Object, Frequency?: boolean, IdsOnly?: boolean, IncludeSearchOrder?: boolean, MaxResults?: number, ResultFields?: Array<string>, TotalOnly?: boolean}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchId: searchId\n      }\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/Execute', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of the saved searches by search type and specific entity types OR employeeSid/domainId. You cannot search for saved searches by both specific entity type AND employeeSid/domainId.\n   *\n   * @category Search\n   * @param {string} searchType - Get the saved searches for a particular type\n   * @param {Array<string>} [applyToEntities] - Restrict GIS searches to specified entity types\n   * @param {number} [employeeSid] - The employee SID to retrieve the searches as\n   * @param {number} [domainId] - The domain ID of the domain to search\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionName\n   */\n  getSaved(searchType: string, applyToEntities?: Array<string>, employeeSid?: number, domainId?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(2, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      } else if(typeof(applyToEntities)!='undefined' && applyToEntities!=null && applyToEntities.length>0 && (typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined')) {\n        reject(new CWError(3, 'You cannot specify both applyToEntities AND employeeSid/domainId'))\n      }\n      var data = {}\n      var savedEndpoint = ''\n      if(typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined') {\n        savedEndpoint = 'SavedByType'\n        if(typeof(employeeSid)!='undefined' && employeeSid!=null) {\n          _.set(data, 'EmployeeSid', employeeSid)\n        }\n        if(typeof(domainId)!='undefined' && domainId!=null) {\n          _.set(data, 'DomainId', domainId)\n        }\n      } else {\n        if(searchType=='Case') {\n          savedEndpoint = 'PllSavedSaved'\n        } else {\n          savedEndpoint = searchType + 'Saved'\n        }\n        if(typeof(applyToEntities)!='undefined' && applyToEntities!=null) {\n          _.set(data, 'ApplyToEntities', applyToEntities)\n        }\n      }\n      this.cw.runRequest('Ams/Search/'+savedEndpoint, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list display fields for a Search Type\n   *\n   * @category Search Options\n   * @param {string} searchType - Restrict GIS searches to specified entity types\n   * @return {Object} Returns Promise object that represents a collection of SearchDisplayFields\n   */\n  displayFields(searchType: string) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      }\n      var data = {\n        searchType: _.get(this.searchTypes, searchType)\n      }\n      this.cw.runRequest('Ams/Search/DisplayFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list search types\n   *\n   * @category Search Options\n   * @return {Object} Returns Promise object that represents a collection of SearchTypeInfo objects\n   */\n  types() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Ams/Search/Types', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Enable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  enableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: true,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Disable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  disableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: false,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a search definition\n   *\n   * @category Search Definitions\n   * @param {number} searchId - SearchId to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a SearchDefinition object\n   */\n  getDefinition(searchId: number, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchId: searchId\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinition objects\n   */\n  getDefinitions(searchIds: Array<number>, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definition names\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionNames\n   */\n  getDefinitionNames(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DefinitionNames', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a list (dictionary) of search IDs and deletion success boolean\n   */\n  deleteDefinitions(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DeleteDefinitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Save a search definition\n   *\n   * @category Search Definitions\n   * @param {string} searchFor - Name of type to search for from searchTypes\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @param {number} searchId - SearchId to update. Defaults to \"0\" which is \"Create new saved search\"\n   * @return {Object} Returns Promise object that represents a SearchDefinitionName object\n   */\n  saveDefinition(searchFor: string, options?: Object, searchId: number = 0) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchFor)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchFor, 'available':this.searchTypes}))\n      }\n      var data = {\n        SearchFor: _.get(this.searchTypes, searchFor),\n        SearchId: searchId\n      }\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/SaveDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class RequestAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get service request templates\n   *\n   * @category Requests Admin\n   * @param {Object} searchData - search data\n   * @return {Object} Returns Promise that represents a collection of all Service Request Templates\n   */\n  getTemplates(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\n\n/**\n * A plugin that contains \"comments\" methods\n */\nexport class Comments {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Storage of all potential activity types which comments can be attached to: Unknown, Request, WorkOrder, CaTask, CaObject, CaCorrection, Project, Contract\n   */\n  activityTypes: ReversibleMap<string, number>\n\n  /**\n   * Storage of object's active activityType\n   */\n  currentActivityType: string\n\n  /**\n   * @hidden\n   */\n  constructor(cw, activityType) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"Unknown\", 0)\n    this.activityTypes.set(\"Request\", 1)\n    this.activityTypes.set(\"WorkOrder\", 2)\n    this.activityTypes.set(\"CaTask\", 3)\n    this.activityTypes.set(\"CaObject\", 4)\n    this.activityTypes.set(\"CaCorrection\", 5)\n    this.activityTypes.set(\"Project\", 6)\n    this.activityTypes.set(\"Contract\", 7)\n\n    if(!this.activityTypes.has(activityType)) {\n      throw new CWError(1, 'Activity type not found.', {'provided': activityType, 'options':this.activityTypes})\n    }\n    this.currentActivityType = activityType\n  }\n\n  /**\n   * Add a comment - for adding a comment to an object when the object is already known. Always call comment.add from request, case, workorder, or inspection.\n   * \n   * @param {number} sid - The SID of the activity to which the comment should be attached\n   * @param {string} comment - The text for the comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  add(sid: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        ActivitySid: sid,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Add', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a comment\n   *\n   * @param {number} id - The ID of the comment which should be updated\n   * @param {string} comment - The new text for the updated comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  update(id: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        CommentId: id,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Update', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get comments for activity items\n   *\n   * @param {Array<number>} sids - The options SIDs to get comments for.\n   * @return {Object} Returns Promise object that represents a collection of available comments\n   */\n  get(sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(typeof(sids)!='undefined' && sids !=null) {\n        var data = {\n          ActivitySids: sids,\n          ActivityType: this.activityTypes.get(this.currentActivityType),\n        }\n        this.cw.runRequest('Ams/Comment/ByActivitySids', data).then((response: any) => {\n          if(sids.length==1) {\n            resolve(response.Value[sids[0]])\n          } else {\n            resolve(response.Value)\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * Get pre-defined comments for activityTypes\n   *\n   * @param {number} problemSid - The ProblemSid if currentActivityType is (Service) Request\n   * @param {string} [category] - Only applies to WorkOrder and ServiceRequest category comments.\n   * @return {Object} Returns Promise object that represents a collection of available comment templates.\n   */\n  getPredefined(problemSid?: number, category?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(this.currentActivityType=='Request') {\n        _.set(data, 'ProblemSid', problemSid)\n      }\n      if(typeof(category)!='undefined' && (this.currentActivityType=='Request' || this.currentActivityType=='WorkOrder')) {\n        _.set(data, 'Category', category)\n      }\n      _.set(data, 'ActivityType', this.activityTypes.get(this.currentActivityType))\n      this.cw.runRequest('Ams/Comment/PredefinedComments', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // /**\n  //  * Get pre-set comments for activityTypes\n  //  *\n  //  * @param {Array<string>} [activityTypes] - Provide a list of activity types. Defaults to current activity type.\n  //  * @param {Array<string>} [categories] - Only applies to WorkOrder and ServiceRequest category comments.\n  //  * @return {Object} Returns Promise object that represents a collection of available comment templates.\n  //  */\n  // getForActivityList(activityTypes?: Array<string>, categories?: Array<string>) {\n  //   return new Promise((resolve, reject) => {\n  //     var data = {}\n  //     if(typeof(activityTypes)!='undefined') {\n  //       // TODO: iterate through it and output numeric types\n  //       _.set(data, 'ActivityTypes', activityTypes)\n  //     } else {\n  //       _.set(data, 'ActivityTypes', [this.activityTypes.get(this.currentActivityType)])\n  //     }\n  //     if(typeof(categories)!='undefined') {\n  //       _.set(data, 'Categories', categories)\n  //     }\n  //     console.log(data, 'data')\n  //     this.cw.runRequest('Ams/Comment/ByActivityTypes', data).then((response: any) => {\n  //       resolve(response.Value)\n  //     }).catch(e => {\n  //      reject(e)\n  //    })\n  //   })\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { RequestAdmin } from './request_admin'\nimport { Comments } from './comments'\n\nexport class Request {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Request Administration methods\n   */\n  admin?: Object\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new RequestAdmin(cw)\n    this.comment = new Comments(cw, 'Request')\n  }\n\n  /**\n   * Create new requests\n   *\n   * @category Requests\n   * @param {Object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created request\n   */\n  create(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'ProblemSid')) {\n        reject(new CWError(2, 'ProblemSid must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Create', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a request\n   *\n   * @category Requests\n   * @param {object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  update(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'RequestId')) {\n        reject(new CWError(3, 'RequestId must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Update', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Move a request's point\n   *\n   * @category Requests\n   * @param {number} requestId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(requestId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        RequestId: requestId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'Z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/ServiceRequest/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update request's map layer fields\n   *\n   * @category Requests\n   * @param {number} requestId\n   * @return {Object} Returns Promise that represents an object describing the updated map layer fields\n   */\n  updateMLF = (requestId: number) => {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ServiceRequestId: requestId\n      }\n      this.cw.runRequest('Ams/TemplateMapLayer/ServiceRequestInstanceMapLayersByRequestId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Change a request's problem code\n   *\n   * @category Requests\n   * @param {number} requestId - The request ID to change\n   * @param {number} problemSid - The request's new ProblemSID\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  changeProblem(requestId: number, problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId,\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeProblem', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a request by ID\n   *\n   * @category Requests\n   * @param {number} requestId - The ID of the request to retrieve\n   * @return {Object} Returns Promise that represents an object describing the request\n   */\n  getById(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get requests by array of IDs\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The request IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the requests\n   */\n  getByIds(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific request\n   *\n   * @category Requests\n   * @param {number} requestId - A Request ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {RequestId: requestId}\n      this.cw.runRequest('Ams/ServiceRequest/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom fields for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFields(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/CustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Change custom field category for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @param {number} categoryId - The new custom field grouping/category which should be assigned to the provided requests\n   * @return {Object} Returns Promise that represents a collection of requests\n   */\n  changeCustomFieldCategory(requestIds: Array<number>, categoryId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n        CategoryId: categoryId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeCustomFieldCategory', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to cancel the matched requests\n   * @param {string} [cancelReason] - A reason for cancelling the request(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the request was cancelled\n   * @return {Object} Returns object that represents a collection of requests\n   */\n   cancel(requestIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {RequestIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { RequestIds: requestIds }\n       if(typeof(cancelReason)!=='undefined')\n         _.set(data, 'CancelReason', cancelReason);\n       if(typeof(dateCancelled)!=='undefined')\n         _.set(data, 'DateCancelled', dateCancelled);\n       this.cw.runRequest('Ams/ServiceRequest/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to close the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    close(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed requests\n     *\n     * @category Requests\n     * @param {Array<number>} requestIds - An array of the IDs to reopen the matched requests\n     * @return {Object} Returns object that represents a collection of requests\n     */\n     reopen(requestIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           RequestIds: requestIds\n         }\n         this.cw.runRequest('Ams/ServiceRequest/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to delete the matched requests\n   * @return {Object} Returns object that represents a collection of request Ids which have been deleted\n   */\n   delete(requestIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestIds: requestIds\n       }\n       this.cw.runRequest('Ams/ServiceRequest/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Search for requests\n    *\n    * @category Request Search\n    * @param {Object} searchData - The search information to retrieve matched requests, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents an Array of the matching request IDs\n    */\n   search(searchData: Object) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       this.cw.runRequest('Ams/ServiceRequest/Search', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the records on the basis of RequestId, only populates RequestId, Description, ProblemCode properties\n    *\n    * @category Request Object Search\n    * @param {string} requestId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents a collection of the matching (limited) request objects\n    */\n   searchObject(requestId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestId: requestId\n       }\n       this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Requests\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n    */\n   createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         _.set(data, 'EnableEurl', enableEurl)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequest/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get a list of problem nodes for a domain\n   *\n   * @category Request Categorization\n   * @param {number} domainId - The domain ID for which to retrieve problem nodes.\n   * @param {boolean} viewOnly - Return only view only problem nodes. Defaults to false.\n   * @param {Object} [displayMode] - Object that should contain two properties if you provide it: DisplayTextMode: string (C = Code, D = Description, CD = Code ~ Description). DisplayTextDelimeter: string, only impacts CD display text mode.\n   * @param {boolean} includeCancelled - Return only cancelled problem nodes as well. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of problem node objects.\n   */\n  getProblemNodes(domainId: number, viewOnly: boolean = false, displayMode?: Object, includeCancelled: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainId: domainId,\n        IncludeCancelled: includeCancelled,\n        ViewOnly: viewOnly\n      }\n      if(typeof displayMode != 'undefined' && displayMode !== null && _.has(displayMode, 'DisplayTextMode')) {\n        _.set(data, 'DisplayTextMode', _.get(displayMode, 'DisplayTextMode'))\n        if(_.get(displayMode, 'DisplayTextMode')=='CD' && _.has(displayMode, 'DisplayTextDelimeter')) {\n          _.set(data, 'DisplayTextDelimeter', _.get(displayMode, 'DisplayTextDelimeter'))\n        }\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemNodes', data).then(r => {\n        // console.log(_.filter(r, function(o) { return !o.Cancel; }), 'filter');\n        // console.log(_.some(r.Value, ['Cancel', true]), 'some');\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes\n   *\n   * @category Request Options\n   * @param {boolean} forPublicOnly - Return only publicly-available service requests. Defaults to false.\n   * @param {boolean} onlyActiveTemplates - Return only active templates. Defaults to true.\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblems(forPublicOnly: boolean = false, onlyActiveTemplates: boolean = true, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ForPublicOnly: forPublicOnly,\n        OnlyActiveTemplates: onlyActiveTemplates\n      }\n      if(typeof domainIds != 'undefined') {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Problems', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes by keywords\n   *\n   * @category Request Options\n   * @param {string} keywords - Keywords to search for potential problem codes\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblemsByKeywords(keywords: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Keywords: keywords\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemsByKeywords', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of a problem code's priorities\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return priorities for given problemSid\n   * @return {Object} Returns Promise that represents an Array of priorities\n   */\n  getPriorities(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Priorities', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field templates for problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose template custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFieldTemplate(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/TemplateCustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the questions and answer options for a problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose Q&A should be returned\n   * @return {Object} Returns Promise that represents a collection of questions and answer settings\n   */\n  getQASettings(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get problem leaf (template) by Sid\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return problem leaf for given problemSid\n   * @return {Object} Returns Promise that represents an Object that describes the problem leaf (template)\n   */\n  getProblemLeaf(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemLeafBySid', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of default statuses\n   *\n   * @category Request Options\n   * @param {Array<number>} domainIds - List of domains to return default statuses for\n   * @return {Object} Returns Promise that represents an Array of statuses.\n   */\n  getStatuses(domainIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainIds: domainIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/DefaultStatus', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of possible Employee values\n   *\n   * @category Request Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only DispatchTo & SubmitTo.\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of Employee options.\n   */\n  getEmployeeLists(listType: string, domainId: number) {\n    return new Promise((resolve, reject) => {\n      // TODO: make a default domain option on the CW object for cases like this.\n      var data = {\n        DomainId: domainId\n      }\n      if(!_.includes(['DispatchTo', 'SubmitTo'], listType)) {\n        reject(new CWError(2, 'listType must be either SubmitTo or DispatchTo.', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/ServiceRequest/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get a list of possible DispatchTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of dispatchTo options.\n   */\n  getDispatchTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('DispatchTo', domainId);\n  }\n\n  /**\n   * Get a list of possible SubmitTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible submitTo values for\n   * @return {Object} Returns Promise that represents an Array of submitTo options.\n   */\n  getSubmitTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('SubmitTo', domainId);\n  }\n\n  /**\n   * Get street codes\n   *\n   * @category Request Options\n   * @return {Object} Returns Promise that represents an Array of Street Codes.\n   */\n  streetCodes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/ServiceRequest/AllStreetCode', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates\n   *\n   * @category Request Templates\n   * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n   * @param {Date} [minimumDateModified] - ?\n   * @param {Date} [maximumDateModified] - ?\n   * @return {Object} Returns Promise that represents\n   */\n   getTemplatesById(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         ProblemSids: null\n       }\n       if(typeof minimumDateModified != 'undefined') {\n         _.set(data, 'MinimumDateModified', minimumDateModified)\n       }\n       if(typeof maximumDateModified != 'undefined') {\n         _.set(data, 'MaximumDateModified', maximumDateModified)\n       }\n\n       this.cw.runRequest('Ams/ServiceRequestTemplate/ByIds', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Request Templates\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CWMetadata\n    */\n   createTemplateSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequestTemplate/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the questions and answers for a(many) request template(s)\n    *\n    * @category Request Templates\n    * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n    * @return {Object} Returns Promise that represents a collection of ProblemQAs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemQA\n    */\n    getTemplateQAs(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: null\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/QA', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get a list of template id results for a provided search parameters\n     *\n     * @category Request Templates\n     * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n     * @return {Object} Returns Promise that represents a list of template IDs.\n     */\n    searchTemplates(searchData: Object) {\n      return new Promise((resolve, reject) => {\n        var data = searchData\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Search', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get request templates (problem leaf[s])\n     *\n     * @category Request Templates\n     * @param {Array<number>} [templateIds] - Array of specific template IDs to retrieve\n     * @param {number} canCreate - If true, only return templates the user can create, ignored if false or null, default is false\n     * @param {boolean} includeInactiveIf - If true, returns inactive templates, default is false\n     * @param {Date} [minimumDateModified] - ?\n     * @param {Date} [maximumDateModified] - ?\n     * @return {Object} Returns Promise that represents a collection of Problem Leafs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemLeaf\n     */\n    getTemplates(templateIds: Array<number>, canCreate: boolean = false, includeInactiveIf: boolean = false, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          CanCreate: canCreate,\n          IncludeInactiveIf: includeInactiveIf\n        }\n        if(typeof templateIds != 'undefined') {\n          _.set(data, 'TemplateIds', templateIds)\n        }\n        if(typeof minimumDateModified != 'undefined') {\n          _.set(data, 'MinimumDateModified', minimumDateModified)\n        }\n        if(typeof maximumDateModified != 'undefined') {\n          _.set(data, 'MaximumDateModified', maximumDateModified)\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get WorkOrder templates that are associated to this request template type\n     *\n     * @category Request Templates\n     * @param {Array<number>} problemSids - An array list of problemSids to retrieve Problem WO templates for\n     * @param {boolean} includeInactiveIf - Include inactive WorkOrder templates, default is false\n     * @return {Object} Returns Promise that represents a collection of Problem WO Templates. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemWOTemplate\n     */\n    getWOTemplates(problemSids: Array<number>, includeInactive: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: problemSids,\n          IncludeInactive: includeInactive\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/WorkOrderTemplates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class InspectionAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all Inspections matching the provided parameters\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { InspectionAdmin } from './inspection_admin'\n\nexport class Inspection {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Inspection Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new InspectionAdmin(cw)\n  }\n\n  /**\n   * Create new inspection\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created inspection\n   */\n  create(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n        reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n      } else {\n        this.cw.runRequest('Ams/Inspection/Create', insp_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create inspections from an array of entities\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents a collection of objects describing the newly-created inspections\n   */\n   createFromEntities(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromEntities', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a parent inspection (TODO: what parent!?)\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromParent(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // see if it's just InspectionId\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'InspectionId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromParent', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a service request\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromServiceRequest(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'RequestId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromServiceRequest', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a WorkOrder\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromWorkOrder(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // Are they  both actually required?!?!\n      // WorkOrderId\n      // WorkOrderSid ...do with only SID first then check\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'WorkOrderSid')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromWorkOrder', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Update an inspection\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated inspection\n   */\n  update(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      return new Promise((resolve, reject) => {\n        if(!_.has(insp_data, 'InspectionId')) {\n          reject(new CWError(1, 'InspectionId must be provided.', {'provided': insp_data}))\n        } else {\n          this.cw.runRequest('Ams/Inspection/Update', insp_data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Get an inspection by ID\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The inspection ID to retrieve\n   * @return {Object} Returns Promise that represents an object describing the inspection\n   */\n  getById(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/Inspection/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections by array of IDs\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - The inspection IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the inspections\n   */\n  getByIds(inspectionIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionIds: inspectionIds\n      }\n      this.cw.runRequest('Ams/Inspection/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to cancel the matched inspections\n   * @param {string} [cancelReason] - A reason for cancelling the inspection(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the inspection was cancelled\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   cancel(inspectionIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {InspectionIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { InspectionIds: inspectionIds }\n       if(typeof(cancelReason)!=='undefined') {\n         data.CancelReason = cancelReason\n       }\n       if(typeof(dateCancelled)!=='undefined') {\n         data.DateCancelled = dateCancelled\n       }\n       this.cw.runRequest('Ams/Inspection/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel inspections\n    *\n    * @category Requests\n    * @param {Array<number>} inspectionIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close inspections\n    *\n    * @category Inspections\n    * @param {Array<number>} inspectionIds - An array of the IDs to close the matched inspections\n    * @return {Object} Returns object that represents a collection of inspections\n    */\n    close(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Close', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Reopen closed inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   reopen(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Reopen', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Delete inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to delete the matched inspections\n   * @return {Object} Returns object that represents a collection of inspection Ids which have been deleted\n   */\n   delete(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Delete', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Search for inspections\n   *\n   * @category Inspection Search\n   * @param {Object} searchData - The search information to retrieve matched inspections, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents an array of the matching inspection IDs\n   */\n  search(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/Inspection/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the records on the basis of inspectionId, only populates InspectionId, InspTemplateName, and Location properties\n   *\n   * @category Inspection Object Search\n   * @param {string} inspectionId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents a collection of the matching (limited) inspection objects\n   */\n  searchObject(inspectionId: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get list of statuses\n   *\n   * @category Inspection Options\n   * @return {Object} Returns object that represents an array of all possible statuses for an Inspection\n   */\n  statuses() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Statuses', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection submit to list\n   *\n   * @category Inspection Options\n   * @param {boolean} [includeInactiveEmployees] - whether to include inactive employees in the return. Defaults to false.\n   * @param {boolean} [domainIds] - which domains to include in the return, default to All domains\n   * @return {Object} Returns object that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  submitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {IncludeInactiveEmployees?: boolean, DomainIds?: Array<number>} = {}\n      if(includeInactiveEmployees) {\n        data.IncludeInactiveEmployees = true\n      }\n      if(typeof(domainIds)!=='undefined') {\n        data.DomainIds = domainIds\n      }\n      this.cw.runRequest('Ams/Inspection/SubmitTos', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Add an entity to an existing inspection\n   * This method requires an Entity/Asset to be specified. You can either specify the Entity Type and its UID or a WorkOrderEntityBase Object.\n   *\n   * @category Inspections\n   * @param {Object} entity - Either of two attribute combinations are valid: entityType & entityUid OR Entity as a fully-inflated WorkOrderEntity (WorkOrderEntityBase) object.\n   * @param {number} inspectionId - An Inspection ID to attach the entity/asset to.\n   * @param {boolean} updateXY - Provide a boolean to whether the inspection's X/Y coordinates should be updated. Default is true.\n   * @param {Object} facility - Add Facility_Id for the Facility Identifier and Level_id for the Facility Level Identifier. Defaults to empty so that no facility is specified.\n   * @return {Object} Returns object that represents an object which describes an Inspection Entity\n   */\n  connectAsset(entity: {EntityType?: string, EntityUid?: string, Entity?: Object}, inspectionId: number, updateXY: boolean = true, facility: {Facility_Id?: string, Level_Id?: string} = {}) {\n   return new Promise((resolve, reject) => {\n     var data: {InspectionId: number, EntityType?: string, EntityUid?: string, Entity?: Object, Facility_Id?: string, Level_Id?: string} = {\n       InspectionId: inspectionId\n     }\n     if(_.has(entity, 'EntityType') && _.has(entity, 'EntityUid')) {\n       data.EntityType = entity.EntityType\n       data.EntityUid = entity.EntityUid\n     } else if(_.has(entity, 'Entity')) {\n       data.Entity = entity.Entity\n     } else {\n       // Throw error, no entity/asset provided\n     }\n     if(_.has(facility, 'Facility_Id')) {\n       data.Facility_Id = facility.Facility_Id\n     }\n     if(_.has(facility, 'Level_Id')) {\n       data.Level_Id = facility.Level_Id\n     }\n     this.cw.runRequest('Ams/Inspection/AddEntity', data).then(r => {\n       resolve(r.Value)\n     }).catch(e => {\n       // 4 NotAuthorizedToUpdateInspection\n       // 9 InvalidActivityMapLogicXY\n       // 21 ErrorUnknownEntityType\n       // 30 InvalidField\n       // 60 WarningItemNotFound\n       // 68 MoveInvalidCityworksWkid\n       reject(e)\n     })\n   })\n  }\n\n  /**\n   * Get the answers for inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspections - An Array of one or more Inspection IDs\n   * @return {Object} Returns Promise that represents a collection of Inspection Answers\n   */\n  getAnswers(inspections: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {InspectionId?: number, InspectionIds?: Array<number>} = {}\n      if(inspections.length==0) {\n        data.InspectionId = inspections[0]\n      } else {\n        data.InspectionIds = inspections\n      }\n      this.cw.runRequest('Ams/Inspection/Answers', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific Inspection\n   *\n   * @category Inspections\n   * @param {number} inspectionId - An Inspection ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {InspectionId: inspectionId}\n      this.cw.runRequest('Ams/Inspection/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n   *\n   * @category Inspections\n   * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @param {number} [searchName] - What to name your search (if it should be saved)\n   * @param {number} [sharedWithin] - What group or domain to share the search to.\n   * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n   * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      if(_.isString(searchName)) {\n        _.set(data, 'SearchName', searchName)\n        _.set(data, 'SaveDefinition', saveDefinition)\n        _.set(data, 'EnableEurl', enableEurl)\n        // not sure how to handle sharedWithin...\n        // _.set(data, 'SharedWithin', sharedWithin)\n      }\n      this.cw.runRequest('Ams/Inspection/CreateSearchDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle from\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents ... I have no idea what this endpoint does\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle intervals\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle intervals available\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle types\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle types available\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get districts\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents an Array of the districts\n   */\n  getDistricts() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Districts', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Inspection Employee lists. Abstraction done here, though only one employee list field, AFAIK.\n   *\n   * @category Inspection Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only SubmitTos.\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        IncludeInactiveEmployees: includeInactiveEmployees\n      }\n      if(typeof(domainIds)!='undefined' && domainIds!=null) {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      if(listType!='SubmitTos') {\n        reject(new CWError(2, 'listType must be \"SubmitTos\".', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/Inspection/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get SubmitTo list\n   *\n   * @category WorkOrder Options\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n  }\n\n  /**\n   * Move inspection by InspectionId. Must provide well known id (WKID) or well known text (WKT)\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The ID of the inspection that should be moved\n   * @param {number} x - The X coordinate for the move\n   * @param {number} y - The Y coordinate for the move\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - the optional Z coordinate for the move\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(inspectionId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(3, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        InspectionId: inspectionId,\n        X: x,\n        Y: y\n      }\n      if(typeof z != 'undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Ams/Inspection/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /////\n  // INSPECTION TEMPLATES\n  /////\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all Inspections matching the provided parameters\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates by IDs\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspectionIds - An array of the IDs to retrieve the matched inspections\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns object that represents an object describing the inspection\n   */\n  getTemplatesByIds(inspTemplateIds: Array<number>, options?: {MaximumDateModified?: Date, MinimumDateModified?: Date}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types for inspection template(s)\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents an array of Entity Types\n   */\n   getTemplateEntityTypes(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/EntityTypes', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n  * Get the questions and answers for inspection template(s)\n  *\n  * @category Inspection Templates\n  * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n  * @return {Object} Returns object that represents an array which contains a list of InspQuestionPanel for the template\n  */\n  getQA(inspTemplateIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection template question conditions\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of template IDs to get the matched inspection template Question conditions for\n   * @return {Object} Returns object that represents an array which contains a dictionary of InspQuestion IDs to configs\n   */\n   getQConditions(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/QuestionConditions', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  // Attachments\n\n  // AddInspectionAttachment InspAttachment\n  // Add an inspection attachment\n  // Request Parameters\n  // Int32 AttachmentType V15_4\n  // String Comments\n  // String Filename\n  // Int32 req InspectionId\n  // Ams/Attachments/AddInspectionAttachment?data={\n  //   \"Comments\": null,\n  //   \"Filename\": null,\n  //   \"InspectionId\": null,\n  //   \"AttachmentType\": null\n  // }\n\n  /**\n   * Delete inspection attachments\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} attachmentIds - An array of inspection attachment IDs to delete\n   * @return {Object} Returns object that represents a boolean for action resolution\n   */\n   deleteAttachments(attachmentIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentIds: attachmentIds\n       }\n       this.cw.runRequest('Ams/Attachments/DeleteInspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Download an inspection attachment\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - ID of an inspection attachment to download\n   * @return {Object} Returns object that represents a file stream\n   */\n   downloadAttachment(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/DownloadInspectionAttachment', data).then(r => {\n         // TODO, pass file through // resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - An attachment ID to get info for\n   * @return {Object} Returns object that represents an object that describes the matched inspection attachment\n   */\n   getAttachmentById(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachmentById', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} inspectionIds - An array of inspection IDs to get attachments for\n   * @return {Object} Returns object that represents a collection of attachments from the matched inspections\n   */\n   getAttachments(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class WorkOrderAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get entity groups\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all entity groups\n   */\n  getEntityGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Ams/Entity/Groups', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all GIS WorkOrder entity types\n   */\n  getEntityTypes(entityGroups:Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data = {EntityGroups: entityGroups}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get WorkOrder templates\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all WorkOrder templates\n   */\n  getTemplates(entityType:string, includeComments:boolean=true, includeInstructions:boolean=true) {\n    return new Promise((resolve, reject) => {\n      var data = {EntityType: entityType, IncludeComments: includeComments, IncludeInstructions: includeInstructions}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {Object} wOTemplate - Obect that describes the WorkOrder Template\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  updateTemplate(wOTemplate:Object) {\n    let valid_fields = [\"AcctNum\", \"AutoCreateTask\", \"Cancel\", \"Comments\", \"CopyCustomFieldVal\", \"CycleFrom\", \"CycleIncludeWeekends\", \"CycleIntervalNum\", \"CycleIntervalUnit\", \"CycleType\", \"DaysToComplete\", \"DefaultProject\", \"DefaultProjectSid\", \"Description\", \"Effort\", \"ExpenseType\", \"Instructions\", \"IsReactive\", \"MaintScore\", \"NumDaysBefore\", \"Priority\",   \"RequireAssetOnClose\", \"Shop\", \"Stage\", \"SubmitToEmployeeSid\", \"SupervisorEmployeeSid\", \"UnitsAccompDesc\", \"UnitsAccompDescLock\", \"WOCategory\", \"WOCustFieldCatId\", \"WOPrintTmpt\", \"WOTemplateId\", \"WorkMonth\"]\n    return new Promise((resolve, reject) => {\n      var data = wOTemplate\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get template group rights for provided WorkOrder Templates\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateGroupRights(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => { // TODO: Update this URL\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get template activity services for provided WorkOrder Templates\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateActivity(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplateActivityService', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get fields which will be updated when provided WorkOrder Template instance closes\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getUpdateFields(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplateUpdateFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get equipment\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateEquipment(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateEquipment', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get labor\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateLabor(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateLabor', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get material\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateMaterial(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateMaterial', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get map layer fields configured for provided WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateMapLayerFields(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WorkOrderTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WorkOrderTemplateMapLayerFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks configured for provided WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all tasks on WorkOrder template\n   */\n  getTemplateTasks(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Tasks/ByWorkOrderTemplate', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections connected to provided WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all tasks on WorkOrder template\n   */\n  getRelatedInspectionTemplates(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateInspections', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { WorkOrderAdmin } from './workorder_admin'\nimport { Comments } from './comments'\n\nexport class WorkOrder {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * WorkOrder Administration methods\n   */\n  admin: Object\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new WorkOrderAdmin(cw)\n    this.comment = new Comments(cw, 'WorkOrder')\n  }\n\n  /**\n   * Create new workorders, including linkin to Requests & Inspections (optionally)\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {Array<number>} [inspectionIds] - The inspection IDs which the workorder should be linked to.\n   * @param {Array<number>} [requestIds] - The inspection IDs which the workorder should be linked to.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  create(wo_data: Object, inspectionIds?: Array<number>, requestIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(typeof inspectionIds != 'undefined' && inspectionIds != null && !_.has(data, 'InspectionIds')) {\n          _.set(data, 'InspectionIds', inspectionIds);\n        }\n        if(typeof requestIds != 'undefined' && requestIds != null && !_.has(data, 'RequestIds')) {\n          _.set(data, 'RequestIds', requestIds);\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create new workorder linked to parent workorder\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  createFromParent(wo_data: Object, workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a WorkOrder\n   *\n   * @category WorkOrders\n   * @param {object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  update(wo_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WorkOrderSid') && !_.has(wo_data, 'WorkOrderId')) {\n        reject(new CWError(3, 'WorkOrderId or WorkOrderSid must be provided.', {'provided': wo_data}))\n      } else {\n        this.cw.runRequest('Ams/WorkOrder/Update', wo_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Combine WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<string>} fromWorkOrderIds - The workorder IDs which should be combined.\n   * @param {string} toWorkOrderId - The WorkOrder ID for the single WorkOrder that should contain the info/entities from the other WorkOrders\n   * @param {boolean} cancelCombinedWorkOrders - If the WorkOrders combined into the single should then be canceled, default is true.\n   * @return {Object} Returns object that represents a collection of WorkOrders\n   */\n   combine(fromWorkOrderIds: Array<string>, toWorkOrderId: string, cancelCombinedWorkOrders: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         CancelCombinedWorkOrders: cancelCombinedWorkOrders,\n         ToWorkOrderId: toWorkOrderId,\n         FromWorkOrderIds: fromWorkOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Combine', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  /**\n   * Move a workorder's point\n   *\n   * @category WorkOrders\n   * @param {string} workOrderId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include WKT or WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  move(workOrderId: string, x: number, y: number, projection: Object, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        WorkOrderId: workOrderId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/WorkOrder/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Get a workorder by S/ID\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The S/ID of the workorder to retrieve. # for SID, string for ID.\n   * @param {boolean} s - Whether first argument is an SID (true) or an ID (false). Defaults to true.\n   * @return {Object} Returns Promise that represents an object describing the workorder\n   */\n  getById(workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n        var path = 'Ams/WorkOrder/ById';\n      } else {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n        var path = 'Ams/WorkOrder/BySid';\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get workorders by an array of S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getByIds(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(101, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/ByIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/BySids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get instructions by an array of workorders S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents an array of String, String describing the workorder instructions\n   */\n  getInstructions(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(102, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderSids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get the audit log for a specific workorder\n   *\n   * @category WorkOrder\n   * @param {number} workOrderSId - A WorkOrder S/ID to get the audit log for. SID is default.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(workOrderSId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n      } else if(_.isNumber(workOrderSId)) {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'Workorder S/IDs was not provided.', {'workorderSId': workOrderSId}))\n      }\n      this.cw.runRequest('Ams/WorkOrder/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field values for the workorder S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. #s for SID, strings for ID.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getCustomFieldValues(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      var path = 'Ams/WorkOrder/CustomFields';\n      if(_.isString(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderIds', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFields';\n      } else if(_.isNumber(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderSids', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFieldsByWorkOrderSids';\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSIds': workOrderSIds}))\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entities on an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs which the entities should be added to. # for SID, string for ID.\n   * @param {boolean} getGisData - Query gis to populate Entity.Attributes with current gis data. Defaults to true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n  getEntities(workOrderSIds: Array<string|number>, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        GetGisData: getGisData\n      }\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(11, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n        } else {\n          reject(new CWError(12, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n      }\n      this.cw.runRequest('Ams/WorkOrder/Entities', data).then(r => {\n        if(r.Status>0) {\n          reject(new CWError(4, r.Message, {'response': r}))\n        } else {\n          resolve(r.Value)\n        }\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add entities to an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUids: {Array<string>}, Facility_Id: {string}, Level_Id: {string}\n   * @param {boolean} updateXY - Update WorkOrder xy after adding entit(y|ies), default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   addEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'Facility_Id'))\n         _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n       if(_.has(entityInfo, 'Level_Id'))\n         _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n       if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/AddEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Update a WorkOrder entity\n    *\n    * @category WorkOrders\n    * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n    * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUid: {string}, Facility_Id: {string}, Level_Id: {string}\n    * @param {boolean} workComplete - Update WorkOrder completeness, default is true.\n    * @return {Object} Returns object that represents a list of entities removed.\n    */\n    updateEntity(workOrderSId: string|number, entityInfo: Object, workComplete: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkComplete: workComplete\n        }\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        if(_.has(entityInfo, 'Facility_Id'))\n          _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n        if(_.has(entityInfo, 'Level_Id'))\n          _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n        if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n          _.set(data, 'EntityUid', _.get(entityInfo, 'EntityUid'))\n          _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n        } else {\n          reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n        }\n\n        this.cw.runRequest('Ams/WorkOrder/UpdateEntity', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(4, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Remove entities from a WorkOrder. Provide WorkOrderId and either ObjectIds or EntityType and EntityUids\n   *\n   * @category WorkOrders\n   * @param {number} workOrderSId - The workorder S/ID which the entities should be removed from. # for SID, string for ID.\n   * @param {Object} entityInfo - Remove entities by WorkOrderEntity.ObjectId (not gis objectId).\n   * @param {boolean} updateXY - Update WorkOrder xy after removing entities, default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   removeEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'ObjectIds')) {\n         _.set(data, 'ObjectIds', _.get(entityInfo, 'ObjectIds'))\n       } else if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(8, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/RemoveEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Cancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to cancel the matched workorders\n   * @param {string} [cancelReason] - A reason for cancelling the workorder(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the workorder was cancelled\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n  cancel(workOrderIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n    return new Promise((resolve, reject) => {\n      var m = new Date()\n      var data: {WorkOrderIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { WorkOrderIds: workOrderIds }\n      if(typeof(cancelReason)!=='undefined')\n        _.set(data, 'CancelReason', cancelReason);\n      if(typeof(dateCancelled)!=='undefined')\n        _.set(data, 'DateCancelled', dateCancelled);\n      this.cw.runRequest('Ams/WorkOrder/Cancel', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Uncancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to uncancel the matched workorders\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n   uncancel(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Uncancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Close WorkOrders\n    *\n    * @category WorkOrders\n    * @param {Array<number>} workOrderIds - An array of the IDs to close the matched WorkOrders\n    * @return {Object} Returns object that represents a collection of WorkOrders\n    */\n    close(workOrderIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkOrderIds: workOrderIds\n        }\n        this.cw.runRequest('Ams/WorkOrder/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed WorkOrders\n     *\n     * @category WorkOrders\n     * @param {Array<number>} workOrderIds - An array of the IDs to reopen the matched WorkOrders\n     * @return {Object} Returns object that represents a collection of WorkOrders\n     */\n     reopen(workOrderIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           WorkOrderIds: workOrderIds\n         }\n         this.cw.runRequest('Ams/WorkOrder/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to delete the matched WorkOrders\n   * @return {Object} Returns object that represents a collection of WorkOrder Ids which have been deleted\n   */\n   delete(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderS/IDs connected to provided entities\n    *\n    * @category WorkOrder Search\n    * @param {string} entityType - The entity type to find connected WorkOrders\n    * @param {Array<string>} entityUIDs - The list of entities to search for connected WorkOrders\n    * @param {boolean} s - Get WorkOrderSids. Defaults to true. When false, returned list is WorkOrderIds\n    * @param {Object} [search] - Any additional search properties of the WorkOrder (open/closed, etc)\n    * @return {Object} Returns Promise that represents an array of WorkOrderS/IDs\n    */\n   getWOsByEntities(entityType: string, entityUids: Array<string>, search?: Array<string|number>, s: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       if(typeof(search)!='undefined') {\n         _.merge(data, search)\n       }\n       if(!_.has(data, 'EntityType')) {\n         _.set(data, 'EntityType', entityType)\n       }\n       if(!_.has(data, 'EntityUids')) {\n         _.set(data, 'EntityUids', entityUids)\n       }\n       var path = 'Ams/WorkOrder/SearchForSids'\n       if(!s) {\n         path = 'Ams/WorkOrder/Search'\n       }\n       this.cw.runRequest(path, data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderSid and description for provided WorkOrderId\n    *\n    * @category WorkOrder Search\n    * @param {string} workOrderId - The WorkOrderId for which to get the WorkOrderSid and description\n    * @return {Object} Returns Promise that represents an object with WorkOrderS/IDs & Description\n    */\n   getSearchList(workOrderId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       _.set(data, 'WorkOrderId', workOrderId)\n       this.cw.runRequest('Ams/WorkOrder/SearchObject', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrder Employee lists\n    *\n    * @category WorkOrder Options\n    * @param {string} listType - Which list (endpoint) to get. Includes Supervisors & SubmitTos.\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         IncludeInactiveEmployees: includeInactiveEmployees\n       }\n       if(typeof(domainIds)!='undefined' && domainIds!=null) {\n         _.set(data, 'DomainIds', domainIds)\n       }\n       if(!_.includes(['Supervisors', 'SubmitTos'], listType)) {\n         reject(new CWError(2, 'listType must be either SubmitTos or Supervisors.', {'provided': listType}))\n       } else {\n         this.cw.runRequest(`Ams/WorkOrder/${listType}`, data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       }\n     })\n   }\n\n   /**\n    * Get SubmitTo list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Supervisors list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSupervisors(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('Supervisors', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Status Options\n    *\n    * @category WorkOrder Options\n    * @return {Object} Returns Promise that represents a collection of codes. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CodeDesc\n    */\n   getStatuses() {\n     return new Promise((resolve, reject) => {\n       this.cw.runRequest('Ams/WorkOrder/Statuses', {}).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get Categories\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder category code descriptions\n   */\n  getCategories() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Categories', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Priorities\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder priorities\n   */\n  getPriorities() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Priorities', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle From\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle From options for workorders\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Intervals\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Interval options for workorders\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Type options for workorders\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get WorkOrder Stages\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Stage options for WorkOrders\n   */\n  getStages() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Stages', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Expense Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Expense Type options for workorders\n   */\n  getExpenseTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/ExpenseTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseData {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Case Data Group\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} caseDataGroupId - CaseDataGroupId as defined in CaseDataGroup admin.\n   * @param {string} groupCode - The Group Code.\n   * @param {Object} [options] - Options for CaseDataGroup including GroupDesc, GroupSum, and SumFlag\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addGroup(caObjectId: number, caseDataGroupId: number, groupCode: string, options?: {GroupDesc?: string, GroupSum?: number, SumFlag?: string}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaseDataGroupId: caseDataGroupId,\n        GroupCode: groupCode\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Default Case Data Groups\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} busCaseId - The business case ID\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   addDefaultGroups(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a data detail entry to the case data group specified by the CaDataGroupId. The CaDataGroupId is associated to a case.\n   *\n   * @category Data Groups\n   * @param {number} caseDataDetailId - The Data Detail template ID\n   * @param {number} caDataGroupId - The Case Instance Data Group ID\n   * @param {string} columnSequence - The column sequence\n   * @param {string} detailCode - The detail Code\n   * @param {number} detailSequence - The detail order number\n   * @param {Object} [options] - Other options for CaseDataDetail. See WIPAdd here: /{subdirectory}/apidocs/#/service-info/Pll/CaseDataDetail\n   * @return {Object} Returns Promise that represents an object describing CaDataDetailItemBase.\n   */\n   wipAddDetail(caseDataDetailId: number, caDataGroupId: number, columnSequence: string, detailCode: string, detailSequence: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseDataDetailId: caseDataDetailId,\n        CaDataGroupId: caDataGroupId,\n        ColumnSequence: columnSequence,\n        DetailCode: detailCode,\n        DetailSequence: detailSequence\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get groups by CaObjectId\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to get the attached data groups.\n   * @return {Object} Returns Promise that represents a collection of the CaDataGroupItemBases.\n   */\n   getGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Data Groups by Case Object ID.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   deleteGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Data Groups. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data Groups\n   * @param {Object} filters - The parameters to search by. (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag)\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   searchForGroups(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataGroupId', 'CaseDataGroupId', 'GroupCode', 'GroupDesc', 'GroupSum', 'SumFlag']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Data Groups by Case ObjectId\n   *\n   * @category Data Groups\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {Object} options - The other options for checkGIS. Either CaObjectId or CaseDataGroupId is required.\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   checkGIS(entityType: string, entityUid: string, options: {CaObjectId?:number, CaseDataGroupId?: number, CaseDataDetailId?: number}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(_.has(options, 'CaObjectId')) {\n        _.set(data, 'CaObjectId', _.get(options, 'CaObjectId'))\n      } else if(_.has(options, 'CaseDataGroupId')) {\n        _.set(data, 'CaseDataGroupId', _.get(options, 'CaseDataGroupId'))\n      } else {\n        reject(new CWError(1, 'Either CaObjectId or CaseDataGroupId is required.', {'provided': options}))\n      }\n      if(_.has(options, 'CaseDataDetailId')) {\n        _.set(data, 'CaseDataDetailId', _.get(options, 'CaseDataDetailId'))\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/CheckGISChanges', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update data groups on a case based on asset value mappings.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The case to update\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {number} [caDataGroupId] - The specific data group ID to limit updates to\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   updateGroupsFromAsset(caObjectId: number, entityType: string, entityUid: string, caDataGroupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(typeof(caDataGroupId)!='undefined') {\n        _.set(data, 'CaDataGroupId', caDataGroupId)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/UpdateFromAsset', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Attach Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataGroupId - The Case Data Group ID to attach the data detail to.\n   * @param {number} caseDataDetailId - caseDataDetailId to attach.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addDetail(caDataGroupId: number, caseDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataGroupId: caDataGroupId,\n        CaseDataDetailId: caseDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to attach the data detail to.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   updateDetail(caDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Lock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to lock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   lockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: true\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Unlock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to unlock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   unlockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: false\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a list of possible values to the data detail entry specified by the CaDataDetailId.\n   *\n   * @category Data List Values\n   * @param {number} caDataDetailId - The Case Object to attach the data group to.\n   * @param {string} listValue - The Group Code.\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   addListValue(caDataDetailId: number, listValue: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        ListValue: listValue\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete by Id (Ca Data List Id)\n   *\n   * @category Data List Values\n   * @param {number} CaDataListId - The Case Data List ID\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   deleteListValue(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value IDs. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue)\n   * @return {Object} Returns Promise that represents an Array of resulting CaDataListIds\n   */\n   searchForListValueIds(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataDetailId', 'CaDataListId', 'ListValue']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue, CaDataGroupId)\n   * @return {Object} Returns Promise that represents a collection of resulting CaDataListValuesItemBase objects\n   */\n   searchForListValueObjects(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataDetailId', 'CaDataListId', 'ListValue', 'CaDataGroupId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue, CaDataGroupId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // caseDataGroupIterator(appData: object, groups: Array<number>, items: Array<object>) {\n  //   return new Promise(resolve => {\n  //     var detail_items = items\n  //     var dataDetailGroup = groups.pop()\n  //     this.searchForListValueObjects({CaDataGroupId: dataDetailGroup!.CaDataGroupId}).then(r => {\n  //       r.forEach(function (item) {\n  //         detail_items.push(item)\n  //       })\n  //       if(groups.length>0) {\n  //         this.caseDataGroupIterator(appData, groups, detail_items).then(di => {\n  //           resolve(di)\n  //         })\n  //       } else {\n  //         resolve(detail_items)\n  //       }\n  //     })\n  //   })\n  // }\n\n  // caseDataDetailIterator(appData: object, detail_items: Array<object>) {\n  //   return new Promise(resolve => {\n  //     const this_data_detail = detail_items.pop()\n  //     const detailCode = this_data_detail.DetailCode\n  //     const detailId = this_data_detail.CaDataDetailId\n  //     if(typeof(this_data_detail)!='undefined' && typeof(appData[detailCode])!='undefined') {\n  //       this.searchForListValueObjects(detailId).then(r => {\n  //         var CaseDataDetailUpdate = r.Value\n  //         var rType = r.Value\n  //         CaseDataDetailUpdate[rType] = appData[CaseDataDetailUpdate.DetailCode]\n  //         this.updateDetail(CaseDataDetailUpdate).then(response => {\n  //           if(detail_items.length > 0) {\n  //             this.caseDataDetailIterator(appData, detail_items).then(resp => {\n  //               resolve(resp)\n  //             })\n  //           } else {\n  //             resolve(true)\n  //           }\n  //         })\n  //       })\n  //     } else {\n  //       if(detail_items.length > 0) {\n  //         this.caseDataDetailIterator(appData, detail_items).then(resp => {\n  //           resolve(resp)\n  //         })\n  //       } else {\n  //         resolve(true)\n  //       }\n  //     }\n  //   });\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseFinancial {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw: Object) {\n    this.cw = cw\n  }\n\n  /**\n   * Adds a fee to the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} feeSetupId - The fee setup id for the fee to add to the case.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addFee(caObjectId: number, feeSetupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        FeeSetupId: feeSetupId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Fee Payment. Adds a payment to the case fee specified by caObjectId.\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addPayment(caObjectId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Payment Refund. Refunds a payment on the case payment specified by caPaymentId.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentId - The Case Payment ID for the case payment which to refund\n   * @param {number} refundAmount - The amount to refund\n   * @param {string} comment - A comment to append to the refund\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  addRefund(caPaymentId: number, refundAmount: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentId: caPaymentId,\n        RefundAmount: refundAmount,\n        Comments: comment\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Deposit Payment. Adds a payment to the case deposit specified by CaDepositId.\n   *\n   * @category Case Payments\n   * @param {number} caDepositId - The Case Deposit ID for the case deposit to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addDepositPayment(caDepositId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaDepositId: caDepositId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/AddDeposit', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a deposit to the case specified by the CaObectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} depositId - The deposit setup id for the deposit to add to the case.\n   * @param {number} [amount] - The amount of the deposit (optional)\n   * @param {string} [comment] - Comment text to add to the deposit (optional)\n   * @return {Object} Returns Promise that represents an object describing the newly-added deposit. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDeposit(caObjectId: number, depositId: number, amount?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        DepositId: depositId\n      }\n      if(typeof(amount)!='undefined') {\n        _.set(data, 'Amount', amount)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('CaseDeposit/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds an instrument to the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the instrument\n   * @param {number} instTypeId - The instrument type id for the instrument being added to the case.\n   * @param {number} amount - The amount of the instrument\n   * @param {Date} dateExpire - The datetime for the instrument to expire.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument for more options.\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument. See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument\n   */\n  addInstrument(caObjectId: number, instTypeId: number, amount: number, dateExpire: Date, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        InstTypeId: instTypeId,\n        Amount: amount,\n        DateExpire: dateExpire\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseInstrument/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a fee specified by the CaFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Fee ID for the specific instance of the fee you wish to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the updated fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  updateFee(caFeeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaFeeId: caFeeId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Void a refund.\n   *\n   * @category Case Refund Payment\n   * @param {number} caPaymentRefundId - The Refund ID for the specific refund to void\n   * @param {String} voided - A string. No clue.\n   * @return {Object} Returns Promise that represents an object describing the voided refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  voidRefund(caPaymentRefundId: number, voided: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId,\n        Voided: voided\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Fees. Adds fees to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default fees\n   * @param {number} busCaseId - The business case ID whose default fees should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Fee Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addDefaultFees(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseFees/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Deposits. Adds deposits to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default deposits\n   * @param {number} busCaseId - The business case ID whose default deposits should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Deposit Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDefaultDeposits(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the fees from the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Fees.\n   */\n  getFees(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Deposit by Case ObjectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the deposits\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  getDeposits(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Payments by Case ObjectId\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the payments\n   * @return {Object} Returns Promise that represents a collection of Case Payments.\n   */\n  getPayments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the instruments from the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Instruments.\n   */\n  getInstruments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Case Fee ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Fee object.\n   */\n  deleteFee(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CaseFees/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteFeesByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete a Case Payment by Id. Delete a specific case payment by CaPaymentId.\n   *\n   * @category Case Payments\n   * @param {number} caPaymentId - The Case Payment ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Payment object.\n   */\n  deletePayment(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CasePayment/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payment Refund. Removes a refund on a payment.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentRefundId - The Case Payment ID for the case payment which to refund\n   * @return {Object} Returns Promise that represents an object describing the deleted payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  deleteRefund(caPaymentRefundId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payments by Case ObjectId. Delete from the system all payments associated to a specific case as specified by the case id (CaObjectId)\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID whose payments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deletePaymentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Deposits\n   * @param {number} caDepositId - The Case Deposit ID which should be deleted\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  deleteDeposit(caDepositId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDepositId: caDepositId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteDepositsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the instrument specified by the caInstrumentId.\n   *\n   * @category Case Instruments\n   * @param {number} caInstrumentId - The Case Instrument ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Instrument.\n   */\n  deleteInstrument(caInstrumentId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Instruments by Case ObjectId. Delete from the system all Instruments linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID whose instruments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteInstrumentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFees(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaFeeId', 'CaObjectId', 'FeeCode', 'FeeDesc']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseFees/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payments. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payments\n   * @param {Object} filters - The filters to search for matched Case Payments\n   * @return {Object} Returns Promise that represents an Array of case payment IDs\n   */\n  searchPayments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaPaymentId', 'CommentText', 'FeeAmount', 'FeeCode', 'FeeDesc', 'PaymentAccount', 'PaymentAmount', 'TenderType']).length==0) {\n        reject(new CWError(5, 'At least one of the attributes (CaPaymentId, CommentText, FeeAmount, FeeCode, FeeDesc, PaymentAccount, PaymentAmount, TenderType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payment Refunds. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payment Refunds\n   * @param {Object} filters - The filters to search for matched Case Payments.\n   * @return {Object} Returns Promise that represents an Array of case payment refund IDs\n   */\n  searchRefunds(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaPaymentId', 'CaPaymentRefundId', 'Comments', 'RefundAmount']).length==0) {\n        reject(new CWError(6, 'At least one of the attributes (CaPaymentId, CaPaymentRefundId, Comments, RefundAmount) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Deposits\n   * @param {Object} filters - The parameters to search by.\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchDeposits(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDepositId', 'CaObjectId', 'DepositCode', 'DepositDesc']).length==0) {\n        reject(new CWError(1, 'At least one of the arguments (CaDepositId, CaObjectId, DepositCode, DepositDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDeposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fee Templates\n   *\n   * @category Case Fees\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  getAllFeeTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameters to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFeeTemplates(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['FeeSetupId', 'FeeTypeId', 'FeeCode', 'FeeDesc', 'AccountCode']).length==0) {\n        reject(new CWError(7, 'At least one of the arguments (FeeSetupId, FeeTypeId, FeeCode, FeeDesc, AccountCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instruments. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Instruments\n   * @param {Object} filters - The parameters to search by (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of case instrument IDs\n   */\n  searchCaseInstruments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AddressLine1', 'Amount', 'CaInstrumentId', 'CityName', 'CommentText', 'Company', 'ContactEmail', 'ContactName', 'ContactPhone', 'CountryCode', 'InstTypeId', 'SerialNumber', 'StateCode', 'ZipCode']).length==0) {\n        reject(new CWError(9, 'At least one of the arguments (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseInstrument/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the Defined Instruments\n   *\n   * @category Instruments\n   * @param {Object} options - the options to filter the instruments returned by\n   * @return {Object} Returns Promise that represents an Array of CaInstrumentItem\n   */\n  getInstrumentList(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/CaseInstrument/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a release to a case instrument specified by the caInstrumentId. Must provide either amountReleased OR percentReleased\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstrumentId - The Case Instrument ID to which to add the instrument release\n   * @param {number} releasedBy - UserID to attach to the release.\n   * @param {Date} dateReleased - The date of the release\n   * @param {number} [amountReleased] - The amount to be released\n   * @param {number} [percentReleased] - OR the percent to be released\n   * @param {string} [comment] - Comment to attach to the release\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  addCaseInstrumentRelease(caInstrumentId: number, releasedBy: number, dateReleased: Date, amountReleased?: number, percentReleased?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId,\n        DateReleased: dateReleased,\n        ReleasedBy: releasedBy\n      }\n      if((typeof(percentReleased)!='undefined' || percentReleased!=null) && (typeof(amountReleased)!='undefined' || amountReleased!=null)) {\n        reject(new CWError(2, 'Either amountReleased or percentReleased must be specified.'))\n      } else if(typeof(percentReleased)!='undefined' && percentReleased!=null) {\n        _.set(data, 'PercentReleased', percentReleased)\n      } else if(typeof(amountReleased)!='undefined' && amountReleased!=null) {\n        _.set(data, 'AmountReleased', amountReleased)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a release specified by the caInstReleasesId.\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstReleasesId - The Case Instrument Release ID to delete\n   * @return {Object} Returns Promise that represents an object describing the deleted instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  deleteCaseInstrumentRelease(caInstReleasesId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstReleasesId: caInstReleasesId\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instrument Releases. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Case Instrument Releases\n   * @param {Object} filters - Specify at least one of the following: AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy\n   * @return {Object} Returns Promise that represents an Array of Case Instruments resulting from the search\n   */\n  searchCaseInstrumentReleases(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      if(_.intersectionBy(_.keysIn(filters), ['AmountReleased', 'CaInstReleasesId', 'CaInstrumentId', 'CommentText', 'PercentReleased', 'ReleasedBy']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy) must be defined.'))\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  fees() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/FeeSetup/All', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Fees\n   * @param {Object} filters - Specify at least one.\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  searchAvailableFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(8, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all tender types configured\n   *\n   * @category Tender Types\n   * @return {Object} Returns Promise that represents a collection of tender type objects. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  getTenderTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TenderType/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a tender type configuration\n   *\n   * @category Tender Types\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  addTenderType(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TenderType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a tender type configuration\n   *\n   * @category Tender Types\n   * @param {number} tenderTypeId - ID of the tender type to update\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  updateTenderType(tenderTypeId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        TenderTypeId: tenderTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/TenderType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { Comments } from './comments'\n\nexport class CaseWorkflow {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Task sub-methods\n   */\n  task: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.task = {\n      comment: new Comments(cw, 'CaTask')\n    }\n  }\n\n  /**\n   * Adds a task to the case specified by the CaObectId.\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} taskId - The task ID to add to the case workflow\n   * @param {number} startPoint - The start point in the workflow for the task\n   * @param {number} endPoint - The end point in the workflow for the task\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   addTask(caObjectId: number, taskId: number, startPoint: number, endPoint: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        TaskId: taskId,\n        StartPoint: startPoint,\n        EndPoint: endPoint\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Result\n   *\n   * @category Task Results\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} caTaskId - The Case task ID to add the result to\n   * @param {number} resultCode - The result Code\n   * @param {number} resultID - The result ID\n   * @param {number} resultSetID - The result set ID\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents an object describing CaTaskResultsItem.\n   */\n   addTaskResult(caObjectId: number, caTaskId: number, resultCode: number, resultID: number, resultSetID: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaTaskId: caTaskId,\n        ResultCode: resultCode,\n        ResultID: resultID,\n        ResultSetID: resultSetID\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   addTaskComment(caTaskId: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId,\n        CommentText: comment\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by CaObjectId\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to get the attached tasks\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksByCaseId(caObjectId: number, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by TaskIds\n   *\n   * @category Tasks\n   * @param {Array<number>} caTaskIds - The IDs of the tasks to retrieve\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksById(caTaskIds: Array<number>, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get CaTaskResultsItem by CaTaskIds\n   *\n   * @category Task Results\n   * @param {Array<number>} caTaskIds - The IDs of the tasks for which to retrieve results\n   * @return {Object} Returns Promise that represents a collection of CaTaskResultsItems.\n   */\n   getResultsByTaskId(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {number} caTaskId - The task ID for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CommentRecords.\n   */\n   getCommentsForTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskIds - The task IDs for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CaTaskCommentsItemBase.\n   */\n   getCommentsForTasks(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {Object} [options] - Options for Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   updateTask(caTaskId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskCommentId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @param {number} commentId - Probably unnecessary?\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   updateTaskComment(caTaskCommentId: number, comment: string, commentId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentId: caTaskCommentId,\n        CommentText: comment\n      }\n      if(typeof(commentId)!='undefined') {\n        _.set(data, 'CommentId', commentId)\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {string} resultCode - The result code to set for the specified Task\n   * @param {Object} [options] - Options for Task. Specify either or both TaskCompletedBy & TaskCompleteDate. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   setTaskResult(caTaskId: number, resultCode: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(_.intersectionBy(_.keysIn(options), ['TaskCompleteDate', 'TaskCompletedBy']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (TaskCompletedBy, TaskCompleteDate) must be defined.'))\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/SetResult', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   deleteTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTask/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents the number of the CaObjectID\n   */\n   deleteTasksOnCase(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseTask/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes tasks by TaskID\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskCommentIds - The comments to delete\n   * @return {Object} Returns Promise that represents a dictionary of comment IDs.\n   */\n   deleteTaskComments(caTaskCommentIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentIds: caTaskCommentIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Tasks. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Tasks\n   * @param {Object} filters - The parameters to search by. (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType)\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskIDs\n   */\n   searchForTasks(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['ResponsibleUserId', 'TaskAvailable', 'TaskComplete', 'TaskType']).length==0) {\n        reject(new CWError(1, 'At least one of the attributes (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseTask/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskResults Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Task Results\n   * @param {Object} filters - The parameters to search by. See: /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskResultsItem\n   */\n   searchForTaskResults(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseTaskResults/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Adds a task to the case specified by the CaObectId.\n     *\n     * @category Task Attachments\n     * @param {number} caTaskId - The Task ID to attach the document to\n     * @param {number} caObjectId - The Case Object ID\n     * @param {string} docName - The file name as it should display in the system\n     * @param {string} locationType - The location of the file...leave blank\n     * @param {any} file - The binary string for the file\n     * @return {Object} Returns Promise that represents an object describing added Attachment\n     */\n  addTaskAttachment(caTaskId: number, caObjectId: number, docName: number, file: any, locationType?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaTaskId: caTaskId,\n        DocName: docName\n      }\n      if(typeof(locationType)!='undefined') {\n        _.set(data, 'LocationType', locationType)\n      }\n      this.cw.runRequest('Pll/CaseRelDocs/AddTaskRelDoc', data, file).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Gets each Document Attached to the specified Task\n     *\n     * @category Task Attachments\n     * @param {number} caTaskId - The Task ID to attach the document to\n     * @return {Object} Returns Promise that represents a collection of objects describing each Attachment on the provided task\n     */\n  getTaskAttachments(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseRelDocs/ByCaTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task attachment by caRelDocId (Related Case Document ID). Same as RelDocs delete for case.\n   *\n   * @category Task Attachments\n   * @param {number} caRelDocId - The caRelDocId for the related document which should be deleted\n   * @return {Object} Returns Promise that represents the an object describing the deleted document.\n   */\n  deleteTaskAttachment(caRelDocId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaRelDocId: caRelDocId\n      }\n      this.cw.runRequest('PLL/CaseRelDocs/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n\n\n\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Business Case Template\n   *\n   * @category Case Templates\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the created case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  addBusinessCaseTemplate(data: Object) {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/BusinessCase/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Business Case Template\n   *\n   * @category Case Templates\n   * @param {number} busCaseId - The Business Case ID to update\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the updated case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  updateBusinessCaseTemplate(busCaseId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/BusinessCase/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Business Case Templates\n   *\n   * @category Case Templates\n   * @return {Object} Returns Promise that represents a collection of Business Case Templates\n   */\n  getBusinessCaseTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/BusinessCase/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Type\n   *\n   * @category Types & SubTypes\n   * @param {string} caseTypeName - The case type name\n   * @param {string} caseTypeDesciption - The case type description\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the added case type\n   */\n  addCaseType(caseTypeName: string, caseTypeDesciption: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseType: caseTypeName,\n        CaseTypeDesciption: caseTypeDesciption\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Type\n   *\n   * @category Types & SubTypes\n   * @param {number} caseTypeId - The case Type ID\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the updated case type\n   */\n  updateCaseType(caseTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Types\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems\n   */\n  getCaseTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents an Array of CaseTypeIDs\n   */\n  searchCaseTypeIDs(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CaseTypeItem\n   */\n  searchCaseTypeObjects(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaseType, CaseTypeDesc, CaseTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add SubType\n   *\n   * @category Types & SubTypes\n   * @param {string} subTypeName - The SubTypeId\n   * @param {string} subTypeDescription - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  addSubtype(subTypeName: string, subTypeDescription: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubType: subTypeName,\n        SubTypeDesc: subTypeDescription\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update SubType\n   *\n   * @category Types & SubTypes\n   * @param {number} subTypeId - The SubTypeId\n   * @param {Object} options - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the updated SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  updateSubtype(subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get SubTypes\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  getSubtypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/SubType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getFees() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Expirations\n   *\n   * @category Expirations\n   * @return {Object} Returns Promise that represents a collection of ExpirationTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  getExpirations() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/ExpirationType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add an Expiration type\n   *\n   * @category Expirations\n   * @param {Object} options - Must specify OrgId and ExpirationDescType attributes. See: /{subdirectory}/apidocs/#/service-info/Pll/ExpirationType\n   * @return {Object} Returns Promise that represents an object describing the newly-added ExpirationTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  addExpiration(options?: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(options, 'OrgId') || !_.has(options, 'ExpirationTypeDesc')) {\n        reject(new CWError(5, 'OrgId and ExpirationTypeDesc must both be defined.'))\n      }\n      var data = options\n      this.cw.runRequest('Pll/ExpirationType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Deposits\n   *\n   * @category Deposits\n   * @return {Object} Returns Promise that represents a collection of DepositItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepositItemBase\n   */\n  getDeposits() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Deposit/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchDeposits(filters: {AccountCode?: string, DepositCode?: string, DepositDesc?: string, DepositId?: number, DepositTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'DepositCode', 'DepositDesc', 'DepositId', 'DepositTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/Deposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Disciplines\n   *\n   * @category Disciplines\n   * @return {Object} Returns Promise that represents a collection of DisciplineItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DisciplineItem\n   */\n  getDisciplines() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Discipline/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Department\n   *\n   * @category Departments & Divisions\n   * @param {string} departmentCode - The SubTypeId\n   * @param {string} departmentName - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  addDepartment(departmentCode: string, departmentName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentCode: departmentCode,\n        DepartmentName: departmentName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Department/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Departments\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getDepartments() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Department/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Division\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  addDivision(departmentId: number, divisionName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentId: departmentId,\n        DivisionName: divisionName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Division/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Divisions\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of DivisionItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  getDivisions() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Division/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Holiday\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  addHoliday(holidayDate: Date, holidayDesc: string, halfDayFlag?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayDate: holidayDate,\n        HolidayDesc: holidayDesc\n      }\n      if(typeof(halfDayFlag)!='undefined') {\n        _.set(data, 'HalfDayFlag', halfDayFlag)\n      }\n      this.cw.runRequest('Pll/Holiday/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Holiday\n   *\n   * @category Holidays\n   * @param {number} holidayId - ID of Holiday to delete\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  deleteHoliday(holidayId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayId: holidayId\n      }\n      this.cw.runRequest('Pll/Holiday/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Holidays\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents a collection of HolidaysItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  getHolidays() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Holiday/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Inspection Time Block\n   *\n   * @category Inspections\n   * @param {string} labelText - Label for the time block\n   * @param {string} startTime - Start time in 24 hour format (HH:mm)\n   * @param {string} endTime - End time in 24 hour format (HH:mm)\n   * @param {Object} inspTimeBlocksDetails - See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspTimeBlocksDetailItem\n   * @return {Object} Returns Promise that represents an object describing the newly-added InspectionTimeBlocksItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  addInspectionTimeBlock(labelText: string, startTime: string, endTime: string, inspTimeBlocksDetails?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        LabelText: labelText,\n        StartTime: startTime,\n        EndTime: endTime\n      }\n      if(typeof(inspTimeBlocksDetails)!='undefined') {\n        _.set(data, 'InspTimeBlocksDetails', inspTimeBlocksDetails)\n      }\n      this.cw.runRequest('Pll/InspectionTimeBlock/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Inspection Time Blocks\n   *\n   * @category Inspections\n   * @return {Object} Returns Promise that represents a collection of InspectionTimeBlocksItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  getInspectionTimeBlocks() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/InspectionTimeBlock/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all NotificationCases\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationCaseItem\n   */\n  getNotificationCases() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationCase/GetNotificationCaseList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Notification Types\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationTypeItem\n   */\n  getNotificationTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationType/GetNotificationTypeList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} options - attributes or update\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addNumberingGroup(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/NumberingGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} numberingGroupId - ID of NumberGroup to update\n   * @param {number} options - updates attributes\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  updateNumberingGroup(numberingGroupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        NumberingGroupId: numberingGroupId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/NumberingGroup/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Numbering Groups\n   *\n   * @category NumberingGroups\n   * @return {Object} Returns Promise that represents a collection of NumberingGroupItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  getNumberingGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NumberingGroup/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Person\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addPerson(name: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        Name: name\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all People\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleItem\n   */\n  getPeople() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/People/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add People Role\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/PeopleRole\n   * @return {Object} Returns Promise that represents an object describing the newly-added PeopleRoleItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  addPeopleRole(roleCode: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        RoleCode: roleCode\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all PeopleRoles\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getPeopleRoles() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/PeopleRole/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultDetail. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  addTaskResultDetail(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {string} resultDetailId - Result Detail ID\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  updateTaskResultDetail(resultDetailId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        ResultDetailId: resultDetailId\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all TaskResultDetails\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getTaskResultDetails() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultDetail/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultFeeInsert. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultFeeInsertItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  addTaskResultFeeInsert(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the deleted TaskResultFeeInsertItem.\n   */\n   deleteTaskResultFeeInsert(taskResultFeeInsertId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert(s) by Task ID\n   *\n   * @category TaskResults\n   * @param {number} taskId - ID for Task parent of TaskResultFeeInsert(s) to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the Task parent of the deleted TaskResultFeeInsertItem(s).\n   */\n   deleteTaskResultFeeInsertByTaskId(taskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskId: taskId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/DeleteByTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be updated.\n   * @param {number} taskId - Updated TaskID\n   * @param {number} taskResultId - Updated TaskResultId\n   * @param {number} [feeSetupId] - Fee setup ID update for TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents the ID Number of the updated TaskResultFeeInsertItem.\n   */\n   updateTaskResultFeeInsert(taskResultFeeInsertId: number, taskId: number, taskResultId: number, feeSetupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId,\n        TaskId: taskId,\n        TaskResultId: taskResultId\n      }\n      if(typeof(feeSetupId)!='undefined') {\n        _.set(data, 'FeeSetupId', feeSetupId)\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Get all TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of TaskResultFeeInsertItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  getTaskResultFeeInsert() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultFeeInsert/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\n\nconst _ = require('lodash')\n\nexport class CaseAssets {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Attach asset to case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when attaching the asset. Defaults to true.\n   * @param {Object} [options] - Options for CaseDataGroup including Address, AddressId, AssetId, AssetObjectId, AssetType, CityName, CrossStreet, DateExpired, ExpiredFlag, Facility_Id, FeatureAssetId, FeatureClass, FeatureObjectId, LegacyId, Level_Id, LndObjectId, Location, MasterFlag, ObjectId, StateCode, StreetDirection, StreetFraction, StreetName, StreetNumber, StreetPostDir, StreetType, Suite, TileNo, UpdateCaseData, XCoord, YCoord, ZCoord, and ZipCode\n   * @return {Object} Returns Promise that represents an object describing CaAddress.\n   */\n   attach(caObjectId: number, updateXY: boolean = true, options?: {Address?: string, AddressId?: number, AssetId?: string, AssetObjectId?: number, AssetType?: string, CityName?: string, CrossStreet?: string, DateExpired?: string, ExpiredFlag?: string, Facility_Id?: string, FeatureAssetId?: string, FeatureClass?: string, FeatureObjectId?: number, LegacyId?: string, Level_Id?: string, LndObjectId?: number, Location?: string, MasterFlag?: string, ObjectId?: string, StateCode?: string, StreetDirection?: string, StreetFraction?: string, StreetName?: string, StreetNumber?: number, StreetPostDir?: string, StreetType?: string, Suite?: string, TileNo?: string, UpdateCaseData?: boolean, XCoord?: number, YCoord?: number, ZCoord?: number, ZipCode?: string}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        UpdateXY: updateXY\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseAddress/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Detach specific asset from case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when detaching the assets. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n  detach(caAddressId: number, updateXY: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaAddressId: caAddressId,\n        UpdateXY: updateXY\n      }\n      this.cw.runRequest('Pll/CaseAddress/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Detach all assets from case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to detach the assets from.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when detaching the asset(s). Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of detached CaAddressIds.\n   */\n  detachAll(caObjectId: number, updateXY: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        UpdateXY: updateXY\n      }\n      this.cw.runRequest('Pll/CaseAddress/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get assets attached to a specific case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object from which to get attached assets\n   * @return {Object} Returns Promise that represents a collection of the default CaAddresses.\n   */\n  getForCase(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseAddress/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Search for Case Assets. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Case Assets\n   * @param {Object} filters - The parameters to search by. (AssetType, CaAddressId, CaObjectId, CityName, ExpiredFlag, StateCode, StateName, StreetName, StreetNumber, Suite, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of resulting CaAddresses\n   */\n   search(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AssetType', 'CaAddressId', 'CaObjectId', 'CityName', 'ExpiredFlag', 'StateCode', 'StateName', 'StreetName', 'StreetNumber', 'Suite', 'ZipCode']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AssetType, CaAddressId, CaObjectId, CityName, ExpiredFlag, StateCode, StateName, StreetName, StreetNumber, Suite, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseAddress/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nimport { CaseData } from './case_data'\nimport { CaseFinancial } from './case_financial'\nimport { CaseWorkflow} from './case_workflow'\nimport { CaseAdmin } from './case_admin'\nimport { Comments } from './comments'\nimport { CaseAssets } from './case_assets'\n\nexport class Case {\n  /**\n   * @hidden\n   */\n  cw: any\n\n\n  /**\n   * Data Detail methods\n   */\n  data?: Object\n  /**\n   * Asset (Address) methods\n   */\n  asset?: Object\n  /**\n   * Workflow & task methods\n   */\n  workflow?: Object\n  /**\n   * Payment, Receipt, & Fee methods\n   */\n  financial?: Object\n  /**\n   * Commenting methods\n   */\n  comment?: Object\n  /**\n   * PLL Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.data = new CaseData(cw)\n    this.asset = new CaseAssets(cw)\n    this.workflow = new CaseWorkflow(cw)\n    this.financial = new CaseFinancial(cw)\n    this.comment = new Comments(cw, 'CaObject')\n    this.admin = new CaseAdmin(cw)\n  }\n\n  /**\n   * Create new case\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  create(caseTypeId: number, subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/Create', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a child case\n   *\n   * @category Cases\n   * @param {number} busCaseId - The case Type ID\n   * @param {number} parentCaObjectId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createChild(busCaseId: number, parentCaObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId,\n        ParentCaObjectId: parentCaObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/CreateChild', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a case from a Service Request\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {number} requestId - The service request ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createFromRequest(caseTypeId: number, subTypeId: number, requestId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId,\n        ServiceRequestId: requestId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/CreateCaseFromServiceRequest', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the updated case\n   */\n  update(caObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cases by IDs\n   *\n   * @category Cases\n   * @param {Array<number>} caObjectIds - The case Object ID to update\n   * @return {Object} Returns Promise that represents a collection of objects describing the cases\n   */\n  getByIds(caObjectIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectIds: caObjectIds\n      }\n      this.cw.runRequest('Pll/CaseObject/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Cases. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Cases\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case Object IDs\n   */\n  search(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseObject/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Move a Case point\n   *\n   * @category Cases\n   * @param {string} caObjectId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(caObjectId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(1, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        CaObjectId: caObjectId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Pll/CaseObject/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the deleted case\n   */\n  delete(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseObject/DeleteCase', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // importCase(caseTypeId: number, subTypeId: number, caseName: string, location: string, x: number, y:number, appData: object, comment: string, expiration: string, assetIds: object) {\n  //   return new Promise(resolve => {\n  //     const _this = this;\n  //     let case_data = {\"CaseName\":caseName, \"Location\":location, \"DateExpiration\": expiration, \"X\":x,\"Y\":y}\n  //     this.create(caseTypeId, subTypeId, case_data).then((response: any) => {\n  //       if(response) {\n  //         if(typeof(response.CaObjectId)!='undefined') {\n  //           var CaObjectId = response.CaObjectId\n  //           if(typeof(comment) != 'undefined') {\n  //             _this.comments.add(CaObjectId, comment)\n  //           }\n  //           if(assetIds) {\n  //             _this.assets!.attach(CaObjectId, true, assetIds)\n  //           }\n  //           if(appData) {\n  //             _this.data!.getGroupsByCaseId(response.CaObjectId).then(response_one => {\n  //               // loop through all groups\n  //               let data_details_items = []\n  //               _this.data!.caseDataGroupIterator(appData, response_one, data_details_items).then(di => {\n  //                 _this.data!.caseDataDetailIterator(appData, di).then(resp => {\n  //                   resolve(response)\n  //                 })\n  //               })\n  //             })\n  //           } else {\n  //             resolve(response)\n  //           }\n  //         } else {\n  //           console.log('Error creating case: '+ JSON.stringify(case_data))\n  //           process.exit(0)\n  //         }\n  //       } else {\n  //         resolve(false)\n  //       }\n  //     })\n  //   })\n  // }\n\n}\n","import { CWError } from './error'\nimport { General } from './general'\nimport { ActivityLinks } from './activity_link'\nimport { Gis } from './gis'\nimport { MessageQueue } from './message_queue'\nimport { Search } from './search'\nimport { Request } from './request'\nimport { Inspection } from './inspection'\nimport { WorkOrder } from './workorder'\n\nimport { Case } from './case'\n\nconst https = require('https')\nconst querystring = require('querystring')\nconst _ = require('lodash')\n\ninterface postData {\n  data?: string\n  token?: string\n  file?: any\n}\n\n/**\n * Core interface Citywork which defines the access vars for many of the functions and the connection settings\n */\ninterface Citywork {\n  base_url: any\n  settings: Object\n  login?: string\n  password?: string\n  Token?: string\n  gisToken?: string\n  gisTokenUrl?: string\n\n  default_domain?: any\n\n  general?: Object\n  search?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  inspection?: Object\n  workorder?: Object\n  request?: Object\n\n  case?: Object\n\n  extensions: Object\n  features: Object\n}\n\n/**\n * Core class Cityworks with most of the authentication and install capabilities functions\n */\nmodule.exports = class Cityworks implements Citywork {\n  /**\n   * The domain of the cityworks install. Defaults to Cityworks Online\n   */\n  base_url: string\n  /**\n   * Stores the currently in use authentication token\n   */\n  Token?: string\n  /**\n   * Stores the login username\n   */\n  login?: string\n  /**\n   * Holds the login password\n   */\n  password?: string\n  /**\n   * Holds the GIS Token for GIS-based Authentication (Portal)\n   */\n  gisToken?: string\n  /**\n   * Holds the GIS Token URL for GIS-based Authentication (Portal)\n   */\n  gisTokenUrl?: string\n  /**\n   * Stores settings including path (defaults to \"cityworks\"), secure (defaults to true), expires (defaults to null - does not expire), default_domain\n   */\n  settings: {\n    path: string,\n    secure: boolean,\n    expires: any,\n    default_domain?: any\n  }\n  error?: Object\n  general?: Object\n  search?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  request?: Object\n  inspection?: Object\n  workorder?: Object\n\n  case?: Object\n\n  extensions: Object\n  features: Object\n  potential_loads: Array<string>\n\n  /**\n     * Contructor for a new cityworks instance's object, allows one to optionally configure the domain and other settings right from the get-go\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'workorder', 'inspection', 'request', 'case']\n     */\n  constructor(base_url?: string, settings?: Object, load?: Array<string>) {\n    this.base_url = 'cityworksonline'\n    this.extensions = {\"UnknownExtension\": 0, \"CwAnalytics\": 1, \"WebHooks\": 2, \"PLLPublicApp\": 3, \"ActivityUpdate\": 4, \"SingleSignOn\": 5}\n    this.features = {\"UnknownFeature\": 0, \"ViewInspections\": 1, \"EditInspections\": 2, \"ViewServiceRequest\": 3, \"EditServiceRequest\": 4, \"ViewWorkOrder\": 5, \"EditWorkOrder\": 6, \"EquipmentCheckOut\": 7, \"OfficeField\": 8, \"Respond\": 9, \"Eurl\": 10, \"PaverInterface\": 11, \"Contracts\": 12, \"Storeroom\": 13, \"PLL\": 14, \"Cw4XL\": 15, \"TableEditor\": 16, \"CCTVInterface\": 17, \"MobileAndroid\": 18, \"MobileiOS\": 19, \"PerformanceBudgeting\": 20, \"Insights\": 21, \"RespondCase\": 22, \"RespondInspection\": 23, \"RespondServiceRequest\": 24, \"RespondTaskManager\": 25, \"RespondWorkOrder\": 26, \"Workload\": 27, \"OpX\": 28, \"TrimbleUnityMobile\": 29, \"TrimbleVegetationManager\": 30}\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n    this.potential_loads = ['general', 'activity_link', 'message_queue', 'gis', 'search', 'request', 'case', 'case_financial']\n    if(typeof(base_url)!='undefined') {\n      this.configure(base_url, settings, load)\n    }\n  }\n\n  /**\n     * Configure a new cityworks instance's domain and other settings\n     *\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'search', 'workorder', 'inspection', 'request', 'case']\n     * @return {boolean} Returns true if successful, otherwise, throws error\n     */\n  configure(base_url?: string, settings?: Object, load?: Array<string>) {\n    if(typeof base_url !== 'undefined') { this.base_url = base_url } else { this.base_url = 'cityworksonline' }\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n\n    if(typeof(settings)!='undefined') {\n      _.forEach(settings, (v,k) => {\n        if(typeof(this.settings[k])!='undefined') {this.settings[k] = v}\n      })\n    }\n\n    if(typeof(load)=='undefined') {\n      this.general = new General(this)\n      this.activity_link = new ActivityLinks(this)\n      this.message_queue = new MessageQueue(this)\n      this.request = new Request(this)\n      this.inspection = new Inspection(this)\n      this.workorder = new WorkOrder(this)\n      this.case = new Case(this)\n      this.search = new Search(this)\n    } else {\n      let _this = this\n      _.forEach(this.potential_loads, function(v) {\n        switch(v) {\n          case 'general':\n            _this.general = new General(_this)\n          break\n          case 'activity_link':\n            _this.activity_link = new ActivityLinks(_this)\n          break\n          case 'message_queue':\n            _this.message_queue = new MessageQueue(_this)\n          break\n          case 'gis':\n            _this.gis = new Gis(_this)\n          break\n          case 'search':\n            _this.search = new Search(_this)\n          break\n          case 'request':\n            _this.request = new Request(_this)\n          break\n          case 'case':\n            _this.case = new Case(_this)\n          break\n          case 'inspection':\n            _this.inspection = new Inspection(_this)\n          break\n          case 'workorder':\n            _this.workorder = new WorkOrder(_this)\n          break\n        }\n      })\n    }\n  }\n\n  /**\n     * Send a request to the Cityworks API\n     *\n     * If one ever needs to access or call an unimplemented API endpoint of a Cityworks install, one can call this method directly with the path and data payload:\n     *\n     * `cityworks.runRequest(path, data)`\n     *\n     * @param {string} path - The path to the particular endpoint\n     * @param {Object} data - The data object to be sent to the Cityworks API\n     * @param {any} file - The file to send in binary to the Cityworks API\n     * @return {Object} Returns Promise object that represents the json object returned from the Cityworks API\n     */\n  runRequest(path, data?, file?: any) {\n    return new Promise((resolve, reject) => {\n      let pd = {} as postData\n\n      if(typeof(data) !== 'undefined') {\n        pd.data = JSON.stringify(data)\n      }\n      \n      if(typeof(file) !== 'undefined' && (path=='Pll/CaseRelDocs/AddTaskRelDoc' || path=='Pll/CaseRelDocs/Add')) {\n        pd.file = file\n      }\n\n      if(typeof(this.Token) !== 'undefined' && this.Token != '' && path!='General/Authentication/CityworksOnlineAuthenticate' && path!='General/Authentication/Authenticate') {\n        pd.token = this.Token\n      }\n\n      let obj: {\n        Status: number,\n        Message: string\n      }\n\n      let options = {\n        hostname: this.base_url,\n        port: 443,\n        path: '/' + this.settings.path + '/services/' + path,\n        method: 'POST',\n        headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n           'Content-Length': Buffer.byteLength(querystring.stringify(pd))\n        },\n        timeout: 10000000\n      }\n      let request = https.request(options, (response) => {\n          let str=''\n          response.on('error',function(e){\n              console.log(e, 'Caught on error')\n              reject(new CWError(13, \"Unknown error.\", e))\n          })\n\n          response.on('data',function(chunk){\n              str+=chunk\n          })\n\n          response.on('end',function(){\n            try {\n              var test_str = JSON.stringify(str) + \"[test string]\"\n              if(test_str.match(/\\<h2\\>Object\\ moved\\ to/)==null) {\n                var obj=JSON.parse(str)\n                // if(path=='General/ActivityNotification/UserWatching') {\n                //   console.log(str, options, pd, obj)\n                // }\n                if(typeof(obj)=='undefined') {\n                  // failed\n                  reject(new CWError(10, 'No response received from Cityworks API.'))\n                } else if(typeof(obj)!='undefined' && typeof(obj.Value)!='undefined') { // && typeof(response.Value.Token)!='undefined') {\n                  switch(obj.Status) {\n                    case 1:\n                      reject(new CWError(1, 'Error', obj))\n                      break;\n                    case 2:\n                      reject(new CWError(2, 'Unauthorized', obj))\n                      break;\n                    case 3:\n                      reject(new CWError(3, 'InvalidCredentials', obj))\n                      break;\n                    case 0:\n                    default:\n                      resolve(obj);\n                      break;\n                  }\n                } else {\n                  reject(new CWError(4, \"Unknown error.\", {options: options, postedData: pd, api_returned_string: obj}))\n                }\n              } else {\n                reject(new CWError(5, \"Error parsing JSON. Cityworks returned HTML.\", {response: str}))\n              }\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log('try/catch error on JSON')\n                reject(new CWError(6, \"Error parsing JSON.\", {error: e}))\n              } else {\n                console.log('try/catch error on JSON - but not an instance of SyntaxError')\n                reject(new CWError(7, \"Error parsing JSON.\"))\n              }\n            }\n          })\n      })\n      request.write(querystring.stringify(pd))\n      request.end()\n    })\n  }\n\n  /**\n     * Authenticate with the Cityworks API and store an access token for use. Stores the token on cityworks.Token.\n     * @param {string} login - User's login name\n     * @param {password} password - User's password\n     * @return {Object} Returns Promise object that represents a boolean which tells you the login succeeded (true) or failed (false).\n     */\n  authenticate(login: string, password: string) {\n    return new Promise((resolve, reject) => {\n      let data = { LoginName:login, Password:password }\n      let path = 'General/Authentication/Authenticate'\n      if(this.base_url == 'cityworksonline') {\n        path = 'General/Authentication/CityworksOnlineAuthenticate'\n      }\n      this.runRequest(path, data).then((response: any) => {\n        // if(response.Status>0) {\n        //   // failed\n        //   reject(new CWError(100, response.Message))\n        // } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.login = login\n          this.password = password\n          this.Token = response.Value.Token\n          resolve(true)\n        // } else {\n        //   // failed\n        //   reject(new CWError(11, 'Unknown Error'))\n        // }\n      }).catch(error => {\n        reject(error);\n      })\n    })\n  }\n\n  /**\n     * Authenticate a username with a GIS Token\n     * @param {login} - Gis user name, should match a Cityworks employee login name\n     * @param {string} gisToken - Gis Oauth2 access token\n     * @param {string} gisTokenUrl - Base url to GIS server (not the '/generateToken' endpoint)\n     * @param {number} [expires] - Authenticate to Cityworks for a specified number of milliseconds, defaults to 2 weeks\n     */\n  authenticateWithGISToken(login: string, gisToken: string, gisTokenUrl: string, expires?: number) {\n    this.login = login\n    this.gisToken = gisToken\n    this.gisTokenUrl = gisTokenUrl\n    if(typeof(expires)!='undefined') {\n      expires = 1209600000\n    }\n\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/AuthenticateGisToken'\n      let data = { LoginName:this.login, GisToken: this.gisToken, GisTokenUrl: this.gisTokenUrl, Expires: expires}\n\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          // TODO: CWError here.\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          resolve(false)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Validate provided token\n     * @param {string} token - User's login name\n     * @param {boolean} [set] - Set a valid token as the cityworks instance's active token\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the token's validity and that is was set (true) or throws an error if was not valid (and not set).\n     */\n  validateToken(token:string, set?:boolean) {\n    return new Promise((resolve, reject) => {\n      if(typeof(set)=='undefined') {\n        let set = false\n      }\n      let data = { Token: token }\n      let path = 'General/Authentication/Validate'\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          resolve(false)\n        } else {\n          if(set) {\n            this.Token = token\n          }\n          resolve(response.Value)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Set a token you've retrieved from your storage system as the active token for the cityworks instance. Note that this doesn't check the token for validity.\n     * @param {token} token - The token string to set as the active token.\n     * @return {boolean} Returns a boolean which apprises one that the token was set (true) or not set (false).\n     */\n  setToken(token) {\n    if(token!='' && token!=null) {\n      this.Token = token\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n     * Get currently set, valid token\n     * @param {token} token - The token string to set as the active token.\n     * @return {string} Returns a string which is the currently-set token or the boolean false value if no (valid) token set\n     */\n  getToken() {\n    if(this.Token=='' || this.Token==null) {\n      return false\n    } else {\n      return this.Token\n    }\n  }\n\n  /**\n     * Revoke all current user's tokens or only tokens created before a particular date and time.\n     * @param {number} [revokeBefore] - Datetime as an Epoch integer (number), if you wish to revoke only tokens created before a particular datetime\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the revocation outcome's success (true) or failure (false)\n     */\n  revokeToken(revokeBefore?:number) {\n    return new Promise((resolve, reject) => {\n      let data = { RevokeDate: revokeBefore }\n      let path = 'General/Token/RevokeUser'\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          resolve(false)\n        } else {\n          resolve(true)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  // App data\n\n  /**\n     * Get the localization settings for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the localization settings for the current Cityworks install\n     */\n  getLocalizationSettings() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/LocalizationSettings'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the system timezone options for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the timezone settings for the currentCityworks install\n     */\n  getTimezoneOptions() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/TimeZones'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the current install's location information\n     * @return {Object} Returns Promise object that represents an Object which contains the location information\n     */\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/CurrentLocation'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  // Licensing Checks\n  /**\n     * Check if a particular license is available to the currently-authenticated user\n     * @param {string} area - Area of access\n     * @param {string} service - Service to access\n     * @return {boolean} Returns Promise object that represents a boolean which informs access is granted (true) or denied (false)\n     */\n  licensedApiCheck(area: string, service: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"Area\": area,\n        \"Service\": service\n      }\n      let path = 'General/AppData/SelectedEntities'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if a current Cityworks install is licensed to use a particular extension\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {string} extension - Extension name\n     * @return {boolean} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionCheck(extension: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.extensions[extension])=='undefined') {\n        reject(new CWError(4, 'Extension provided does not exist or is mispelled.', {'provided': extension, 'available': this.extensions}))\n      }\n      let data = {\n        \"Extension\": this.extensions[extension]\n      }\n      let path = 'General/Authorization/LicensedExtensionCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check a whole list to see if current Cityworks install is licensed to use extensions\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {Array<string>} extension - Extension names\n     * @return {Object} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionsCheck(extensions: Array<string>) {\n    return new Promise((resolve, reject) => {\n        var data: { Extensions: Array<number> } = {\n          Extensions: []\n        }\n      _.forEach(extensions, (v) => {\n        if(typeof(this.extensions[v])=='undefined') {\n          reject(new CWError(5, 'Extension provided does not exist or is mispelled.', {'provided': v, 'available': this.extensions}))\n        } else {\n          data.Extensions.push(this.extensions[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedExtensionsCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_extensions = _.invert(this.extensions)\n        _.forEach(response, (ext_num, bool) => {\n          if(typeof(inv_extensions[ext_num])=='undefined') {\n            reject(new CWError(6, 'Extension index provided does not exist or isn\\'t configured properly.', {'provided_num_returned': ext_num, 'available': this.extensions}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_extensions[ext_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use a feature:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {string} [feature] - Feature to check to see if ciurrently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeatureCheck(feature: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.features[feature])=='undefined') {\n        reject(new CWError(7, 'Feature provided does not exist or is mispelled.', {'provided': feature, 'available': this.features}))\n      }\n      let data = {\n        \"Feature\": this.features[feature]\n      }\n      let path = 'General/Authorization/LicensedFeatureCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use features:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {Array<string>} [feature] - Features to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeaturesCheck(features: Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data: { Features: Array<number> } = {\n        Features: []\n      }\n      _.forEach(features, (v: string) => {\n        if(typeof(this.features[v])=='undefined') {\n          reject(new CWError(8, 'Feature provided does not exist or is mispelled.', {'provided': v, 'available': this.features}))\n        } else {\n          data.Features.push(this.features[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedFeaturesCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_features = _.invert(this.features)\n        _.forEach(response.Value, (feat_num, bool) => {\n          if(typeof(inv_features[feat_num])=='undefined') {\n            reject(new CWError(9, 'Feature index provided does not exist or isn\\'t configured properly.', {'provided': feat_num, 'available': inv_features}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_features[feat_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  // LicensedServicesCheck\n  // Check if current user is licensed to use services\n  // List req ServicesList of 'Area/Service', i.e. ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n  /**\n     * Check if current user is licensed to use services. List req ServicesList of 'Area/Service', i.e.:\n     *\n     * ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n     *\n     * @param {Array<string>} [services] - Services to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedServicesCheck(services: Array<string>) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authorization/LicensedServicesCheck'\n      var data: { Services: Array<string> } = {\n        Services: services\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of CityworksOnline sites for this user\n     *\n     * @param {string} [login] - Login Name to use when checking. Defaults to previously-stored login name.\n     * @param {string} [password] - Password to use when checking. Defaults to previously-stored password.\n     * @return {Object} Returns Promise object that represents an array of cityworks online sites available to this user.\n     */\n  cityworksOnlineSites(login?: string, password?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/CityworksOnlineSites'\n      var data = {\n        LoginName: (typeof(login)!='undefined') ? login: this.login,\n        Password:  (typeof(password)!='undefined') ? password : this.password\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a collection of the configured domains.\n     */\n  domains() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Domains'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @param {string} [login] - Optional login name to get user information for. Defaults to currently-set user name used for login.\n     * @return {Object} Returns Promise object that represents an Object with the user information\n     */\n  user(login?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/User'\n      let data = { LoginName: (typeof(login)!='undefined') ? login: this.login }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the software version number of the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a string of the version number\n     */\n  version() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Version'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n\n\n // export default new Cityworks() as cityworks\n"],"names":["require","CWError","constructor","code","message","info","this","name","_","has","get","JSON","stringify","General","cw","notifications","Promise","resolve","reject","runRequest","then","response","Value","catch","e","amIWatching","activityType","activityId","aType","null","case","task","provided","potential_activities","ActivityType","ActivityId","r","getActivityMetadataByIds","ids","table","tables","indexOf","available","Ids","TableName","console","log","getHistory","getWOEntityCostSummary","object_ids","ObjectIds","searchWOEntityCostSummary","search_id","SearchId","ActivityLinks","activityTypes","linkTypes","ReversibleMap","set","add","source_type","source_sid","destination_type","destination_sid","link_type","options","data","SourceType","SourceSid","DestType","DestSid","LinkType","type","sids","ActivitySids","_this","return_data","Array","forEach","link","key","push","clone","SourceActivityType","SourceActivitySid","DestinationActivityType","DestinationActivitySid","delete","activity_link_id","ActivityLinkId","remove","Gis","getConfig","whichType","whichId","getGisData","context","toLowerCase","domain","domainId","downloadMobile","cacheId","initialExtent","request","requestId","inspection","inspectionId","workOrder","workOrderSid","user","allDomains","allGroups","selectedEntities","getEntityAttributes","entityType","EntityType","status","Pending","Processing","Complete","Failed","hook_types","Unknown","ActivityUpdate","Email","WebHook","processMessages","delete_successful","Delete","maxcount","MaxCount","Status","hours_to_keep","HoursToKeep","preferences","search","parameters","max_results","MaxResults","allowed_params","disallowed_params","v","k","value","concat","update","HookType","updateMessageStatus","getWebooks","hook_ids","HookIds","Search","searchTypes","Null","Request","WorkOrder","Inspection","Contract","Permit","GIS","PermitTask","PermitAddress","InspCommon","Case","WorkOrderEntity","StoreTransaction","Requisition","Material","WorkActivity","MaterialLeaf","WoTemplate","Employee","MessageQueue","Analytics","TokenState","AssetCalculationResult","Equipment","CustomerAccount","InspTemplate","ProblemLeaf","AssetSplitRecord","PavementInsp","TvInspection","Projects","quick","text","QuickSearchText","execute","searchId","merge","getSaved","searchType","applyToEntities","employeeSid","length","savedEndpoint","displayFields","types","enableServices","searchIds","Enable","SearchIds","disableServices","getDefinition","getDefinitions","getDefinitionNames","deleteDefinitions","saveDefinition","searchFor","SearchFor","RequestAdmin","getTemplates","searchData","Comments","currentActivityType","sid","comment","ActivitySid","id","CommentId","getPredefined","problemSid","category","admin","updateMLF","ServiceRequestId","create","sr_data","move","x","y","projection","z","base_data","RequestId","X","Y","changeProblem","ProblemSid","getById","getByIds","requestIds","RequestIds","getAuditLog","getCustomFields","changeCustomFieldCategory","categoryId","CategoryId","cancel","cancelReason","dateCancelled","uncancel","close","Message","reopen","searchObject","createSearchDefinition","searchName","sharedWithin","enableEurl","isString","getProblemNodes","viewOnly","displayMode","includeCancelled","DomainId","IncludeCancelled","ViewOnly","getProblems","forPublicOnly","onlyActiveTemplates","domainIds","ForPublicOnly","OnlyActiveTemplates","getProblemsByKeywords","keywords","Keywords","getPriorities","ProblemSids","getCustomFieldTemplate","getQASettings","getProblemLeaf","getStatuses","DomainIds","getEmployeeLists","listType","includes","getDispatchTos","getSubmitTos","streetCodes","getTemplatesById","problemSids","minimumDateModified","maximumDateModified","createTemplateSearchDefinition","getTemplateQAs","searchTemplates","templateIds","canCreate","includeInactiveIf","CanCreate","IncludeInactiveIf","getWOTemplates","includeInactive","IncludeInactive","InspectionAdmin","entityTypes","EntityTypes","forIn","insp_data","createFromEntities","createFromParent","createFromServiceRequest","createFromWorkOrder","InspectionId","inspectionIds","InspectionIds","CancelReason","DateCancelled","statuses","submitTos","includeInactiveEmployees","IncludeInactiveEmployees","connectAsset","entity","updateXY","facility","EntityUid","Entity","Facility_Id","Level_Id","getAnswers","inspections","getCycleFrom","getCycleIntervals","getCycleTypes","getDistricts","data_init","getTemplatesByIds","inspTemplateIds","InspTemplateIds","getTemplateEntityTypes","getQA","getQConditions","deleteAttachments","attachmentIds","AttachmentIds","downloadAttachment","attachmentId","AttachmentId","getAttachmentById","getAttachments","WorkOrderAdmin","getEntityGroups","getEntityTypes","entityGroups","EntityGroups","includeComments","includeInstructions","IncludeComments","IncludeInstructions","updateTemplate","wOTemplate","getTemplateGroupRights","wOTemplateIds","WOTemplateIds","getTemplateActivity","getUpdateFields","getTemplateEquipment","wOTemplateId","WOTemplateId","getTemplateLabor","getTemplateMaterial","getTemplateMapLayerFields","WorkOrderTemplateId","getTemplateTasks","getRelatedInspectionTemplates","wo_data","workOrderSId","s","combine","fromWorkOrderIds","toWorkOrderId","cancelCombinedWorkOrders","CancelCombinedWorkOrders","ToWorkOrderId","FromWorkOrderIds","workOrderId","WorkOrderId","path","workOrderSIds","workorderSId","isNumber","getInstructions","getCustomFieldValues","workorderSIds","getEntities","GetGisData","addEntities","entityInfo","UpdateXY","updateEntity","workComplete","WorkComplete","removeEntities","workOrderIds","WorkOrderIds","getWOsByEntities","entityUids","getSearchList","getSupervisors","getCategories","getStages","getExpenseTypes","addGroup","caObjectId","caseDataGroupId","groupCode","CaObjectId","CaseDataGroupId","GroupCode","addDefaultGroups","busCaseId","BusCaseId","wipAddDetail","caseDataDetailId","caDataGroupId","columnSequence","detailCode","detailSequence","CaseDataDetailId","CaDataGroupId","ColumnSequence","DetailCode","DetailSequence","getGroupsByCaseId","deleteGroupsByCaseId","searchForGroups","filters","intersectionBy","keysIn","checkGIS","entityUid","updateGroupsFromAsset","addDetail","updateDetail","caDataDetailId","CaDataDetailId","lockDetail","Lock","unlockDetail","addListValue","listValue","ListValue","deleteListValue","searchForListValueIds","searchForListValueObjects","CaseFinancial","addFee","feeSetupId","FeeSetupId","addPayment","addRefund","caPaymentId","refundAmount","CaPaymentId","RefundAmount","addDepositPayment","caDepositId","CaDepositId","addDeposit","depositId","amount","DepositId","addInstrument","instTypeId","dateExpire","InstTypeId","Amount","DateExpire","updateFee","caFeeId","CaFeeId","voidRefund","caPaymentRefundId","voided","CaPaymentRefundId","Voided","addDefaultFees","addDefaultDeposits","getFees","getDeposits","getPayments","getInstruments","deleteFee","deleteFeesByCaseId","deletePayment","deleteRefund","deletePaymentsByCaseId","deleteDeposit","deleteDepositsByCaseId","deleteInstrument","caInstrumentId","CaInstrumentId","deleteInstrumentsByCaseId","searchFees","searchPayments","searchRefunds","searchDeposits","getAllFeeTemplates","searchFeeTemplates","searchCaseInstruments","getInstrumentList","addCaseInstrumentRelease","releasedBy","dateReleased","amountReleased","percentReleased","DateReleased","ReleasedBy","deleteCaseInstrumentRelease","caInstReleasesId","CaInstReleasesId","searchCaseInstrumentReleases","fees","searchAvailableFees","getTenderTypes","addTenderType","updateTenderType","tenderTypeId","TenderTypeId","CaseWorkflow","addTask","taskId","startPoint","endPoint","TaskId","StartPoint","EndPoint","addTaskResult","caTaskId","resultCode","resultID","resultSetID","CaTaskId","ResultCode","ResultID","ResultSetID","addTaskComment","CommentText","getTasksByCaseId","checkRelatedItems","CheckRelatedItems","getTasksById","caTaskIds","CaTaskIds","getResultsByTaskId","getCommentsForTask","getCommentsForTasks","updateTask","updateTaskComment","caTaskCommentId","commentId","CaTaskCommentId","setTaskResult","deleteTask","deleteTasksOnCase","deleteTaskComments","caTaskCommentIds","CaTaskCommentIds","searchForTasks","searchForTaskResults","addTaskAttachment","docName","file","locationType","DocName","getTaskAttachments","deleteTaskAttachment","caRelDocId","CaRelDocId","CaseAdmin","addBusinessCaseTemplate","updateBusinessCaseTemplate","getBusinessCaseTemplates","addCaseType","caseTypeName","caseTypeDesciption","CaseType","CaseTypeDesciption","updateCaseType","caseTypeId","CaseTypeId","getCaseTypes","searchCaseTypeIDs","searchCaseTypeObjects","addSubtype","subTypeName","subTypeDescription","SubType","SubTypeDesc","updateSubtype","subTypeId","SubTypeId","getSubtypes","getExpirations","addExpiration","getDisciplines","addDepartment","departmentCode","departmentName","DepartmentCode","DepartmentName","getDepartments","addDivision","departmentId","divisionName","DepartmentId","DivisionName","getDivisions","addHoliday","holidayDate","holidayDesc","halfDayFlag","HolidayDate","HolidayDesc","deleteHoliday","holidayId","HolidayId","getHolidays","addInspectionTimeBlock","labelText","startTime","endTime","inspTimeBlocksDetails","LabelText","StartTime","EndTime","getInspectionTimeBlocks","getNotificationCases","getNotificationTypes","addNumberingGroup","updateNumberingGroup","numberingGroupId","NumberingGroupId","getNumberingGroups","addPerson","Name","getPeople","addPeopleRole","roleCode","RoleCode","getPeopleRoles","addTaskResultDetail","updateTaskResultDetail","resultDetailId","ResultDetailId","getTaskResultDetails","addTaskResultFeeInsert","deleteTaskResultFeeInsert","taskResultFeeInsertId","TaskResultFeeInsertId","deleteTaskResultFeeInsertByTaskId","updateTaskResultFeeInsert","taskResultId","TaskResultId","getTaskResultFeeInsert","CaseAssets","attach","detach","caAddressId","CaAddressId","detachAll","getForCase","asset","workflow","financial","createChild","parentCaObjectId","ParentCaObjectId","createFromRequest","caObjectIds","CaObjectIds","https","querystring","module","exports","base_url","settings","load","Token","login","password","gisToken","gisTokenUrl","error","general","activity_link","message_queue","gis","workorder","extensions","features","potential_loads","UnknownExtension","CwAnalytics","WebHooks","PLLPublicApp","SingleSignOn","UnknownFeature","ViewInspections","EditInspections","ViewServiceRequest","EditServiceRequest","ViewWorkOrder","EditWorkOrder","EquipmentCheckOut","OfficeField","Respond","Eurl","PaverInterface","Contracts","Storeroom","PLL","Cw4XL","TableEditor","CCTVInterface","MobileAndroid","MobileiOS","PerformanceBudgeting","Insights","RespondCase","RespondInspection","RespondServiceRequest","RespondTaskManager","RespondWorkOrder","Workload","OpX","TrimbleUnityMobile","TrimbleVegetationManager","secure","expires","default_domain","configure","pd","token","hostname","port","method","headers","Buffer","byteLength","timeout","str","on","chunk","match","obj","parse","postedData","api_returned_string","SyntaxError","write","end","authenticate","LoginName","Password","authenticateWithGISToken","GisToken","GisTokenUrl","Expires","validateToken","setToken","getToken","revokeToken","revokeBefore","RevokeDate","getLocalizationSettings","getTimezoneOptions","getCurrentLocation","licensedApiCheck","area","service","Area","Service","licensedExtensionCheck","extension","Extension","licensedExtensionsCheck","Extensions","rez","inv_extensions","invert","ext_num","bool","provided_num_returned","licensedFeatureCheck","feature","Feature","licensedFeaturesCheck","Features","feat_num","inv_features","licensedServicesCheck","services","Services","cityworksOnlineSites","domains","version"],"mappings":"8BAAA,QAAUA,QAAQ,gBAmBEC,EA0BlBC,YAAYC,EAAaC,EAAgBC,GAAYC,KAtBrDC,UAAI,EAAAD,KAIJH,UAIAC,EAAAA,KAAAA,oBAIAC,UAAI,EAWFC,KAAKC,KAAO,sBACZD,KAAKH,KAAOA,EACZG,KAAKF,QAAUA,OACK,QACfI,EAAEC,IAAIJ,EAAM,aACbC,KAAKF,QAAUI,EAAEE,IAAIL,EAAM,YAC7BC,KAAKD,KAAOM,KAAKC,UAAUP,GAE/B,ECrDF,MAAMG,EAAIR,QAAQ,gBAKEa,EASlBX,YAAYY,GALZA,KAAAA,QAME,EAAAR,KAAKQ,GAAKA,CACZ,CAOAC,gBACE,OAAWC,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,oCAAqC,CAAE,GAAEC,KAAMC,IAChEJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAUAC,YAAYC,EAAcC,GACxB,OAAWX,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIU,EAAQ,CAACC,KAAQ,EAAGC,KAAQ,EAAGC,KAAQ,QACX,IAAjBH,EAACF,GAEdR,EAAO,IAAWjB,EAAC,EAAG,yCAA0C,CAAC+B,SAAUN,EAAcO,qBAAsBL,KAG/GtB,KAAKQ,GAAGK,WAAW,4CADR,CAACe,aAAgBN,EAAMF,GAAeS,WAAcR,IACOP,KAAKgB,IAEzEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEX,EAEL,CASAa,yBAAyBC,EAAoBC,GAC3C,OAAO,IAAWvB,QAAC,CAACC,EAASC,KAC3B,IAAIsB,EAAS,CAAC,aAAc,UAAW,cACT,GAA3BhC,EAAEiC,QAAQD,EAAQD,IACnBrB,EAAO,IAAWjB,EAAC,EAAG,qDAAsD,CAAC+B,SAAYO,EAAOG,UAAYF,KAM9GlC,KAAKQ,GAAGK,WAAW,qCAJR,CACTwB,IAAOL,EACPM,UAAaL,IAEgDnB,KAAKgB,IAClES,QAAQC,IAAIV,GACZnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAOAuB,aACE,OAAO,IAAW/B,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,4BADR,CAAA,GAC2CC,KAAKgB,IACzDS,QAAQC,IAAIV,GACZnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAQAwB,uBAAuBC,GACrB,OAAO,IAAWjC,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,sCAHR,CACT+B,UAAaD,IAEiD7B,KAAKgB,IACnES,QAAQC,IAAIV,GACZnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAQA2B,0BAA0BC,GACxB,OAAWpC,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,4CAHR,CACTkC,SAAYD,IAEwDhC,KAAKgB,IACzES,QAAQC,IAAIV,GACZnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,EC3IF,MAAOhB,EAAGR,QAAQ,UAgBLsD,MAAAA,EAqBXpD,YAAYY,GAAER,KAfdiD,mBAAa,EAAAjD,KAMbkD,eAAS,EAAAlD,KAITQ,QAAE,EAMAR,KAAKQ,GAAKA,EACVR,KAAKiD,cAAgB,IAAIE,EACzBnD,KAAKiD,cAAcG,IAAI,OAAQ,GAC/BpD,KAAKiD,cAAcG,IAAI,OAAQ,GAC/BpD,KAAKiD,cAAcG,IAAI,aAAc,GACrCpD,KAAKiD,cAAcG,IAAI,UAAW,GAClCpD,KAAKiD,cAAcG,IAAI,YAAa,GACpCpD,KAAKiD,cAAcG,IAAI,UAAW,GAElCpD,KAAKkD,UAAY,IAAmCC,EACpDnD,KAAKkD,UAAUE,IAAI,OAAQ,GAC3BpD,KAAKkD,UAAUE,IAAI,SAAU,GAC7BpD,KAAKkD,UAAUE,IAAI,UAAW,EAChC,CAqBAC,IAAIC,EAAqBC,EAAoBC,EAA0BC,EAAyBC,EAAoB,WAClH,OAAO,IAAWhD,QAAC,CAACC,EAASC,KACvBZ,KAAKiD,cAAc9C,IAAImD,IACzB1C,EAAO,IAAIjB,EAAQ,EAAG,yBAA0B,CAAC+B,SAAY4B,EAAaK,QAAU3D,KAAKiD,iBAEvFjD,KAAKiD,cAAc9C,IAAIqD,IACzB5C,EAAO,IAAWjB,EAAC,EAAG,8BAA+B,CAAC+B,SAAY8B,EAAkBG,QAAU3D,KAAKiD,iBAEjGjD,KAAKkD,UAAU/C,IAAIuD,IACrB9C,EAAO,IAAIjB,EAAQ,EAAG,uBAAwB,CAAC+B,SAAYgC,EAAWC,QAAU3D,KAAKkD,aAEvF,IAAQU,EAAG,CACTC,WAAY7D,KAAKiD,cAAc7C,IAAIkD,GACnCQ,UAAWP,EACXQ,SAAU/D,KAAKiD,cAAc7C,IAAIoD,GACjCQ,QAASP,EACTQ,SAAUjE,KAAKkD,UAAU9C,IAAIsD,IAG/B1D,KAAKQ,GAAGK,WADG,2BACc+C,GAAM9C,KAAMC,IACnCJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAYAd,IAAI8D,EAAcC,GAChB,OAAO,IAAWzD,QAAC,CAACC,EAASC,KACvBZ,KAAKiD,cAAc9C,IAAI+D,IACzBtD,EAAO,IAAIjB,EAAQ,EAAG,2BAA4B,CAAC+B,SAAYwC,EAAMP,QAAU3D,KAAKiD,iBAEtF,IAAQW,EAAG,CACThC,aAAc5B,KAAKiD,cAAc7C,IAAI8D,GACrCE,aAAcD,GAEPE,EAAGrE,KAEZA,KAAKQ,GAAGK,WADG,sCACc+C,GAAM9C,KAAMC,IACnC,IAAeuD,EAAG,IAAIC,MACtBrE,EAAEsE,QAAQzD,EAASC,MAAO,CAACyD,EAAMC,KAC/BD,EAAKV,SAAWM,EAAMpB,cAAc7C,IAAIqE,EAAKV,UAC7CU,EAAKZ,WAAaQ,EAAMpB,cAAc7C,IAAIqE,EAAKZ,YAC/CY,EAAKR,SAAWI,EAAMnB,UAAU9C,IAAIqE,EAAKR,UACzCK,EAAYK,KAAKF,EAAI,GAEvB9D,EAAQ2D,EACV,GAAGrD,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAiBA0D,MAAMtB,EAAqBC,EAAoBC,EAA0BC,GACvE,OAAW/C,IAAAA,QAAQ,CAACC,EAASC,KACvBZ,KAAKiD,cAAc9C,IAAImD,IACzB1C,EAAO,IAAWjB,EAAC,EAAG,yBAA0B,CAAC+B,SAAY4B,EAAaK,QAAU3D,KAAKiD,iBAEvFjD,KAAKiD,cAAc9C,IAAIqD,IACzB5C,EAAO,IAAIjB,EAAQ,EAAG,8BAA+B,CAAC+B,SAAY8B,EAAkBG,QAAU3D,KAAKiD,iBAErG,IAAQW,EAAG,CACTiB,mBAAoB7E,KAAKiD,cAAc7C,IAAIkD,GAC3CwB,kBAAmBvB,EACnBwB,wBAAyB/E,KAAKiD,cAAc7C,IAAIoD,GAChDwB,uBAAwBvB,GAG1BzD,KAAKQ,GAAGK,WADG,0CACc+C,GAAM9C,KAAMC,IACnCJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAQA+D,OAAOC,GACL,OAAWxE,IAAAA,QAAQ,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WADG,8BAHA,CACTsE,eAAgBD,IAGapE,KAAMC,IACnCJ,EAAQI,EAASC,MAAK,GACrBC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAqBAkE,OAAO9B,EAAqBC,EAAoBC,EAA0BC,EAAyBC,EAAoB,WACrH,OAAWhD,IAAAA,QAAQ,CAACC,EAASC,KACvBZ,KAAKiD,cAAc9C,IAAImD,IACzB1C,EAAO,IAAWjB,EAAC,EAAG,yBAA0B,CAAC+B,SAAY4B,EAAaK,QAAU3D,KAAKiD,iBAEvFjD,KAAKiD,cAAc9C,IAAIqD,IACzB5C,EAAO,IAAIjB,EAAQ,EAAG,8BAA+B,CAAC+B,SAAY8B,EAAkBG,QAAU3D,KAAKiD,iBAEjGjD,KAAKkD,UAAU/C,IAAIuD,IACrB9C,EAAO,IAAWjB,EAAC,EAAG,uBAAwB,CAAC+B,SAAYgC,EAAWC,QAAU3D,KAAKkD,aAEvF,IAAIU,EAAO,CACTC,WAAY7D,KAAKiD,cAAc7C,IAAIkD,GACnCQ,UAAWP,EACXQ,SAAU/D,KAAKiD,cAAc7C,IAAIoD,GACjCQ,QAASP,EACTQ,SAAUjE,KAAKkD,UAAU9C,IAAIsD,IAG/B1D,KAAKQ,GAAGK,WADG,8BACc+C,GAAM9C,KAAMC,IACnCJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,EC9OQxB,QAAQ,gBAEF2F,EASdzF,YAAYY,GALZA,KAAAA,UAMER,KAAKQ,GAAKA,CACZ,CAWA8E,UAAUC,EAAWC,EAASC,GAAsB,EAAMC,EAAyB,IACjF,OAAWhF,IAAAA,QAAQ,CAACC,EAASC,KAE3B2E,EAAYA,EAAUI,cAgBtB3F,KAAKQ,GAAGK,WAjBG,wBAiBc,CAAE,GAAEC,KAAMC,IACjCJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQA0E,OAAOC,EAAUJ,GAAsB,GACrC,OAAW/E,IAAAA,QAAQ,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAJG,wBAIc,CAAE,GAAEC,KAAMC,IACjCJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQA4E,eAAeC,EAASN,GAAsB,GAC5C,OAAW/E,IAAAA,QAAQ,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAJG,wCAIc,CAAE,GAAEC,KAAMC,IACjCJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAOA8E,gBACE,OAAO,IAAWtF,QAAC,CAACC,EAASC,KAG3BZ,KAAKQ,GAAGK,WAFG,+BAEc,IAAIC,KAAMC,IACjCJ,EAAQI,EAASC,SAChBC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA+E,QAAQC,EAAWT,GAAsB,GACvC,OAAW/E,IAAAA,QAAQ,CAACC,EAASC,KAM3BZ,KAAKQ,GAAGK,WALG,6CAKc,IAAIC,KAAMC,IACjCJ,EAAQI,EAASC,SAChBC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAiF,WAAWC,EAAcX,GAAsB,GAC7C,OAAO,IAAW/E,QAAC,CAACC,EAASC,KAM3BZ,KAAKQ,GAAGK,WALG,yCAKc,IAAIC,KAAMC,IACjCJ,EAAQI,EAASC,SAChBC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAmF,UAAUC,EAAcb,GAAsB,GAC5C,WAAkB/E,QAAC,CAACC,EAASC,KAM3BZ,KAAKQ,GAAGK,WALG,wCAKc,IAAIC,KAAMC,IACjCJ,EAAQI,EAASC,SAChBC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAWAqF,KAAKb,EAAyB,GAAIc,GAAsB,EAAMC,GAAqB,EAAMhB,GAAsB,GAC7G,OAAO,YAAY,CAAC9E,EAASC,KAQ3BZ,KAAKQ,GAAGK,WAPG,sBAOc,IAAIC,KAAMC,IACjCJ,EAAQI,EAASC,MAAK,GACrBC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAcCwF,mBACE,OAAWhG,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WADG,mCACc,CAAA,GAAIC,KAAMC,IACjCJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAyF,oBAAoBC,GAClB,OAAWlG,IAAAA,QAAQ,CAACC,EAASC,KAG3BZ,KAAKQ,GAAGK,WADG,wBADA,CAACgG,WAAYD,IAEO9F,KAAMC,IACnCJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,EC/OH,MAAOhB,EAAGR,QAAQ,kBAqChBE,YAAYY,GAAER,KA/BdQ,QAAE,EAAAR,KAQF8G,OAAiB,CACfC,QAAS,EACTC,WAAY,EACZC,SAAU,EACVC,OAAQ,QASVC,WAAqB,CACnBC,QAAS,EACTC,eAAgB,EAChBC,MAAO,EACPC,QAAS,GAOTvH,KAAKQ,GAAKA,CACZ,CASAgH,gBAAgBxF,EAAoByF,GAA6B,GAC/D,OAAO,YAAY,CAAC9G,EAASC,KAG3BZ,KAAKQ,GAAGK,WADG,uCADA,CAAEwB,IAAKL,EAAK0F,OAAQD,IAEA3G,KAAMC,OAElCE,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAUAd,IAAI4B,EAAoB8E,EAAgBa,EAAmB,IACzD,OAAWjH,IAAAA,QAAQ,CAACC,EAASC,UACK,SAAjBkG,OAAOA,IACpBlG,EAAO,IAAIjB,EAAQ,EAAG,kDAAmD,CAAC+B,SAAYoF,EAAQ1E,UAAYpC,KAAK8G,UAQjH9G,KAAKQ,GAAGK,WADG,6BALA,CACTwB,IAAOL,EACP4F,cAA8B,IAAFD,EAAgBA,EAAW,GACvDE,OAAU7H,KAAK8G,OAAOA,KAGOhG,KAAMC,OAElCE,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUA+D,OAAOjD,EAAoB8E,EAAgBgB,GACzC,WAAkBpH,QAAC,CAACC,EAASC,UACK,IAAlBZ,KAAC8G,OAAOA,IACpBlG,EAAO,IAAIjB,EAAQ,EAAG,kDAAmD,CAAC+B,SAAYoF,EAAQ1E,UAAYpC,KAAK8G,UAQjH9G,KAAKQ,GAAGK,WADG,8BALA,CACTwB,IAAOL,EACP6F,OAAU7H,KAAK8G,OAAOA,GACtBiB,YAAeD,IAGchH,KAAMC,OAElCE,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAMA8G,cACE,OAAWtH,IAAAA,QAAQ,CAACC,EAASC,KAG3BZ,KAAKQ,GAAGK,WADG,mCADA,CAAE,GAEkBC,KAAMC,OAElCE,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAEA+G,OAAOC,EAAYC,GACjB,MACA,OAAWzH,IAAAA,QAAQ,CAACC,EAASC,UACI,IAArBsH,EAAWpB,aAAiE,IAAjC9G,KAAK8G,OAAOoB,EAAWpB,QAC1ElG,EAAO,IAAIjB,EAAQ,EAAG,kDAAmD,CAAC+B,SAAYwG,EAAWpB,OAAQ1E,UAAYpC,KAAK8G,eACtF,IAArBoB,EAAWpB,aAAkE,IAA9B9G,KAAC8G,OAAOoB,EAAWpB,UACjFlD,EAAKiE,OAAS7H,KAAK8G,OAAOoB,EAAWpB,cAEd,IAAHqB,IACpBvE,EAAKwE,WAAaD,GAEpB,IAAkBE,EAAG,CAAC,KAAM,SAAU,WAAY,SAAU,mBAAoB,iBAAkB,mBAAoB,kBACjGC,EAAG,CAAC,SAAU,cACnCpI,EAAEsE,QAAQ0D,EAAY,CAACK,EAAGC,MACS,GAA9BtI,EAAEiC,QAAQkG,EAAeG,KAA4C,GAAlCtI,EAAEiC,QAAQmG,EAAmBE,GACjE5E,EAAK4E,GAAKD,GACgC,GAAlCrI,EAAEiC,QAAQmG,EAAmBE,IACrC5H,EAAO,IAAIjB,EAAQ,EAAG,qDAAsD,CAAC+B,SAAY8G,EAAGC,MAASF,EAAGnG,UAAYlC,EAAEwI,OAAOL,EAAgBC,KAC9I,GAGHtI,KAAKQ,GAAGK,WADG,8BACc+C,GAAM9C,KAAMC,SAER,MAARC,QACjBD,EAASC,MAAQ,IAEnBL,EAAQI,EAASC,MAAK,GACrBC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAkBAyH,OAAOT,GACL,IAAItE,EACJ,OAAO,IAAWlD,QAAC,CAACC,EAASC,UACI,IAAXsH,EAACpB,aAAiE,SAA5BA,OAAOoB,EAAWpB,QAC1ElG,EAAO,IAAWjB,EAAC,EAAG,kDAAmD,CAAC+B,SAAYwG,EAAWpB,OAAQ1E,UAAYpC,KAAK8G,eACtF,IAArBoB,EAAWpB,aAAkE,IAAlC9G,KAAK8G,OAAOoB,EAAWpB,UACjFlD,EAAKiE,OAAS7H,KAAK8G,OAAOoB,EAAWpB,cAEJ,IAAzBoB,EAAWf,iBAA6E,IAAzCnH,KAAKmH,WAAWe,EAAWf,YAClFvG,EAAO,MAAY,EAAG,kDAAmD,CAACc,SAAYwG,EAAWf,WAAY/E,UAAYpC,KAAKmH,mBACtF,IAAfe,EAACf,iBAA8E,IAA1CnH,KAAKmH,WAAWe,EAAWf,cACzFvD,EAAKgF,SAAW5I,KAAKmH,WAAWe,EAAWf,aAE7C,MAAqB,CAAC,KAAM,SAAU,SAAU,UAC5CmB,EAAoB,CAAC,SAAU,YACnCpI,EAAEsE,QAAQ0D,EAAY,CAACK,EAAGC,MACS,GAA9BtI,EAAEiC,QAAQkG,EAAeG,KAA4C,GAAlCtI,EAAEiC,QAAQmG,EAAmBE,GACjE5E,EAAK4E,GAAKD,GACgC,GAAlCrI,EAAEiC,QAAQmG,EAAmBE,IACrC5H,EAAO,IAAIjB,EAAQ,EAAG,qDAAsD,CAAC+B,SAAY8G,EAAGC,MAASF,EAAGnG,UAAYlC,EAAEwI,OAAOL,EAAgBC,KAC9I,GAIHtI,KAAKQ,GAAGK,WADG,8BACc+C,GAAM9C,KAAMC,SAER,MAARC,QACjBD,EAASC,MAAQ,IAEnBL,EAAQI,EAASC,QAClB,EAEL,CAEA6H,oBAAoB7G,EAAe8E,EAAgBgB,GACjD,WAAkBpH,QAAC,CAACC,EAASC,UACK,IAAtBZ,KAAK8G,OAAOA,IACpBlG,EAAO,MAAY,EAAG,kDAAmD,CAACc,SAAYoF,EAAQ1E,UAAYpC,KAAK8G,UAQjH9G,KAAKQ,GAAGK,WADG,2CALA,CACTwB,IAAOL,EACP6F,OAAU7H,KAAK8G,OAAOA,GACtBiB,YAAeD,IAGchH,KAAMC,MAGvC,EACF,CAEA+H,WAAWC,GACT,OAAO,IAAWrI,QAAC,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WADG,gCAHA,CACTmI,QAAWD,IAGkBjI,KAAMC,MAGvC,EACF,EChPF,QAAUrB,QAAQ,UAELuJ,MAAAA,EA+CXrJ,YAAYY,QA3CZA,QAAE,EAAAR,KAKFkJ,YAAsB,CACpBC,KAAQ,EACRC,QAAW,EACXC,UAAa,EACbC,WAAc,EACdC,SAAY,EACZC,OAAU,EACVC,IAAO,EACPC,WAAc,EACdC,cAAiB,EACjBC,WAAc,EACdC,KAAQ,GACRC,gBAAmB,GACnBC,iBAAoB,GACpBC,YAAe,GACfC,SAAY,GACZC,aAAgB,GAChBC,aAAgB,GAChBC,WAAc,GACdhD,QAAW,GACXiD,SAAY,GACZC,aAAgB,GAChBC,UAAa,GACbC,WAAc,GACdC,uBAA0B,GAC1BC,UAAa,GACbC,gBAAmB,GACnBC,aAAgB,GAChBC,YAAe,GACfC,iBAAoB,GACpBC,aAAgB,GAChBC,aAAgB,GAChBC,SAAY,IAOZjL,KAAKQ,GAAKA,CACZ,CASA0K,MAAMC,GACJ,OAAO,IAAWzK,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kCAHR,CACTuK,gBAAmBD,IAEuCrK,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUAmK,QAAQC,EAAkB3H,GACxB,OAAO,IAAWjD,QAAC,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CACTb,SAAUuI,GAEZ1H,EAAO1D,EAAEqL,MAAM3H,EAAMD,GACrB3D,KAAKQ,GAAGK,WAAW,qBAAsB+C,GAAM9C,KAAKgB,IAClDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAYAsK,SAASC,EAAoBC,EAAiCC,EAAsB9F,GAClF,OAAO,IAAWnF,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAIH,KAAKkJ,YAAauC,QAEO,IAAFC,GAAkC,MAAjBA,GAAyBA,EAAgBE,OAAO,SAA2B,IAAFD,QAAmC,IAAF9F,IAC1JjF,EAAO,MAAY,EAAG,qEAFtBA,EAAO,IAAWjB,EAAC,EAAG,sDAAuD,CAAC+B,SAAY+J,EAAYrJ,UAAYpC,KAAKkJ,eAIzH,IAAItF,EAAO,CAAE,IACO,QACI,IAAF+H,QAAmC,IAAF9F,GACrDgG,EAAgB,mBACQ,IAAdF,GAA0C,MAAbA,GACrCzL,EAAEkD,IAAIQ,EAAM,cAAe+H,QAER,IAAX9F,GAAoC,MAAVA,GAClC3F,EAAEkD,IAAIQ,EAAM,WAAYiC,KAIxBgG,EADa,QAAZJ,EACe,gBAEAA,EAAa,aAEH,IAAlBC,GAAkD,MAAjBA,GACzCxL,EAAEkD,IAAIQ,EAAM,kBAAmB8H,IAGnC1L,KAAKQ,GAAGK,WAAW,cAAcgL,EAAejI,GAAM9C,KAAKgB,IACzDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA4K,cAAcL,GACZ,WAAkB/K,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAIH,KAAKkJ,YAAauC,IAC1B7K,EAAO,IAAWjB,EAAC,EAAG,sDAAuD,CAAC+B,SAAY+J,EAAYrJ,UAAYpC,KAAKkJ,eAEzH,IAAItF,EAAO,CACT6H,WAAYvL,EAAEE,IAAIJ,KAAKkJ,YAAauC,IAEtCzL,KAAKQ,GAAGK,WAAW,2BAA4B+C,GAAM9C,KAAKgB,IACxDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQA6K,QACE,OAAO,IAAWrL,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,mBADR,IACkCC,KAAKgB,IAChDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASA8K,eAAeC,GACb,OAAO,IAAWvL,QAAC,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,wBAJR,CACTqL,QAAQ,EACRC,UAAWF,IAEqCnL,KAAKgB,IACrDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CASAkL,gBAAgBH,GACd,OAAO,YAAY,CAACtL,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,wBAJR,CACTqL,QAAQ,EACRC,UAAWF,IAEqCnL,KAAKgB,IACrDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAUAmL,cAAcf,EAAkBK,GAC9B,OAAWjL,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTb,SAAUuI,QAEY,IAAFK,GACpBzL,EAAEkD,IAAIQ,EAAM,cAAe+H,GAE7B3L,KAAKQ,GAAGK,WAAW,wBAAyB+C,GAAM9C,KAAKgB,IACrDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAUAoL,eAAeL,EAA0BN,GACvC,OAAWjL,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTuI,UAAWF,QAEW,IAAFN,GACpBzL,EAAEkD,IAAIQ,EAAM,cAAe+H,GAE7B3L,KAAKQ,GAAGK,WAAW,yBAA0B+C,GAAM9C,KAAKgB,IACtDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAqL,mBAAmBN,GACjB,OAAO,IAAWvL,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,6BAHR,CACTsL,UAAWF,IAE0CnL,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAsL,kBAAkBP,GAChB,WAAkBvL,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,+BAHR,CACTsL,UAAWF,IAE4CnL,KAAKgB,IAC5DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAWAuL,eAAeC,EAAmB/I,EAAkB2H,EAAmB,GACrE,OAAO,YAAY,CAAC3K,EAASC,KACvBV,EAAEC,IAAIH,KAAKkJ,YAAawD,IAC1B9L,EAAO,MAAY,EAAG,sDAAuD,CAACc,SAAYgL,EAAWtK,UAAYpC,KAAKkJ,eAExH,IAAQtF,EAAG,CACT+I,UAAWzM,EAAEE,IAAIJ,KAAKkJ,YAAawD,GACnC3J,SAAUuI,GAEZ1H,EAAO1D,EAAEqL,MAAM3H,EAAMD,GACrB3D,KAAKQ,GAAGK,WAAW,4BAA6B+C,GAAM9C,KAAKgB,IACzDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,EC/UQxB,QAAQ,UAELkN,MAAAA,EASXhN,YAAYY,GAAER,KALdQ,QAME,EAAAR,KAAKQ,GAAKA,CACZ,CASAqM,aAAaC,GACX,OAAWpM,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,uCADRiM,GACsDhM,KAAKgB,IACpEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,EC9BF,MAAOhB,EAAGR,QAAQ,gBAMGqN,EAmBnBnN,YAAYY,EAAIY,GAYd,GAZ0BpB,KAf5BQ,QAAE,EAAAR,KAKFiD,mBAKA+J,EAAAA,KAAAA,yBAME,EAAAhN,KAAKQ,GAAKA,EACVR,KAAKiD,cAAgB,IAAIE,EACzBnD,KAAKiD,cAAcG,IAAI,UAAW,GAClCpD,KAAKiD,cAAcG,IAAI,UAAW,GAClCpD,KAAKiD,cAAcG,IAAI,YAAa,GACpCpD,KAAKiD,cAAcG,IAAI,SAAU,GACjCpD,KAAKiD,cAAcG,IAAI,WAAY,GACnCpD,KAAKiD,cAAcG,IAAI,eAAgB,GACvCpD,KAAKiD,cAAcG,IAAI,UAAW,GAClCpD,KAAKiD,cAAcG,IAAI,WAAY,IAE/BpD,KAAKiD,cAAc9C,IAAIiB,GACzB,MAAM,IAAWzB,EAAC,EAAG,2BAA4B,CAAC+B,SAAYN,EAAcuC,QAAU3D,KAAKiD,gBAE7FjD,KAAKgN,oBAAsB5L,CAC7B,CASAiC,IAAI4J,EAAaC,GACf,WAAkBxM,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACThC,aAAc5B,KAAKiD,cAAc7C,IAAIJ,KAAKgN,qBAC1CG,YAAaF,EACbF,SAAUG,GAEZlN,KAAKQ,GAAGK,WAAW,kBAAmB+C,GAAM9C,KAAMC,IAChDJ,EAAQI,EAASC,MAAK,GACrBC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAyH,OAAOyE,EAAYF,GACjB,OAAWxM,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CACThC,aAAc5B,KAAKiD,cAAc7C,IAAIJ,KAAKgN,qBAC1CK,UAAWD,EACXL,SAAUG,GAEZlN,KAAKQ,GAAGK,WAAW,qBAAsB+C,GAAM9C,KAAMC,IACnDJ,EAAQI,EAASC,MACnB,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAd,IAAI+D,GACF,OAAWzD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,QAAiB,IAAFuD,GAAwB,MAAPA,EAAa,CAC3C,IAAIP,EAAO,CACTQ,aAAcD,EACdvC,aAAc5B,KAAKiD,cAAc7C,IAAIJ,KAAKgN,sBAE5ChN,KAAKQ,GAAGK,WAAW,6BAA8B+C,GAAM9C,KAAMC,IAEzDJ,EADc,GAAbwD,EAAKyH,OACE7K,EAASC,MAAMmD,EAAK,IAEpBpD,EAASC,MAClB,EAEJ,GAEL,CASAsM,cAAcC,EAAqBC,GACjC,OAAO,IAAW9M,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CAAA,EACkB,WAA1B5D,KAAKgN,qBACN9M,EAAEkD,IAAIQ,EAAM,aAAc2J,QAEP,IAAXC,GAAqD,WAA1BxN,KAAKgN,qBAA4D,aAA1BhN,KAAKgN,qBAC/E9M,EAAEkD,IAAIQ,EAAM,WAAY4J,GAE1BtN,EAAEkD,IAAIQ,EAAM,eAAgB5D,KAAKiD,cAAc7C,IAAIJ,KAAKgN,sBACxDhN,KAAKQ,GAAGK,WAAW,iCAAkC+C,GAAM9C,KAAMC,IAC/DJ,EAAQI,EAASC,MAAK,GACrBC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,ECvIF,MAAMhB,EAAIR,QAAQ,UAIL0J,MAAAA,EAmBXxJ,YAAYY,GAAER,KAfdQ,QAAE,EAAAR,KAKFyN,WAKAP,EAAAA,KAAAA,oBA8FAQ,UAAaxH,GACJ,YAAY,CAACvF,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kEAHR,CACT8M,iBAAkBzH,IAEwEpF,KAAKgB,IAC/FnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,EACF,GAlGAlB,KAAKQ,GAAKA,EACVR,KAAKyN,MAAQ,IAAIb,EAAapM,GAC9BR,KAAKkN,QAAU,IAAYH,EAACvM,EAAI,UAClC,CASAoN,OAAOC,GACL,WAAkBnN,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAI0N,EAAS,cAGjB7N,KAAKQ,GAAGK,WAAW,4BAA6BgN,GAAS/M,KAAKgB,IAC5DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,GALVN,EAAO,IAAIjB,EAAQ,EAAG,+BAAgC,CAAC+B,SAAYmM,IAOpE,EAEL,CASAlF,OAAOkF,GACL,WAAkBnN,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAI0N,EAAS,aAGjB7N,KAAKQ,GAAGK,WAAW,4BAA6BgN,GAAS/M,KAAKgB,IAC5DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,GANAN,EAAO,IAAIjB,EAAQ,EAAG,8BAA+B,CAAC+B,SAAYmM,IAOnE,EAEL,CAaAC,KAAK5H,EAAmB6H,EAAWC,EAAWC,EAA6DC,GACzG,OAAO,YAAY,CAACvN,EAASC,KACvBV,EAAEC,IAAI8N,EAAY,SAAY/N,EAAEC,IAAI8N,EAAY,QAElDrN,EAAO,IAAIjB,EAAQ,EAAG,mEAAoE,CAACsO,WAAcA,KAE3G,IAAaE,EAAG,CACdC,UAAWlI,EACXmI,EAAGN,EACHO,EAAGN,QAES,IAAJE,GACRhO,EAAEkD,IAAI+K,EAAW,IAAKD,GAExB,MAAWhO,EAAEqL,MAAM4C,EAAWF,GAC9BjO,KAAKQ,GAAGK,WAAW,0BAA2B+C,GAAM9C,KAAKgB,IACvDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CA8BAqN,cAAcrI,EAAmBqH,GAC/B,OAAO,YAAY,CAAC5M,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,mCAJR,CACTuN,UAAWlI,EACXsI,WAAYjB,IAE+CzM,KAAKgB,IAChEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAuN,QAAQvI,GACN,OAAO,YAAY,CAACvF,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,0BAHR,CACTuN,UAAWlI,IAEuCpF,KAAKgB,IACvDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAwN,SAASC,GACP,OAAO,YAAY,CAAChO,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,2BAHR,CACT+N,WAAYD,IAEuC7N,KAAKgB,IACxDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CASA2N,YAAY3I,GACV,WAAkBxF,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,8BADR,CAACuN,UAAWlI,IACiCpF,KAAKgB,IAC3DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASA4N,gBAAgBH,GACd,OAAO,YAAY,CAAChO,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kCAHR,CACT+N,WAAYD,IAE8C7N,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUA6N,0BAA0BJ,EAA2BK,GACnD,OAAWtO,IAAAA,QAAQ,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,+CAJR,CACT+N,WAAYD,EACZM,WAAYD,IAE2DlO,KAAKgB,IAC5EnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAWCgO,OAAOP,EAA2BQ,EAAuBC,GACvD,WAAkB1O,QAAC,CAACC,EAASC,KAE3B,MAAqF,CAAEgO,WAAYD,QACzE,IAAHQ,GACrBjP,EAAEkD,IAAIQ,EAAM,eAAgBuL,QACH,IAAHC,GACtBlP,EAAEkD,IAAIQ,EAAM,gBAAiBwL,GAC/BpP,KAAKQ,GAAGK,WAAW,4BAA6B+C,GAAM9C,KAAKgB,IACzDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASCmO,SAASV,GACP,OAAWjO,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,8BAHR,CACT+N,WAAYD,IAE0C7N,KAAKgB,IAC3DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAoO,MAAMX,GACJ,OAAO,YAAY,CAAChO,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,2BAHR,CACT+N,WAAYD,IAEuC7N,KAAKgB,IACrDA,EAAE+F,OAAO,EACVjH,EAAO,IAAIjB,EAAQ,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASCsO,OAAOb,GACL,OAAWjO,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,4BAHR,CACT+N,WAAYD,IAEwC7N,KAAKgB,IACzDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASF+D,OAAO0J,GACL,OAAO,YAAY,CAAChO,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,4BAHR,CACT+N,WAAYD,IAEwC7N,KAAKgB,IACtDA,EAAE+F,OAAO,EACVjH,EAAO,MAAY,EAAGkB,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA+G,OAAO6E,GACL,OAAWpM,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,4BADRiM,GAC2ChM,KAAKgB,IACzDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAuO,aAAavJ,GACX,OAAWxF,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kCAHR,CACTuN,UAAWlI,IAE+CpF,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAaAwO,uBAAuB5C,EAAoB6C,EAAqBC,EAAuBnD,GAA0B,EAAMoD,GAAsB,GAC3I,OAAO,YAAY,CAAClP,EAASC,KAC3B,MAAWkM,EACR5M,EAAE4P,SAASH,KACZzP,EAAEkD,IAAIQ,EAAM,aAAc+L,GAC1BzP,EAAEkD,IAAIQ,EAAM,iBAAkB6I,GAC9BvM,EAAEkD,IAAIQ,EAAM,aAAciM,IAI5B7P,KAAKQ,GAAGK,WAAW,4CAA6C+C,GAAM9C,KAAKgB,IACzEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAYD6O,gBAAgBlK,EAAkBmK,GAAoB,EAAOC,EAAsBC,GAA4B,GAC7G,OAAO,YAAY,CAACvP,EAASC,KAC3B,IAAQgD,EAAG,CACTuM,SAAUtK,EACVuK,iBAAkBF,EAClBG,SAAUL,GAET,MAAOC,GAAsD/P,EAAEC,IAAI8P,EAAa,qBACjF/P,EAAEkD,IAAIQ,EAAM,kBAAmB1D,EAAEE,IAAI6P,EAAa,oBACR,MAAvC/P,EAAEE,IAAI6P,EAAa,oBAA4B/P,EAAEC,IAAI8P,EAAa,yBACnE/P,EAAEkD,IAAIQ,EAAM,uBAAwB1D,EAAEE,IAAI6P,EAAa,0BAG3DjQ,KAAKQ,GAAGK,WAAW,kCAAmC+C,GAAM9C,KAAKgB,IAG/DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUAoP,YAAYC,GAAyB,EAAOC,GAA+B,EAAMC,GAC/E,OAAO,YAAY,CAAC9P,EAASC,KAC3B,MAAW,CACT8P,cAAeH,EACfI,oBAAqBH,QAEA,OACrBtQ,EAAEkD,IAAIQ,EAAM,YAAa6M,GAE3BzQ,KAAKQ,GAAGK,WAAW,8BAA+B+C,GAAM9C,KAAKgB,IAC3DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA0P,sBAAsBC,GACpB,OAAWnQ,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,wCAHR,CACTiQ,SAAUD,IAEsD/P,KAAKgB,IACrEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASA6P,cAAcxD,GACZ,OAAO,YAAY,CAAC5M,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,gCAHR,CACTmQ,YAAazD,IAE2CzM,KAAKgB,IAC7DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASA+P,uBAAuB1D,GACrB,OAAW7M,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,0CAHR,CACTmQ,YAAazD,IAEqDzM,KAAKgB,IACvEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAgQ,cAAc3D,GACZ,WAAkB7M,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,wBAHR,CACTmQ,YAAazD,IAEmCzM,KAAKgB,IACrDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAiQ,eAAe5D,GACb,OAAO,YAAY,CAAC5M,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,sCAHR,CACT2N,WAAYjB,IAEkDzM,KAAKgB,IACnEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAkQ,YAAYX,GACV,OAAW/P,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,mCAHR,CACTwQ,UAAWZ,IAEgD3P,KAAKgB,IAChEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUAoQ,iBAAiBC,EAAkB1L,GACjC,OAAO,YAAY,CAAClF,EAASC,KAE3B,IAAQgD,EAAG,CACTuM,SAAUtK,GAER3F,EAAEsR,SAAS,CAAC,aAAc,YAAaD,GAGzCvR,KAAKQ,GAAGK,iCAAiC0Q,IAAY3N,GAAM9C,KAAKgB,IAC9DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,KALTN,EAAO,MAAY,EAAG,kDAAmD,CAACc,SAAY6P,IAOvF,EAEL,CASAE,eAAe5L,GAEb,OAAW7F,KAACsR,iBAAiB,aAAczL,EAC7C,CASA6L,aAAa7L,GAEX,OAAO7F,KAAKsR,iBAAiB,WAAYzL,EAC3C,CAQA8L,cACE,OAAWjR,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,mCAAoC,IAAIC,KAAKgB,IAC9DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAWC0Q,iBAAiBC,EAA4BC,EAA4BC,GACvE,OAAO,YAAY,CAACpR,EAASC,KAC3B,IAAQgD,EAAG,CACToN,YAAa,WAEkB,IAAvBc,GACR5R,EAAEkD,IAAIQ,EAAM,sBAAuBkO,QAEJ,IAAJC,GAC3B7R,EAAEkD,IAAIQ,EAAM,sBAAuBmO,GAGrC/R,KAAKQ,GAAGK,WAAW,mCAAoC+C,GAAM9C,KAAKgB,IAChEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAYA8Q,+BAA+BlF,EAAoB6C,EAAqBC,EAAuBnD,GAA0B,GACvH,WAAkB/L,QAAC,CAACC,EAASC,KAC3B,IAAIgD,EAAOkJ,EACR5M,EAAE4P,SAASH,KACZzP,EAAEkD,IAAIQ,EAAM,aAAc+L,GAC1BzP,EAAEkD,IAAIQ,EAAM,iBAAkB6I,IAIhCzM,KAAKQ,GAAGK,WAAW,oDAAqD+C,GAAM9C,KAAKgB,IACjFnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASC+Q,eAAeJ,EAA4BC,EAA4BC,GACrE,WAAkBrR,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,gCAHR,CACTmQ,YAAa,OAE2ClQ,KAAKgB,IAC7DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAgR,gBAAgBpF,GACd,OAAWpM,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,oCADRiM,GACmDhM,KAAKgB,IACjEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAaA2L,aAAasF,EAA4BC,GAAqB,EAAOC,GAA6B,EAAOP,EAA4BC,GACnI,WAAkBrR,QAAC,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CACT0O,UAAWF,EACXG,kBAAmBF,QAEI,IAAfF,GACRjS,EAAEkD,IAAIQ,EAAM,cAAeuO,QAEI,IAAJL,GAC3B5R,EAAEkD,IAAIQ,EAAM,sBAAuBkO,QAEJ,IAAvBC,GACR7R,EAAEkD,IAAIQ,EAAM,sBAAuBmO,GAErC/R,KAAKQ,GAAGK,WAAW,uCAAwC+C,GAAM9C,KAAKgB,IACpEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUAsR,eAAeX,EAA4BY,GAA2B,GACpE,WAAkB/R,QAAC,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,gDAJR,CACTmQ,YAAaa,EACba,gBAAiBD,IAEuD3R,KAAKgB,IAC7EnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,ECnzBJ,MAAOhB,EAAGR,QAAQ,gBAEUiT,EAS1B/S,YAAYY,GAAER,KALdQ,QAAE,EAMAR,KAAKQ,GAAKA,CACZ,CAWAqM,aAAa+F,EAA6BR,EAAqBzO,GAC7D,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAA2K,QACtJ,IAAfgP,IACRhP,EAAKiP,YAAcD,GAErBhP,EAAK0O,eAAgC,OAAcF,EAC9B,iBAAHzO,GAChBzD,EAAE4S,MAAMnP,EAAS,CAAC4E,EAAGC,KACnB5E,EAAK4E,GAAKD,CACZ,GAEFvI,KAAKQ,GAAGK,WAAW,mCAAoC+C,GAAM9C,KAAKgB,IAChEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,EC1CF,MAAMhB,EAAIR,QAAQ,gBAGK4J,EAcrB1J,YAAYY,GAAER,KAVdQ,QAKAiN,EAAAA,KAAAA,aAMEzN,KAAKQ,GAAKA,EACVR,KAAKyN,MAAQ,MAAoBjN,EACnC,CASAoN,OAAOmF,GACL,WAAkBrS,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAI4S,EAAW,eAAkB7S,EAAEC,IAAI4S,EAAW,kBAGtD/S,KAAKQ,GAAGK,WAAW,wBAAyBkS,GAAWjS,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,GANAN,EAAO,IAAIjB,EAAQ,EAAG,6DAA8D,CAAC+B,SAAYqR,IAOlG,EAEL,CASCC,mBAAmBD,GAClB,OAAWrS,IAAAA,QAAQ,CAACC,EAASC,KACxBV,EAAEC,IAAI4S,EAAW,eAAkB7S,EAAEC,IAAI4S,EAAW,kBAGtD/S,KAAKQ,GAAGK,WAAW,oCAAqCkS,GAAWjS,KAAKgB,IACtEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,KALTN,EAAO,IAAIjB,EAAQ,EAAG,6DAA8D,CAAC+B,SAAYqR,IAOlG,EAEJ,CASCE,iBAAiBF,GAChB,OAAWrS,IAAAA,QAAQ,CAACC,EAASC,KAExBV,EAAEC,IAAI4S,EAAW,eAAkB7S,EAAEC,IAAI4S,EAAW,mBAAsB7S,EAAEC,IAAI4S,EAAW,gBAG7F/S,KAAKQ,GAAGK,WAAW,kCAAmCkS,GAAWjS,KAAKgB,IACpEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,GALVN,EAAO,IAAWjB,EAAC,EAAG,6DAA8D,CAAC+B,SAAYqR,IAOlG,EAEJ,CASCG,yBAAyBH,GACxB,OAAO,YAAY,CAACpS,EAASC,KACxBV,EAAEC,IAAI4S,EAAW,eAAkB7S,EAAEC,IAAI4S,EAAW,mBAAsB7S,EAAEC,IAAI4S,EAAW,aAG7F/S,KAAKQ,GAAGK,WAAW,0CAA2CkS,GAAWjS,KAAKgB,IAC5EnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,GANAN,EAAO,MAAY,EAAG,6DAA8D,CAACc,SAAYqR,IAOlG,EAEJ,CASCI,oBAAoBJ,GACnB,WAAkBrS,QAAC,CAACC,EAASC,KAIxBV,EAAEC,IAAI4S,EAAW,eAAkB7S,EAAEC,IAAI4S,EAAW,mBAAsB7S,EAAEC,IAAI4S,EAAW,gBAG7F/S,KAAKQ,GAAGK,WAAW,qCAAsCkS,GAAWjS,KAAKgB,IACvEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,GALVN,EAAO,IAAWjB,EAAC,EAAG,6DAA8D,CAAC+B,SAAYqR,IAOlG,EAEJ,CASApK,OAAOoK,GACL,OAAO,YAAY,CAACpS,EAASC,QACTF,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAI4S,EAAW,gBAGnB/S,KAAKQ,GAAGK,WAAW,wBAAyBkS,GAAWjS,KAAKgB,IAC1DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,GANAN,EAAO,IAAWjB,EAAC,EAAG,iCAAkC,CAAC+B,SAAYqR,IAOtE,GAGP,CASAtE,QAAQrI,GACN,OAAW1F,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,sBAHR,CACTuS,aAAchN,IAEgCtF,KAAKgB,IACnDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAwN,SAAS2E,GACP,WAAkB3S,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,uBAHR,CACTyS,cAAeD,IAEgCvS,KAAKgB,IACpDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAWCgO,OAAOmE,EAA8BlE,EAAuBC,GAC1D,OAAW1O,IAAAA,QAAQ,CAACC,EAASC,KAE3B,IAAIgD,EAAoF,CAAE0P,cAAeD,QAC/E,QACxBzP,EAAK2P,aAAepE,QAEK,IAAHC,IACtBxL,EAAK4P,cAAgBpE,GAEvBpP,KAAKQ,GAAGK,WAAW,wBAAyB+C,GAAM9C,KAAKgB,IACrDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASCmO,SAASgE,GACP,WAAkB3S,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,0BAHR,CACTyS,cAAeD,IAEmCvS,KAAKgB,IACvDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAoO,MAAM+D,GACJ,OAAW3S,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,uBAHR,CACTyS,cAAeD,IAEgCvS,KAAKgB,IACpDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASDsO,OAAO6D,GACL,WAAkB3S,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,wBAHR,CACTyS,cAAeD,IAEiCvS,KAAKgB,IACrDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASA+D,OAAOoO,GACL,WAAkB3S,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,wBAHR,CACTyS,cAAeD,IAEiCvS,KAAKgB,IACrDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASD+G,OAAO6E,GACL,OAAO,YAAY,CAACnM,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,wBADRiM,GACuChM,KAAKgB,IACrDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAuO,aAAarJ,GACX,OAAO,YAAY,CAACzF,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kCAHR,CACTuS,aAAchN,IAE4CtF,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAuS,WACE,WAAkB/S,QAAC,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,0BAA2B,CAAA,GAAIC,KAAKgB,IACrDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUAwS,UAAUC,GAAoC,EAAOlD,GACnD,WAAkB/P,QAAC,CAACC,EAASC,KAC3B,IAAIgD,EAAwE,GACzE+P,IACD/P,EAAKgQ,0BAA2B,QAEX,IAAHnD,IAClB7M,EAAKyN,UAAYZ,GAEnBzQ,KAAKQ,GAAGK,WAAW,2BAA4B+C,GAAM9C,KAAKgB,IACxDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAcA2S,aAAaC,EAAoE1N,EAAsB2N,GAAoB,EAAMC,EAAsD,CAAE,GACxL,OAAWtT,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAAsI,CACpIwS,aAAchN,GAEblG,EAAEC,IAAI2T,EAAQ,eAAiB5T,EAAEC,IAAI2T,EAAQ,cAC9ClQ,EAAKiD,WAAaiN,EAAOjN,WACzBjD,EAAKqQ,UAAYH,EAAOG,WAChB/T,EAAEC,IAAI2T,EAAQ,YACtBlQ,EAAKsQ,OAASJ,EAAOI,QAIpBhU,EAAEC,IAAI6T,EAAU,iBACjBpQ,EAAKuQ,YAAcH,EAASG,aAE3BjU,EAAEC,IAAI6T,EAAU,cACjBpQ,EAAKwQ,SAAWJ,EAASI,UAE3BpU,KAAKQ,GAAGK,WAAW,2BAA4B+C,GAAM9C,KAAKgB,IACxDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IAOPN,EAAOM,EAAC,EAEZ,EACD,CASAmT,WAAWC,GACT,OAAO,YAAY,CAAC3T,EAASC,KAC3B,IAAQgD,EAA2D,GAC5C,GAApB0Q,EAAY1I,OACbhI,EAAKwP,aAAekB,EAAY,GAEhC1Q,EAAK0P,cAAgBgB,EAEvBtU,KAAKQ,GAAGK,WAAW,yBAA0B+C,GAAM9C,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA2N,YAAYzI,GACV,WAAkB1F,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,0BADR,CAACuS,aAAchN,IAC0BtF,KAAKgB,IACvDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAaAwO,uBAAuB5C,EAAoB6C,EAAqBC,EAAuBnD,GAA0B,EAAMoD,GAAsB,GAC3I,WAAkBnP,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAGkJ,EACR5M,EAAE4P,SAASH,KACZzP,EAAEkD,IAAIQ,EAAM,aAAc+L,GAC1BzP,EAAEkD,IAAIQ,EAAM,iBAAkB6I,GAC9BvM,EAAEkD,IAAIQ,EAAM,aAAciM,IAI5B7P,KAAKQ,GAAGK,WAAW,wCAAyC+C,GAAM9C,KAAKgB,IACrEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAqT,eACE,WAAkB7T,QAAC,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,2BAA4B,CAAA,GAAIC,KAAKgB,IACtDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAsT,oBACE,OAAW9T,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,gCAAiC,CAAA,GAAIC,KAAKgB,IAC3DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAuT,gBACE,OAAW/T,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,4BAA6B,CAAA,GAAIC,KAAKgB,IACvDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAwT,eACE,OAAO,YAAY,CAAC/T,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,2BAA4B,IAAIC,KAAKgB,IACtDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAWAoQ,iBAAiBC,EAAkBoC,GAAoC,EAAOlD,GAC5E,OAAO,YAAY,CAAC9P,EAASC,KAC3B,MAAW,CACTgT,yBAA0BD,QAEN,IAAZlD,GAAsC,MAAXA,GACnCvQ,EAAEkD,IAAIQ,EAAM,YAAa6M,GAEd,aAAVc,EACD3Q,EAAO,IAAIjB,EAAQ,EAAG,gCAAiC,CAAC+B,SAAY6P,KAEpEvR,KAAKQ,GAAGK,6BAA6B0Q,IAAY3N,GAAM9C,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACD,EAEL,CAUAwQ,aAAaiC,GAAoC,EAAOlD,GACtD,YAAYa,iBAAiB,YAAaqC,EAA0BlD,EACtE,CAaA3C,KAAK1H,EAAsB2H,EAAWC,EAAWC,EAA6DC,GAC5G,OAAO,YAAY,CAACvN,EAASC,KACvBV,EAAEC,IAAI8N,EAAY,SAAY/N,EAAEC,IAAI8N,EAAY,QAElDrN,EAAO,MAAY,EAAG,mEAAoE,CAACqN,WAAcA,KAE3G,IAAa0G,EAAG,CACdvB,aAAchN,EACdiI,EAAGN,EACHO,EAAGN,QAEU,IAALE,GACRhO,EAAEkD,IAAIuR,EAAW,IAAKzG,GAExB,IAAItK,EAAO1D,EAAEqL,MAAMoJ,EAAW1G,GAC9BjO,KAAKQ,GAAGK,WAAW,sBAAuB+C,GAAM9C,KAAKgB,IACnDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAeA2L,aAAa+F,EAA6BR,EAAqBzO,GAC7D,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAAIgD,EAA2K,QACtJ,QACvBA,EAAKiP,YAAcD,GAErBhP,EAAK0O,eAAgC,IAAbF,GAA2BA,EAC9B,oBACnBlS,EAAE4S,MAAMnP,EAAS,CAAC4E,EAAGC,KACnB5E,EAAK4E,GAAKD,CAAAA,GAGdvI,KAAKQ,GAAGK,WAAW,mCAAoC+C,GAAM9C,KAAKgB,IAChEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAUA0T,kBAAkBC,EAAgClR,GAChD,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CACTkR,gBAAiBD,GAEE,oBACnB3U,EAAE4S,MAAMnP,EAAS,CAAC4E,EAAGC,KACnB5E,EAAK4E,GAAKD,IAGdvI,KAAKQ,GAAGK,WAAW,+BAAgC+C,GAAM9C,KAAKgB,IAC5DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CASC6T,uBAAuBF,GACrB,OAAWnU,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,qCAHR,CACTiU,gBAAiBD,IAE4C/T,KAAKgB,IAClEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASD8T,MAAMH,GACJ,WAAkBnU,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,4BAHR,CACTiU,gBAAiBD,IAEmC/T,KAAKgB,IACzDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASC+T,eAAeJ,GACb,OAAO,YAAY,CAAClU,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,4CAHR,CACTiU,gBAAiBD,IAEmD/T,KAAKgB,IACzEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CA0BAgU,kBAAkBC,GAChB,OAAWzU,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,8CAHR,CACTuU,cAAeD,IAEuDrU,KAAKgB,IAC3EnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAmU,mBAAmBC,GACjB,WAAkB5U,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,+CAHR,CACT0U,aAAcD,IAEyDxU,KAAKgB,OAE3Eb,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAsU,kBAAkBF,GAChB,OAAO,YAAY,CAAC3U,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,2CAHR,CACT0U,aAAcD,IAEqDxU,KAAKgB,IACxEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAuU,eAAepC,GACb,OAAW3S,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,wCAHR,CACTyS,cAAeD,IAEiDvS,KAAKgB,IACrEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,ECh1BOxB,QAAQ,UAELgW,MAAAA,EASX9V,YAAYY,GALZA,KAAAA,QAME,EAAAR,KAAKQ,GAAKA,CACZ,CAQAmV,kBACE,OAAO,IAAWjV,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,oBADR,CAAE,GACiCC,KAAKgB,IACjDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQA0U,eAAeC,GACb,OAAO,IAAWnV,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,2BADR,CAACiV,aAAcD,IAC2B/U,KAAKgB,IACxDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAQA2L,aAAajG,EAAmBmP,GAAwB,EAAMC,GAA4B,GACxF,OAAWtV,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,2BADR,CAACgG,WAAYD,EAAYqP,gBAAiBF,EAAiBG,oBAAqBF,IACtClV,KAAKgB,IACxDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAiV,eAAeC,GAEb,OAAW1V,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,2BADRuV,GAC0CtV,KAAKgB,IACxDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAmV,uBAAuBC,GACrB,OAAO,IAAW5V,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,2BADR,CAAC0V,cAAeD,IAC0BxV,KAAKgB,IACxDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CASAsV,oBAAoBF,GAClB,OAAW5V,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,yCADR,CAAC0V,cAAeD,IACwCxV,KAAKgB,IACtEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAuV,gBAAgBH,GACd,OAAW5V,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,sCADR,CAAC0V,cAAeD,IACqCxV,KAAKgB,IACnEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CASAwV,qBAAqBC,GACnB,OAAWjW,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,mCADR,CAAC+V,aAAcD,IACmC7V,KAAKgB,IAChEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASA2V,iBAAiBF,GACf,OAAWjW,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,+BADR,CAAC+V,aAAcD,IAC+B7V,KAAKgB,IAC5DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CASA4V,oBAAoBH,GAClB,OAAO,YAAY,CAAChW,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,kCADR,CAAC+V,aAAcD,IACkC7V,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASA6V,0BAA0BJ,GACxB,OAAWjW,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,+CADR,CAACmW,oBAAqBL,IACwC7V,KAAKgB,IAC5EnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASA+V,iBAAiBN,GACf,OAAO,IAAWjW,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,gCADR,CAAC+V,aAAcD,IACgC7V,KAAKgB,IAC7DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAgW,8BAA8BP,GAC5B,WAAkBjW,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,qCADR,CAAC+V,aAAcD,IACqC7V,KAAKgB,IAClEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,ECrPF,QAAUxB,QAAQ,gBAII2J,EAmBpBzJ,YAAYY,GAAER,KAfdQ,QAAE,EAAAR,KAKFyN,WAKAP,EAAAA,KAAAA,aAME,EAAAlN,KAAKQ,GAAKA,EACVR,KAAKyN,MAAQ,IAAIiI,EAAelV,GAChCR,KAAKkN,QAAU,IAAYH,EAACvM,EAAI,YAClC,CAWAoN,OAAOuJ,EAAiB9D,EAA+B1E,GACrD,OAAO,IAAWjO,QAAC,CAACC,EAASC,KAC3B,GAAIV,EAAEC,IAAIgX,EAAS,iBAAoBjX,EAAEC,IAAIgX,EAAS,cAE/C,CACL,IAAIvT,EAAOuT,OACgB,IAAJ9D,GAAoC,MAAjBA,GAA0BnT,EAAEC,IAAIyD,EAAM,kBAC9E1D,EAAEkD,IAAIQ,EAAM,gBAAiByP,QAEP,IAAJ1E,GAAiC,MAAdA,GAAuBzO,EAAEC,IAAIyD,EAAM,eACxE1D,EAAEkD,IAAIQ,EAAM,aAAc+K,GAE5B3O,KAAKQ,GAAGK,WAAW,uBAAwB+C,GAAM9C,KAAKgB,IACpDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEX,MAdCN,EAAO,IAAWjB,EAAC,EAAG,8CAA+C,CAAC+B,SAAYyV,IAcnF,EAEL,CAUAlE,iBAAiBkE,EAAiBC,EAA6BC,GAAa,GAC1E,OAAO,IAAW3W,QAAC,CAACC,EAASC,KAC3B,GAAIV,EAAEC,IAAIgX,EAAS,iBAAoBjX,EAAEC,IAAIgX,EAAS,cAE/C,CACL,IAAQvT,EAAGuT,EACRjX,EAAE4P,SAASsH,GACZlX,EAAEkD,IAAIQ,EAAM,cAAewT,GAE3BlX,EAAEkD,IAAIQ,EAAM,eAAgBwT,GAE9BpX,KAAKQ,GAAGK,WAAW,uBAAwB+C,GAAM9C,KAAKgB,IACpDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEX,MAbCN,EAAO,IAAIjB,EAAQ,EAAG,8CAA+C,CAAC+B,SAAYyV,IAanF,EAEL,CASAxO,OAAOwO,GACL,OAAO,IAAWzW,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAIgX,EAAS,iBAAoBjX,EAAEC,IAAIgX,EAAS,eAGpDnX,KAAKQ,GAAGK,WAAW,uBAAwBsW,GAASrW,KAAKgB,IACvDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,GALVN,EAAO,MAAY,EAAG,gDAAiD,CAACc,SAAYyV,IAOrF,EAEL,CAWCG,QAAQC,EAAiCC,EAAuBC,GAAoC,GAClG,OAAW/W,IAAAA,QAAQ,CAACC,EAASC,KAM3BZ,KAAKQ,GAAGK,WAAW,wBALR,CACT6W,yBAA0BD,EAC1BE,cAAeH,EACfI,iBAAkBL,IAE8BzW,KAAKgB,IAClDA,EAAE+F,OAAO,EACVjH,EAAO,IAAIjB,EAAQ,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAcD4M,KAAK+J,EAAqB9J,EAAWC,EAAWC,EAAoBC,GAClE,OAAO,IAAWxN,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAI8N,EAAY,SAAY/N,EAAEC,IAAI8N,EAAY,QAElDrN,EAAO,IAAIjB,EAAQ,EAAG,mEAAoE,CAACsO,WAAcA,KAE3G,IAAaE,EAAG,CACd2J,YAAaD,EACbxJ,EAAGN,EACHO,EAAGN,QAES,IAAJE,GACRhO,EAAEkD,IAAI+K,EAAW,IAAKD,GAExB,IAAItK,EAAO1D,EAAEqL,MAAM4C,EAAWF,GAC9BjO,KAAKQ,GAAGK,WAAW,qBAAsB+C,GAAM9C,KAAKgB,IAClDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUAuN,QAAQ2I,EAA6BC,GAAa,GAChD,OAAW3W,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAAW,CAAA,EACX,GAAGV,EAAE4P,SAASsH,GAAe,CAC3BlX,EAAEkD,IAAIQ,EAAM,cAAewT,GAC3B,IAAIW,EAAO,oBACZ,MACC7X,EAAEkD,IAAIQ,EAAM,eAAgBwT,GACpBW,EAAG,sBAEb/X,KAAKQ,GAAGK,WAAWkX,EAAMnU,GAAM9C,KAAKgB,IAClCnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CASAwN,SAASsJ,GACP,OAAO,YAAY,CAACrX,EAASC,KAC3B,IAAIgD,EAAO,CAAE,EACb,GAAyB,GAAtBoU,EAAcpM,OAEfhL,EAAO,IAAWjB,EAAC,IAAK,oCAAqC,CAACsY,aAAgBD,SACzE,CACL,IAAID,EAAO,sBACR7X,EAAE4P,SAASkI,EAAc,KAC1B9X,EAAEkD,IAAIQ,EAAM,eAAgBoU,GAC5BD,EAAO,uBACC7X,EAAEgY,SAASF,EAAc,KACjC9X,EAAEkD,IAAIQ,EAAM,gBAAiBoU,GAC7BD,EAAO,wBAGPnX,EAAO,IAAWjB,EAAC,EAAG,oCAAqC,CAACsY,aAAgBD,KAE9EhY,KAAKQ,GAAGK,WAAWkX,EAAMnU,GAAM9C,KAAKgB,IAClCnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEX,GAEL,CASAiX,gBAAgBH,GACd,WAAkBtX,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CAAE,EACb,GAAyB,GAAtBoU,EAAcpM,OAEfhL,EAAO,IAAIjB,EAAQ,IAAK,oCAAqC,CAACsY,aAAgBD,SACzE,CACL,MAAW,sBACR9X,EAAE4P,SAASkI,EAAc,KAC1B9X,EAAEkD,IAAIQ,EAAM,eAAgBoU,GAC5BD,EAAO,4CACC7X,EAAEgY,SAASF,EAAc,KACjC9X,EAAEkD,IAAIQ,EAAM,gBAAiBoU,GAC7BD,EAAO,6CAGPnX,EAAO,IAAWjB,EAAC,EAAG,oCAAqC,CAACsY,aAAgBD,KAE9EhY,KAAKQ,GAAGK,WAAWkX,EAAMnU,GAAM9C,KAAKgB,IAClCnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,EACD,GAEL,CASA2N,YAAYuI,GACV,OAAO,IAAW1W,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CAAA,EACR1D,EAAE4P,SAASsH,GACZlX,EAAEkD,IAAIQ,EAAM,cAAewT,GACnBlX,EAAEgY,SAASd,GACnBlX,EAAEkD,IAAIQ,EAAM,eAAgBwT,GAG5BxW,EAAO,IAAWjB,EAAC,EAAG,oCAAqC,CAACsY,aAAgBb,KAE9EpX,KAAKQ,GAAGK,WAAW,yBAA0B+C,GAAM9C,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CASAkX,qBAAqBJ,GACnB,WAAkBtX,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,GACPmU,EAAO,6BACR7X,EAAE4P,SAASkI,EAAc,KAC1B9X,EAAEkD,IAAIQ,EAAM,eAAgBoU,GACpBD,EAAG,8BACH7X,EAAEgY,SAASF,EAAc,KACjC9X,EAAEkD,IAAIQ,EAAM,gBAAiBoU,GACrBD,EAAG,6CAGXnX,EAAO,IAAIjB,EAAQ,EAAG,oCAAqC,CAAC0Y,cAAiBL,KAE/EhY,KAAKQ,GAAGK,WAAWkX,EAAMnU,GAAM9C,KAAKgB,IAClCnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAUAoX,YAAYN,EAAqCvS,GAAsB,GACrE,OAAW/E,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CACT2U,WAAY9S,GAEW,GAAtBuS,EAAcpM,OAEfhL,EAAO,IAAWjB,EAAC,GAAI,oCAAqC,CAACsY,aAAgBD,KAE1E9X,EAAE4P,SAASkI,EAAc,IAC1B9X,EAAEkD,IAAIQ,EAAM,eAAgBoU,GACpB9X,EAAEgY,SAASF,EAAc,IACjC9X,EAAEkD,IAAIQ,EAAM,gBAAiBoU,GAE7BpX,EAAO,IAAWjB,EAAC,GAAI,oCAAqC,CAACsY,aAAgBD,KAGjFhY,KAAKQ,GAAGK,WAAW,yBAA0B+C,GAAM9C,KAAKgB,IACnDA,EAAE+F,OAAO,EACVjH,EAAO,IAAWjB,EAAC,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAWCsX,YAAYpB,EAA6BqB,EAAoB1E,GAAoB,GAC/E,WAAkBrT,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACT8U,SAAU3E,GAET7T,EAAE4P,SAASsH,GACZlX,EAAEkD,IAAIQ,EAAM,cAAewT,GAE3BlX,EAAEkD,IAAIQ,EAAM,eAAgBwT,GAE3BlX,EAAEC,IAAIsY,EAAY,gBACnBvY,EAAEkD,IAAIQ,EAAM,cAAe1D,EAAEE,IAAIqY,EAAY,gBAC5CvY,EAAEC,IAAIsY,EAAY,aACnBvY,EAAEkD,IAAIQ,EAAM,WAAY1D,EAAEE,IAAIqY,EAAY,aACzCvY,EAAEC,IAAIsY,EAAY,eAAiBvY,EAAEC,IAAIsY,EAAY,eACtDvY,EAAEkD,IAAIQ,EAAM,aAAc1D,EAAEE,IAAIqY,EAAY,eAC5CvY,EAAEkD,IAAIQ,EAAM,aAAc1D,EAAEE,IAAIqY,EAAY,gBAE5C7X,EAAO,IAAIjB,EAAQ,EAAG,+BAAgC,CAACsY,aAAgBb,EAAaqB,WAAcA,KAGpGzY,KAAKQ,GAAGK,WAAW,4BAA6B+C,GAAM9C,KAAKgB,IACtDA,EAAE+F,OAAO,EACVjH,EAAO,IAAWjB,EAAC,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAWCyX,aAAavB,EAA6BqB,EAAoBG,GAAwB,GACpF,WAAkBlY,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTiV,aAAcD,GAEb1Y,EAAE4P,SAASsH,GACZlX,EAAEkD,IAAIQ,EAAM,cAAewT,GAE3BlX,EAAEkD,IAAIQ,EAAM,eAAgBwT,GAE3BlX,EAAEC,IAAIsY,EAAY,gBACnBvY,EAAEkD,IAAIQ,EAAM,cAAe1D,EAAEE,IAAIqY,EAAY,gBAC5CvY,EAAEC,IAAIsY,EAAY,aACnBvY,EAAEkD,IAAIQ,EAAM,WAAY1D,EAAEE,IAAIqY,EAAY,aACzCvY,EAAEC,IAAIsY,EAAY,eAAiBvY,EAAEC,IAAIsY,EAAY,eACtDvY,EAAEkD,IAAIQ,EAAM,YAAa1D,EAAEE,IAAIqY,EAAY,cAC3CvY,EAAEkD,IAAIQ,EAAM,aAAc1D,EAAEE,IAAIqY,EAAY,gBAE5C7X,EAAO,IAAIjB,EAAQ,EAAG,+BAAgC,CAACsY,aAAgBb,EAAaqB,WAAcA,KAGpGzY,KAAKQ,GAAGK,WAAW,6BAA8B+C,GAAM9C,KAAKgB,IACvDA,EAAE+F,OAAO,EACVjH,EAAO,IAAWjB,EAAC,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAWD4X,eAAe1B,EAA6BqB,EAAoB1E,GAAoB,GAClF,OAAWrT,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CACT8U,SAAU3E,GAET7T,EAAE4P,SAASsH,GACZlX,EAAEkD,IAAIQ,EAAM,cAAewT,GAE3BlX,EAAEkD,IAAIQ,EAAM,eAAgBwT,GAE3BlX,EAAEC,IAAIsY,EAAY,aACnBvY,EAAEkD,IAAIQ,EAAM,YAAa1D,EAAEE,IAAIqY,EAAY,cACnCvY,EAAEC,IAAIsY,EAAY,eAAiBvY,EAAEC,IAAIsY,EAAY,eAC7DvY,EAAEkD,IAAIQ,EAAM,aAAc1D,EAAEE,IAAIqY,EAAY,eAC5CvY,EAAEkD,IAAIQ,EAAM,aAAc1D,EAAEE,IAAIqY,EAAY,gBAE5C7X,EAAO,IAAIjB,EAAQ,EAAG,+BAAgC,CAACsY,aAAgBb,EAAaqB,WAAcA,KAGpGzY,KAAKQ,GAAGK,WAAW,+BAAgC+C,GAAM9C,KAAKgB,IACzDA,EAAE+F,OAAO,EACVjH,EAAO,IAAWjB,EAAC,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAWDgO,OAAO6J,EAA6B5J,EAAuBC,GACzD,OAAW1O,IAAAA,QAAQ,CAACC,EAASC,KAE3B,IAAIgD,EAAmF,CAAEoV,aAAcD,QAC7E,OACxB7Y,EAAEkD,IAAIQ,EAAM,eAAgBuL,QACH,IAAHC,GACtBlP,EAAEkD,IAAIQ,EAAM,gBAAiBwL,GAC/BpP,KAAKQ,GAAGK,WAAW,uBAAwB+C,GAAM9C,KAAKgB,IACpDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CASCmO,SAAS0J,GACP,OAAWrY,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,yBAHR,CACTmY,aAAcD,IAEmCjY,KAAKgB,IACtDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASCoO,MAAMyJ,GACJ,OAAO,IAAWrY,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,sBAHR,CACTmY,aAAcD,IAEgCjY,KAAKgB,IAChDA,EAAE+F,OAAO,EACVjH,EAAO,IAAWjB,EAAC,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASCsO,OAAOuJ,GACL,OAAWrY,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,uBAHR,CACTmY,aAAcD,IAEiCjY,KAAKgB,IACpDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASF+D,OAAO8T,GACL,OAAO,IAAWrY,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,uBAHR,CACTmY,aAAcD,IAEiCjY,KAAKgB,IACjDA,EAAE+F,OAAO,EACVjH,EAAO,IAAIjB,EAAQ,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAYA+X,iBAAiBrS,EAAoBsS,EAA2BjR,EAA+BoP,GAAa,GAC1G,OAAW3W,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CAAE,OACM,IAAFqE,GACf/H,EAAEqL,MAAM3H,EAAMqE,GAEZ/H,EAAEC,IAAIyD,EAAM,eACd1D,EAAEkD,IAAIQ,EAAM,aAAcgD,GAExB1G,EAAEC,IAAIyD,EAAM,eACd1D,EAAEkD,IAAIQ,EAAM,aAAcsV,GAE5B,MAAW,8BACP7B,IACFU,EAAO,wBAET/X,KAAKQ,GAAGK,WAAWkX,EAAMnU,GAAM9C,KAAKgB,IAC/BA,EAAE+F,OAAO,EACVjH,EAAO,IAAIjB,EAAQ,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CASAiY,cAActB,GACZ,OAAWnX,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CAAE,EACb1D,EAAEkD,IAAIQ,EAAM,cAAeiU,GAC3B7X,KAAKQ,GAAGK,WAAW,6BAA8B+C,GAAM9C,KAAKgB,IACvDA,EAAE+F,OAAO,EACVjH,EAAO,IAAIjB,EAAQ,EAAGmC,EAAEyN,QAAS,CAACxO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MACX,GACAC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAWAoQ,iBAAiBC,EAAkBoC,GAAoC,EAAOlD,GAC5E,OAAO,IAAW/P,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTgQ,yBAA0BD,QAEN,IAAZlD,GAAsC,MAAXA,GACnCvQ,EAAEkD,IAAIQ,EAAM,YAAa6M,GAEvBvQ,EAAEsR,SAAS,CAAC,cAAe,aAAcD,GAG3CvR,KAAKQ,GAAGK,4BAA4B0Q,IAAY3N,GAAM9C,KAAKgB,IACzDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,GALVN,EAAO,IAAWjB,EAAC,EAAG,oDAAqD,CAAC+B,SAAY6P,IAOzF,EAEL,CAUAG,aAAaiC,GAAoC,EAAOlD,GACtD,OAAOzQ,KAAKsR,iBAAiB,YAAaqC,EAA0BlD,EACtE,CAUA2I,eAAezF,GAAoC,EAAOlD,GACxD,OAAOzQ,KAAKsR,iBAAiB,cAAeqC,EAA0BlD,EACxE,CAQAW,cACE,OAAW1Q,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,yBAA0B,CAAA,GAAIC,KAAKgB,IACpDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAQDmY,gBACE,WAAkB3Y,QAAC,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,2BAA4B,CAAE,GAAEC,KAAKgB,IACtDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQA6P,gBACE,OAAWrQ,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,2BAA4B,CAAE,GAAEC,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAQAqT,eACE,OAAW7T,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,0BAA2B,CAAE,GAAEC,KAAKgB,IACrDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAQAsT,oBACE,OAAW9T,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,+BAAgC,IAAIC,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAQAuT,gBACE,OAAO,IAAW/T,QAAC,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,2BAA4B,CAAE,GAAEC,KAAKgB,IACtDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAQAoY,YACE,OAAO,YAAY,CAAC3Y,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,uBAAwB,CAAE,GAAEC,KAAKgB,IAClDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAqY,kBACE,OAAW7Y,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,6BAA8B,CAAA,GAAIC,KAAKgB,IACxDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,ECl0BF,MAAMhB,EAAIR,QAAQ,kBAWhBE,YAAYY,GALZA,KAAAA,UAMER,KAAKQ,GAAKA,CACZ,CAYCgZ,SAASC,EAAoBC,EAAyBC,EAAmBhW,GACxE,OAAO,IAAWjD,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTgW,WAAYH,EACZI,gBAAiBH,EACjBI,UAAWH,QAEO,QAClB/V,EAAO1D,EAAEqL,MAAM3H,EAAMD,IAEvB3D,KAAKQ,GAAGK,WAAW,wBAAyB+C,GAAM9C,KAAKgB,IACrDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUC6Y,iBAAiBN,EAAoBO,GACpC,OAAO,YAAY,CAACrZ,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,+BAJR,CACT+Y,WAAYH,EACZQ,UAAWD,IAE4ClZ,KAAKgB,IAC5DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAcCgZ,aAAaC,EAA0BC,EAAuBC,EAAwBC,EAAoBC,EAAwB5W,GACjI,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAOWV,EAAEqL,MAPG,CACdiP,iBAAkBL,EAClBM,cAAeL,EACfM,eAAgBL,EAChBM,WAAYL,EACZM,eAAgBL,GAEY5W,GAC9B3D,KAAKQ,GAAGK,WAAW,wBAAyB+C,GAAM9C,KAAKgB,IACrDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASC2Z,kBAAkBpB,GACjB,OAAO,YAAY,CAAC9Y,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,iCAHR,CACT+Y,WAAYH,IAE6C3Y,KAAKgB,IAC9DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASC4Z,qBAAqBrB,GACpB,WAAkB/Y,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,uCAHR,CACT+Y,WAAYH,IAEmD3Y,KAAKgB,IACpEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASC6Z,gBAAgBC,GACf,WAAkBta,QAAC,CAACC,EAASC,KAC2G,GAAnIV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,gBAAiB,kBAAmB,YAAa,YAAa,WAAY,YAAYpP,QAC5HhL,EAAO,IAAIjB,EAAQ,EAAG,8HAGxBK,KAAKQ,GAAGK,WAAW,2BADRma,GAC0Cla,KAAKgB,IACxDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAWCia,SAASvU,EAAoBwU,EAAmBzX,GAC/C,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAAW,CACTiG,WAAYD,EACZqN,UAAWmH,GAEVlb,EAAEC,IAAIwD,EAAS,cAChBzD,EAAEkD,IAAIQ,EAAM,aAAc1D,EAAEE,IAAIuD,EAAS,eACjCzD,EAAEC,IAAIwD,EAAS,mBACvBzD,EAAEkD,IAAIQ,EAAM,kBAAmB1D,EAAEE,IAAIuD,EAAS,oBAE9C/C,EAAO,IAAWjB,EAAC,EAAG,oDAAqD,CAAC+B,SAAYiC,KAEvFzD,EAAEC,IAAIwD,EAAS,qBAChBzD,EAAEkD,IAAIQ,EAAM,mBAAoB1D,EAAEE,IAAIuD,EAAS,qBAEjD3D,KAAKQ,GAAGK,WAAW,oCAAqC+C,GAAM9C,KAAKgB,IACjEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAYCma,sBAAsB5B,EAAoB7S,EAAoBwU,EAAmBhB,GAChF,OAAO,IAAW1Z,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTgW,WAAYH,EACZ5S,WAAYD,EACZqN,UAAWmH,QAEa,OACxBlb,EAAEkD,IAAIQ,EAAM,gBAAiBwW,GAE/Bpa,KAAKQ,GAAGK,WAAW,oCAAqC+C,GAAM9C,KAAKgB,IACjEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAWCoa,UAAUlB,EAAuBD,EAA0BxW,GAC1D,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAAW,CACT6Z,cAAeL,EACfI,iBAAkBL,QAEA,QAClBvW,EAAO1D,EAAEqL,MAAM3H,EAAMD,IAEvB3D,KAAKQ,GAAGK,WAAW,yBAA0B+C,GAAM9C,KAAKgB,IACtDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAUCqa,aAAaC,EAAwB7X,GACpC,OAAO,YAAY,CAAChD,EAASC,KAC3B,IAAQgD,EAAG,CACT6X,eAAgBD,QAEE,IAAV7X,IACRC,EAAO1D,EAAEqL,MAAM3H,EAAMD,IAEvB3D,KAAKQ,GAAGK,WAAW,4BAA6B+C,GAAM9C,KAAKgB,IACzDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASCwa,WAAWF,GACV,OAAO,YAAY,CAAC7a,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,gCAJR,CACT4a,eAAgBD,EAChBG,MAAM,IAEkD7a,KAAKgB,IAC7DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASC0a,aAAaJ,GACZ,OAAO,YAAY,CAAC7a,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,gCAJR,CACT4a,eAAgBD,EAChBG,MAAM,IAEkD7a,KAAKgB,IAC7DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUC2a,aAAaL,EAAwBM,GACpC,OAAWpb,IAAAA,QAAQ,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,6BAJR,CACT4a,eAAgBD,EAChBO,UAAWD,IAE0Chb,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASC8a,gBAAgBR,GACf,OAAW9a,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,gCAHR,CACT4a,eAAgBD,IAEwC1a,KAAKgB,IAC7DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASC+a,sBAAsBjB,GACrB,OAAO,YAAY,CAACra,EAASC,KACqE,GAA7FV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,iBAAkB,eAAgB,cAAcpP,QACtFhL,EAAO,IAAWjB,EAAC,EAAG,8FAGxBK,KAAKQ,GAAGK,WAAW,2BADRma,GAC0Cla,KAAKgB,IACxDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASCgb,0BAA0BlB,GACzB,WAAkBta,QAAC,CAACC,EAASC,KACsF,GAA9GV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,iBAAkB,eAAgB,YAAa,kBAAkBpP,QACvGhL,EAAO,IAAWjB,EAAC,EAAG,6GAGxBK,KAAKQ,GAAGK,WAAW,iCADRma,GACgDla,KAAKgB,IAC9DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,ECvYF,MAAOhB,EAAGR,QAAQ,gBAEQyc,EASxBvc,YAAYY,GALZA,KAAAA,UAMER,KAAKQ,GAAKA,CACZ,CAWA4b,OAAO3C,EAAoB4C,EAAoB1Y,GAC7C,OAAO,YAAY,CAAChD,EAASC,KAC3B,IAIQgD,EAAG1D,EAAEqL,MAJG,CACdqO,WAAYH,EACZ6C,WAAYD,GAEgB1Y,GAC9B3D,KAAKQ,GAAGK,WAAW,mBAAoB+C,GAAM9C,KAAKgB,IAChDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAUAqb,WAAW9C,EAAoB9V,GAC7B,OAAO,YAAY,CAAChD,EAASC,KAC3B,MAGWV,EAAEqL,MAHG,CACdqO,WAAYH,GAEgB9V,GAC9B3D,KAAKQ,GAAGK,WAAW,sBAAuB+C,GAAM9C,KAAKgB,IACnDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAWAsb,UAAUC,EAAqBC,EAAsBxP,GACnD,WAAkBxM,QAAC,CAACC,EAASC,KAM3BZ,KAAKQ,GAAGK,WAAW,4BALR,CACT8b,YAAaF,EACbG,aAAcF,EACd3P,SAAUG,IAE0CpM,KAAKgB,IACzDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUA2b,kBAAkBC,EAAqBnZ,GACrC,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAGIgD,EAAO1D,EAAEqL,MAHG,CACdwR,YAAaD,GAEenZ,GAC9B3D,KAAKQ,GAAGK,WAAW,6BAA8B+C,GAAM9C,KAAKgB,IAC1DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAYA8b,WAAWvD,EAAoBwD,EAAmBC,EAAiBhQ,GACjE,OAAWxM,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CACTgW,WAAYH,EACZ0D,UAAWF,QAEM,IAAFC,GACfhd,EAAEkD,IAAIQ,EAAM,SAAUsZ,QAEJ,IAAFhQ,GAChBhN,EAAEkD,IAAIQ,EAAM,cAAesJ,GAE7BlN,KAAKQ,GAAGK,WAAW,kBAAmB+C,GAAM9C,KAAKgB,IAC/CnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAaAkc,cAAc3D,EAAoB4D,EAAoBH,EAAgBI,EAAkB3Z,GACtF,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAMIgD,EAAO1D,EAAEqL,MANG,CACdqO,WAAYH,EACZ8D,WAAYF,EACZG,OAAQN,EACRO,WAAYH,GAEgB3Z,GAC9B3D,KAAKQ,GAAGK,WAAW,yBAA0B+C,GAAM9C,KAAKgB,IACtDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUAwc,UAAUC,EAAiBha,GACzB,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAGQgD,EAAG1D,EAAEqL,MAHG,CACdqS,QAASD,GAEmBha,GAC9B3D,KAAKQ,GAAGK,WAAW,sBAAuB+C,GAAM9C,KAAKgB,IACnDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAUA2c,WAAWC,EAA2BC,GACpC,OAAO,YAAY,CAACpd,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,+BAJR,CACTmd,kBAAmBF,EACnBG,OAAQF,IAE+Cjd,KAAKgB,IAC5DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAUAgd,eAAezE,EAAoBO,GACjC,OAAO,YAAY,CAACrZ,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,0BAJR,CACT+Y,WAAYH,EACZQ,UAAWD,IAEuClZ,KAAKgB,IACvDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAUAid,mBAAmB1E,EAAoBO,GACrC,OAAWtZ,IAAAA,QAAQ,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,6BAJR,CACT+Y,WAAYH,EACZQ,UAAWD,IAE0ClZ,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAkd,QAAQ3E,GACN,OAAO,YAAY,CAAC9Y,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,4BAHR,CACT+Y,WAAYH,IAEwC3Y,KAAKgB,IACzDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAmd,YAAY5E,GACV,OAAO,YAAY,CAAC9Y,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,+BAHR,CACT+Y,WAAYH,IAE2C3Y,KAAKgB,IAC5DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAod,YAAY7E,GACV,OAAO,YAAY,CAAC9Y,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,+BAHR,CACT+Y,WAAYH,IAE2C3Y,KAAKgB,IAC5DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAqd,eAAe9E,GACb,OAAO,YAAY,CAAC9Y,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kCAHR,CACT+Y,WAAYH,IAE8C3Y,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAsd,UAAUb,GACR,OAAO,YAAY,CAAChd,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,sBAHR,CACT+c,QAASD,IAEqC7c,KAAKgB,IACnDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAud,mBAAmBhF,GACjB,OAAO,YAAY,CAAC9Y,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kCAHR,CACT+Y,WAAYH,IAE8C3Y,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAwd,cAAcf,GACZ,OAAO,YAAY,CAAChd,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,yBAHR,CACT+c,QAASD,IAEwC7c,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAyd,aAAab,GACX,OAAO,YAAY,CAACnd,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,+BAHR,CACTmd,kBAAmBF,IAEoChd,KAAKgB,IAC5DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA0d,uBAAuBnF,GACrB,OAAO,YAAY,CAAC9Y,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,qCAHR,CACT+Y,WAAYH,IAEiD3Y,KAAKgB,IAClEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA2d,cAAc/B,GACZ,OAAO,YAAY,CAACnc,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,yBAHR,CACTkc,YAAaD,IAEoChc,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA4d,uBAAuBrF,GACrB,OAAO,YAAY,CAAC9Y,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,qCAHR,CACT+Y,WAAYH,IAEiD3Y,KAAKgB,IAClEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA6d,iBAAiBC,GACf,OAAO,YAAY,CAACre,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,4BAHR,CACToe,eAAgBD,IAEoCle,KAAKgB,IACzDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAge,0BAA0BzF,GACxB,OAAW/Y,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,wCAHR,CACT+Y,WAAYH,IAEoD3Y,KAAKgB,IACrEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAie,WAAWnE,GACT,OAAWta,IAAAA,QAAQ,CAACC,EAASC,KACqE,GAA7FV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,UAAW,aAAc,UAAW,YAAYpP,QACtFhL,EAAO,IAAIjB,EAAQ,EAAG,4FAGxBK,KAAKQ,GAAGK,WAAW,sBADRma,GACqCla,KAAKgB,IACnDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAke,eAAepE,GACb,WAAkBta,QAAC,CAACC,EAASC,KACwI,GAAhKV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,cAAe,cAAe,YAAa,UAAW,UAAW,iBAAkB,gBAAiB,eAAepP,QACzJhL,EAAO,MAAY,EAAG,uJAGxBZ,KAAKQ,GAAGK,WAAW,yBADRma,GACwCla,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAme,cAAcrE,GACZ,OAAWta,IAAAA,QAAQ,CAACC,EAASC,KACsF,GAA9GV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,cAAe,oBAAqB,WAAY,iBAAiBpP,QACvGhL,EAAO,IAAIjB,EAAQ,EAAG,6GAGxBK,KAAKQ,GAAGK,WAAW,yBADRma,GACwCla,KAAKgB,IACtDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAoe,eAAetE,GACb,WAAkBta,QAAC,CAACC,EAASC,KACiF,GAAzGV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,cAAe,aAAc,cAAe,gBAAgBpP,QAClGhL,EAAO,IAAWjB,EAAC,EAAG,uGAGxBK,KAAKQ,GAAGK,WAAW,yBADRma,GACwCla,KAAKgB,IACtDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQAqe,qBACE,WAAkB7e,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,mBADR,CAAE,GACgCC,KAAKgB,IAChDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAse,mBAAmBxE,GACjB,WAAkBta,QAAC,CAACC,EAASC,KACsF,GAA9GV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,aAAc,YAAa,UAAW,UAAW,gBAAgBpP,QACvGhL,EAAO,MAAY,EAAG,0GAGxBZ,KAAKQ,GAAGK,WAAW,sBADRma,GACqCla,KAAKgB,IACnDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAue,sBAAsBzE,GACpB,OAAWta,IAAAA,QAAQ,CAACC,EAASC,KAC4N,GAApPV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,eAAgB,SAAU,iBAAkB,WAAY,cAAe,UAAW,eAAgB,cAAe,eAAgB,cAAe,aAAc,eAAgB,YAAa,YAAYpP,QAC7OhL,EAAO,IAAWjB,EAAC,EAAG,8NAGxBK,KAAKQ,GAAGK,WAAW,4BADRma,GAC2Cla,KAAKgB,IACzDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAwe,kBAAkB/b,GAChB,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,6BADR8C,GAC4C7C,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAcAye,yBAAyBX,EAAwBY,EAAoBC,EAAoBC,EAAyBC,EAA0B7S,GAC1I,OAAWxM,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CACTqb,eAAgBD,EAChBgB,aAAcH,EACdI,WAAYL,QAEe,OAAgC,MAAjBG,QAAmD,OAA+B,MAAhBD,OAE3E,OAAgC,MAAjBC,EAChD7f,EAAEkD,IAAIQ,EAAM,kBAAmBmc,QACC,IAAjBD,GAAgD,MAAhBA,GAC/C5f,EAAEkD,IAAIQ,EAAM,iBAAkBkc,GAJ9Blf,EAAO,IAAWjB,EAAC,EAAG,qEAMJ,OAClBO,EAAEkD,IAAIQ,EAAM,cAAesJ,GAE7BlN,KAAKQ,GAAGK,WAAW,2BAA4B+C,GAAM9C,KAAKgB,IACxDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAgf,4BAA4BC,GAC1B,OAAWzf,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,8BAHR,CACTuf,iBAAkBD,IAEoCrf,KAAKgB,IAC3DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAmf,6BAA6BrF,GAC3B,OAAWta,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAAOoX,EAC8I,GAAtJ9a,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,iBAAkB,mBAAoB,iBAAkB,cAAe,kBAAmB,eAAepP,QAC/IhL,EAAO,IAAIjB,EAAQ,EAAG,iJAExBK,KAAKQ,GAAGK,WAAW,8BAA+B+C,GAAM9C,KAAKgB,IAC3DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAof,OACE,OAAO,YAAY,CAAC3f,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,mBAAoB,CAAA,GAAIC,KAAKgB,IAC9CnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAqf,oBAAoBvF,GAClB,WAAkBta,QAAC,CAACC,EAASC,KACsF,GAA9GV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,cAAe,UAAW,UAAW,aAAc,cAAcpP,QACvGhL,EAAO,MAAY,EAAG,2GAGxBZ,KAAKQ,GAAGK,WAAW,sBADRma,GACqCla,KAAKgB,IACnDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAsf,iBACE,OAAO,YAAY,CAAC7f,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,qBADR,CAAA,GACoCC,KAAKgB,IAClDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAuf,cAAc9c,GACZ,OAAO,YAAY,CAAChD,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,qBADR8C,GACoC7C,KAAKgB,IAClDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUAwf,iBAAiBC,EAAsBhd,GACrC,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAGQgD,EAAG1D,EAAEqL,MAHG,CACdqV,aAAcD,GAEchd,GAC9B3D,KAAKQ,GAAGK,WAAW,wBAAyB+C,GAAM9C,KAAKgB,IACrDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,EC50BF,MAAMhB,EAAIR,QAAQ,gBAGOmhB,EAcvBjhB,YAAYY,GAVZA,KAAAA,eAKAiB,UAAI,EAMFzB,KAAKQ,GAAKA,EACVR,KAAKyB,KAAO,CACVyL,QAAS,IAAIH,EAASvM,EAAI,UAE9B,CAaCsgB,QAAQrH,EAAoBsH,EAAgBC,EAAoBC,EAAkBtd,GACjF,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTgW,WAAYH,EACZyH,OAAQH,EACRI,WAAYH,EACZI,SAAUH,QAEQ,QAClBrd,EAAO1D,EAAEqL,MAAM3H,EAAMD,IAEvB3D,KAAKQ,GAAGK,WAAW,mBAAoB+C,GAAM9C,KAAKgB,IAChDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAcCmgB,cAAc5H,EAAoB6H,EAAkBC,EAAoBC,EAAkBC,EAAqB9d,GAC9G,OAAO,YAAY,CAAChD,EAASC,KAC3B,MAAW,CACTgZ,WAAYH,EACZiI,SAAUJ,EACVK,WAAYJ,EACZK,SAAUJ,EACVK,YAAaJ,QAEK,QAClB7d,EAAO1D,EAAEqL,MAAM3H,EAAMD,IAEvB3D,KAAKQ,GAAGK,WAAW,0BAA2B+C,GAAM9C,KAAKgB,IACvDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUC4gB,eAAeR,EAAkBpU,GAChC,WAAkBxM,QAAC,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,2BAJR,CACT6gB,SAAUJ,EACVS,YAAa7U,IAEsCpM,KAAKgB,IACxDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUC8gB,iBAAiBvI,EAAoBwI,GAA6B,GACjE,OAAO,YAAY,CAACthB,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,4BAJR,CACT+Y,WAAYH,EACZyI,kBAAmBD,IAEiCnhB,KAAKgB,IACzDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUCihB,aAAaC,EAA0BH,GAA6B,GACnE,OAAO,YAAY,CAACthB,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,qBAJR,CACTwhB,UAAWD,EACXF,kBAAmBD,IAE0BnhB,KAAKgB,IAClDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASCohB,mBAAmBF,GAClB,WAAkB1hB,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kCAHR,CACTwhB,UAAWD,IAE+CthB,KAAKgB,IAC/DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASCqhB,mBAAmBjB,GAClB,WAAkB5gB,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kCAHR,CACTygB,SAAUA,IAEgDxgB,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASCshB,oBAAoBJ,GACnB,OAAW1hB,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,mCAHR,CACTuhB,UAAWA,IAEgDthB,KAAKgB,IAChEnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUCuhB,WAAWnB,EAAkB3d,GAC5B,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACT8d,SAAUJ,QAEQ,IAAV3d,IACRC,EAAO1D,EAAEqL,MAAM3H,EAAMD,IAEvB3D,KAAKQ,GAAGK,WAAW,sBAAuB+C,GAAM9C,KAAKgB,IACnDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAWCwhB,kBAAkBC,EAAyBzV,EAAiB0V,GAC3D,OAAWliB,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAAW,CACTiiB,gBAAiBF,EACjBZ,YAAa7U,QAEO,IAAZ0V,GACR1iB,EAAEkD,IAAIQ,EAAM,YAAagf,GAE3B5iB,KAAKQ,GAAGK,WAAW,8BAA+B+C,GAAM9C,KAAKgB,IAC3DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAWC4hB,cAAcxB,EAAkBC,EAAoB5d,GACnD,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAIgD,EAAO,CACT8d,SAAUJ,GAE4E,GAArFphB,EAAE+a,eAAe/a,EAAEgb,OAAOvX,GAAU,CAAC,mBAAoB,oBAAoBiI,QAC9EhL,EAAO,IAAIjB,EAAQ,EAAG,6FAEJ,QAClBiE,EAAO1D,EAAEqL,MAAM3H,EAAMD,IAEvB3D,KAAKQ,GAAGK,WAAW,yBAA0B+C,GAAM9C,KAAKgB,IACtDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASC6hB,WAAWzB,GACV,OAAO,YAAY,CAAC3gB,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,sBAHR,CACT6gB,SAAUJ,IAEoCxgB,KAAKgB,IACnDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASC8hB,kBAAkBvJ,GACjB,OAAO,YAAY,CAAC9Y,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,kCAHR,CACT+Y,WAAYH,IAE8C3Y,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASC+hB,mBAAmBC,GAClB,OAAO,YAAY,CAACviB,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,8BAHR,CACTsiB,iBAAkBD,IAEoCpiB,KAAKgB,IAC3DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASCkiB,eAAepI,GACd,WAAkBta,QAAC,CAACC,EAASC,KACwF,GAAhHV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,oBAAqB,gBAAiB,eAAgB,aAAapP,QACzGhL,EAAO,IAAWjB,EAAC,EAAG,+GAGxBK,KAAKQ,GAAGK,WAAW,sBADRma,GACqCla,KAAKgB,IACnDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASCmiB,qBAAqBrI,GACpB,OAAO,YAAY,CAACra,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,6BADRma,GAC4Cla,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAaAoiB,kBAAkBhC,EAAkB7H,EAAoB8J,EAAiBC,EAAWC,GAClF,WAAkB/iB,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTgW,WAAYH,EACZiI,SAAUJ,EACVoC,QAASH,QAEc,IAAfE,GACRvjB,EAAEkD,IAAIQ,EAAM,eAAgB6f,GAE9BzjB,KAAKQ,GAAGK,WAAW,gCAAiC+C,EAAM4f,GAAM1iB,KAAKgB,IACnEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAyiB,mBAAmBrC,GACjB,OAAO,YAAY,CAAC3gB,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,6BAHR,CACT6gB,SAAUJ,IAE2CxgB,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA0iB,qBAAqBC,GACnB,OAAO,YAAY,CAACljB,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,yBAHR,CACTijB,WAAYD,IAEqC/iB,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,ECxcF,MAAOhB,EAAGR,QAAQ,gBAEIqkB,EASpBnkB,YAAYY,GALZA,KAAAA,UAMER,KAAKQ,GAAKA,CACZ,CASAwjB,wBAAwBpgB,GACtB,OAAWlD,IAAAA,QAAQ,CAACC,EAASC,KAC3BZ,KAAKQ,GAAGK,WAAW,uBAAwB+C,GAAM9C,KAAKgB,IACpDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUA+iB,2BAA2BjK,EAAmBrW,GAC5C,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAGWV,EAAEqL,MAHG,CACd0O,UAAWD,GAEiBrW,GAC9B3D,KAAKQ,GAAGK,WAAW,0BAA2B+C,GAAM9C,KAAKgB,IACvDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAgjB,2BACE,OAAO,YAAY,CAACvjB,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,2BADR,CAAA,GAC0CC,KAAKgB,IACxDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAWAijB,YAAYC,EAAsBC,EAA4B1gB,GAC5D,OAAO,YAAY,CAAChD,EAASC,KAC3B,MAIWV,EAAEqL,MAJG,CACd+Y,SAAUF,EACVG,mBAAoBF,GAEQ1gB,GAC9B3D,KAAKQ,GAAGK,WAAW,mBAAoB+C,GAAM9C,KAAKgB,IAChDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUAsjB,eAAeC,EAAoB9gB,GACjC,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAGQgD,EAAG1D,EAAEqL,MAHG,CACdmZ,WAAYD,GAEgB9gB,GAC9B3D,KAAKQ,GAAGK,WAAW,uBAAwB+C,GAAM9C,KAAKgB,IACpDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQAyjB,eACE,WAAkBjkB,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,uBADR,IACsCC,KAAKgB,IACpDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA0jB,kBAAkB5J,GAChB,OAAO,YAAY,CAACra,EAASC,KACgE,GAAxFV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,WAAY,eAAgB,eAAepP,QACjFhL,EAAO,IAAWjB,EAAC,EAAG,4FAGxBK,KAAKQ,GAAGK,WAAW,sBADRma,GACqCla,KAAKgB,IACnDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASA2jB,sBAAsB7J,GACpB,WAAkBta,QAAC,CAACC,EAASC,KACgE,GAAxFV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,WAAY,eAAgB,eAAepP,QACjFhL,EAAO,IAAIjB,EAAQ,EAAG,yFAGxBK,KAAKQ,GAAGK,WAAW,4BADRma,GAC2Cla,KAAKgB,IACzDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAWA4jB,WAAWC,EAAqBC,EAA4BrhB,GAC1D,OAAO,YAAY,CAAChD,EAASC,KAC3B,IAIQgD,EAAG1D,EAAEqL,MAJG,CACd0Z,QAASF,EACTG,YAAaF,GAEerhB,GAC9B3D,KAAKQ,GAAGK,WAAW,kBAAmB+C,GAAM9C,KAAKgB,IAC/CnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUAikB,cAAcC,EAAmBzhB,GAC/B,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAGQgD,EAAG1D,EAAEqL,MAHG,CACd8Z,UAAWD,GAEiBzhB,GAC9B3D,KAAKQ,GAAGK,WAAW,qBAAsB+C,GAAM9C,KAAKgB,IAClDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAokB,cACE,WAAkB5kB,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,sBADR,CAAA,GACqCC,KAAKgB,IACnDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAkd,UACE,OAAW1d,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,mBADR,CAAA,GACkCC,KAAKgB,IAChDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQAie,WAAWnE,GACT,WAAkBta,QAAC,CAACC,EAASC,KACsF,GAA9GV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,cAAe,UAAW,UAAW,aAAc,cAAcpP,QACvGhL,EAAO,IAAIjB,EAAQ,EAAG,2GAGxBK,KAAKQ,GAAGK,WAAW,sBADRma,GACqCla,KAAKgB,IACnDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQAqkB,iBACE,WAAkB7kB,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,6BADR,CAAE,GAC0CC,KAAKgB,IAC1DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAskB,cAAc7hB,GACZ,OAAO,IAAWjD,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAIwD,EAAS,UAAazD,EAAEC,IAAIwD,EAAS,uBAC7C/C,EAAO,IAAIjB,EAAQ,EAAG,uDAGxBK,KAAKQ,GAAGK,WAAW,yBADR8C,GACwC7C,KAAKgB,IACtDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQAmd,cACE,WAAkB3d,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,kBADR,IACiCC,KAAKgB,IAC/CnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAoe,eAAetE,GACb,OAAWta,IAAAA,QAAQ,CAACC,EAASC,KACiG,GAAzHV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,cAAe,cAAe,cAAe,YAAa,kBAAkBpP,QAClHhL,EAAO,IAAWjB,EAAC,EAAG,sHAGxBK,KAAKQ,GAAGK,WAAW,qBADRma,GACoCla,KAAKgB,IAClDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAukB,iBACE,OAAW/kB,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,qBADR,IACoCC,KAAKgB,IAClDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAWAwkB,cAAcC,EAAwBC,EAAwBjiB,GAC5D,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAIWV,EAAEqL,MAJG,CACdsa,eAAgBF,EAChBG,eAAgBF,GAEYjiB,GAC9B3D,KAAKQ,GAAGK,WAAW,qBAAsB+C,GAAM9C,KAAKgB,IAClDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQA6kB,iBACE,OAAO,YAAY,CAACplB,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,yBADR,IACwCC,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQA8kB,YAAYC,EAAsBC,EAAsBviB,GACtD,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAIWV,EAAEqL,MAJG,CACd4a,aAAcF,EACdG,aAAcF,GAEcviB,GAC9B3D,KAAKQ,GAAGK,WAAW,mBAAoB+C,GAAM9C,KAAKgB,IAChDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAmlB,eACE,OAAO,YAAY,CAAC1lB,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,uBADR,IACsCC,KAAKgB,IACpDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAolB,WAAWC,EAAmBC,EAAqBC,GACjD,OAAO,YAAY,CAAC9lB,EAASC,KAC3B,MAAW,CACT8lB,YAAaH,EACbI,YAAaH,QAES,IAAdC,GACRvmB,EAAEkD,IAAIQ,EAAM,cAAe6iB,GAE7BzmB,KAAKQ,GAAGK,WAAW,kBAAmB+C,GAAM9C,KAAKgB,IAC/CnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASA0lB,cAAcC,GACZ,OAAO,YAAY,CAAClmB,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,qBAHR,CACTimB,UAAWD,IAEkC/lB,KAAKgB,IAClDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQA6lB,cACE,OAAWrmB,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,sBADR,IACqCC,KAAKgB,IACnDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAYA8lB,uBAAuBC,EAAmBC,EAAmBC,EAAiBC,GAC5E,WAAkB1mB,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTyjB,UAAWJ,EACXK,UAAWJ,EACXK,QAASJ,QAEuB,IAAxBC,GACRlnB,EAAEkD,IAAIQ,EAAM,wBAAyBwjB,GAEvCpnB,KAAKQ,GAAGK,WAAW,8BAA+B+C,GAAM9C,KAAKgB,IAC3DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAsmB,0BACE,OAAW9mB,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,kCADR,CAAA,GACiDC,KAAKgB,IAC/DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAumB,uBACE,OAAO,YAAY,CAAC9mB,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,+CADR,CAAA,GAC8DC,KAAKgB,IAC5EnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQAwmB,uBACE,OAAO,YAAY,CAAC/mB,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,+CADR,CAAE,GAC4DC,KAAKgB,IAC5EnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASAymB,kBAAkBhkB,GAChB,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,yBADR8C,GACwC7C,KAAKgB,IACtDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUA0mB,qBAAqBC,EAA0BlkB,GAC7C,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAGQgD,EAAG1D,EAAEqL,MAHG,CACduc,iBAAkBD,GAEUlkB,GAC9B3D,KAAKQ,GAAGK,WAAW,4BAA6B+C,GAAM9C,KAAKgB,IACzDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQA6mB,qBACE,WAAkBrnB,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,6BADR,IAC4CC,KAAKgB,IAC1DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUA8mB,UAAU/nB,EAAc0D,GACtB,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAGQgD,EAAG1D,EAAEqL,MAAM5H,EAHH,CACdskB,KAAMhoB,IAGRD,KAAKQ,GAAGK,WAAW,iBAAkB+C,GAAM9C,KAAKgB,IAC9CnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAQAgnB,YACE,OAAWxnB,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,qBADR,IACoCC,KAAKgB,IAClDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUAinB,cAAcC,EAAkBzkB,GAC9B,OAAO,YAAY,CAAChD,EAASC,KAC3B,IAGQgD,EAAG1D,EAAEqL,MAAM5H,EAHH,CACd0kB,SAAUD,IAGZpoB,KAAKQ,GAAGK,WAAW,iBAAkB+C,GAAM9C,KAAKgB,IAC9CnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAQAonB,iBACE,OAAW5nB,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,yBADR,IACwCC,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASAqnB,oBAAoB5kB,GAClB,WAAkBjD,QAAC,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,2BADR8C,GAC0C7C,KAAKgB,IACxDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUAsnB,uBAAuBC,EAAwB9kB,GAC7C,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAGQgD,EAAG1D,EAAEqL,MAAM5H,EAHH,CACd+kB,eAAgBD,IAGlBzoB,KAAKQ,GAAGK,WAAW,2BAA4B+C,GAAM9C,KAAKgB,IACxDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAQAynB,uBACE,OAAO,YAAY,CAAChoB,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,+BADR,CAAE,GAC4CC,KAAKgB,IAC5DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CASA0nB,uBAAuBjlB,GACrB,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,8BADR8C,GAC6C7C,KAAKgB,IAC3DnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASC2nB,0BAA0BC,GACzB,OAAO,YAAY,CAACnoB,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,iCAHR,CACTkoB,sBAAuBD,IAEkChoB,KAAKgB,IAC9DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASC8nB,kCAAkCjI,GACjC,OAAWrgB,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,yCAHR,CACTqgB,OAAQH,IAEyDjgB,KAAKgB,IACtEnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAYC+nB,0BAA0BH,EAA+B/H,EAAgBmI,EAAsB7M,GAC9F,OAAO,YAAY,CAAC1b,EAASC,KAC3B,MAAW,CACTmoB,sBAAuBD,EACvB5H,OAAQH,EACRoI,aAAcD,QAEO,OACrBhpB,EAAEkD,IAAIQ,EAAM,aAAcyY,GAE5Brc,KAAKQ,GAAGK,WAAW,iCAAkC+C,GAAM9C,KAAKgB,IAC9DnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAkoB,yBACE,OAAW1oB,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,kCADR,CAAE,GAC+CC,KAAKgB,IAC/DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,EC/2BF,MAAOhB,EAAGR,QAAQ,gBAEK2pB,EASrBzpB,YAAYY,GAAER,KALdQ,QAAE,EAMAR,KAAKQ,GAAKA,CACZ,CAWC8oB,OAAO7P,EAAoB1F,GAAoB,EAAMpQ,GACpD,OAAO,IAAWjD,QAAC,CAACC,EAASC,KAC3B,IAAQgD,EAAG,CACTgW,WAAYH,EACZf,SAAU3E,QAEQ,IAAVpQ,IACRC,EAAO1D,EAAEqL,MAAM3H,EAAMD,IAEvB3D,KAAKQ,GAAGK,WAAW,sBAAuB+C,GAAM9C,KAAKgB,IACnDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,IACR,EAEL,CAUAqoB,OAAOC,EAAqBzV,GAAoB,GAC9C,OAAO,IAAWrT,QAAC,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,yBAJR,CACT4oB,YAAaD,EACb9Q,SAAU3E,IAEuCjT,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CAUAwoB,UAAUjQ,EAAoB1F,GAAoB,GAChD,OAAO,IAAWrT,QAAC,CAACC,EAASC,KAK3BZ,KAAKQ,GAAGK,WAAW,qCAJR,CACT+Y,WAAYH,EACZf,SAAU3E,IAEmDjT,KAAKgB,IAClEnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EACT,EAEL,CASAyoB,WAAWlQ,GACT,OAAO,IAAW/Y,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,+BAHR,CACT+Y,WAAYH,IAE2C3Y,KAAKgB,IAC5DnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAUC+G,OAAO+S,GACN,WAAkBta,QAAC,CAACC,EAASC,KACuK,GAA/LV,EAAE+a,eAAe/a,EAAEgb,OAAOF,GAAU,CAAC,YAAa,cAAe,aAAc,WAAY,cAAe,YAAa,YAAa,aAAc,eAAgB,QAAS,YAAYpP,QACxLhL,EAAO,IAAIjB,EAAQ,EAAG,gLAGxBK,KAAKQ,GAAGK,WAAW,yBADRma,GACwCla,KAAKgB,IACtDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,IACR,EAEL,EC9HF,MAAOhB,EAAGR,QAAQ,gBASDmK,EAmCfjK,YAAYY,GAAER,KA/BdQ,QAMAoD,EAAAA,KAAAA,iBAIAgmB,WAAK,EAAA5pB,KAIL6pB,cAIAC,EAAAA,KAAAA,sBAIA5c,aAAO,EAAAlN,KAIPyN,WAME,EAAAzN,KAAKQ,GAAKA,EACVR,KAAK4D,KAAO,MAAapD,GACzBR,KAAK4pB,MAAQ,IAAcP,EAAC7oB,GAC5BR,KAAK6pB,SAAW,IAAgBhJ,EAACrgB,GACjCR,KAAK8pB,UAAY,IAAI3N,EAAc3b,GACnCR,KAAKkN,QAAU,MAAa1M,EAAI,YAChCR,KAAKyN,MAAQ,IAAIsW,EAAUvjB,EAC7B,CAWAoN,OAAO6W,EAAoBW,EAAmBzhB,GAC5C,OAAO,IAAWjD,QAAC,CAACC,EAASC,KAC3B,MAIWV,EAAEqL,MAJG,CACdmZ,WAAYD,EACZY,UAAWD,GAEiBzhB,GAC9B3D,KAAKQ,GAAGK,WAAW,kBAAmB+C,GAAM9C,KAAKgB,IAC/CnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAWA6oB,YAAY/P,EAAmBgQ,EAA0BrmB,GACvD,WAAkBjD,QAAC,CAACC,EAASC,KAC3B,IAIQgD,EAAG1D,EAAEqL,MAJG,CACd0O,UAAWD,EACXiQ,iBAAkBD,GAEUrmB,GAC9B3D,KAAKQ,GAAGK,WAAW,uBAAwB+C,GAAM9C,KAAKgB,IACpDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,EACF,EACF,CAYAgpB,kBAAkBzF,EAAoBW,EAAmBlf,EAAmBvC,GAC1E,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAKWV,EAAEqL,MALG,CACdmZ,WAAYD,EACZY,UAAWD,EACXzX,iBAAkBzH,GAEUvC,GAC9B3D,KAAKQ,GAAGK,WAAW,8CAA+C+C,GAAM9C,KAAKgB,IAC3EnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CAUAyH,OAAO8Q,EAAoB9V,GACzB,OAAWjD,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAGIgD,EAAO1D,EAAEqL,MAHG,CACdqO,WAAYH,GAEgB9V,GAC9B3D,KAAKQ,GAAGK,WAAW,wBAAyB+C,GAAM9C,KAAKgB,IACrDnB,EAAQmB,EAAEd,MACZ,GAAGC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASAwN,SAASyb,GACP,OAAWzpB,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,uBAHR,CACTupB,YAAaD,IAEkCrpB,KAAKgB,IACpDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CASA+G,OAAO+S,GACL,OAAO,YAAY,CAACra,EAASC,KAE3BZ,KAAKQ,GAAGK,WAAW,wBADRma,GACuCla,KAAKgB,IACrDnB,EAAQmB,EAAEd,MAAK,GACdC,MAAMC,IACPN,EAAOM,EACT,IAEJ,CAaA4M,KAAK2L,EAAoB1L,EAAWC,EAAWC,EAA6DC,GAC1G,WAAkBxN,QAAC,CAACC,EAASC,KACvBV,EAAEC,IAAI8N,EAAY,SAAY/N,EAAEC,IAAI8N,EAAY,QAElDrN,EAAO,MAAY,EAAG,mEAAoE,CAACqN,WAAcA,KAE3G,IAAI0G,EAAY,CACdiF,WAAYH,EACZpL,EAAGN,EACHO,EAAGN,QAES,IAAJE,GACRhO,EAAEkD,IAAIuR,EAAW,IAAKzG,GAExB,MAAWhO,EAAEqL,MAAMoJ,EAAW1G,GAC9BjO,KAAKQ,GAAGK,WAAW,sBAAuB+C,GAAM9C,KAAKgB,IACnDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,EAAC,EAEZ,EACF,CASA+D,OAAOwU,GACL,WAAkB/Y,QAAC,CAACC,EAASC,KAI3BZ,KAAKQ,GAAGK,WAAW,4BAHR,CACT+Y,WAAYH,IAEwC3Y,KAAKgB,IACzDnB,EAAQmB,EAAEd,SACTC,MAAMC,IACPN,EAAOM,IACR,EAEL,ECrOF,MAAMmpB,EAAQ3qB,QAAQ,SAChB4qB,EAAc5qB,QAAQ,eACtBQ,EAAIR,QAAQ,UAwClB6qB,OAAOC,QAAU,MAwDf5qB,YAAY6qB,EAAmBC,EAAmBC,GAAoB3qB,KApDtEyqB,cAAQ,EAAAzqB,KAIR4qB,WAIAC,EAAAA,KAAAA,WAIAC,EAAAA,KAAAA,qBAIAC,cAAQ,EAAA/qB,KAIRgrB,iBAIAN,EAAAA,KAAAA,qBAMAO,WAAK,EAAAjrB,KACLkrB,aAAO,EAAAlrB,KACPiI,YACAkjB,EAAAA,KAAAA,0BACAC,mBAAa,EAAAprB,KACbqrB,SACAplB,EAAAA,KAAAA,aACAE,EAAAA,KAAAA,uBACAmlB,eAAS,EAAAtrB,KAETwB,UAEA+pB,EAAAA,KAAAA,uBACAC,cAAQ,EAAAxrB,KACRyrB,qBAAe,EASbzrB,KAAKyqB,SAAW,kBAChBzqB,KAAKurB,WAAa,CAACG,iBAAoB,EAAGC,YAAe,EAAGC,SAAY,EAAGC,aAAgB,EAAGxkB,eAAkB,EAAGykB,aAAgB,GACnI9rB,KAAKwrB,SAAW,CAACO,eAAkB,EAAGC,gBAAmB,EAAGC,gBAAmB,EAAGC,mBAAsB,EAAGC,mBAAsB,EAAGC,cAAiB,EAAGC,cAAiB,EAAGC,kBAAqB,EAAGC,YAAe,EAAGC,QAAW,EAAGC,KAAQ,GAAIC,eAAkB,GAAIC,UAAa,GAAIC,UAAa,GAAIC,IAAO,GAAIC,MAAS,GAAIC,YAAe,GAAIC,cAAiB,GAAIC,cAAiB,GAAIC,UAAa,GAAIC,qBAAwB,GAAIC,SAAY,GAAIC,YAAe,GAAIC,kBAAqB,GAAIC,sBAAyB,GAAIC,mBAAsB,GAAIC,iBAAoB,GAAIC,SAAY,GAAIC,IAAO,GAAIC,mBAAsB,GAAIC,yBAA4B,IACtoB7tB,KAAK0qB,SAAW,CACd3S,KAAM,YACN+V,QAAQ,EACRC,QAAS,KACTC,eAAgB,MAElBhuB,KAAKyrB,gBAAkB,CAAC,UAAW,gBAAiB,gBAAiB,MAAO,SAAU,UAAW,OAAQ,uBACpF,OACnBzrB,KAAKiuB,UAAUxD,EAAUC,EAAUC,EAEvC,CAUAsD,UAAUxD,EAAmBC,EAAmBC,GAe9C,GAdsC3qB,KAAKyqB,cAApB,IAAbA,EAA4CA,EAAkC,kBACxFzqB,KAAK0qB,SAAW,CACd3S,KAAM,YACN+V,QAAQ,EACRC,QAAS,KACTC,eAAgB,WAGG,IAAXtD,GACRxqB,EAAEsE,QAAQkmB,EAAU,CAACniB,EAAEC,UACQ,IAAnBxI,KAAK0qB,SAASliB,KAAmBxI,KAAK0qB,SAASliB,GAAKD,EAAE,QAInD,IAAPoiB,EACR3qB,KAAKkrB,QAAU,IAAW3qB,EAACP,MAC3BA,KAAKmrB,cAAgB,MAAkBnrB,MACvCA,KAAKorB,cAAgB,IAAI9gB,EAAatK,MACtCA,KAAKiG,QAAU,IAAWmD,EAACpJ,MAC3BA,KAAKmG,WAAa,IAAImD,EAAWtJ,MACjCA,KAAKsrB,UAAY,IAAajiB,EAACrJ,MAC/BA,KAAKwB,KAAO,IAAQqI,EAAC7J,MACrBA,KAAKiI,OAAS,MAAWjI,UACpB,CACL,MAAYA,KACZE,EAAEsE,QAAQxE,KAAKyrB,gBAAiB,SAASljB,GACvC,OAAOA,GACL,IAAK,UACHlE,EAAM6mB,QAAU,IAAW3qB,EAAC8D,GAC9B,MACA,IAAK,gBACHA,EAAM8mB,cAAgB,IAAiBnoB,EAACqB,GAC1C,MACA,IAAK,gBACHA,EAAM+mB,cAAgB,IAAgB9gB,EAACjG,GACzC,MACA,IAAK,MACHA,EAAMgnB,IAAM,IAAIhmB,EAAIhB,GACtB,MACA,IAAK,SACHA,EAAM4D,OAAS,MAAW5D,GAC5B,MACA,IAAK,UACHA,EAAM4B,QAAU,MAAY5B,GAC9B,MACA,IAAK,OACHA,EAAM7C,KAAO,MAAS6C,GACxB,MACA,IAAK,aACHA,EAAM8B,WAAa,IAAcmD,EAACjF,GACpC,MACA,IAAK,YACHA,EAAMinB,UAAY,IAAajiB,EAAChF,GAGtC,EACD,CACH,CAcAxD,WAAWkX,EAAMnU,EAAO4f,GACtB,OAAW9iB,IAAAA,QAAQ,CAACC,EAASC,KAC3B,MAAS,CAAc,OAEH,IAALgD,IACbsqB,EAAGtqB,KAAOvD,KAAKC,UAAUsD,SAGP,IAAL4f,GAA2B,iCAANzL,GAA+C,uBAANA,IAC3EmW,EAAG1K,KAAOA,QAGc,IAAZxjB,KAAC4qB,OAAwC,IAAd5qB,KAAK4qB,OAAqB,sDAAN7S,GAAoE,uCAANA,IACzHmW,EAAGC,MAAQnuB,KAAK4qB,OAQlB,IAAIjnB,EAAU,CACZyqB,SAAUpuB,KAAKyqB,SACf4D,KAAM,IACNtW,KAAM,IAAM/X,KAAK0qB,SAAS3S,KAAO,aAAeA,EAChDuW,OAAQ,OACRC,QAAS,CACN,eAAgB,oCAChB,iBAAkBC,OAAOC,WAAWnE,EAAYhqB,UAAU4tB,KAE7DQ,QAAS,KAEAzoB,EAAGokB,EAAMpkB,QAAQtC,EAAU5C,IAClC,IAAI4tB,EAAI,GACR5tB,EAAS6tB,GAAG,QAAQ,SAAS1tB,GACzBqB,QAAQC,IAAItB,EAAG,mBACfN,EAAO,IAAWjB,EAAC,GAAI,iBAAkBuB,GAC7C,GAEAH,EAAS6tB,GAAG,OAAO,SAASC,GACxBF,GAAKE,CACT,GAEA9tB,EAAS6tB,GAAG,MAAM,WAChB,IAEE,GAA8C,OAD/BvuB,KAAKC,UAAUquB,GAAO,iBACzBG,MAAM,2BAAkC,CAClD,IAAOC,EAAC1uB,KAAK2uB,MAAML,GAInB,QAAgB,IAANI,EAERnuB,EAAO,IAAIjB,EAAQ,GAAI,kDAClB,QAAgB,IAANovB,QAAwC,IAATA,EAAC/tB,MAC/C,OAAO+tB,EAAIlnB,QACT,OACEjH,EAAO,MAAY,EAAG,QAASmuB,IAC/B,MACF,KAAM,EACJnuB,EAAO,MAAY,EAAG,eAAgBmuB,IACtC,MACF,KAAM,EACJnuB,EAAO,IAAWjB,EAAC,EAAG,qBAAsBovB,IAC5C,MAEF,QACEpuB,EAAQouB,QAIZnuB,EAAO,IAAIjB,EAAQ,EAAG,iBAAkB,CAACgE,QAASA,EAASsrB,WAAYf,EAAIgB,oBAAqBH,IAEnG,MACCnuB,EAAO,IAAWjB,EAAC,EAAG,+CAAgD,CAACoB,SAAU4tB,IAUpF,CARC,MAAOztB,GACHA,aAAwBiuB,aAC1B5sB,QAAQC,IAAI,2BACZ5B,EAAO,IAAWjB,EAAC,EAAG,sBAAuB,CAACsrB,MAAO/pB,OAErDqB,QAAQC,IAAI,gEACZ5B,EAAO,MAAY,EAAG,wBAEzB,CACH,KAEJqF,EAAQmpB,MAAM9E,EAAYhqB,UAAU4tB,IACpCjoB,EAAQopB,KACV,EACF,CAQAC,aAAazE,EAAeC,GAC1B,OAAO,IAAWpqB,QAAC,CAACC,EAASC,KAC3B,IACImX,EAAO,sCACS,mBAAjB/X,KAAKyqB,WACN1S,EAAO,sDAET/X,KAAKa,WAAWkX,EALL,CAAEwX,UAAU1E,EAAO2E,SAAS1E,IAKXhqB,KAAMC,IAK9Bf,KAAK6qB,MAAQA,EACb7qB,KAAK8qB,SAAWA,EAChB9qB,KAAK4qB,MAAQ7pB,EAASC,MAAM4pB,MAC5BjqB,GAAQ,KAKTM,MAAMgqB,IACPrqB,EAAOqqB,EACT,IAEJ,CASAwE,yBAAyB5E,EAAeE,EAAkBC,EAAqB+C,GAQ7E,OAPA/tB,KAAK6qB,MAAQA,EACb7qB,KAAK+qB,SAAWA,EAChB/qB,KAAKgrB,YAAcA,OACC,IAAV+C,IACRA,EAAU,SAGDrtB,IAAAA,QAAQ,CAACC,EAASC,KAI3BZ,KAAKa,WAHM,8CACA,CAAE0uB,UAAUvvB,KAAK6qB,MAAO6E,SAAU1vB,KAAK+qB,SAAU4E,YAAa3vB,KAAKgrB,YAAa4E,QAAS7B,IAExEjtB,KAAMC,SACH,IAAVA,EAAC8G,QAAwB9G,EAAS8G,OAAO,SAG1B,IAAjB9G,EAASC,YAAqD,IAAfD,EAACC,MAAM4pB,OACrE5qB,KAAK4qB,MAAQ7pB,EAASC,MAAM4pB,MAC5BjqB,GAAQ,IAGRA,GAAQ,GACT,GACAM,MAAMgqB,IACP,SAEJ,EACF,CAQA4E,cAAc1B,EAAc/qB,GAC1B,OAAW1C,IAAAA,QAAQ,CAACC,EAASC,KAM3BZ,KAAKa,WADM,kCADA,CAAE+pB,MAAOuD,IAEQrtB,KAAMC,IAC7BA,EAAS8G,OAAO,EAEjBlH,GAAQ,IAELyC,IACDpD,KAAK4qB,MAAQuD,GAEfxtB,EAAQI,EAASC,OAClB,GACAC,MAAMgqB,IACP,MACFA,GACF,EACF,CAOA6E,SAAS3B,GACP,MAAU,IAAPA,GAAoB,MAAPA,IACdnuB,KAAK4qB,MAAQuD,GACN,EAIX,CAOA4B,WACE,MAAe,IAAZ/vB,KAAK4qB,OAAyB,MAAZ5qB,KAAK4qB,OAGb5qB,KAAC4qB,KAEhB,CAOAoF,YAAYC,GACV,OAAWvvB,IAAAA,QAAQ,CAACC,EAASC,KAG3BZ,KAAKa,WADM,2BADA,CAAEqvB,WAAYD,IAEGnvB,KAAMC,IAG9BJ,SAF2B,MAATkH,QAAwB9G,EAAS8G,OAAO,GAK3D,GACA5G,MAAMgqB,IACP,MACFA,GACF,EACF,CAQAkF,0BACE,WAAkBzvB,QAAC,CAACC,EAASC,KAE3BZ,KAAKa,WADM,4CACW,CAAA,GAAIC,KAAMC,IAC9BJ,EAAQI,EAASC,MAAK,EAE1B,EACF,CAMAovB,qBACE,OAAW1vB,IAAAA,QAAQ,CAACC,EAASC,KAE3BZ,KAAKa,WADM,iCACW,CAAE,GAAEC,KAAMC,IAC9BJ,EAAQI,EAASC,MACnB,IAEJ,CAMAqvB,qBACE,OAAO,YAAY,CAAC1vB,EAASC,KAE3BZ,KAAKa,WADM,kCACW,IAAIC,KAAMC,IAC9BJ,EAAQI,EAASC,MAAK,EACvB,EAEL,CASAsvB,iBAAiBC,EAAcC,GAC7B,OAAO,YAAY,CAAC7vB,EAASC,KAM3BZ,KAAKa,WADM,mCAJA,CACT4vB,KAAQF,EACRG,QAAWF,IAGe1vB,KAAMC,IAChCJ,EAAQI,EAASC,MAAK,EACvB,EAEL,CAUA2vB,uBAAuBC,GACrB,OAAO,IAAWlwB,QAAC,CAACC,EAASC,UACY,SAAxB2qB,WAAWqF,IACxBhwB,EAAO,IAAIjB,EAAQ,EAAG,qDAAsD,CAAC+B,SAAYkvB,EAAWxuB,UAAapC,KAAKurB,cAMxHvrB,KAAKa,WADM,+CAHA,CACTgwB,UAAa7wB,KAAKurB,WAAWqF,KAGH9vB,KAAMC,IAChCJ,EAAQI,EAASC,MACnB,IAEJ,CAUA8vB,wBAAwBvF,GACtB,OAAO,YAAY,CAAC5qB,EAASC,KACzB,IAAQgD,EAAkC,CACxCmtB,WAAY,IAEhB7wB,EAAEsE,QAAQ+mB,EAAahjB,SACU,SAAhBgjB,WAAWhjB,GACxB3H,EAAO,IAAIjB,EAAQ,EAAG,qDAAsD,CAAC+B,SAAY6G,EAAGnG,UAAapC,KAAKurB,cAE9G3nB,EAAKmtB,WAAWpsB,KAAK3E,KAAKurB,WAAWhjB,GACtC,GAGHvI,KAAKa,WADM,gDACW+C,GAAM9C,KAAMC,IAChC,IAAIiwB,EAAc,CAAE,EAEhBC,EAAiB/wB,EAAEgxB,OAAOlxB,KAAKurB,YACnCrrB,EAAEsE,QAAQzD,EAAU,CAACowB,EAASC,UACQ,IAAZH,EAACE,GACvBvwB,EAAO,IAAWjB,EAAC,EAAG,wEAA0E,CAAC0xB,sBAAyBF,EAAS/uB,UAAapC,KAAKurB,cAGrJyF,EAAIC,EAAeE,IAAYC,CAChC,GAEHzwB,EAAQqwB,EACV,IAEJ,CAUAM,qBAAqBC,GACnB,OAAO,IAAW7wB,QAAC,CAACC,EAASC,UACQ,IAAzBZ,KAAKwrB,SAAS+F,IACtB3wB,EAAO,IAAIjB,EAAQ,EAAG,mDAAoD,CAAC+B,SAAY6vB,EAASnvB,UAAapC,KAAKwrB,YAMpHxrB,KAAKa,WADM,6CAHA,CACT2wB,QAAWxxB,KAAKwrB,SAAS+F,KAGCzwB,KAAMC,IAChCJ,EAAQI,EAASC,QAClB,EAEL,CAUAywB,sBAAsBjG,GACpB,OAAW9qB,IAAAA,QAAQ,CAACC,EAASC,KAC3B,IAAQgD,EAAgC,CACtC8tB,SAAU,IAEZxxB,EAAEsE,QAAQgnB,EAAWjjB,SACU,IAAfvI,KAACwrB,SAASjjB,GACtB3H,EAAO,MAAY,EAAG,mDAAoD,CAACc,SAAY6G,EAAGnG,UAAapC,KAAKwrB,YAE5G5nB,EAAK8tB,SAAS/sB,KAAK3E,KAAKwrB,SAASjjB,GAClC,GAGHvI,KAAKa,WADM,8CACW+C,GAAM9C,KAAMC,IAChC,IAAIiwB,EAAc,CAAA,IAEC9wB,EAAEgxB,OAAOlxB,KAAKwrB,UACjCtrB,EAAEsE,QAAQzD,EAASC,MAAO,CAAC2wB,EAAUP,UACA,IAAzBQ,EAAaD,GACrB/wB,EAAO,IAAWjB,EAAC,EAAG,sEAAwE,CAAC+B,SAAYiwB,EAAUvvB,UAAawvB,KAGlIZ,EAAIY,EAAaD,IAAaP,CAC/B,GAEHzwB,EAAQqwB,IACT,EAEL,CAaAa,sBAAsBC,GACpB,WAAkBpxB,QAAC,CAACC,EAASC,KAK3BZ,KAAKa,WAJM,8CAC6B,CACtCkxB,SAAUD,IAEgBhxB,KAAMC,IAChCJ,EAAQI,EAASC,MAAK,EAE1B,EACF,CASAgxB,qBAAqBnH,EAAgBC,GACnC,OAAO,YAAY,CAACnqB,EAASC,KAM3BZ,KAAKa,WALM,8CACA,CACT0uB,eAA2B,IAAF1E,EAAiBA,EAAO7qB,KAAK6qB,MACtD2E,cAA8B,MAAe1E,EAAW9qB,KAAK8qB,WAEnChqB,KAAMC,IAChCJ,EAAQI,EAASC,MACnB,EACF,EACF,CAOAixB,UACE,WAAkBvxB,QAAC,CAACC,EAASC,KAG3BZ,KAAKa,WAFM,iCACA,CAAE,GACeC,KAAMC,IAChCJ,EAAQI,EAASC,QAClB,EAEL,CAQAuF,KAAKskB,GACH,OAAO,YAAY,CAAClqB,EAASC,KAG3BZ,KAAKa,WAFM,8BACA,CAAE0uB,eAA2B,IAAF1E,EAAiBA,EAAO7qB,KAAK6qB,QACvC/pB,KAAMC,IAChCJ,EAAQI,EAASC,MAAK,EACvB,EAEL,CAOAkxB,UACE,WAAkBxxB,QAAC,CAACC,EAASC,KAG3BZ,KAAKa,WAFM,iCACA,CAAA,GACiBC,KAAMC,IAChCJ,EAAQI,EAASC,MACnB,IAEJ"}