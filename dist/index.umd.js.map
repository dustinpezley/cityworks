{"version":3,"file":"index.umd.js","sources":["../src/error.ts","../src/general.ts","../src/activity_link.ts","../src/gis.ts","../src/message_queue.ts","../src/search.ts","../src/request.ts","../src/inspection.ts","../src/workorder.ts","../src/briefcase.ts","../src/case_data.ts","../src/case_financial.ts","../src/comments.ts","../src/case_workflow.ts","../src/case_admin.ts","../src/case_assets.ts","../src/workorder_admin.ts","../src/inspection_admin.ts","../src/request_admin.ts","../src/index.ts"],"sourcesContent":["const _ = require('lodash')\n\n/**\n * CWErrorInt interface definition for implementation by CWError\n *\n * `{name: string, code: number, message: string, info?: string}`\n *\n */\nexport interface CWErrorInt {\n  name: string\n  code: number\n  message: string\n  info?: string\n}\n\n/**\n * CWError implements a custom error class for this codebase with additional information\n *\n */\nexport class CWError implements CWErrorInt {\n  /**\n   * Just statically set to \"Cityworks Exception\" for now\n   */\n  name: string\n  /**\n   * Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   */\n  code: number\n  /**\n   * The error message\n   */\n  message: string\n  /**\n   * Object stuffed with any other information one wishes to include in the thrown error\n   */\n  info?: string\n\n  /**\n   * CWError implements a custom error class for this codebase with additional information\n   *\n   * @param {number} code - Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   * @param {string} message - The error message\n   * @param {Object} info - Object stuffed with any other information one wishes to include in the thrown error\n   * @return {Object} Returns instance of CWError object\n   */\n  constructor(code:number, message:string, info?:object) {\n    this.name = \"Cityworks Exception\"\n    this.code = code\n    this.message = message\n    if(typeof(info) !== 'undefined') {\n      if(_.has(info, 'Message'))\n        this.message = _.get(info, 'Message')\n      this.info = JSON.stringify(info)\n    }\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n/**\n * A plugin that contains \"general\" methods for a Cityworks install\n */\nexport class General {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get notifications for currently authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of available notifications\n   */\n  notifications() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('General/ActivityNotification/User', {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Find out if the current user is watching a particular activity (case, task, null [as a string])\n   *\n   * @param {string} activityType - which activity type the following ID will be for.\n   * @param {number} activityId - activity Case or CaseTask (task instance) ID to check\n   * @return {Object} Returns Promise object that represents a boolean indicating the currently authenticated user is watching the provided activity\n   */\n  amIWatching(activityType, activityId: number) {\n    return new Promise((resolve, reject) => {\n      let aType = {'null': 0, 'case': 1, 'task': 2}\n      if(typeof(aType[activityType])=='undefined') {\n        // reject with error\n        reject(new CWError(1, \"Activity type provided does not exist.\", {provided: activityType, potential_activities: aType}))\n      } else {\n        let data = {\"ActivityType\": aType[activityType], \"ActivityId\": activityId}\n        this.cw.runRequest('General/ActivityNotification/UserWatching', data).then(r => {\n          // console.log(r, 'response')\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get CwMetatData by Type and CwSid\n   *\n   * @param {Array<number>} Ids\n   * @param {string} TableName - INSPECTION, REQUEST, WORKORDER require View permission on the activities\n   * @return {Object} Returns Promise object that represents a\n   */\n  getActivityMetadataByIds(ids: Array<number>, table: string) {\n    return new Promise((resolve, reject) => {\n      let tables = [\"INSPECTION\", \"REQUEST\", \"WORKORDER\"]\n      if(_.indexOf(tables, table)==-1) {\n        reject(new CWError(2, 'TableName provided does not exist or is mispelled.', {'provided': table, 'available':tables}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"TableName\": table\n      }\n      this.cw.runRequest('General/CwMetaData/ByTableNameSids', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get recent history for authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of RecentActivity objects\n   */\n  getHistory() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      this.cw.runRequest('Ams/Search/RecentActivity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for WorkOrder entities\n   *\n   * @param {Array<number>} ObjectIds\n   * @return {Object} Returns Promise object that represents a\n   */\n  getWOEntityCostSummary(object_ids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"ObjectIds\": object_ids\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for WorkOrder entities selected through a search definition\n   *\n   * @param {number} SearchId - Search Definition Id\n   * @return {Object} Returns Promise object that represents a\n   */\n  searchWOEntityCostSummary(search_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"SearchId\": search_id\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntitySearch', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\n/**\n * ActivityLink interface for ActivityLinks\n *\n */\nexport interface ActivityLink {\n  linkTypes: ReversibleMap<string, number>\n  activityTypes: ReversibleMap<string, number>\n  cw: any\n}\n\n/**\n * ActivityLinks implements the activity link functions via using the ActivityLink interface\n *\n */\nexport class ActivityLinks implements ActivityLink {\n  /**\n   * Activity types to map string to number for internal use. Activity types available are:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   */\n  activityTypes: ReversibleMap<string, number>\n  /**\n   * Link types to map string to number for internal use. Link types available are:\n   *\n   *      \"null\", \"parent\", \"related\"\n   */\n  linkTypes: ReversibleMap<string, number>\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"null\", 0)\n    this.activityTypes.set(\"case\", 1)\n    this.activityTypes.set(\"inspection\", 2)\n    this.activityTypes.set(\"request\", 3)\n    this.activityTypes.set(\"workorder\", 4)\n    this.activityTypes.set(\"wipcase\", 5)\n\n    this.linkTypes = new ReversibleMap<string, number>()\n    this.linkTypes.set(\"null\", 0)\n    this.linkTypes.set(\"parent\", 1)\n    this.linkTypes.set(\"related\", 2)\n  }\n\n  /**\n   * Create a new activity link between two items.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  add(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(3, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Add'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the links for a particular node type by ID.\n   *\n   * @param {string} type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {Array<number>} sids - Array of numeric (S)IDs you wish to get of the specified type\n   * @return {Object} Returns Promise object that represents a collection\n   */\n  get(type: string, sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(type)) {\n        reject(new CWError(4, 'Activity type not found.', {'provided': type, 'options':this.activityTypes}))\n      }\n      let data = {\n        ActivityType: this.activityTypes.get(type),\n        ActivitySids: sids\n      }\n      let _this = this\n      let path = 'General/ActivityLink/ByActivitySids'\n      this.cw.runRequest(path, data).then((response: any) => {\n        let return_data = new Array()\n        _.forEach(response.Value, (link, key) => {\n          link.DestType = _this.activityTypes.get(link.DestType)\n          link.SourceType = _this.activityTypes.get(link.SourceType)\n          link.LinkType = _this.linkTypes.get(link.LinkType)\n          return_data.push(link)\n        })\n        resolve(return_data)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Clone a current activity link.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to clone a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to clone a link between SID as destination and a particular source\n   * @return {Object} Returns Promise object that represents a\n   */\n  clone(source_type: string, source_sid: number, destination_type: string, destination_sid: number) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      let data = {\n        SourceActivityType: this.activityTypes.get(source_type),\n        SourceActivitySid: source_sid,\n        DestinationActivityType: this.activityTypes.get(destination_type),\n        DestinationActivitySid: destination_sid\n      }\n      let path = 'General/ActivityLink/CloneByActivitySid'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete an activity link by ID\n   *\n   * @param {number} activity_link_id - The ID of the activity link one wishes to delete\n   * @return {Object} Returns Promise object that represents a\n   */\n  delete(activity_link_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        ActivityLinkId: activity_link_id\n      }\n      let path = 'General/ActivityLink/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Remove a link by specifying everything.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  remove(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(1, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Remove'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Gis {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get gis service configuration for user, group, domain, or service id\n   *\n   * @param {string} [whichType] - domain, group, mapservice, or user\n   * @param {number} [whichId] - domain, group, mapservice, or user Id\n   * @param {number} [getGisData] - If true, check for feature server JSON data, default is true\n   * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  getConfig(whichType, whichId, getGisData: boolean = true, context: Array<string> = []) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain'\n      whichType = whichType.toLowerCase()\n      let data: {DomainId?: any, GroupId?: any, MapServiceId?: any, UserId?: any, GetGisData: boolean, Security: Array<string>}\n      switch(whichType) {\n        case 'domain':\n          data = {DomainId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'group':\n          data = {GroupId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'mapservice':\n          data = {MapServiceId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'user':\n          data = {UserId:whichId, GetGisData: getGisData, Security: context}\n          break\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n    * Get domain gis services\n    *\n    * @param {number} domainId - The mobile map cache Id to download\n    * @return {Object} Returns Promise object that represents an Object with the domain's default GIS services\n    */\n  domain(domainId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain'\n      let data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Download mobile map cache\n     *\n     * @param {number} cacheId - The mobile map cache Id to download\n     * @return {Object} Returns Promise object that represents a streaming download (?)\n     */\n  downloadMobile(cacheId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/DownloadMobileMapCache'\n      let data = {\n        MobileMapCacheId: cacheId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get initial extent for user\n   *\n   * @return {Object} Returns Promise object that represents ... (?)\n   */\n  initialExtent() {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InitialExtent'\n      let data = {};\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get service request gis services\n   *\n   * @param {number} requestId - The WorkOrder to check against.\n   * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n   * @return {Object} Returns Promise object that represents an Object with the specified request's entit(y|ies)\n   */\n  request(requestId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/ServiceRequestConfiguration'\n      let data = {\n        RequestId: requestId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get inspection gis services\n     *\n     * @param {number} inspectionId - The WorkOrder to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified inspection's entity\n     */\n  inspection(inspectionId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InspectionConfiguration'\n      let data = {\n        InspectionId: inspectionId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get workorder gis services\n     *\n     * @param {number} workOrderSid - The WorkOrder to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified WorkOrder's entit(y|ies)\n     */\n  workOrder(workOrderSid, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/WorkOrderConfiguration'\n      let data = {\n        WorkOrderSid: workOrderSid,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get service request gis services\n     *\n     * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n     * @param {boolean} [allDomains] services assigned to any domain the user belongs to, default is true\n     * @param {boolean} [allGroups] services assigned to any groups the user belongs to regardless of domain, default is true\n     * @param {boolean} [getGisData] If true, check for feature server JSON data, default is true\n     * @return {Object} Returns Promise object that represents an Object with the user's GIS services\n     */\n  user(context: Array<string> = [], allDomains: boolean = true, allGroups: boolean = true, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/User'\n      let data = {\n        AllDomains: allDomains,\n        AllGroups: allGroups,\n        GetGisData: getGisData,\n        Security: context\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Geocode server info by ServerId\n   *\n   * @param {number} ServiceId\n   * @return {Object} Returns Promise object that represents an object describing the provided Geocoder service configuration\n   */\n   // Gis/GeoCode/GeocodeServer\n\n   /**\n      * Get currently selected entities from the Cityworks install's session for your user\n      * @return {Object} Returns Promise object that represents an Object with the currently-selected entities\n      */\n   selectedEntities() {\n     return new Promise((resolve, reject) => {\n       let path = 'General/AppData/SelectedEntities'\n       this.cw.runRequest(path, {}).then((response: any) => {\n         resolve(response.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n      * Get attributes available for provided entity\n      *\n      * @param {string} entityType - The entity type to describe\n      * @return {Object} Returns Promise object that represents a collection of attribute description objects\n      */\n   getEntityAttributes(entityType:string) {\n     return new Promise((resolve, reject) => {\n       let data = {EntityType: entityType}\n       let path = 'AMS/Entity/Attributes'\n       this.cw.runRequest(path, data).then((response: any) => {\n         resolve(response.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class MessageQueue {\n  /**\n   * @hidden\n   */\n  cw: any\n  /**\n   * Statuses -\n   * Pending: 0,\n   * Processing: 1,\n   * Complete: 2,\n   * Failed: 3\n   */\n  status: Object = {\n    Pending: 0,\n    Processing: 1,\n    Complete: 2,\n    Failed: 3\n  }\n  /**\n   * Hook Types -\n   * Unknown: 0,\n   * ActivityUpdate: 1,\n   * Email: 2,\n   * WebHook: 3\n   */\n  hook_types: Object = {\n    Unknown: 0,\n    ActivityUpdate: 1,\n    Email: 2,\n    WebHook: 3\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Process Webhook MessageQueue records by MessageQueueId\n   *\n   * @param {Array<number>} [ids] - List of MessageQueueId values\n   * @param {boolean} [delete_successful] - automatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  processMessages(ids: Array<number>, delete_successful: boolean = false) {\n    return new Promise((resolve, reject) => {\n      let data = { Ids: ids, Delete: delete_successful}\n      let path = 'General/WebHookEvent/ProcessMessages'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status -\n   * @param {number} [maxcount] - Maximum number returned. Defaults to 15\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  get(ids: Array<number>, status: string, maxcount: number = 15) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(1, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"MaxCount\": typeof(maxcount)!='undefined' ? maxcount : 15,\n        \"Status\": this.status[status]\n      }\n      let path = 'General/MessageQueue/ByIds'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status - automatically delete messages that complete with successful execution, default is false\n   * @param {number} [hours_to_keep] - utomatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  delete(ids: Array<number>, status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // PreferencesList<GlobalPreference>\n  // Base response type: CoreResponseBase\n  // Get a list of message queue preferences\n  // This method has no parameters\n  preferences() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      let path = 'General/MessageQueue/Preferences'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  search(parameters, max_results?: number) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(max_results)!=='undefined') {\n        data.MaxResults = max_results\n      }\n      let allowed_params = ['Id', 'HookId', 'HookType', 'Result', 'DateCreatedBegin', 'DateCreatedEnd', 'DateUpdatedBegin', 'DateUpdatedEnd']\n      let disallowed_params = ['Status', 'MaxResults']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(4, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n      let path = 'General/MessageQueue/Search'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update queue message\n   *\n   * @param {Object} parameters - Provide allowed parameters:\n   *\n   *      {\n   *        HookId: number,\n   *        Id: number,\n   *        Packet: string,\n   *        Result: string,\n   *        Status: string, // Available options: Pending, Processing, Complete, Failed\n   *        HookType: string // Available options: Unknown, ActivityUpdate, Email, WebHook\n   *      }\n   *\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  update(parameters: any) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.hook_types, 'available':this.hook_types}))\n      } else if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])!=='undefined') {\n        data.HookType = this.hook_types[parameters.hook_types]\n      }\n      let allowed_params = ['Id', 'HookId', 'Packet', 'Result']\n      let disallowed_params = ['Status', 'HookType']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(5, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n\n      let path = 'General/MessageQueue/Update'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  updateMessageStatus(ids: number[], status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/UpdateMessageStatus'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  getWebooks(hook_ids) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"HookIds\": hook_ids\n      }\n      let path = 'General/MessageQueue/WebHooks'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Search {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Search Types: Null, Request, WorkOrder, Inspection, Contract, Permit, GIS, PermitTask, PermitAddress, InspCommon, Case, WorkOrderEntity, StoreTransaction, Requisition, Material, WorkActivity, MaterialLeaf, WoTemplate, Unknown, Employee, MessageQueue, Analytics, TokenState, AssetCalculationResult, Equipment, CustomerAccount, InspTemplate, ProblemLeaf, AssetSplitRecord, PavementInsp, TvInspection, Projects\n   */\n  searchTypes: Object = {\n    \"Null\": 0,\n    \"Request\": 1,\n    \"WorkOrder\": 2,\n    \"Inspection\": 3,\n    \"Contract\": 4,\n    \"Permit\": 5,\n    \"GIS\": 6,\n    \"PermitTask\": 7,\n    \"PermitAddress\": 8,\n    \"InspCommon\": 9,\n    \"Case\": 10,\n    \"WorkOrderEntity\": 11,\n    \"StoreTransaction\": 12,\n    \"Requisition\": 13,\n    \"Material\": 14,\n    \"WorkActivity\": 15,\n    \"MaterialLeaf\": 16,\n    \"WoTemplate\": 17,\n    \"Unknown\": 18,\n    \"Employee\": 19,\n    \"MessageQueue\": 20,\n    \"Analytics\": 21,\n    \"TokenState\": 22,\n    \"AssetCalculationResult\": 23,\n    \"Equipment\": 24,\n    \"CustomerAccount\": 25,\n    \"InspTemplate\": 26,\n    \"ProblemLeaf\": 27,\n    \"AssetSplitRecord\": 28,\n    \"PavementInsp\": 29,\n    \"TvInspection\": 30,\n    \"Projects\": 31\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Do a \"quick\" search for any string (an ID is best)\n   *\n   * @category Quick Search\n   * @param {string} text - text to search the system for\n   * @return {Object} Returns Promise object that represents a collection of the currently authenticated user's notifications\n   */\n  quick(text: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"QuickSearchText\": text,\n      }\n      this.cw.runRequest('General/QuickSearch/QuickSearch', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Execute a saved search\n   *\n   * @category Search\n   * @param {number} searchId - SearchId to execute\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @return {Object} Returns Promise object that represents a list of Objects\n   */\n  execute(searchId: number, options?: {EmployeeSid?: number, ExcludeEmptyXY?: boolean, Extent?: Object, Frequency?: boolean, IdsOnly?: boolean, IncludeSearchOrder?: boolean, MaxResults?: number, ResultFields?: Array<string>, TotalOnly?: boolean}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchId: searchId\n      }\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/Execute', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of the saved searches by search type and specific entity types OR employeeSid/domainId. You cannot search for saved searches by both specific entity type AND employeeSid/domainId.\n   *\n   * @category Search\n   * @param {string} searchType - Get the saved searches for a particular type\n   * @param {Array<string>} [applyToEntities] - Restrict GIS searches to specified entity types\n   * @param {number} [employeeSid] - The employee SID to retrieve the searches as\n   * @param {number} [domainId] - The domain ID of the domain to search\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionName\n   */\n  getSaved(searchType: string, applyToEntities?: Array<string>, employeeSid?: number, domainId?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(2, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      } else if(typeof(applyToEntities)!='undefined' && applyToEntities!=null && applyToEntities.length>0 && (typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined')) {\n        reject(new CWError(3, 'You cannot specify both applyToEntities AND employeeSid/domainId'))\n      }\n      var data = {}\n      var savedEndpoint = ''\n      if(typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined') {\n        savedEndpoint = 'SavedByType'\n        if(typeof(employeeSid)!='undefined' && employeeSid!=null) {\n          _.set(data, 'EmployeeSid', employeeSid)\n        }\n        if(typeof(domainId)!='undefined' && domainId!=null) {\n          _.set(data, 'DomainId', domainId)\n        }\n      } else {\n        if(searchType=='Case') {\n          savedEndpoint = 'PllSavedSaved'\n        } else {\n          savedEndpoint = searchType + 'Saved'\n        }\n        if(typeof(applyToEntities)!='undefined' && applyToEntities!=null) {\n          _.set(data, 'ApplyToEntities', applyToEntities)\n        }\n      }\n      this.cw.runRequest('Ams/Search/'+savedEndpoint, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list display fields for a Search Type\n   *\n   * @category Search Options\n   * @param {string} searchType - Restrict GIS searches to specified entity types\n   * @return {Object} Returns Promise object that represents a collection of SearchDisplayFields\n   */\n  displayFields(searchType: string) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      }\n      var data = {\n        searchType: _.get(this.searchTypes, searchType)\n      }\n      this.cw.runRequest('Ams/Search/DisplayFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list search types\n   *\n   * @category Search Options\n   * @return {Object} Returns Promise object that represents a collection of SearchTypeInfo objects\n   */\n  types() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Ams/Search/Types', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Enable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  enableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: true,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Disable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  disableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: false,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a search definition\n   *\n   * @category Search Definitions\n   * @param {number} searchId - SearchId to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a SearchDefinition object\n   */\n  getDefinition(searchId: number, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchId: searchId\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinition objects\n   */\n  getDefinitions(searchIds: Array<number>, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definition names\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionNames\n   */\n  getDefinitionNames(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DefinitionNames', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a list (dictionary) of search IDs and deletion success boolean\n   */\n  deleteDefinitions(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DeleteDefinitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Save a search definition\n   *\n   * @category Search Definitions\n   * @param {string} searchFor - Name of type to search for from searchTypes\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @param {number} searchId - SearchId to update. Defaults to \"0\" which is \"Create new saved search\"\n   * @return {Object} Returns Promise object that represents a SearchDefinitionName object\n   */\n  saveDefinition(searchFor: string, options?: Object, searchId: number = 0) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchFor)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchFor, 'available':this.searchTypes}))\n      }\n      var data = {\n        SearchFor: _.get(this.searchTypes, searchFor),\n        SearchId: searchId\n      }\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/SaveDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Request {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Request Administration methods\n   */\n  admin?: any\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin\n    this.comment\n  }\n\n  /**\n   * Create new requests\n   *\n   * @category Requests\n   * @param {Object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created request\n   */\n  create(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'ProblemSid')) {\n        reject(new CWError(2, 'ProblemSid must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Create', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a request\n   *\n   * @category Requests\n   * @param {object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  update(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'RequestId')) {\n        reject(new CWError(3, 'RequestId must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Update', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Move a request's point\n   *\n   * @category Requests\n   * @param {number} requestId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(requestId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        RequestId: requestId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'Z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/ServiceRequest/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update request's map layer fields\n   *\n   * @category Requests\n   * @param {number} requestId\n   * @return {Object} Returns Promise that represents an object describing the updated map layer fields\n   */\n  updateMLF = (requestId: number) => {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ServiceRequestId: requestId\n      }\n      this.cw.runRequest('Ams/TemplateMapLayer/ServiceRequestInstanceMapLayersByRequestId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Change a request's problem code\n   *\n   * @category Requests\n   * @param {number} requestId - The request ID to change\n   * @param {number} problemSid - The request's new ProblemSID\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  changeProblem(requestId: number, problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId,\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeProblem', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a request by ID\n   *\n   * @category Requests\n   * @param {number} requestId - The ID of the request to retrieve\n   * @return {Object} Returns Promise that represents an object describing the request\n   */\n  getById(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get requests by array of IDs\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The request IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the requests\n   */\n  getByIds(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific request\n   *\n   * @category Requests\n   * @param {number} requestId - A Request ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {RequestId: requestId}\n      this.cw.runRequest('Ams/ServiceRequest/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom fields for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFields(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/CustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Change custom field category for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @param {number} categoryId - The new custom field grouping/category which should be assigned to the provided requests\n   * @return {Object} Returns Promise that represents a collection of requests\n   */\n  changeCustomFieldCategory(requestIds: Array<number>, categoryId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n        CategoryId: categoryId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeCustomFieldCategory', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to cancel the matched requests\n   * @param {string} [cancelReason] - A reason for cancelling the request(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the request was cancelled\n   * @return {Object} Returns object that represents a collection of requests\n   */\n   cancel(requestIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {RequestIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { RequestIds: requestIds }\n       if(typeof(cancelReason)!=='undefined')\n         _.set(data, 'CancelReason', cancelReason);\n       if(typeof(dateCancelled)!=='undefined')\n         _.set(data, 'DateCancelled', dateCancelled);\n       this.cw.runRequest('Ams/ServiceRequest/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to close the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    close(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed requests\n     *\n     * @category Requests\n     * @param {Array<number>} requestIds - An array of the IDs to reopen the matched requests\n     * @return {Object} Returns object that represents a collection of requests\n     */\n     reopen(requestIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           RequestIds: requestIds\n         }\n         this.cw.runRequest('Ams/ServiceRequest/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to delete the matched requests\n   * @return {Object} Returns object that represents a collection of request Ids which have been deleted\n   */\n   delete(requestIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestIds: requestIds\n       }\n       this.cw.runRequest('Ams/ServiceRequest/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Search for requests\n    *\n    * @category Request Search\n    * @param {Object} searchData - The search information to retrieve matched requests, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents an Array of the matching request IDs\n    */\n   search(searchData: Object) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       this.cw.runRequest('Ams/ServiceRequest/Search', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the records on the basis of RequestId, only populates RequestId, Description, ProblemCode properties\n    *\n    * @category Request Object Search\n    * @param {string} requestId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents a collection of the matching (limited) request objects\n    */\n   searchObject(requestId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestId: requestId\n       }\n       this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Requests\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n    */\n   createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         _.set(data, 'EnableEurl', enableEurl)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequest/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get a list of problem nodes for a domain\n   *\n   * @category Request Categorization\n   * @param {number} domainId - The domain ID for which to retrieve problem nodes.\n   * @param {boolean} viewOnly - Return only view only problem nodes. Defaults to false.\n   * @param {Object} [displayMode] - Object that should contain two properties if you provide it: DisplayTextMode: string (C = Code, D = Description, CD = Code ~ Description). DisplayTextDelimeter: string, only impacts CD display text mode.\n   * @param {boolean} includeCancelled - Return only cancelled problem nodes as well. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of problem node objects.\n   */\n  getProblemNodes(domainId: number, viewOnly: boolean = false, displayMode?: Object, includeCancelled: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainId: domainId,\n        IncludeCancelled: includeCancelled,\n        ViewOnly: viewOnly\n      }\n      if(typeof displayMode != 'undefined' && displayMode !== null && _.has(displayMode, 'DisplayTextMode')) {\n        _.set(data, 'DisplayTextMode', _.get(displayMode, 'DisplayTextMode'))\n        if(_.get(displayMode, 'DisplayTextMode')=='CD' && _.has(displayMode, 'DisplayTextDelimeter')) {\n          _.set(data, 'DisplayTextDelimeter', _.get(displayMode, 'DisplayTextDelimeter'))\n        }\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemNodes', data).then(r => {\n        // console.log(_.filter(r, function(o) { return !o.Cancel; }), 'filter');\n        // console.log(_.some(r.Value, ['Cancel', true]), 'some');\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes\n   *\n   * @category Request Options\n   * @param {boolean} forPublicOnly - Return only publicly-available service requests. Defaults to false.\n   * @param {boolean} onlyActiveTemplates - Return only active templates. Defaults to true.\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblems(forPublicOnly: boolean = false, onlyActiveTemplates: boolean = true, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ForPublicOnly: forPublicOnly,\n        OnlyActiveTemplates: onlyActiveTemplates\n      }\n      if(typeof domainIds != 'undefined') {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Problems', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes by keywords\n   *\n   * @category Request Options\n   * @param {string} keywords - Keywords to search for potential problem codes\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblemsByKeywords(keywords: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Keywords: keywords\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemsByKeywords', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of a problem code's priorities\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return priorities for given problemSid\n   * @return {Object} Returns Promise that represents an Array of priorities\n   */\n  getPriorities(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Priorities', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field templates for problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose template custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFieldTemplate(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/TemplateCustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the questions and answer options for a problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose Q&A should be returned\n   * @return {Object} Returns Promise that represents a collection of questions and answer settings\n   */\n  getQASettings(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get problem leaf (template) by Sid\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return problem leaf for given problemSid\n   * @return {Object} Returns Promise that represents an Object that describes the problem leaf (template)\n   */\n  getProblemLeaf(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemLeafBySid', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of default statuses\n   *\n   * @category Request Options\n   * @param {Array<number>} domainIds - List of domains to return default statuses for\n   * @return {Object} Returns Promise that represents an Array of statuses.\n   */\n  getStatuses(domainIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainIds: domainIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/DefaultStatus', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of possible Employee values\n   *\n   * @category Request Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only DispatchTo & SubmitTo.\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of Employee options.\n   */\n  getEmployeeLists(listType: string, domainId: number) {\n    return new Promise((resolve, reject) => {\n      // TODO: make a default domain option on the CW object for cases like this.\n      var data = {\n        DomainId: domainId\n      }\n      if(!_.includes(['DispatchTo', 'SubmitTo'], listType)) {\n        reject(new CWError(2, 'listType must be either SubmitTo or DispatchTo.', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/ServiceRequest/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get a list of possible DispatchTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of dispatchTo options.\n   */\n  getDispatchTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('DispatchTo', domainId);\n  }\n\n  /**\n   * Get a list of possible SubmitTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible submitTo values for\n   * @return {Object} Returns Promise that represents an Array of submitTo options.\n   */\n  getSubmitTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('SubmitTo', domainId);\n  }\n\n  /**\n   * Get street codes\n   *\n   * @category Request Options\n   * @return {Object} Returns Promise that represents an Array of Street Codes.\n   */\n  streetCodes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/ServiceRequest/AllStreetCode', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates\n   *\n   * @category Request Templates\n   * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n   * @param {Date} [minimumDateModified] - ?\n   * @param {Date} [maximumDateModified] - ?\n   * @return {Object} Returns Promise that represents\n   */\n   getTemplatesById(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         ProblemSids: null\n       }\n       if(typeof minimumDateModified != 'undefined') {\n         _.set(data, 'MinimumDateModified', minimumDateModified)\n       }\n       if(typeof maximumDateModified != 'undefined') {\n         _.set(data, 'MaximumDateModified', maximumDateModified)\n       }\n\n       this.cw.runRequest('Ams/ServiceRequestTemplate/ByIds', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Request Templates\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CWMetadata\n    */\n   createTemplateSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequestTemplate/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the questions and answers for a(many) request template(s)\n    *\n    * @category Request Templates\n    * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n    * @return {Object} Returns Promise that represents a collection of ProblemQAs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemQA\n    */\n    getTemplateQAs(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: null\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/QA', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get a list of template id results for a provided search parameters\n     *\n     * @category Request Templates\n     * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n     * @return {Object} Returns Promise that represents a list of template IDs.\n     */\n    searchTemplates(searchData: Object) {\n      return new Promise((resolve, reject) => {\n        var data = searchData\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Search', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get request templates (problem leaf[s])\n     *\n     * @category Request Templates\n     * @param {Array<number>} [templateIds] - Array of specific template IDs to retrieve\n     * @param {number} canCreate - If true, only return templates the user can create, ignored if false or null, default is false\n     * @param {boolean} includeInactiveIf - If true, returns inactive templates, default is false\n     * @param {Date} [minimumDateModified] - ?\n     * @param {Date} [maximumDateModified] - ?\n     * @return {Object} Returns Promise that represents a collection of Problem Leafs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemLeaf\n     */\n    getTemplates(templateIds: Array<number>, canCreate: boolean = false, includeInactiveIf: boolean = false, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          CanCreate: canCreate,\n          IncludeInactiveIf: includeInactiveIf\n        }\n        if(typeof templateIds != 'undefined') {\n          _.set(data, 'TemplateIds', templateIds)\n        }\n        if(typeof minimumDateModified != 'undefined') {\n          _.set(data, 'MinimumDateModified', minimumDateModified)\n        }\n        if(typeof maximumDateModified != 'undefined') {\n          _.set(data, 'MaximumDateModified', maximumDateModified)\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get WorkOrder templates that are associated to this request template type\n     *\n     * @category Request Templates\n     * @param {Array<number>} problemSids - An array list of problemSids to retrieve Problem WO templates for\n     * @param {boolean} includeInactiveIf - Include inactive WorkOrder templates, default is false\n     * @return {Object} Returns Promise that represents a collection of Problem WO Templates. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemWOTemplate\n     */\n    getWOTemplates(problemSids: Array<number>, includeInactive: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: problemSids,\n          IncludeInactive: includeInactive\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/WorkOrderTemplates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Inspection {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Inspection Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin\n  }\n\n  /**\n   * Create new inspection\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created inspection\n   */\n  create(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n        reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n      } else {\n        this.cw.runRequest('Ams/Inspection/Create', insp_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create inspections from an array of entities\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents a collection of objects describing the newly-created inspections\n   */\n   createFromEntities(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromEntities', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a parent inspection (TODO: what parent!?)\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromParent(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // see if it's just InspectionId\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'InspectionId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromParent', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a service request\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromServiceRequest(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'RequestId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromServiceRequest', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a WorkOrder\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromWorkOrder(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // Are they  both actually required?!?!\n      // WorkOrderId\n      // WorkOrderSid ...do with only SID first then check\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'WorkOrderSid')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromWorkOrder', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Update an inspection\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated inspection\n   */\n  update(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      return new Promise((resolve, reject) => {\n        if(!_.has(insp_data, 'InspectionId')) {\n          reject(new CWError(1, 'InspectionId must be provided.', {'provided': insp_data}))\n        } else {\n          this.cw.runRequest('Ams/Inspection/Update', insp_data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Get an inspection by ID\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The inspection ID to retrieve\n   * @return {Object} Returns Promise that represents an object describing the inspection\n   */\n  getById(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/Inspection/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections by array of IDs\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - The inspection IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the inspections\n   */\n  getByIds(inspectionIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionIds: inspectionIds\n      }\n      this.cw.runRequest('Ams/Inspection/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to cancel the matched inspections\n   * @param {string} [cancelReason] - A reason for cancelling the inspection(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the inspection was cancelled\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   cancel(inspectionIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {InspectionIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { InspectionIds: inspectionIds }\n       if(typeof(cancelReason)!=='undefined') {\n         data.CancelReason = cancelReason\n       }\n       if(typeof(dateCancelled)!=='undefined') {\n         data.DateCancelled = dateCancelled\n       }\n       this.cw.runRequest('Ams/Inspection/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel inspections\n    *\n    * @category Requests\n    * @param {Array<number>} inspectionIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close inspections\n    *\n    * @category Inspections\n    * @param {Array<number>} inspectionIds - An array of the IDs to close the matched inspections\n    * @return {Object} Returns object that represents a collection of inspections\n    */\n    close(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Close', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Reopen closed inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   reopen(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Reopen', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Delete inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to delete the matched inspections\n   * @return {Object} Returns object that represents a collection of inspection Ids which have been deleted\n   */\n   delete(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Delete', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Search for inspections\n   *\n   * @category Inspection Search\n   * @param {Object} searchData - The search information to retrieve matched inspections, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents an array of the matching inspection IDs\n   */\n  search(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/Inspection/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the records on the basis of inspectionId, only populates InspectionId, InspTemplateName, and Location properties\n   *\n   * @category Inspection Object Search\n   * @param {string} inspectionId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents a collection of the matching (limited) inspection objects\n   */\n  searchObject(inspectionId: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get list of statuses\n   *\n   * @category Inspection Options\n   * @return {Object} Returns object that represents an array of all possible statuses for an Inspection\n   */\n  statuses() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Statuses', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection submit to list\n   *\n   * @category Inspection Options\n   * @param {boolean} [includeInactiveEmployees] - whether to include inactive employees in the return. Defaults to false.\n   * @param {boolean} [domainIds] - which domains to include in the return, default to All domains\n   * @return {Object} Returns object that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  submitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {IncludeInactiveEmployees?: boolean, DomainIds?: Array<number>} = {}\n      if(includeInactiveEmployees) {\n        data.IncludeInactiveEmployees = true\n      }\n      if(typeof(domainIds)!=='undefined') {\n        data.DomainIds = domainIds\n      }\n      this.cw.runRequest('Ams/Inspection/SubmitTos', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Add an entity to an existing inspection\n   * This method requires an Entity/Asset to be specified. You can either specify the Entity Type and its UID or a WorkOrderEntityBase Object.\n   *\n   * @category Inspections\n   * @param {Object} entity - Either of two attribute combinations are valid: entityType & entityUid OR Entity as a fully-inflated WorkOrderEntity (WorkOrderEntityBase) object.\n   * @param {number} inspectionId - An Inspection ID to attach the entity/asset to.\n   * @param {boolean} updateXY - Provide a boolean to whether the inspection's X/Y coordinates should be updated. Default is true.\n   * @param {Object} facility - Add Facility_Id for the Facility Identifier and Level_id for the Facility Level Identifier. Defaults to empty so that no facility is specified.\n   * @return {Object} Returns object that represents an object which describes an Inspection Entity\n   */\n  connectAsset(entity: {EntityType?: string, EntityUid?: string, Entity?: Object}, inspectionId: number, updateXY: boolean = true, facility: {Facility_Id?: string, Level_Id?: string} = {}) {\n   return new Promise((resolve, reject) => {\n     var data: {InspectionId: number, EntityType?: string, EntityUid?: string, Entity?: Object, Facility_Id?: string, Level_Id?: string} = {\n       InspectionId: inspectionId\n     }\n     if(_.has(entity, 'EntityType') && _.has(entity, 'EntityUid')) {\n       data.EntityType = entity.EntityType\n       data.EntityUid = entity.EntityUid\n     } else if(_.has(entity, 'Entity')) {\n       data.Entity = entity.Entity\n     } else {\n       // Throw error, no entity/asset provided\n     }\n     if(_.has(facility, 'Facility_Id')) {\n       data.Facility_Id = facility.Facility_Id\n     }\n     if(_.has(facility, 'Level_Id')) {\n       data.Level_Id = facility.Level_Id\n     }\n     this.cw.runRequest('Ams/Inspection/AddEntity', data).then(r => {\n       resolve(r.Value)\n     }).catch(e => {\n       // 4 NotAuthorizedToUpdateInspection\n       // 9 InvalidActivityMapLogicXY\n       // 21 ErrorUnknownEntityType\n       // 30 InvalidField\n       // 60 WarningItemNotFound\n       // 68 MoveInvalidCityworksWkid\n       reject(e)\n     })\n   })\n  }\n\n  /**\n   * Get the answers for inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspections - An Array of one or more Inspection IDs\n   * @return {Object} Returns Promise that represents a collection of Inspection Answers\n   */\n  getAnswers(inspections: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {InspectionId?: number, InspectionIds?: Array<number>} = {}\n      if(inspections.length==0) {\n        data.InspectionId = inspections[0]\n      } else {\n        data.InspectionIds = inspections\n      }\n      this.cw.runRequest('Ams/Inspection/Answers', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific Inspection\n   *\n   * @category Inspections\n   * @param {number} inspectionId - An Inspection ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {InspectionId: inspectionId}\n      this.cw.runRequest('Ams/Inspection/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n   *\n   * @category Inspections\n   * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @param {number} [searchName] - What to name your search (if it should be saved)\n   * @param {number} [sharedWithin] - What group or domain to share the search to.\n   * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n   * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      if(_.isString(searchName)) {\n        _.set(data, 'SearchName', searchName)\n        _.set(data, 'SaveDefinition', saveDefinition)\n        _.set(data, 'EnableEurl', enableEurl)\n        // not sure how to handle sharedWithin...\n        // _.set(data, 'SharedWithin', sharedWithin)\n      }\n      this.cw.runRequest('Ams/Inspection/CreateSearchDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle from\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents ... I have no idea what this endpoint does\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle intervals\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle intervals available\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle types\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle types available\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get districts\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents an Array of the districts\n   */\n  getDistricts() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Districts', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Inspection Employee lists. Abstraction done here, though only one employee list field, AFAIK.\n   *\n   * @category Inspection Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only SubmitTos.\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        IncludeInactiveEmployees: includeInactiveEmployees\n      }\n      if(typeof(domainIds)!='undefined' && domainIds!=null) {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      if(listType!='SubmitTos') {\n        reject(new CWError(2, 'listType must be \"SubmitTos\".', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/Inspection/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get SubmitTo list\n   *\n   * @category WorkOrder Options\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n  }\n\n  /**\n   * Move inspection by InspectionId. Must provide well known id (WKID) or well known text (WKT)\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The ID of the inspection that should be moved\n   * @param {number} x - The X coordinate for the move\n   * @param {number} y - The Y coordinate for the move\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - the optional Z coordinate for the move\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(inspectionId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(3, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        InspectionId: inspectionId,\n        X: x,\n        Y: y\n      }\n      if(typeof z != 'undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Ams/Inspection/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /////\n  // INSPECTION TEMPLATES\n  /////\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all Inspections matching the provided parameters\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates by IDs\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspectionIds - An array of the IDs to retrieve the matched inspections\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns object that represents an object describing the inspection\n   */\n  getTemplatesByIds(inspTemplateIds: Array<number>, options?: {MaximumDateModified?: Date, MinimumDateModified?: Date}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types for inspection template(s)\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents an array of Entity Types\n   */\n   getTemplateEntityTypes(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/EntityTypes', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n  * Get the questions and answers for inspection template(s)\n  *\n  * @category Inspection Templates\n  * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n  * @return {Object} Returns object that represents an array which contains a list of InspQuestionPanel for the template\n  */\n  getQA(inspTemplateIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection template question conditions\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of template IDs to get the matched inspection template Question conditions for\n   * @return {Object} Returns object that represents an array which contains a dictionary of InspQuestion IDs to configs\n   */\n   getQConditions(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/QuestionConditions', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  // Attachments\n\n  // AddInspectionAttachment InspAttachment\n  // Add an inspection attachment\n  // Request Parameters\n  // Int32 AttachmentType V15_4\n  // String Comments\n  // String Filename\n  // Int32 req InspectionId\n  // Ams/Attachments/AddInspectionAttachment?data={\n  //   \"Comments\": null,\n  //   \"Filename\": null,\n  //   \"InspectionId\": null,\n  //   \"AttachmentType\": null\n  // }\n\n  /**\n   * Delete inspection attachments\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} attachmentIds - An array of inspection attachment IDs to delete\n   * @return {Object} Returns object that represents a boolean for action resolution\n   */\n   deleteAttachments(attachmentIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentIds: attachmentIds\n       }\n       this.cw.runRequest('Ams/Attachments/DeleteInspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Download an inspection attachment\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - ID of an inspection attachment to download\n   * @return {Object} Returns object that represents a file stream\n   */\n   downloadAttachment(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/DownloadInspectionAttachment', data).then(r => {\n         // TODO, pass file through // resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - An attachment ID to get info for\n   * @return {Object} Returns object that represents an object that describes the matched inspection attachment\n   */\n   getAttachmentById(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachmentById', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} inspectionIds - An array of inspection IDs to get attachments for\n   * @return {Object} Returns object that represents a collection of attachments from the matched inspections\n   */\n   getAttachments(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n\nexport class WorkOrder {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * WorkOrder Administration methods\n   */\n  admin: any\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin\n    this.comment\n  }\n\n  /**\n   * Create new workorders, including linkin to Requests & Inspections (optionally)\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {Array<number>} [inspectionIds] - The inspection IDs which the workorder should be linked to.\n   * @param {Array<number>} [requestIds] - The inspection IDs which the workorder should be linked to.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  create(wo_data: Object, inspectionIds?: Array<number>, requestIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(typeof inspectionIds != 'undefined' && inspectionIds != null && !_.has(data, 'InspectionIds')) {\n          _.set(data, 'InspectionIds', inspectionIds);\n        }\n        if(typeof requestIds != 'undefined' && requestIds != null && !_.has(data, 'RequestIds')) {\n          _.set(data, 'RequestIds', requestIds);\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create new workorder linked to parent workorder\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  createFromParent(wo_data: Object, workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a WorkOrder\n   *\n   * @category WorkOrders\n   * @param {object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  update(wo_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WorkOrderSid') && !_.has(wo_data, 'WorkOrderId')) {\n        reject(new CWError(3, 'WorkOrderId or WorkOrderSid must be provided.', {'provided': wo_data}))\n      } else {\n        this.cw.runRequest('Ams/WorkOrder/Update', wo_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Combine WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<string>} fromWorkOrderIds - The workorder IDs which should be combined.\n   * @param {string} toWorkOrderId - The WorkOrder ID for the single WorkOrder that should contain the info/entities from the other WorkOrders\n   * @param {boolean} cancelCombinedWorkOrders - If the WorkOrders combined into the single should then be canceled, default is true.\n   * @return {Object} Returns object that represents a collection of WorkOrders\n   */\n   combine(fromWorkOrderIds: Array<string>, toWorkOrderId: string, cancelCombinedWorkOrders: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         CancelCombinedWorkOrders: cancelCombinedWorkOrders,\n         ToWorkOrderId: toWorkOrderId,\n         FromWorkOrderIds: fromWorkOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Combine', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  /**\n   * Move a workorder's point\n   *\n   * @category WorkOrders\n   * @param {string} workOrderId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include WKT or WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  move(workOrderId: string, x: number, y: number, projection: Object, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        WorkOrderId: workOrderId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/WorkOrder/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Get a workorder by S/ID\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The S/ID of the workorder to retrieve. # for SID, string for ID.\n   * @param {boolean} s - Whether first argument is an SID (true) or an ID (false). Defaults to true.\n   * @return {Object} Returns Promise that represents an object describing the workorder\n   */\n  getById(workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n        var path = 'Ams/WorkOrder/ById';\n      } else {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n        var path = 'Ams/WorkOrder/BySid';\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get workorders by an array of S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getByIds(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(101, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/ByIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/BySids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get instructions by an array of workorders S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents an array of String, String describing the workorder instructions\n   */\n  getInstructions(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(102, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderSids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get the audit log for a specific workorder\n   *\n   * @category WorkOrder\n   * @param {number} workOrderSId - A WorkOrder S/ID to get the audit log for. SID is default.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(workOrderSId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n      } else if(_.isNumber(workOrderSId)) {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'Workorder S/IDs was not provided.', {'workorderSId': workOrderSId}))\n      }\n      this.cw.runRequest('Ams/WorkOrder/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field values for the workorder S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. #s for SID, strings for ID.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getCustomFieldValues(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      var path = 'Ams/WorkOrder/CustomFields';\n      if(_.isString(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderIds', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFields';\n      } else if(_.isNumber(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderSids', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFieldsByWorkOrderSids';\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSIds': workOrderSIds}))\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entities on an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs which the entities should be added to. # for SID, string for ID.\n   * @param {boolean} getGisData - Query gis to populate Entity.Attributes with current gis data. Defaults to true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n  getEntities(workOrderSIds: Array<string|number>, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        GetGisData: getGisData\n      }\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(11, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n        } else {\n          reject(new CWError(12, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n      }\n      this.cw.runRequest('Ams/WorkOrder/Entities', data).then(r => {\n        if(r.Status>0) {\n          reject(new CWError(4, r.Message, {'response': r}))\n        } else {\n          resolve(r.Value)\n        }\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add entities to an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUids: {Array<string>}, Facility_Id: {string}, Level_Id: {string}\n   * @param {boolean} updateXY - Update WorkOrder xy after adding entit(y|ies), default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   addEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'Facility_Id'))\n         _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n       if(_.has(entityInfo, 'Level_Id'))\n         _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n       if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/AddEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Update a WorkOrder entity\n    *\n    * @category WorkOrders\n    * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n    * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUid: {string}, Facility_Id: {string}, Level_Id: {string}\n    * @param {boolean} workComplete - Update WorkOrder completeness, default is true.\n    * @return {Object} Returns object that represents a list of entities removed.\n    */\n    updateEntity(workOrderSId: string|number, entityInfo: Object, workComplete: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkComplete: workComplete\n        }\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        if(_.has(entityInfo, 'Facility_Id'))\n          _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n        if(_.has(entityInfo, 'Level_Id'))\n          _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n        if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n          _.set(data, 'EntityUid', _.get(entityInfo, 'EntityUid'))\n          _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n        } else {\n          reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n        }\n\n        this.cw.runRequest('Ams/WorkOrder/UpdateEntity', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(4, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Remove entities from a WorkOrder. Provide WorkOrderId and either ObjectIds or EntityType and EntityUids\n   *\n   * @category WorkOrders\n   * @param {number} workOrderSId - The workorder S/ID which the entities should be removed from. # for SID, string for ID.\n   * @param {Object} entityInfo - Remove entities by WorkOrderEntity.ObjectId (not gis objectId).\n   * @param {boolean} updateXY - Update WorkOrder xy after removing entities, default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   removeEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'ObjectIds')) {\n         _.set(data, 'ObjectIds', _.get(entityInfo, 'ObjectIds'))\n       } else if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(8, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/RemoveEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Cancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to cancel the matched workorders\n   * @param {string} [cancelReason] - A reason for cancelling the workorder(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the workorder was cancelled\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n  cancel(workOrderIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n    return new Promise((resolve, reject) => {\n      var m = new Date()\n      var data: {WorkOrderIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { WorkOrderIds: workOrderIds }\n      if(typeof(cancelReason)!=='undefined')\n        _.set(data, 'CancelReason', cancelReason);\n      if(typeof(dateCancelled)!=='undefined')\n        _.set(data, 'DateCancelled', dateCancelled);\n      this.cw.runRequest('Ams/WorkOrder/Cancel', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Uncancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to uncancel the matched workorders\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n   uncancel(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Uncancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Close WorkOrders\n    *\n    * @category WorkOrders\n    * @param {Array<number>} workOrderIds - An array of the IDs to close the matched WorkOrders\n    * @return {Object} Returns object that represents a collection of WorkOrders\n    */\n    close(workOrderIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkOrderIds: workOrderIds\n        }\n        this.cw.runRequest('Ams/WorkOrder/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed WorkOrders\n     *\n     * @category WorkOrders\n     * @param {Array<number>} workOrderIds - An array of the IDs to reopen the matched WorkOrders\n     * @return {Object} Returns object that represents a collection of WorkOrders\n     */\n     reopen(workOrderIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           WorkOrderIds: workOrderIds\n         }\n         this.cw.runRequest('Ams/WorkOrder/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to delete the matched WorkOrders\n   * @return {Object} Returns object that represents a collection of WorkOrder Ids which have been deleted\n   */\n   delete(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderS/IDs connected to provided entities\n    *\n    * @category WorkOrder Search\n    * @param {string} entityType - The entity type to find connected WorkOrders\n    * @param {Array<string>} entityUIDs - The list of entities to search for connected WorkOrders\n    * @param {boolean} s - Get WorkOrderSids. Defaults to true. When false, returned list is WorkOrderIds\n    * @param {Object} [search] - Any additional search properties of the WorkOrder (open/closed, etc)\n    * @return {Object} Returns Promise that represents an array of WorkOrderS/IDs\n    */\n   getWOsByEntities(entityType: string, entityUids: Array<string>, search?: Array<string|number>, s: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       if(typeof(search)!='undefined') {\n         _.merge(data, search)\n       }\n       if(!_.has(data, 'EntityType')) {\n         _.set(data, 'EntityType', entityType)\n       }\n       if(!_.has(data, 'EntityUids')) {\n         _.set(data, 'EntityUids', entityUids)\n       }\n       var path = 'Ams/WorkOrder/SearchForSids'\n       if(!s) {\n         path = 'Ams/WorkOrder/Search'\n       }\n       this.cw.runRequest(path, data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderSid and description for provided WorkOrderId\n    *\n    * @category WorkOrder Search\n    * @param {string} workOrderId - The WorkOrderId for which to get the WorkOrderSid and description\n    * @return {Object} Returns Promise that represents an object with WorkOrderS/IDs & Description\n    */\n   getSearchList(workOrderId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       _.set(data, 'WorkOrderId', workOrderId)\n       this.cw.runRequest('Ams/WorkOrder/SearchObject', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrder Employee lists\n    *\n    * @category WorkOrder Options\n    * @param {string} listType - Which list (endpoint) to get. Includes Supervisors & SubmitTos.\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         IncludeInactiveEmployees: includeInactiveEmployees\n       }\n       if(typeof(domainIds)!='undefined' && domainIds!=null) {\n         _.set(data, 'DomainIds', domainIds)\n       }\n       if(!_.includes(['Supervisors', 'SubmitTos'], listType)) {\n         reject(new CWError(2, 'listType must be either SubmitTos or Supervisors.', {'provided': listType}))\n       } else {\n         this.cw.runRequest(`Ams/WorkOrder/${listType}`, data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       }\n     })\n   }\n\n   /**\n    * Get SubmitTo list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Supervisors list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSupervisors(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('Supervisors', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Status Options\n    *\n    * @category WorkOrder Options\n    * @return {Object} Returns Promise that represents a collection of codes. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CodeDesc\n    */\n   getStatuses() {\n     return new Promise((resolve, reject) => {\n       this.cw.runRequest('Ams/WorkOrder/Statuses', {}).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get Categories\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder category code descriptions\n   */\n  getCategories() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Categories', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Priorities\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder priorities\n   */\n  getPriorities() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Priorities', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle From\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle From options for workorders\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Intervals\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Interval options for workorders\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Type options for workorders\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get WorkOrder Stages\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Stage options for WorkOrders\n   */\n  getStages() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Stages', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Expense Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Expense Type options for workorders\n   */\n  getExpenseTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/ExpenseTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nimport { CaseData } from './case_data'\nimport { CaseFinancial } from './case_financial'\nimport { CaseWorkflow} from './case_workflow'\nimport { CaseAdmin } from './case_admin'\nimport { Comments } from './comments'\nimport { CaseAssets } from './case_assets'\n\nexport class Briefcase {\n  /**\n   * @hidden\n   */\n  cw: any\n\n\n  /**\n   * Data Detail methods\n   */\n  data?: Object\n  /**\n   * Asset (Address) methods\n   */\n  asset?: Object\n  /**\n   * Workflow & task methods\n   */\n  workflow?: Object\n  /**\n   * Payment, Receipt, & Fee methods\n   */\n  financial?: Object\n  /**\n   * Commenting methods\n   */\n  comment?: Object\n  /**\n   * PLL Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Create new case\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  create(caseTypeId: number, subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/Create', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a child case\n   *\n   * @category Cases\n   * @param {number} busCaseId - The case Type ID\n   * @param {number} parentCaObjectId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createChild(busCaseId: number, parentCaObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId,\n        ParentCaObjectId: parentCaObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/CreateChild', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a case from a Service Request\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {number} requestId - The service request ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createFromRequest(caseTypeId: number, subTypeId: number, requestId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId,\n        ServiceRequestId: requestId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/CreateCaseFromServiceRequest', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the updated case\n   */\n  update(caObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cases by IDs\n   *\n   * @category Cases\n   * @param {Array<number>} caObjectIds - The case Object ID to update\n   * @return {Object} Returns Promise that represents a collection of objects describing the cases\n   */\n  getByIds(caObjectIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectIds: caObjectIds\n      }\n      this.cw.runRequest('Pll/CaseObject/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Cases. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Cases\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case Object IDs\n   */\n  search(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseObject/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Move a Case point\n   *\n   * @category Cases\n   * @param {string} caObjectId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(caObjectId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(1, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        CaObjectId: caObjectId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Pll/CaseObject/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the deleted case\n   */\n  delete(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseObject/DeleteCase', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // importCase(caseTypeId: number, subTypeId: number, caseName: string, location: string, x: number, y:number, appData: object, comment: string, expiration: string, assetIds: object) {\n  //   return new Promise(resolve => {\n  //     const _this = this;\n  //     let case_data = {\"CaseName\":caseName, \"Location\":location, \"DateExpiration\": expiration, \"X\":x,\"Y\":y}\n  //     this.create(caseTypeId, subTypeId, case_data).then((response: any) => {\n  //       if(response) {\n  //         if(typeof(response.CaObjectId)!='undefined') {\n  //           var CaObjectId = response.CaObjectId\n  //           if(typeof(comment) != 'undefined') {\n  //             _this.comments.add(CaObjectId, comment)\n  //           }\n  //           if(assetIds) {\n  //             _this.assets!.attach(CaObjectId, true, assetIds)\n  //           }\n  //           if(appData) {\n  //             _this.data!.getGroupsByCaseId(response.CaObjectId).then(response_one => {\n  //               // loop through all groups\n  //               let data_details_items = []\n  //               _this.data!.caseDataGroupIterator(appData, response_one, data_details_items).then(di => {\n  //                 _this.data!.caseDataDetailIterator(appData, di).then(resp => {\n  //                   resolve(response)\n  //                 })\n  //               })\n  //             })\n  //           } else {\n  //             resolve(response)\n  //           }\n  //         } else {\n  //           console.log('Error creating case: '+ JSON.stringify(case_data))\n  //           process.exit(0)\n  //         }\n  //       } else {\n  //         resolve(false)\n  //       }\n  //     })\n  //   })\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseData {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Case Data Group\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} caseDataGroupId - CaseDataGroupId as defined in CaseDataGroup admin.\n   * @param {string} groupCode - The Group Code.\n   * @param {Object} [options] - Options for CaseDataGroup including GroupDesc, GroupSum, and SumFlag\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addGroup(caObjectId: number, caseDataGroupId: number, groupCode: string, options?: {GroupDesc?: string, GroupSum?: number, SumFlag?: string}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaseDataGroupId: caseDataGroupId,\n        GroupCode: groupCode\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Default Case Data Groups\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} busCaseId - The business case ID\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   addDefaultGroups(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a data detail entry to the case data group specified by the CaDataGroupId. The CaDataGroupId is associated to a case.\n   *\n   * @category Data Groups\n   * @param {number} caseDataDetailId - The Data Detail template ID\n   * @param {number} caDataGroupId - The Case Instance Data Group ID\n   * @param {string} columnSequence - The column sequence\n   * @param {string} detailCode - The detail Code\n   * @param {number} detailSequence - The detail order number\n   * @param {Object} [options] - Other options for CaseDataDetail. See WIPAdd here: /{subdirectory}/apidocs/#/service-info/Pll/CaseDataDetail\n   * @return {Object} Returns Promise that represents an object describing CaDataDetailItemBase.\n   */\n   wipAddDetail(caseDataDetailId: number, caDataGroupId: number, columnSequence: string, detailCode: string, detailSequence: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseDataDetailId: caseDataDetailId,\n        CaDataGroupId: caDataGroupId,\n        ColumnSequence: columnSequence,\n        DetailCode: detailCode,\n        DetailSequence: detailSequence\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get groups by CaObjectId\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to get the attached data groups.\n   * @return {Object} Returns Promise that represents a collection of the CaDataGroupItemBases.\n   */\n   getGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Data Groups by Case Object ID.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   deleteGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Data Groups. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data Groups\n   * @param {Object} filters - The parameters to search by. (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag)\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   searchForGroups(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataGroupId', 'CaseDataGroupId', 'GroupCode', 'GroupDesc', 'GroupSum', 'SumFlag']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Data Groups by Case ObjectId\n   *\n   * @category Data Groups\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {Object} options - The other options for checkGIS. Either CaObjectId or CaseDataGroupId is required.\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   checkGIS(entityType: string, entityUid: string, options: {CaObjectId?:number, CaseDataGroupId?: number, CaseDataDetailId?: number}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(_.has(options, 'CaObjectId')) {\n        _.set(data, 'CaObjectId', _.get(options, 'CaObjectId'))\n      } else if(_.has(options, 'CaseDataGroupId')) {\n        _.set(data, 'CaseDataGroupId', _.get(options, 'CaseDataGroupId'))\n      } else {\n        reject(new CWError(1, 'Either CaObjectId or CaseDataGroupId is required.', {'provided': options}))\n      }\n      if(_.has(options, 'CaseDataDetailId')) {\n        _.set(data, 'CaseDataDetailId', _.get(options, 'CaseDataDetailId'))\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/CheckGISChanges', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update data groups on a case based on asset value mappings.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The case to update\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {number} [caDataGroupId] - The specific data group ID to limit updates to\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   updateGroupsFromAsset(caObjectId: number, entityType: string, entityUid: string, caDataGroupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(typeof(caDataGroupId)!='undefined') {\n        _.set(data, 'CaDataGroupId', caDataGroupId)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/UpdateFromAsset', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Attach Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataGroupId - The Case Data Group ID to attach the data detail to.\n   * @param {number} caseDataDetailId - caseDataDetailId to attach.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addDetail(caDataGroupId: number, caseDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataGroupId: caDataGroupId,\n        CaseDataDetailId: caseDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to attach the data detail to.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   updateDetail(caDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Lock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to lock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   lockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: true\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Unlock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to unlock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   unlockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: false\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a list of possible values to the data detail entry specified by the CaDataDetailId.\n   *\n   * @category Data List Values\n   * @param {number} caDataDetailId - The Case Object to attach the data group to.\n   * @param {string} listValue - The Group Code.\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   addListValue(caDataDetailId: number, listValue: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        ListValue: listValue\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete by Id (Ca Data List Id)\n   *\n   * @category Data List Values\n   * @param {number} CaDataListId - The Case Data List ID\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   deleteListValue(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value IDs. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue)\n   * @return {Object} Returns Promise that represents an Array of resulting CaDataListIds\n   */\n   searchForListValueIds(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataDetailId', 'CaDataListId', 'ListValue']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue, CaDataGroupId)\n   * @return {Object} Returns Promise that represents a collection of resulting CaDataListValuesItemBase objects\n   */\n   searchForListValueObjects(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataDetailId', 'CaDataListId', 'ListValue', 'CaDataGroupId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue, CaDataGroupId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // caseDataGroupIterator(appData: object, groups: Array<number>, items: Array<object>) {\n  //   return new Promise(resolve => {\n  //     var detail_items = items\n  //     var dataDetailGroup = groups.pop()\n  //     this.searchForListValueObjects({CaDataGroupId: dataDetailGroup!.CaDataGroupId}).then(r => {\n  //       r.forEach(function (item) {\n  //         detail_items.push(item)\n  //       })\n  //       if(groups.length>0) {\n  //         this.caseDataGroupIterator(appData, groups, detail_items).then(di => {\n  //           resolve(di)\n  //         })\n  //       } else {\n  //         resolve(detail_items)\n  //       }\n  //     })\n  //   })\n  // }\n\n  // caseDataDetailIterator(appData: object, detail_items: Array<object>) {\n  //   return new Promise(resolve => {\n  //     const this_data_detail = detail_items.pop()\n  //     const detailCode = this_data_detail.DetailCode\n  //     const detailId = this_data_detail.CaDataDetailId\n  //     if(typeof(this_data_detail)!='undefined' && typeof(appData[detailCode])!='undefined') {\n  //       this.searchForListValueObjects(detailId).then(r => {\n  //         var CaseDataDetailUpdate = r.Value\n  //         var rType = r.Value\n  //         CaseDataDetailUpdate[rType] = appData[CaseDataDetailUpdate.DetailCode]\n  //         this.updateDetail(CaseDataDetailUpdate).then(response => {\n  //           if(detail_items.length > 0) {\n  //             this.caseDataDetailIterator(appData, detail_items).then(resp => {\n  //               resolve(resp)\n  //             })\n  //           } else {\n  //             resolve(true)\n  //           }\n  //         })\n  //       })\n  //     } else {\n  //       if(detail_items.length > 0) {\n  //         this.caseDataDetailIterator(appData, detail_items).then(resp => {\n  //           resolve(resp)\n  //         })\n  //       } else {\n  //         resolve(true)\n  //       }\n  //     }\n  //   });\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseFinancial {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw: Object) {\n    this.cw = cw\n  }\n\n  /**\n   * Adds a fee to the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} feeSetupId - The fee setup id for the fee to add to the case.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addFee(caObjectId: number, feeSetupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        FeeSetupId: feeSetupId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Fee Payment. Adds a payment to the case fee specified by caObjectId.\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addPayment(caObjectId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Payment Refund. Refunds a payment on the case payment specified by caPaymentId.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentId - The Case Payment ID for the case payment which to refund\n   * @param {number} refundAmount - The amount to refund\n   * @param {string} comment - A comment to append to the refund\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  addRefund(caPaymentId: number, refundAmount: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentId: caPaymentId,\n        RefundAmount: refundAmount,\n        Comments: comment\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Deposit Payment. Adds a payment to the case deposit specified by CaDepositId.\n   *\n   * @category Case Payments\n   * @param {number} caDepositId - The Case Deposit ID for the case deposit to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addDepositPayment(caDepositId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaDepositId: caDepositId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/AddDeposit', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a deposit to the case specified by the CaObectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} depositId - The deposit setup id for the deposit to add to the case.\n   * @param {number} [amount] - The amount of the deposit (optional)\n   * @param {string} [comment] - Comment text to add to the deposit (optional)\n   * @return {Object} Returns Promise that represents an object describing the newly-added deposit. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDeposit(caObjectId: number, depositId: number, amount?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        DepositId: depositId\n      }\n      if(typeof(amount)!='undefined') {\n        _.set(data, 'Amount', amount)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('CaseDeposit/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds an instrument to the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the instrument\n   * @param {number} instTypeId - The instrument type id for the instrument being added to the case.\n   * @param {number} amount - The amount of the instrument\n   * @param {Date} dateExpire - The datetime for the instrument to expire.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument for more options.\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument. See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument\n   */\n  addInstrument(caObjectId: number, instTypeId: number, amount: number, dateExpire: Date, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        InstTypeId: instTypeId,\n        Amount: amount,\n        DateExpire: dateExpire\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseInstrument/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a fee specified by the CaFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Fee ID for the specific instance of the fee you wish to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the updated fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  updateFee(caFeeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaFeeId: caFeeId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Void a refund.\n   *\n   * @category Case Refund Payment\n   * @param {number} caPaymentRefundId - The Refund ID for the specific refund to void\n   * @param {String} voided - A string. No clue.\n   * @return {Object} Returns Promise that represents an object describing the voided refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  voidRefund(caPaymentRefundId: number, voided: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId,\n        Voided: voided\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Fees. Adds fees to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default fees\n   * @param {number} busCaseId - The business case ID whose default fees should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Fee Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addDefaultFees(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseFees/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Deposits. Adds deposits to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default deposits\n   * @param {number} busCaseId - The business case ID whose default deposits should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Deposit Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDefaultDeposits(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the fees from the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Fees.\n   */\n  getFees(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Deposit by Case ObjectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the deposits\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  getDeposits(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Payments by Case ObjectId\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the payments\n   * @return {Object} Returns Promise that represents a collection of Case Payments.\n   */\n  getPayments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the instruments from the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Instruments.\n   */\n  getInstruments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Case Fee ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Fee object.\n   */\n  deleteFee(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CaseFees/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteFeesByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete a Case Payment by Id. Delete a specific case payment by CaPaymentId.\n   *\n   * @category Case Payments\n   * @param {number} caPaymentId - The Case Payment ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Payment object.\n   */\n  deletePayment(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CasePayment/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payment Refund. Removes a refund on a payment.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentRefundId - The Case Payment ID for the case payment which to refund\n   * @return {Object} Returns Promise that represents an object describing the deleted payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  deleteRefund(caPaymentRefundId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payments by Case ObjectId. Delete from the system all payments associated to a specific case as specified by the case id (CaObjectId)\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID whose payments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deletePaymentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Deposits\n   * @param {number} caDepositId - The Case Deposit ID which should be deleted\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  deleteDeposit(caDepositId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDepositId: caDepositId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteDepositsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the instrument specified by the caInstrumentId.\n   *\n   * @category Case Instruments\n   * @param {number} caInstrumentId - The Case Instrument ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Instrument.\n   */\n  deleteInstrument(caInstrumentId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Instruments by Case ObjectId. Delete from the system all Instruments linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID whose instruments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteInstrumentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFees(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaFeeId', 'CaObjectId', 'FeeCode', 'FeeDesc']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseFees/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payments. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payments\n   * @param {Object} filters - The filters to search for matched Case Payments\n   * @return {Object} Returns Promise that represents an Array of case payment IDs\n   */\n  searchPayments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaPaymentId', 'CommentText', 'FeeAmount', 'FeeCode', 'FeeDesc', 'PaymentAccount', 'PaymentAmount', 'TenderType']).length==0) {\n        reject(new CWError(5, 'At least one of the attributes (CaPaymentId, CommentText, FeeAmount, FeeCode, FeeDesc, PaymentAccount, PaymentAmount, TenderType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payment Refunds. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payment Refunds\n   * @param {Object} filters - The filters to search for matched Case Payments.\n   * @return {Object} Returns Promise that represents an Array of case payment refund IDs\n   */\n  searchRefunds(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaPaymentId', 'CaPaymentRefundId', 'Comments', 'RefundAmount']).length==0) {\n        reject(new CWError(6, 'At least one of the attributes (CaPaymentId, CaPaymentRefundId, Comments, RefundAmount) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Deposits\n   * @param {Object} filters - The parameters to search by.\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchDeposits(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDepositId', 'CaObjectId', 'DepositCode', 'DepositDesc']).length==0) {\n        reject(new CWError(1, 'At least one of the arguments (CaDepositId, CaObjectId, DepositCode, DepositDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDeposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fee Templates\n   *\n   * @category Case Fees\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  getAllFeeTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameters to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFeeTemplates(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['FeeSetupId', 'FeeTypeId', 'FeeCode', 'FeeDesc', 'AccountCode']).length==0) {\n        reject(new CWError(7, 'At least one of the arguments (FeeSetupId, FeeTypeId, FeeCode, FeeDesc, AccountCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instruments. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Instruments\n   * @param {Object} filters - The parameters to search by (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of case instrument IDs\n   */\n  searchCaseInstruments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AddressLine1', 'Amount', 'CaInstrumentId', 'CityName', 'CommentText', 'Company', 'ContactEmail', 'ContactName', 'ContactPhone', 'CountryCode', 'InstTypeId', 'SerialNumber', 'StateCode', 'ZipCode']).length==0) {\n        reject(new CWError(9, 'At least one of the arguments (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseInstrument/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the Defined Instruments\n   *\n   * @category Instruments\n   * @param {Object} options - the options to filter the instruments returned by\n   * @return {Object} Returns Promise that represents an Array of CaInstrumentItem\n   */\n  getInstrumentList(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/CaseInstrument/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a release to a case instrument specified by the caInstrumentId. Must provide either amountReleased OR percentReleased\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstrumentId - The Case Instrument ID to which to add the instrument release\n   * @param {number} releasedBy - UserID to attach to the release.\n   * @param {Date} dateReleased - The date of the release\n   * @param {number} [amountReleased] - The amount to be released\n   * @param {number} [percentReleased] - OR the percent to be released\n   * @param {string} [comment] - Comment to attach to the release\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  addCaseInstrumentRelease(caInstrumentId: number, releasedBy: number, dateReleased: Date, amountReleased?: number, percentReleased?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId,\n        DateReleased: dateReleased,\n        ReleasedBy: releasedBy\n      }\n      if((typeof(percentReleased)!='undefined' || percentReleased!=null) && (typeof(amountReleased)!='undefined' || amountReleased!=null)) {\n        reject(new CWError(2, 'Either amountReleased or percentReleased must be specified.'))\n      } else if(typeof(percentReleased)!='undefined' && percentReleased!=null) {\n        _.set(data, 'PercentReleased', percentReleased)\n      } else if(typeof(amountReleased)!='undefined' && amountReleased!=null) {\n        _.set(data, 'AmountReleased', amountReleased)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a release specified by the caInstReleasesId.\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstReleasesId - The Case Instrument Release ID to delete\n   * @return {Object} Returns Promise that represents an object describing the deleted instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  deleteCaseInstrumentRelease(caInstReleasesId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstReleasesId: caInstReleasesId\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instrument Releases. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Case Instrument Releases\n   * @param {Object} filters - Specify at least one of the following: AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy\n   * @return {Object} Returns Promise that represents an Array of Case Instruments resulting from the search\n   */\n  searchCaseInstrumentReleases(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      if(_.intersectionBy(_.keysIn(filters), ['AmountReleased', 'CaInstReleasesId', 'CaInstrumentId', 'CommentText', 'PercentReleased', 'ReleasedBy']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy) must be defined.'))\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  fees() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/FeeSetup/All', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Fees\n   * @param {Object} filters - Specify at least one.\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  searchAvailableFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(8, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all tender types configured\n   *\n   * @category Tender Types\n   * @return {Object} Returns Promise that represents a collection of tender type objects. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  getTenderTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TenderType/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a tender type configuration\n   *\n   * @category Tender Types\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  addTenderType(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TenderType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a tender type configuration\n   *\n   * @category Tender Types\n   * @param {number} tenderTypeId - ID of the tender type to update\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  updateTenderType(tenderTypeId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        TenderTypeId: tenderTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/TenderType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\n\n/**\n * A plugin that contains \"comments\" methods\n */\nexport class Comments {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Storage of all potential activity types which comments can be attached to: Unknown, Request, WorkOrder, CaTask, CaObject, CaCorrection, Project, Contract\n   */\n  activityTypes: ReversibleMap<string, number>\n\n  /**\n   * Storage of object's active activityType\n   */\n  currentActivityType: string\n\n  /**\n   * @hidden\n   */\n  constructor(cw: any, activityType: string) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"Unknown\", 0)\n    this.activityTypes.set(\"Request\", 1)\n    this.activityTypes.set(\"WorkOrder\", 2)\n    this.activityTypes.set(\"CaTask\", 3)\n    this.activityTypes.set(\"CaObject\", 4)\n    this.activityTypes.set(\"CaCorrection\", 5)\n    this.activityTypes.set(\"Project\", 6)\n    this.activityTypes.set(\"Contract\", 7)\n\n    if(!this.activityTypes.has(activityType)) {\n      throw new CWError(1, 'Comment activity type not found.', {'provided': activityType, 'options':this.activityTypes})\n    }\n    this.currentActivityType = activityType\n  }\n\n  /**\n   * Add a comment - for adding a comment to an object when the object is already known. Always call comment.add from request, case, workorder, or inspection.\n   * \n   * @param {number} sid - The SID of the activity to which the comment should be attached\n   * @param {string} comment - The text for the comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  add(sid: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        ActivitySid: sid,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Add', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a comment\n   *\n   * @param {number} id - The ID of the comment which should be updated\n   * @param {string} comment - The new text for the updated comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  update(id: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        CommentId: id,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Update', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get comments for activity items\n   *\n   * @param {Array<number>} sids - The options SIDs to get comments for.\n   * @return {Object} Returns Promise object that represents a collection of available comments\n   */\n  get(sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(typeof(sids)!='undefined' && sids !=null) {\n        var data = {\n          ActivitySids: sids,\n          ActivityType: this.activityTypes.get(this.currentActivityType),\n        }\n        this.cw.runRequest('Ams/Comment/ByActivitySids', data).then((response: any) => {\n          if(sids.length==1) {\n            resolve(response.Value[sids[0]])\n          } else {\n            resolve(response.Value)\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * Get pre-defined comments for activityTypes\n   *\n   * @param {number} problemSid - The ProblemSid if currentActivityType is (Service) Request\n   * @param {string} [category] - Only applies to WorkOrder and ServiceRequest category comments.\n   * @return {Object} Returns Promise object that represents a collection of available comment templates.\n   */\n  getPredefined(problemSid?: number, category?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(this.currentActivityType=='Request') {\n        _.set(data, 'ProblemSid', problemSid)\n      }\n      if(typeof(category)!='undefined' && (this.currentActivityType=='Request' || this.currentActivityType=='WorkOrder')) {\n        _.set(data, 'Category', category)\n      }\n      _.set(data, 'ActivityType', this.activityTypes.get(this.currentActivityType))\n      this.cw.runRequest('Ams/Comment/PredefinedComments', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // /**\n  //  * Get pre-set comments for activityTypes\n  //  *\n  //  * @param {Array<string>} [activityTypes] - Provide a list of activity types. Defaults to current activity type.\n  //  * @param {Array<string>} [categories] - Only applies to WorkOrder and ServiceRequest category comments.\n  //  * @return {Object} Returns Promise object that represents a collection of available comment templates.\n  //  */\n  // getForActivityList(activityTypes?: Array<string>, categories?: Array<string>) {\n  //   return new Promise((resolve, reject) => {\n  //     var data = {}\n  //     if(typeof(activityTypes)!='undefined') {\n  //       // TODO: iterate through it and output numeric types\n  //       _.set(data, 'ActivityTypes', activityTypes)\n  //     } else {\n  //       _.set(data, 'ActivityTypes', [this.activityTypes.get(this.currentActivityType)])\n  //     }\n  //     if(typeof(categories)!='undefined') {\n  //       _.set(data, 'Categories', categories)\n  //     }\n  //     console.log(data, 'data')\n  //     this.cw.runRequest('Ams/Comment/ByActivityTypes', data).then((response: any) => {\n  //       resolve(response.Value)\n  //     }).catch(e => {\n  //      reject(e)\n  //    })\n  //   })\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { Comments } from './comments'\n\nexport class CaseWorkflow {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Task sub-methods\n   */\n  task: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.task = {\n      comment: new Comments(cw, 'CaTask')\n    }\n  }\n\n  /**\n   * Adds a task to the case specified by the CaObectId.\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} taskId - The task ID to add to the case workflow\n   * @param {number} startPoint - The start point in the workflow for the task\n   * @param {number} endPoint - The end point in the workflow for the task\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   addTask(caObjectId: number, taskId: number, startPoint: number, endPoint: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        TaskId: taskId,\n        StartPoint: startPoint,\n        EndPoint: endPoint\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Result\n   *\n   * @category Task Results\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} caTaskId - The Case task ID to add the result to\n   * @param {number} resultCode - The result Code\n   * @param {number} resultID - The result ID\n   * @param {number} resultSetID - The result set ID\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents an object describing CaTaskResultsItem.\n   */\n   addTaskResult(caObjectId: number, caTaskId: number, resultCode: number, resultID: number, resultSetID: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaTaskId: caTaskId,\n        ResultCode: resultCode,\n        ResultID: resultID,\n        ResultSetID: resultSetID\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   addTaskComment(caTaskId: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId,\n        CommentText: comment\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by CaObjectId\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to get the attached tasks\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksByCaseId(caObjectId: number, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by TaskIds\n   *\n   * @category Tasks\n   * @param {Array<number>} caTaskIds - The IDs of the tasks to retrieve\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksById(caTaskIds: Array<number>, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get CaTaskResultsItem by CaTaskIds\n   *\n   * @category Task Results\n   * @param {Array<number>} caTaskIds - The IDs of the tasks for which to retrieve results\n   * @return {Object} Returns Promise that represents a collection of CaTaskResultsItems.\n   */\n   getResultsByTaskId(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {number} caTaskId - The task ID for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CommentRecords.\n   */\n   getCommentsForTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskIds - The task IDs for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CaTaskCommentsItemBase.\n   */\n   getCommentsForTasks(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {Object} [options] - Options for Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   updateTask(caTaskId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskCommentId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @param {number} commentId - Probably unnecessary?\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   updateTaskComment(caTaskCommentId: number, comment: string, commentId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentId: caTaskCommentId,\n        CommentText: comment\n      }\n      if(typeof(commentId)!='undefined') {\n        _.set(data, 'CommentId', commentId)\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {string} resultCode - The result code to set for the specified Task\n   * @param {Object} [options] - Options for Task. Specify either or both TaskCompletedBy & TaskCompleteDate. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   setTaskResult(caTaskId: number, resultCode: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(_.intersectionBy(_.keysIn(options), ['TaskCompleteDate', 'TaskCompletedBy']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (TaskCompletedBy, TaskCompleteDate) must be defined.'))\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/SetResult', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   deleteTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTask/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents the number of the CaObjectID\n   */\n   deleteTasksOnCase(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseTask/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes tasks by TaskID\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskCommentIds - The comments to delete\n   * @return {Object} Returns Promise that represents a dictionary of comment IDs.\n   */\n   deleteTaskComments(caTaskCommentIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentIds: caTaskCommentIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Tasks. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Tasks\n   * @param {Object} filters - The parameters to search by. (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType)\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskIDs\n   */\n   searchForTasks(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['ResponsibleUserId', 'TaskAvailable', 'TaskComplete', 'TaskType']).length==0) {\n        reject(new CWError(1, 'At least one of the attributes (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseTask/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskResults Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Task Results\n   * @param {Object} filters - The parameters to search by. See: /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskResultsItem\n   */\n   searchForTaskResults(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseTaskResults/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Adds a task to the case specified by the CaObectId.\n     *\n     * @category Task Attachments\n     * @param {number} caTaskId - The Task ID to attach the document to\n     * @param {number} caObjectId - The Case Object ID\n     * @param {string} docName - The file name as it should display in the system\n     * @param {string} locationType - The location of the file...leave blank\n     * @param {any} file - The binary string for the file\n     * @return {Object} Returns Promise that represents an object describing added Attachment\n     */\n  addTaskAttachment(caTaskId: number, caObjectId: number, docName: number, file: any, locationType?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaTaskId: caTaskId,\n        DocName: docName\n      }\n      if(typeof(locationType)!='undefined') {\n        _.set(data, 'LocationType', locationType)\n      }\n      this.cw.runRequest('Pll/CaseRelDocs/AddTaskRelDoc', data, file).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Gets each Document Attached to the specified Task\n     *\n     * @category Task Attachments\n     * @param {number} caTaskId - The Task ID to attach the document to\n     * @return {Object} Returns Promise that represents a collection of objects describing each Attachment on the provided task\n     */\n  getTaskAttachments(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseRelDocs/ByCaTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task attachment by caRelDocId (Related Case Document ID). Same as RelDocs delete for case.\n   *\n   * @category Task Attachments\n   * @param {number} caRelDocId - The caRelDocId for the related document which should be deleted\n   * @return {Object} Returns Promise that represents the an object describing the deleted document.\n   */\n  deleteTaskAttachment(caRelDocId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaRelDocId: caRelDocId\n      }\n      this.cw.runRequest('PLL/CaseRelDocs/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n\n\n\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Business Case Template\n   *\n   * @category Case Templates\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the created case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  addBusinessCaseTemplate(data: Object) {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/BusinessCase/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Business Case Template\n   *\n   * @category Case Templates\n   * @param {number} busCaseId - The Business Case ID to update\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the updated case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  updateBusinessCaseTemplate(busCaseId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/BusinessCase/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Business Case Templates\n   *\n   * @category Case Templates\n   * @return {Object} Returns Promise that represents a collection of Business Case Templates\n   */\n  getBusinessCaseTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/BusinessCase/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Type\n   *\n   * @category Types & SubTypes\n   * @param {string} caseTypeName - The case type name\n   * @param {string} caseTypeDesciption - The case type description\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the added case type\n   */\n  addCaseType(caseTypeName: string, caseTypeDesciption: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseType: caseTypeName,\n        CaseTypeDesciption: caseTypeDesciption\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Type\n   *\n   * @category Types & SubTypes\n   * @param {number} caseTypeId - The case Type ID\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the updated case type\n   */\n  updateCaseType(caseTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Types\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems\n   */\n  getCaseTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents an Array of CaseTypeIDs\n   */\n  searchCaseTypeIDs(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CaseTypeItem\n   */\n  searchCaseTypeObjects(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaseType, CaseTypeDesc, CaseTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add SubType\n   *\n   * @category Types & SubTypes\n   * @param {string} subTypeName - The SubTypeId\n   * @param {string} subTypeDescription - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  addSubtype(subTypeName: string, subTypeDescription: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubType: subTypeName,\n        SubTypeDesc: subTypeDescription\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update SubType\n   *\n   * @category Types & SubTypes\n   * @param {number} subTypeId - The SubTypeId\n   * @param {Object} options - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the updated SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  updateSubtype(subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get SubTypes\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  getSubtypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/SubType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getFees() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Expirations\n   *\n   * @category Expirations\n   * @return {Object} Returns Promise that represents a collection of ExpirationTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  getExpirations() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/ExpirationType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add an Expiration type\n   *\n   * @category Expirations\n   * @param {Object} options - Must specify OrgId and ExpirationDescType attributes. See: /{subdirectory}/apidocs/#/service-info/Pll/ExpirationType\n   * @return {Object} Returns Promise that represents an object describing the newly-added ExpirationTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  addExpiration(options?: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(options, 'OrgId') || !_.has(options, 'ExpirationTypeDesc')) {\n        reject(new CWError(5, 'OrgId and ExpirationTypeDesc must both be defined.'))\n      }\n      var data = options\n      this.cw.runRequest('Pll/ExpirationType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Deposits\n   *\n   * @category Deposits\n   * @return {Object} Returns Promise that represents a collection of DepositItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepositItemBase\n   */\n  getDeposits() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Deposit/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchDeposits(filters: {AccountCode?: string, DepositCode?: string, DepositDesc?: string, DepositId?: number, DepositTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'DepositCode', 'DepositDesc', 'DepositId', 'DepositTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/Deposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Disciplines\n   *\n   * @category Disciplines\n   * @return {Object} Returns Promise that represents a collection of DisciplineItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DisciplineItem\n   */\n  getDisciplines() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Discipline/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Department\n   *\n   * @category Departments & Divisions\n   * @param {string} departmentCode - The SubTypeId\n   * @param {string} departmentName - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  addDepartment(departmentCode: string, departmentName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentCode: departmentCode,\n        DepartmentName: departmentName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Department/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Departments\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getDepartments() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Department/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Division\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  addDivision(departmentId: number, divisionName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentId: departmentId,\n        DivisionName: divisionName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Division/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Divisions\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of DivisionItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  getDivisions() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Division/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Holiday\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  addHoliday(holidayDate: Date, holidayDesc: string, halfDayFlag?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayDate: holidayDate,\n        HolidayDesc: holidayDesc\n      }\n      if(typeof(halfDayFlag)!='undefined') {\n        _.set(data, 'HalfDayFlag', halfDayFlag)\n      }\n      this.cw.runRequest('Pll/Holiday/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Holiday\n   *\n   * @category Holidays\n   * @param {number} holidayId - ID of Holiday to delete\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  deleteHoliday(holidayId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayId: holidayId\n      }\n      this.cw.runRequest('Pll/Holiday/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Holidays\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents a collection of HolidaysItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  getHolidays() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Holiday/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Inspection Time Block\n   *\n   * @category Inspections\n   * @param {string} labelText - Label for the time block\n   * @param {string} startTime - Start time in 24 hour format (HH:mm)\n   * @param {string} endTime - End time in 24 hour format (HH:mm)\n   * @param {Object} inspTimeBlocksDetails - See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspTimeBlocksDetailItem\n   * @return {Object} Returns Promise that represents an object describing the newly-added InspectionTimeBlocksItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  addInspectionTimeBlock(labelText: string, startTime: string, endTime: string, inspTimeBlocksDetails?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        LabelText: labelText,\n        StartTime: startTime,\n        EndTime: endTime\n      }\n      if(typeof(inspTimeBlocksDetails)!='undefined') {\n        _.set(data, 'InspTimeBlocksDetails', inspTimeBlocksDetails)\n      }\n      this.cw.runRequest('Pll/InspectionTimeBlock/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Inspection Time Blocks\n   *\n   * @category Inspections\n   * @return {Object} Returns Promise that represents a collection of InspectionTimeBlocksItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  getInspectionTimeBlocks() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/InspectionTimeBlock/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all NotificationCases\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationCaseItem\n   */\n  getNotificationCases() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationCase/GetNotificationCaseList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Notification Types\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationTypeItem\n   */\n  getNotificationTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationType/GetNotificationTypeList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} options - attributes or update\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addNumberingGroup(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/NumberingGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} numberingGroupId - ID of NumberGroup to update\n   * @param {number} options - updates attributes\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  updateNumberingGroup(numberingGroupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        NumberingGroupId: numberingGroupId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/NumberingGroup/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Numbering Groups\n   *\n   * @category NumberingGroups\n   * @return {Object} Returns Promise that represents a collection of NumberingGroupItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  getNumberingGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NumberingGroup/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Person\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addPerson(name: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        Name: name\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all People\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleItem\n   */\n  getPeople() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/People/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add People Role\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/PeopleRole\n   * @return {Object} Returns Promise that represents an object describing the newly-added PeopleRoleItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  addPeopleRole(roleCode: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        RoleCode: roleCode\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all PeopleRoles\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getPeopleRoles() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/PeopleRole/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultDetail. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  addTaskResultDetail(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {string} resultDetailId - Result Detail ID\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  updateTaskResultDetail(resultDetailId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        ResultDetailId: resultDetailId\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all TaskResultDetails\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getTaskResultDetails() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultDetail/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultFeeInsert. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultFeeInsertItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  addTaskResultFeeInsert(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the deleted TaskResultFeeInsertItem.\n   */\n   deleteTaskResultFeeInsert(taskResultFeeInsertId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert(s) by Task ID\n   *\n   * @category TaskResults\n   * @param {number} taskId - ID for Task parent of TaskResultFeeInsert(s) to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the Task parent of the deleted TaskResultFeeInsertItem(s).\n   */\n   deleteTaskResultFeeInsertByTaskId(taskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskId: taskId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/DeleteByTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be updated.\n   * @param {number} taskId - Updated TaskID\n   * @param {number} taskResultId - Updated TaskResultId\n   * @param {number} [feeSetupId] - Fee setup ID update for TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents the ID Number of the updated TaskResultFeeInsertItem.\n   */\n   updateTaskResultFeeInsert(taskResultFeeInsertId: number, taskId: number, taskResultId: number, feeSetupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId,\n        TaskId: taskId,\n        TaskResultId: taskResultId\n      }\n      if(typeof(feeSetupId)!='undefined') {\n        _.set(data, 'FeeSetupId', feeSetupId)\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Get all TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of TaskResultFeeInsertItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  getTaskResultFeeInsert() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultFeeInsert/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\n\nconst _ = require('lodash')\n\nexport class CaseAssets {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Attach asset to case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when attaching the asset. Defaults to true.\n   * @param {Object} [options] - Options for CaseDataGroup including Address, AddressId, AssetId, AssetObjectId, AssetType, CityName, CrossStreet, DateExpired, ExpiredFlag, Facility_Id, FeatureAssetId, FeatureClass, FeatureObjectId, LegacyId, Level_Id, LndObjectId, Location, MasterFlag, ObjectId, StateCode, StreetDirection, StreetFraction, StreetName, StreetNumber, StreetPostDir, StreetType, Suite, TileNo, UpdateCaseData, XCoord, YCoord, ZCoord, and ZipCode\n   * @return {Object} Returns Promise that represents an object describing CaAddress.\n   */\n   attach(caObjectId: number, updateXY: boolean = true, options?: {Address?: string, AddressId?: number, AssetId?: string, AssetObjectId?: number, AssetType?: string, CityName?: string, CrossStreet?: string, DateExpired?: string, ExpiredFlag?: string, Facility_Id?: string, FeatureAssetId?: string, FeatureClass?: string, FeatureObjectId?: number, LegacyId?: string, Level_Id?: string, LndObjectId?: number, Location?: string, MasterFlag?: string, ObjectId?: string, StateCode?: string, StreetDirection?: string, StreetFraction?: string, StreetName?: string, StreetNumber?: number, StreetPostDir?: string, StreetType?: string, Suite?: string, TileNo?: string, UpdateCaseData?: boolean, XCoord?: number, YCoord?: number, ZCoord?: number, ZipCode?: string}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        UpdateXY: updateXY\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseAddress/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Detach specific asset from case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when detaching the assets. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n  detach(caAddressId: number, updateXY: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaAddressId: caAddressId,\n        UpdateXY: updateXY\n      }\n      this.cw.runRequest('Pll/CaseAddress/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Detach all assets from case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to detach the assets from.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when detaching the asset(s). Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of detached CaAddressIds.\n   */\n  detachAll(caObjectId: number, updateXY: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        UpdateXY: updateXY\n      }\n      this.cw.runRequest('Pll/CaseAddress/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get assets attached to a specific case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object from which to get attached assets\n   * @return {Object} Returns Promise that represents a collection of the default CaAddresses.\n   */\n  getForCase(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseAddress/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Search for Case Assets. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Case Assets\n   * @param {Object} filters - The parameters to search by. (AssetType, CaAddressId, CaObjectId, CityName, ExpiredFlag, StateCode, StateName, StreetName, StreetNumber, Suite, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of resulting CaAddresses\n   */\n   search(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AssetType', 'CaAddressId', 'CaObjectId', 'CityName', 'ExpiredFlag', 'StateCode', 'StateName', 'StreetName', 'StreetNumber', 'Suite', 'ZipCode']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AssetType, CaAddressId, CaObjectId, CityName, ExpiredFlag, StateCode, StateName, StreetName, StreetNumber, Suite, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseAddress/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class WorkOrderAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get entity groups\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all entity groups\n   */\n  getEntityGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Ams/Entity/Groups', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all GIS WorkOrder entity types\n   */\n  getEntityTypes(entityGroups:Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data = {EntityGroups: entityGroups}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get WorkOrder templates\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all WorkOrder templates\n   */\n  getTemplates(entityType:string, includeComments:boolean=true, includeInstructions:boolean=true) {\n    return new Promise((resolve, reject) => {\n      var data = {EntityType: entityType, IncludeComments: includeComments, IncludeInstructions: includeInstructions}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {Object} wOTemplate - Obect that describes the WorkOrder Template\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  updateTemplate(wOTemplate:Object) {\n    let valid_fields = [\"AcctNum\", \"AutoCreateTask\", \"Cancel\", \"Comments\", \"CopyCustomFieldVal\", \"CycleFrom\", \"CycleIncludeWeekends\", \"CycleIntervalNum\", \"CycleIntervalUnit\", \"CycleType\", \"DaysToComplete\", \"DefaultProject\", \"DefaultProjectSid\", \"Description\", \"Effort\", \"ExpenseType\", \"Instructions\", \"IsReactive\", \"MaintScore\", \"NumDaysBefore\", \"Priority\",   \"RequireAssetOnClose\", \"Shop\", \"Stage\", \"SubmitToEmployeeSid\", \"SupervisorEmployeeSid\", \"UnitsAccompDesc\", \"UnitsAccompDescLock\", \"WOCategory\", \"WOCustFieldCatId\", \"WOPrintTmpt\", \"WOTemplateId\", \"WorkMonth\"]\n    return new Promise((resolve, reject) => {\n      var data = wOTemplate\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get template group rights for provided WorkOrder Templates\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateGroupRights(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => { // TODO: Update this URL\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get template activity services for provided WorkOrder Templates\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateActivity(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplateActivityService', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get fields which will be updated when provided WorkOrder Template instance closes\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getUpdateFields(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplateUpdateFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get equipment\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateEquipment(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateEquipment', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get labor\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateLabor(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateLabor', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get material\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateMaterial(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateMaterial', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get map layer fields configured for provided WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateMapLayerFields(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WorkOrderTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WorkOrderTemplateMapLayerFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks configured for provided WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all tasks on WorkOrder template\n   */\n  getTemplateTasks(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Tasks/ByWorkOrderTemplate', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections connected to provided WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all tasks on WorkOrder template\n   */\n  getRelatedInspectionTemplates(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateInspections', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class InspectionAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all Inspections matching the provided parameters\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class RequestAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get service request templates\n   *\n   * @category Requests Admin\n   * @param {Object} searchData - search data\n   * @return {Object} Returns Promise that represents a collection of all Service Request Templates\n   */\n  getTemplates(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport { General } from './general'\nimport { ActivityLinks } from './activity_link'\nimport { Gis } from './gis'\nimport { MessageQueue } from './message_queue'\nimport { Search } from './search'\nimport { Request } from './request'\nimport { Inspection } from './inspection'\nimport { WorkOrder } from './workorder'\nimport { Briefcase } from './briefcase'\nimport { CaseData } from './case_data'\nimport { CaseFinancial } from './case_financial'\nimport { CaseWorkflow} from './case_workflow'\nimport { CaseAdmin } from './case_admin'\nimport { Comments } from './comments'\nimport { CaseAssets } from './case_assets'\nimport { WorkOrderAdmin } from './workorder_admin'\nimport { InspectionAdmin } from './inspection_admin'\nimport { RequestAdmin } from './request_admin'\n\nconst https = require('https')\nconst querystring = require('querystring')\nconst _ = require('lodash')\n\ninterface postData {\n  data?: string\n  token?: string\n  file?: any\n}\n\ninterface Citywork {\n}\n\n/**\n * Core class Cityworks with most of the authentication and install capabilities functions\n */\nclass Cityworks implements Citywork {\n  /**\n   * The domain of the cityworks install. Defaults to Cityworks Online\n   */\n  private base_url: string\n  /**\n   * Stores the currently in use authentication token\n   */\n  private Token?: string\n  /**\n   * Stores the login username\n   */\n  private login?: string\n  /**\n   * Holds the login password\n   */\n  private password?: string\n  /**\n   * Holds the GIS Token for GIS-based Authentication (Portal)\n   */\n  private gisToken?: string\n  /**\n   * Holds the GIS Token URL for GIS-based Authentication (Portal)\n   */\n  private gisTokenUrl?: string\n  /**\n   * Stores settings including path (defaults to \"cityworks\"), secure (defaults to true), expires (defaults to null - does not expire), default_domain\n   */\n  private settings: {\n    path: string,\n    secure: boolean,\n    expires: any,\n    default_domain?: any\n  }\n  error?: any\n\n  private extensions: Object\n  private features: Object\n  private potential_loads: Array<string>\n\n  /**\n     * Contructor for a new cityworks instance's object, allows one to optionally configure the domain and other settings right from the get-go\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'workorder', 'inspection', 'request', 'case']\n     */\n  constructor(base_url?: string, settings?: Object, load?: Array<string>) {\n    this.base_url = 'cityworksonline'\n    this.extensions = {\"UnknownExtension\": 0, \"CwAnalytics\": 1, \"WebHooks\": 2, \"PLLPublicApp\": 3, \"ActivityUpdate\": 4, \"SingleSignOn\": 5}\n    this.features = {\"UnknownFeature\": 0, \"ViewInspections\": 1, \"EditInspections\": 2, \"ViewServiceRequest\": 3, \"EditServiceRequest\": 4, \"ViewWorkOrder\": 5, \"EditWorkOrder\": 6, \"EquipmentCheckOut\": 7, \"OfficeField\": 8, \"Respond\": 9, \"Eurl\": 10, \"PaverInterface\": 11, \"Contracts\": 12, \"Storeroom\": 13, \"PLL\": 14, \"Cw4XL\": 15, \"TableEditor\": 16, \"CCTVInterface\": 17, \"MobileAndroid\": 18, \"MobileiOS\": 19, \"PerformanceBudgeting\": 20, \"Insights\": 21, \"RespondCase\": 22, \"RespondInspection\": 23, \"RespondServiceRequest\": 24, \"RespondTaskManager\": 25, \"RespondWorkOrder\": 26, \"Workload\": 27, \"OpX\": 28, \"TrimbleUnityMobile\": 29, \"TrimbleVegetationManager\": 30}\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n    this.potential_loads = ['general', 'activity_link', 'message_queue', 'gis', 'search', 'request', 'case', 'case_financial']\n    if(typeof(base_url)!='undefined') {\n      this.configure(base_url, settings, load)\n    }\n  }\n\n  /**\n     * Configure a new cityworks instance's domain and other settings\n     *\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'search', 'workorder', 'inspection', 'request', 'case']\n     * @return {boolean} Returns true if successful, otherwise, throws error\n     */\n  configure(base_url?: string, settings?: Object, load?: Array<string>) {\n    if(typeof base_url !== 'undefined') { this.base_url = base_url } else { this.base_url = 'cityworksonline' }\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n\n    if(typeof(settings)!='undefined') {\n      _.forEach(settings, (v,k) => {\n        if(typeof(this.settings[k])!='undefined') {this.settings[k] = v}\n      })\n    }\n  }\n\n  /**\n     * Send a request to the Cityworks API\n     *\n     * If one ever needs to access or call an unimplemented API endpoint of a Cityworks install, one can call this method directly with the path and data payload:\n     *\n     * `cityworks.runRequest(path, data)`\n     *\n     * @param {string} path - The path to the particular endpoint\n     * @param {Object} data - The data object to be sent to the Cityworks API\n     * @param {any} file - The file to send in binary to the Cityworks API\n     * @return {Object} Returns Promise object that represents the json object returned from the Cityworks API\n     */\n  runRequest(path, data?, file?: any) {\n    return new Promise((resolve, reject) => {\n      let pd = {} as postData\n\n      if(typeof(data) !== 'undefined') {\n        pd.data = JSON.stringify(data)\n      }\n      \n      if(typeof(file) !== 'undefined' && (path=='Pll/CaseRelDocs/AddTaskRelDoc' || path=='Pll/CaseRelDocs/Add')) {\n        pd.file = file\n      }\n\n      if(typeof(this.Token) !== 'undefined' && this.Token != '' && path!='General/Authentication/CityworksOnlineAuthenticate' && path!='General/Authentication/Authenticate') {\n        pd.token = this.Token\n      }\n\n      let obj: {\n        Status: number,\n        Message: string\n      }\n\n      let options = {\n        hostname: this.base_url,\n        port: 443,\n        path: '/' + this.settings.path + '/services/' + path,\n        method: 'POST',\n        headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n           'Content-Length': Buffer.byteLength(querystring.stringify(pd))\n        },\n        timeout: 10000000\n      }\n      let request = https.request(options, (response) => {\n          let str=''\n          response.on('error',function(e){\n              console.log(e, 'Caught on error')\n              reject(new CWError(13, \"Unknown error.\", e))\n          })\n\n          response.on('data',function(chunk){\n              str+=chunk\n          })\n\n          response.on('end',function(){\n            try {\n              var test_str = JSON.stringify(str) + \"[test string]\"\n              if(test_str.match(/\\<h2\\>Object\\ moved\\ to/)==null) {\n                var obj=JSON.parse(str)\n                // if(path=='General/ActivityNotification/UserWatching') {\n                //   console.log(str, options, pd, obj)\n                // }\n                if(typeof(obj)=='undefined') {\n                  // failed\n                  reject(new CWError(10, 'No response received from Cityworks API.'))\n                } else if(typeof(obj)!='undefined' && typeof(obj.Value)!='undefined') { // && typeof(response.Value.Token)!='undefined') {\n                  switch(obj.Status) {\n                    case 1:\n                      reject(new CWError(1, 'Error', obj))\n                      break;\n                    case 2:\n                      reject(new CWError(2, 'Unauthorized', obj))\n                      break;\n                    case 3:\n                      reject(new CWError(3, 'InvalidCredentials', obj))\n                      break;\n                    case 0:\n                    default:\n                      resolve(obj);\n                      break;\n                  }\n                } else {\n                  reject(new CWError(4, \"Unknown error.\", {options: options, postedData: pd, api_returned_string: obj}))\n                }\n              } else {\n                reject(new CWError(5, \"Error parsing JSON. Cityworks returned HTML.\", {response: str}))\n              }\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log('try/catch error on JSON')\n                reject(new CWError(6, \"Error parsing JSON.\", {error: e}))\n              } else {\n                console.log('try/catch error on JSON - but not an instance of SyntaxError')\n                reject(new CWError(7, \"Error parsing JSON.\"))\n              }\n            }\n          })\n      })\n      request.write(querystring.stringify(pd))\n      request.end()\n    })\n  }\n\n  /**\n     * Authenticate with the Cityworks API and store an access token for use. Stores the token on cityworks.Token.\n     * @param {string} login - User's login name\n     * @param {password} password - User's password\n     * @return {Object} Returns Promise object that represents a boolean which tells you the login succeeded (true) or failed (false).\n     */\n  authenticate(login: string, password: string) {\n    return new Promise((resolve, reject) => {\n      let data = { LoginName:login, Password:password }\n      let path = 'General/Authentication/Authenticate'\n      if(this.base_url == 'cityworksonline') {\n        path = 'General/Authentication/CityworksOnlineAuthenticate'\n      }\n      this.runRequest(path, data).then((response: any) => {\n        // if(response.Status>0) {\n        //   // failed\n        //   reject(new CWError(100, response.Message))\n        // } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.login = login\n          this.password = password\n          this.Token = response.Value.Token\n          resolve(true)\n        // } else {\n        //   // failed\n        //   reject(new CWError(11, 'Unknown Error'))\n        // }\n      }).catch(error => {\n        reject(error);\n      })\n    })\n  }\n\n  /**\n     * Authenticate a username with a GIS Token\n     * @param {login} - Gis user name, should match a Cityworks employee login name\n     * @param {string} gisToken - Gis Oauth2 access token\n     * @param {string} gisTokenUrl - Base url to GIS server (not the '/generateToken' endpoint)\n     * @param {number} [expires] - Authenticate to Cityworks for a specified number of milliseconds, defaults to 2 weeks\n     */\n  authenticateWithGISToken(login: string, gisToken: string, gisTokenUrl: string, expires?: number) {\n    this.login = login\n    this.gisToken = gisToken\n    this.gisTokenUrl = gisTokenUrl\n    if(typeof(expires)!='undefined') {\n      expires = 1209600000\n    }\n\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/AuthenticateGisToken'\n      let data = { LoginName:this.login, GisToken: this.gisToken, GisTokenUrl: this.gisTokenUrl, Expires: expires}\n\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          // TODO: CWError here.\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          resolve(false)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Validate provided token\n     * @param {string} token - User's login name\n     * @param {boolean} [set] - Set a valid token as the cityworks instance's active token\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the token's validity and that is was set (true) or throws an error if was not valid (and not set).\n     */\n  validateToken(token:string, set?:boolean) {\n    return new Promise((resolve, reject) => {\n      if(typeof(set)=='undefined') {\n        let set = false\n      }\n      let data = { Token: token }\n      let path = 'General/Authentication/Validate'\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          resolve(false)\n        } else {\n          if(set) {\n            this.Token = token\n          }\n          resolve(response.Value)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Set a token you've retrieved from your storage system as the active token for the cityworks instance. Note that this doesn't check the token for validity.\n     * @param {token} token - The token string to set as the active token.\n     * @return {boolean} Returns a boolean which apprises one that the token was set (true) or not set (false).\n     */\n  setToken(token) {\n    if(token!='' && token!=null) {\n      this.Token = token\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n     * Get currently set, valid token\n     * @param {token} token - The token string to set as the active token.\n     * @return {string} Returns a string which is the currently-set token or the boolean false value if no (valid) token set\n     */\n  getToken() {\n    if(this.Token=='' || this.Token==null) {\n      return false\n    } else {\n      return this.Token\n    }\n  }\n\n  /**\n     * Revoke all current user's tokens or only tokens created before a particular date and time.\n     * @param {number} [revokeBefore] - Datetime as an Epoch integer (number), if you wish to revoke only tokens created before a particular datetime\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the revocation outcome's success (true) or failure (false)\n     */\n  revokeToken(revokeBefore?:number) {\n    return new Promise((resolve, reject) => {\n      let data = { RevokeDate: revokeBefore }\n      let path = 'General/Token/RevokeUser'\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          resolve(false)\n        } else {\n          resolve(true)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  // App data\n\n  /**\n     * Get the localization settings for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the localization settings for the current Cityworks install\n     */\n  getLocalizationSettings() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/LocalizationSettings'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the system timezone options for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the timezone settings for the currentCityworks install\n     */\n  getTimezoneOptions() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/TimeZones'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the current install's location information\n     * @return {Object} Returns Promise object that represents an Object which contains the location information\n     */\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/CurrentLocation'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  // Licensing Checks\n  /**\n     * Check if a particular license is available to the currently-authenticated user\n     * @param {string} area - Area of access\n     * @param {string} service - Service to access\n     * @return {boolean} Returns Promise object that represents a boolean which informs access is granted (true) or denied (false)\n     */\n  licensedApiCheck(area: string, service: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"Area\": area,\n        \"Service\": service\n      }\n      let path = 'General/AppData/SelectedEntities'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if a current Cityworks install is licensed to use a particular extension\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {string} extension - Extension name\n     * @return {boolean} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionCheck(extension: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.extensions[extension])=='undefined') {\n        reject(new CWError(4, 'Extension provided does not exist or is mispelled.', {'provided': extension, 'available': this.extensions}))\n      }\n      let data = {\n        \"Extension\": this.extensions[extension]\n      }\n      let path = 'General/Authorization/LicensedExtensionCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check a whole list to see if current Cityworks install is licensed to use extensions\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {Array<string>} extension - Extension names\n     * @return {Object} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionsCheck(extensions: Array<string>) {\n    return new Promise((resolve, reject) => {\n        var data: { Extensions: Array<number> } = {\n          Extensions: []\n        }\n      _.forEach(extensions, (v) => {\n        if(typeof(this.extensions[v])=='undefined') {\n          reject(new CWError(5, 'Extension provided does not exist or is mispelled.', {'provided': v, 'available': this.extensions}))\n        } else {\n          data.Extensions.push(this.extensions[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedExtensionsCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_extensions = _.invert(this.extensions)\n        _.forEach(response, (ext_num, bool) => {\n          if(typeof(inv_extensions[ext_num])=='undefined') {\n            reject(new CWError(6, 'Extension index provided does not exist or isn\\'t configured properly.', {'provided_num_returned': ext_num, 'available': this.extensions}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_extensions[ext_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use a feature:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {string} [feature] - Feature to check to see if ciurrently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeatureCheck(feature: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.features[feature])=='undefined') {\n        reject(new CWError(7, 'Feature provided does not exist or is mispelled.', {'provided': feature, 'available': this.features}))\n      }\n      let data = {\n        \"Feature\": this.features[feature]\n      }\n      let path = 'General/Authorization/LicensedFeatureCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use features:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {Array<string>} [feature] - Features to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeaturesCheck(features: Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data: { Features: Array<number> } = {\n        Features: []\n      }\n      _.forEach(features, (v: string) => {\n        if(typeof(this.features[v])=='undefined') {\n          reject(new CWError(8, 'Feature provided does not exist or is mispelled.', {'provided': v, 'available': this.features}))\n        } else {\n          data.Features.push(this.features[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedFeaturesCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_features = _.invert(this.features)\n        _.forEach(response.Value, (feat_num, bool) => {\n          if(typeof(inv_features[feat_num])=='undefined') {\n            reject(new CWError(9, 'Feature index provided does not exist or isn\\'t configured properly.', {'provided': feat_num, 'available': inv_features}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_features[feat_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  // LicensedServicesCheck\n  // Check if current user is licensed to use services\n  // List req ServicesList of 'Area/Service', i.e. ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n  /**\n     * Check if current user is licensed to use services. List req ServicesList of 'Area/Service', i.e.:\n     *\n     * ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n     *\n     * @param {Array<string>} [services] - Services to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedServicesCheck(services: Array<string>) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authorization/LicensedServicesCheck'\n      var data: { Services: Array<string> } = {\n        Services: services\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of CityworksOnline sites for this user\n     *\n     * @param {string} [login] - Login Name to use when checking. Defaults to previously-stored login name.\n     * @param {string} [password] - Password to use when checking. Defaults to previously-stored password.\n     * @return {Object} Returns Promise object that represents an array of cityworks online sites available to this user.\n     */\n  cityworksOnlineSites(login?: string, password?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/CityworksOnlineSites'\n      var data = {\n        LoginName: (typeof(login)!='undefined') ? login: this.login,\n        Password:  (typeof(password)!='undefined') ? password : this.password\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a collection of the configured domains.\n     */\n  domains() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Domains'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @param {string} [login] - Optional login name to get user information for. Defaults to currently-set user name used for login.\n     * @return {Object} Returns Promise object that represents an Object with the user information\n     */\n  user(login?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/User'\n      let data = { LoginName: (typeof(login)!='undefined') ? login: this.login }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the software version number of the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a string of the version number\n     */\n  version() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Version'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n\nconst cw = new Cityworks()\n\nconst general = new General(cw)\nconst activity_link = new ActivityLinks(cw)\nconst message_queue = new MessageQueue(cw)\nconst search = new Search(cw)\nconst gis = new Gis(cw)\nconst request = new Request(cw)\nconst inspection = new Inspection(cw)\nconst workorder = new WorkOrder(cw)\nconst briefcase = new Briefcase(cw)\n\nbriefcase.data = new CaseData(cw)\nbriefcase.financial = new CaseFinancial(cw)\nbriefcase.workflow = new CaseWorkflow(cw)\nbriefcase.admin = new CaseAdmin(cw)\nbriefcase.comment = new Comments(cw, 'CaObject')\nbriefcase.asset = new CaseAssets(cw)\n\nworkorder.admin = new WorkOrderAdmin(cw)\nworkorder.comment = new Comments(cw, 'WorkOrder')\n\ninspection.admin = new InspectionAdmin(cw)\n\nrequest.admin = new RequestAdmin(cw)\nrequest.comment = new Comments(cw, 'Request')\n\nexport { cw as Cityworks, general, activity_link, message_queue, search, gis, request, inspection, workorder, briefcase }"],"names":["_","require","CWError","code","message","info","this","name","has","get","JSON","stringify","General","cw","_proto","prototype","notifications","_this","Promise","resolve","reject","runRequest","then","response","Value","e","amIWatching","activityType","activityId","_this2","aType","null","case","task","provided","potential_activities","ActivityType","ActivityId","r","getActivityMetadataByIds","ids","table","_this3","tables","indexOf","available","Ids","TableName","console","log","getHistory","_this4","getWOEntityCostSummary","object_ids","_this5","ObjectIds","searchWOEntityCostSummary","search_id","_this6","SearchId","ActivityLinks","activityTypes","linkTypes","ReversibleMap","set","add","source_type","source_sid","destination_type","destination_sid","link_type","options","data","SourceType","SourceSid","DestType","DestSid","LinkType","type","sids","ActivitySids","return_data","Array","forEach","link","key","push","clone","SourceActivityType","SourceActivitySid","DestinationActivityType","DestinationActivitySid","activity_link_id","ActivityLinkId","remove","Gis","getConfig","whichType","whichId","getGisData","context","toLowerCase","domain","domainId","downloadMobile","cacheId","initialExtent","request","requestId","inspection","inspectionId","workOrder","workOrderSid","_this7","user","allDomains","allGroups","_this8","selectedEntities","_this9","getEntityAttributes","entityType","_this10","EntityType","MessageQueue","status","Pending","Processing","Complete","Failed","hook_types","Unknown","ActivityUpdate","Email","WebHook","processMessages","delete_successful","Delete","maxcount","MaxCount","Status","hours_to_keep","HoursToKeep","preferences","search","parameters","max_results","MaxResults","allowed_params","disallowed_params","v","k","value","concat","update","HookType","updateMessageStatus","getWebooks","hook_ids","HookIds","Search","searchTypes","Null","Request","WorkOrder","Inspection","Contract","Permit","GIS","PermitTask","PermitAddress","InspCommon","Case","WorkOrderEntity","StoreTransaction","Requisition","Material","WorkActivity","MaterialLeaf","WoTemplate","Employee","Analytics","TokenState","AssetCalculationResult","Equipment","CustomerAccount","InspTemplate","ProblemLeaf","AssetSplitRecord","PavementInsp","TvInspection","Projects","quick","text","QuickSearchText","execute","searchId","merge","getSaved","searchType","applyToEntities","employeeSid","length","savedEndpoint","displayFields","types","enableServices","searchIds","Enable","SearchIds","disableServices","getDefinition","getDefinitions","getDefinitionNames","deleteDefinitions","_this11","saveDefinition","searchFor","_this12","SearchFor","admin","comment","updateMLF","ServiceRequestId","create","sr_data","move","x","y","projection","z","base_data","RequestId","X","Y","changeProblem","problemSid","ProblemSid","getById","getByIds","requestIds","RequestIds","getAuditLog","getCustomFields","changeCustomFieldCategory","categoryId","CategoryId","cancel","cancelReason","dateCancelled","uncancel","close","_this13","Message","reopen","_this14","_this15","searchData","_this16","searchObject","_this17","createSearchDefinition","searchName","sharedWithin","enableEurl","_this18","isString","getProblemNodes","viewOnly","displayMode","includeCancelled","_this19","DomainId","IncludeCancelled","ViewOnly","getProblems","forPublicOnly","onlyActiveTemplates","domainIds","_this20","ForPublicOnly","OnlyActiveTemplates","getProblemsByKeywords","keywords","_this21","Keywords","getPriorities","_this22","ProblemSids","getCustomFieldTemplate","_this23","getQASettings","_this24","getProblemLeaf","_this25","getStatuses","_this26","DomainIds","getEmployeeLists","listType","_this27","includes","getDispatchTos","getSubmitTos","streetCodes","_this28","getTemplatesById","problemSids","minimumDateModified","maximumDateModified","_this29","createTemplateSearchDefinition","_this30","getTemplateQAs","_this31","searchTemplates","_this32","getTemplates","templateIds","canCreate","includeInactiveIf","_this33","CanCreate","IncludeInactiveIf","getWOTemplates","includeInactive","_this34","IncludeInactive","insp_data","createFromEntities","createFromParent","createFromServiceRequest","createFromWorkOrder","InspectionId","inspectionIds","InspectionIds","CancelReason","DateCancelled","statuses","submitTos","includeInactiveEmployees","IncludeInactiveEmployees","connectAsset","entity","updateXY","facility","EntityUid","Entity","Facility_Id","Level_Id","getAnswers","inspections","getCycleFrom","getCycleIntervals","getCycleTypes","getDistricts","data_init","entityTypes","EntityTypes","forIn","getTemplatesByIds","inspTemplateIds","InspTemplateIds","getTemplateEntityTypes","getQA","getQConditions","deleteAttachments","attachmentIds","AttachmentIds","downloadAttachment","attachmentId","AttachmentId","getAttachmentById","_this35","getAttachments","_this36","wo_data","workOrderSId","s","combine","fromWorkOrderIds","toWorkOrderId","cancelCombinedWorkOrders","CancelCombinedWorkOrders","ToWorkOrderId","FromWorkOrderIds","workOrderId","WorkOrderId","path","workOrderSIds","workorderSId","isNumber","getInstructions","getCustomFieldValues","workorderSIds","getEntities","GetGisData","addEntities","entityInfo","UpdateXY","updateEntity","workComplete","WorkComplete","removeEntities","workOrderIds","WorkOrderIds","getWOsByEntities","entityUids","getSearchList","getSupervisors","getCategories","getStages","getExpenseTypes","Briefcase","asset","workflow","financial","caseTypeId","subTypeId","CaseTypeId","SubTypeId","createChild","busCaseId","parentCaObjectId","BusCaseId","ParentCaObjectId","createFromRequest","caObjectId","CaObjectId","caObjectIds","CaObjectIds","filters","CaseData","addGroup","caseDataGroupId","groupCode","CaseDataGroupId","GroupCode","addDefaultGroups","wipAddDetail","caseDataDetailId","caDataGroupId","columnSequence","detailCode","detailSequence","CaseDataDetailId","CaDataGroupId","ColumnSequence","DetailCode","DetailSequence","getGroupsByCaseId","deleteGroupsByCaseId","searchForGroups","intersectionBy","keysIn","checkGIS","entityUid","updateGroupsFromAsset","addDetail","updateDetail","caDataDetailId","CaDataDetailId","lockDetail","Lock","unlockDetail","addListValue","listValue","ListValue","deleteListValue","searchForListValueIds","searchForListValueObjects","CaseFinancial","addFee","feeSetupId","FeeSetupId","addPayment","addRefund","caPaymentId","refundAmount","CaPaymentId","RefundAmount","Comments","addDepositPayment","caDepositId","CaDepositId","addDeposit","depositId","amount","DepositId","addInstrument","instTypeId","dateExpire","InstTypeId","Amount","DateExpire","updateFee","caFeeId","CaFeeId","voidRefund","caPaymentRefundId","voided","CaPaymentRefundId","Voided","addDefaultFees","addDefaultDeposits","getFees","getDeposits","getPayments","getInstruments","deleteFee","deleteFeesByCaseId","deletePayment","deleteRefund","deletePaymentsByCaseId","deleteDeposit","deleteDepositsByCaseId","deleteInstrument","caInstrumentId","CaInstrumentId","deleteInstrumentsByCaseId","searchFees","searchPayments","searchRefunds","searchDeposits","getAllFeeTemplates","searchFeeTemplates","searchCaseInstruments","getInstrumentList","addCaseInstrumentRelease","releasedBy","dateReleased","amountReleased","percentReleased","DateReleased","ReleasedBy","deleteCaseInstrumentRelease","caInstReleasesId","CaInstReleasesId","searchCaseInstrumentReleases","fees","searchAvailableFees","getTenderTypes","_this37","addTenderType","_this38","updateTenderType","tenderTypeId","_this39","TenderTypeId","currentActivityType","sid","ActivitySid","id","CommentId","getPredefined","category","CaseWorkflow","addTask","taskId","startPoint","endPoint","TaskId","StartPoint","EndPoint","addTaskResult","caTaskId","resultCode","resultID","resultSetID","CaTaskId","ResultCode","ResultID","ResultSetID","addTaskComment","CommentText","getTasksByCaseId","checkRelatedItems","CheckRelatedItems","getTasksById","caTaskIds","CaTaskIds","getResultsByTaskId","getCommentsForTask","getCommentsForTasks","updateTask","updateTaskComment","caTaskCommentId","commentId","CaTaskCommentId","setTaskResult","deleteTask","deleteTasksOnCase","deleteTaskComments","caTaskCommentIds","CaTaskCommentIds","searchForTasks","searchForTaskResults","addTaskAttachment","docName","file","locationType","DocName","getTaskAttachments","deleteTaskAttachment","caRelDocId","CaRelDocId","CaseAdmin","addBusinessCaseTemplate","updateBusinessCaseTemplate","getBusinessCaseTemplates","addCaseType","caseTypeName","caseTypeDesciption","CaseType","CaseTypeDesciption","updateCaseType","getCaseTypes","searchCaseTypeIDs","searchCaseTypeObjects","addSubtype","subTypeName","subTypeDescription","SubType","SubTypeDesc","updateSubtype","getSubtypes","getExpirations","addExpiration","getDisciplines","addDepartment","departmentCode","departmentName","DepartmentCode","DepartmentName","getDepartments","addDivision","departmentId","divisionName","DepartmentId","DivisionName","getDivisions","addHoliday","holidayDate","holidayDesc","halfDayFlag","HolidayDate","HolidayDesc","deleteHoliday","holidayId","HolidayId","getHolidays","addInspectionTimeBlock","labelText","startTime","endTime","inspTimeBlocksDetails","LabelText","StartTime","EndTime","getInspectionTimeBlocks","getNotificationCases","getNotificationTypes","addNumberingGroup","updateNumberingGroup","numberingGroupId","NumberingGroupId","getNumberingGroups","addPerson","Name","getPeople","addPeopleRole","roleCode","RoleCode","getPeopleRoles","addTaskResultDetail","updateTaskResultDetail","resultDetailId","ResultDetailId","getTaskResultDetails","addTaskResultFeeInsert","_this40","deleteTaskResultFeeInsert","taskResultFeeInsertId","_this41","TaskResultFeeInsertId","deleteTaskResultFeeInsertByTaskId","_this42","updateTaskResultFeeInsert","taskResultId","_this43","TaskResultId","getTaskResultFeeInsert","_this44","CaseAssets","attach","detach","caAddressId","CaAddressId","detachAll","getForCase","WorkOrderAdmin","getEntityGroups","getEntityTypes","entityGroups","EntityGroups","includeComments","includeInstructions","IncludeComments","IncludeInstructions","updateTemplate","wOTemplate","getTemplateGroupRights","wOTemplateIds","WOTemplateIds","getTemplateActivity","getUpdateFields","getTemplateEquipment","wOTemplateId","WOTemplateId","getTemplateLabor","getTemplateMaterial","getTemplateMapLayerFields","WorkOrderTemplateId","getTemplateTasks","getRelatedInspectionTemplates","InspectionAdmin","RequestAdmin","https","querystring","Cityworks","base_url","settings","load","Token","login","password","gisToken","gisTokenUrl","error","extensions","features","potential_loads","UnknownExtension","CwAnalytics","WebHooks","PLLPublicApp","SingleSignOn","UnknownFeature","ViewInspections","EditInspections","ViewServiceRequest","EditServiceRequest","ViewWorkOrder","EditWorkOrder","EquipmentCheckOut","OfficeField","Respond","Eurl","PaverInterface","Contracts","Storeroom","PLL","Cw4XL","TableEditor","CCTVInterface","MobileAndroid","MobileiOS","PerformanceBudgeting","Insights","RespondCase","RespondInspection","RespondServiceRequest","RespondTaskManager","RespondWorkOrder","Workload","OpX","TrimbleUnityMobile","TrimbleVegetationManager","secure","expires","default_domain","configure","pd","token","hostname","port","method","headers","Buffer","byteLength","timeout","str","on","chunk","match","obj","parse","postedData","api_returned_string","SyntaxError","write","end","authenticate","LoginName","Password","authenticateWithGISToken","GisToken","GisTokenUrl","Expires","validateToken","setToken","getToken","revokeToken","revokeBefore","RevokeDate","getLocalizationSettings","getTimezoneOptions","getCurrentLocation","licensedApiCheck","area","service","Area","Service","licensedExtensionCheck","extension","Extension","licensedExtensionsCheck","Extensions","rez","inv_extensions","invert","ext_num","bool","provided_num_returned","licensedFeatureCheck","feature","Feature","licensedFeaturesCheck","Features","inv_features","feat_num","licensedServicesCheck","services","Services","cityworksOnlineSites","domains","version","general","activity_link","message_queue","gis","workorder","briefcase"],"mappings":"gYAAMA,EAAIC,QAAQ,UAmBLC,EA0BX,SAAYC,EAAaC,EAAgBC,GAAYC,KAtBrDC,UAAI,EAAAD,KAIJH,UAIAC,EAAAA,KAAAA,oBAIAC,UAAI,EAWFC,KAAKC,KAAO,sBACZD,KAAKH,KAAOA,EACZG,KAAKF,QAAUA,OACK,IAAVC,IACLL,EAAEQ,IAAIH,EAAM,aACbC,KAAKF,QAAUJ,EAAES,IAAIJ,EAAM,YAC7BC,KAAKD,KAAOK,KAAKC,UAAUN,GAE/B,ECrDIL,EAAIC,QAAQ,UAKLW,eAAO,WASlB,SAAAA,EAAYC,GALZA,KAAAA,UAMEP,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAAF,EAAAG,iBAAAD,EAODE,cAAA,WAAa,IAAAC,EAAAX,KACX,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3BH,EAAKJ,GAAGQ,WAAW,oCAAqC,CAAE,GAAEC,KAAK,SAACC,GAChEJ,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDY,YAAA,SAAYC,EAAcC,GAAkBC,IAAAA,EAC1CvB,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIU,EAAQ,CAACC,KAAQ,EAAGC,KAAQ,EAAGC,KAAQ,QACX,IAAtBH,EAAMH,GAEdP,EAAO,IAAIlB,EAAQ,EAAG,yCAA0C,CAACgC,SAAUP,EAAcQ,qBAAsBL,KAG/GD,EAAKhB,GAAGQ,WAAW,4CADR,CAACe,aAAgBN,EAAMH,GAAeU,WAAcT,IACON,KAAK,SAAAgB,GAEzEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EAEJ,EACF,EAACX,EASDyB,yBAAA,SAAyBC,EAAoBC,GAAa,IAAAC,EAAApC,KACxD,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAAIuB,EAAS,CAAC,aAAc,UAAW,cACT,GAA3B3C,EAAE4C,QAAQD,EAAQF,IACnBrB,EAAO,IAAIlB,EAAQ,EAAG,qDAAsD,CAACgC,SAAYO,EAAOI,UAAYF,KAM9GD,EAAK7B,GAAGQ,WAAW,qCAJR,CACTyB,IAAON,EACPO,UAAaN,IAEgDnB,KAAK,SAAAgB,GAClEU,QAAQC,IAAIX,GACZnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAODoC,WAAA,WAAUC,IAAAA,EACR7C,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3B+B,EAAKtC,GAAGQ,WAAW,4BADR,CAAE,GACyCC,KAAK,SAAAgB,GACzDU,QAAQC,IAAIX,GACZnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDsC,uBAAA,SAAuBC,GAAyB,IAAAC,EAAAhD,KAC9C,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BkC,EAAKzC,GAAGQ,WAAW,sCAHR,CACTkC,UAAaF,IAEiD/B,KAAK,SAAAgB,GACnEU,QAAQC,IAAIX,GACZnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD0C,0BAAA,SAA0BC,GAAiB,IAAAC,EAAApD,KACzC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BsC,EAAK7C,GAAGQ,WAAW,4CAHR,CACTsC,SAAYF,IAEwDnC,KAAK,SAAAgB,GACzEU,QAAQC,IAAIX,GACZnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACb,CAAA,CAvIiB,GCJdZ,EAAIC,QAAQ,UAgBL2D,eAAa,WAqBxB,SAAAA,EAAY/C,GAfZgD,KAAAA,0BAMAC,eAAS,EAAAxD,KAITO,QAAE,EAMAP,KAAKO,GAAKA,EACVP,KAAKuD,cAAgB,IAAIE,EAA+B,QACxDzD,KAAKuD,cAAcG,IAAI,OAAQ,GAC/B1D,KAAKuD,cAAcG,IAAI,OAAQ,GAC/B1D,KAAKuD,cAAcG,IAAI,aAAc,GACrC1D,KAAKuD,cAAcG,IAAI,UAAW,GAClC1D,KAAKuD,cAAcG,IAAI,YAAa,GACpC1D,KAAKuD,cAAcG,IAAI,UAAW,GAElC1D,KAAKwD,UAAY,IAAIC,EAA+B,QACpDzD,KAAKwD,UAAUE,IAAI,OAAQ,GAC3B1D,KAAKwD,UAAUE,IAAI,SAAU,GAC7B1D,KAAKwD,UAAUE,IAAI,UAAW,EAChC,CAAC,IAAAlD,EAAA8C,EAAA7C,iBAAAD,EAqBDmD,IAAA,SAAIC,EAAqBC,EAAoBC,EAA0BC,EAAyBC,GAA6BzC,IAAAA,EAA7ByC,KAC9F,YAD8FA,IAAAA,IAAAA,EAAoB,WAC3G,IAAIpD,QAAQ,SAACC,EAASC,GACvBS,EAAKgC,cAAcrD,IAAI0D,IACzB9C,EAAO,IAAIlB,EAAQ,EAAG,yBAA0B,CAACgC,SAAYgC,EAAaK,QAAU1C,EAAKgC,iBAEvFhC,EAAKgC,cAAcrD,IAAI4D,IACzBhD,EAAO,IAAIlB,EAAQ,EAAG,8BAA+B,CAACgC,SAAYkC,EAAkBG,QAAU1C,EAAKgC,iBAEjGhC,EAAKiC,UAAUtD,IAAI8D,IACrBlD,EAAO,IAAIlB,EAAQ,EAAG,uBAAwB,CAACgC,SAAYoC,EAAWC,QAAU1C,EAAKiC,aAEvF,IAAIU,EAAO,CACTC,WAAY5C,EAAKgC,cAAcpD,IAAIyD,GACnCQ,UAAWP,EACXQ,SAAU9C,EAAKgC,cAAcpD,IAAI2D,GACjCQ,QAASP,EACTQ,SAAUhD,EAAKiC,UAAUrD,IAAI6D,IAG/BzC,EAAKhB,GAAGQ,WADG,2BACcmD,GAAMlD,KAAK,SAACC,GACnCJ,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYDL,IAAA,SAAIqE,EAAcC,GAAmB,IAAArC,EACnCpC,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GACvBsB,EAAKmB,cAAcrD,IAAIsE,IACzB1D,EAAO,IAAIlB,EAAQ,EAAG,2BAA4B,CAACgC,SAAY4C,EAAMP,QAAU7B,EAAKmB,iBAEtF,IAAIW,EAAO,CACTpC,aAAcM,EAAKmB,cAAcpD,IAAIqE,GACrCE,aAAcD,GAEZ9D,EAAQyB,EAEZA,EAAK7B,GAAGQ,WADG,sCACcmD,GAAMlD,KAAK,SAACC,GACnC,IAAI0D,EAAc,IAAIC,MACtBlF,EAAEmF,QAAQ5D,EAASC,MAAO,SAAC4D,EAAMC,GAC/BD,EAAKT,SAAW1D,EAAM4C,cAAcpD,IAAI2E,EAAKT,UAC7CS,EAAKX,WAAaxD,EAAM4C,cAAcpD,IAAI2E,EAAKX,YAC/CW,EAAKP,SAAW5D,EAAM6C,UAAUrD,IAAI2E,EAAKP,UACzCI,EAAYK,KAAKF,EACnB,GACAjE,EAAQ8D,EACV,GAAE,MAAO,SAAAxD,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAiBDyE,MAAA,SAAMrB,EAAqBC,EAAoBC,EAA0BC,GAAuBlB,IAAAA,EAC9F7C,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GACvB+B,EAAKU,cAAcrD,IAAI0D,IACzB9C,EAAO,IAAIlB,EAAQ,EAAG,yBAA0B,CAACgC,SAAYgC,EAAaK,QAAUpB,EAAKU,iBAEvFV,EAAKU,cAAcrD,IAAI4D,IACzBhD,EAAO,IAAIlB,EAAQ,EAAG,8BAA+B,CAACgC,SAAYkC,EAAkBG,QAAUpB,EAAKU,iBAErG,IAAIW,EAAO,CACTgB,mBAAoBrC,EAAKU,cAAcpD,IAAIyD,GAC3CuB,kBAAmBtB,EACnBuB,wBAAyBvC,EAAKU,cAAcpD,IAAI2D,GAChDuB,uBAAwBtB,GAG1BlB,EAAKtC,GAAGQ,WADG,0CACcmD,GAAMlD,KAAK,SAACC,GACnCJ,EAAQI,EAASC,MACnB,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,SAQD,SAAO8E,GAAwBtC,IAAAA,EAC7BhD,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAK3BkC,EAAKzC,GAAGQ,WADG,8BAHA,CACTwE,eAAgBD,IAGatE,KAAK,SAACC,GACnCJ,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAqBDgF,OAAA,SAAO5B,EAAqBC,EAAoBC,EAA0BC,EAAyBC,GAA6B,IAAAZ,EAAApD,KAC9H,YADiGgE,IAAAA,IAAAA,EAAoB,WAC1G,IAAApD,QAAQ,SAACC,EAASC,GACvBsC,EAAKG,cAAcrD,IAAI0D,IACzB9C,EAAO,IAAIlB,EAAQ,EAAG,yBAA0B,CAACgC,SAAYgC,EAAaK,QAAUb,EAAKG,iBAEvFH,EAAKG,cAAcrD,IAAI4D,IACzBhD,EAAO,IAAIlB,EAAQ,EAAG,8BAA+B,CAACgC,SAAYkC,EAAkBG,QAAUb,EAAKG,iBAEjGH,EAAKI,UAAUtD,IAAI8D,IACrBlD,EAAO,IAAIlB,EAAQ,EAAG,uBAAwB,CAACgC,SAAYoC,EAAWC,QAAUb,EAAKI,aAEvF,IAAIU,EAAO,CACTC,WAAYf,EAAKG,cAAcpD,IAAIyD,GACnCQ,UAAWP,EACXQ,SAAUjB,EAAKG,cAAcpD,IAAI2D,GACjCQ,QAASP,EACTQ,SAAUnB,EAAKI,UAAUrD,IAAI6D,IAG/BZ,EAAK7C,GAAGQ,WADG,8BACcmD,GAAMlD,KAAK,SAACC,GACnCJ,EAAQI,EAASC,MACnB,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACmC,CAAA,CA7NuB,GCjBhB3D,QAAQ,UAElB,IAAa8F,eASX,WAAA,SAAAA,EAAYlF,GAAEP,KALdO,QAAE,EAMAP,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAAiF,EAAAhF,UAkOC,OAlODD,EAWDkF,UAAA,SAAUC,EAAWC,EAASC,EAA4BC,GAA2B,IAAAnF,EAAAX,KACnF,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3B6E,EAAYA,EAAUI,cAgBtBpF,EAAKJ,GAAGQ,WAjBG,wBAiBc,IAAIC,KAAK,SAACC,GACjCJ,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDwF,OAAA,SAAOC,EAAUJ,GAA0B,IAAAtE,EAAAvB,KACzC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAK3BS,EAAKhB,GAAGQ,WAJG,wBAIc,IAAIC,KAAK,SAACC,GACjCJ,EAAQI,EAASC,MACnB,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD0F,eAAA,SAAeC,EAASN,GAA0BzD,IAAAA,EAA1ByD,KACtB,OAAW,IAAAjF,QAAQ,SAACC,EAASC,GAK3BsB,EAAK7B,GAAGQ,WAJG,wCAIc,CAAA,GAAIC,KAAK,SAACC,GACjCJ,EAAQI,EAASC,MACnB,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAOD4F,cAAA,WAAavD,IAAAA,EACX7C,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAG3B+B,EAAKtC,GAAGQ,WAFG,+BAEc,CAAE,GAAEC,KAAK,SAACC,GACjCJ,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD6F,QAAA,SAAQC,EAAWT,GAA0B,IAAA7C,EAAAhD,KAC3C,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAM3BkC,EAAKzC,GAAGQ,WALG,6CAKc,CAAE,GAAEC,KAAK,SAACC,GACjCJ,EAAQI,EAASC,MACnB,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD+F,WAAA,SAAWC,EAAcX,GAA0BzC,IAAAA,EAA1ByC,KACvB,OAAW,IAAAjF,QAAQ,SAACC,EAASC,GAM3BsC,EAAK7C,GAAGQ,WALG,yCAKc,IAAIC,KAAK,SAACC,GACjCJ,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDiG,UAAA,SAAUC,EAAcb,GAA0B,IAAAc,EAAA3G,KAChD,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAM3B6F,EAAKpG,GAAGQ,WALG,wCAKc,IAAIC,KAAK,SAACC,GACjCJ,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWDoG,KAAA,SAAKd,EAA6Be,EAA4BC,EAA2BjB,GAA0B,IAAAkB,EAAA/G,KACjH,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAQ3BiG,EAAKxG,GAAGQ,WAPG,sBAOc,IAAIC,KAAK,SAACC,GACjCJ,EAAQI,EAASC,MACnB,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAcAwG,iBAAA,WAAgB,IAAAC,EAAAjH,KACd,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3BmG,EAAK1G,GAAGQ,WADG,mCACc,CAAA,GAAIC,KAAK,SAACC,GACjCJ,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD0G,oBAAA,SAAoBC,GAAiB,IAAAC,EAAApH,KACnC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAG3BsG,EAAK7G,GAAGQ,WADG,wBADA,CAACsG,WAAYF,IAEOnG,KAAK,SAACC,GACnCJ,EAAQI,EAASC,MACnB,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACsE,CAAA,CApOF,GCXI/F,EAAIC,QAAQ,UAEL2H,0BAmCX,SAAAA,EAAY/G,QA/BZA,QAAE,EAAAP,KAQFuH,OAAiB,CACfC,QAAS,EACTC,WAAY,EACZC,SAAU,EACVC,OAAQ,GASVC,KAAAA,WAAqB,CACnBC,QAAS,EACTC,eAAgB,EAChBC,MAAO,EACPC,QAAS,GAOThI,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAA8G,EAAA7G,iBAAAD,EASDyH,gBAAA,SAAgB/F,EAAoBgG,GAAkC,IAAAvH,EAAAX,KACpE,YADkCkI,IAAAA,IAAAA,GAA6B,GACxD,IAAItH,QAAQ,SAACC,EAASC,GAG3BH,EAAKJ,GAAGQ,WADG,uCADA,CAAEyB,IAAKN,EAAKiG,OAAQD,IAEAlH,KAAK,SAACC,MAE7B,MAAC,SAAAE,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDL,IAAA,SAAI+B,EAAoBqF,EAAgBa,GAAqB,IAAA7G,EAArB6G,KACtC,YADsCA,IAAAA,IAAAA,EAAmB,IAC9C,IAAAxH,QAAQ,SAACC,EAASC,QACK,IAAtBS,EAAKgG,OAAOA,IACpBzG,EAAO,IAAIlB,EAAQ,EAAG,kDAAmD,CAACgC,SAAY2F,EAAQhF,UAAYhB,EAAKgG,UAQjHhG,EAAKhB,GAAGQ,WADG,6BALA,CACTyB,IAAON,EACPmG,cAA8B,IAAXD,EAAyBA,EAAW,GACvDE,OAAU/G,EAAKgG,OAAOA,KAGOvG,KAAK,SAACC,GAEpC,SAAQ,SAAAE,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUD,OAAA,SAAO0B,EAAoBqF,EAAgBgB,GAAsB,IAAAnG,EAC/DpC,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,QACK,IAAtBsB,EAAKmF,OAAOA,IACpBzG,EAAO,IAAIlB,EAAQ,EAAG,kDAAmD,CAACgC,SAAY2F,EAAQhF,UAAYH,EAAKmF,UAQjHnF,EAAK7B,GAAGQ,WADG,8BALA,CACTyB,IAAON,EACPoG,OAAUlG,EAAKmF,OAAOA,GACtBiB,YAAeD,IAGcvH,KAAK,SAACC,GAEpC,GAAC,MAAO,SAAAE,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAMDiI,YAAA,WAAW,IAAA5F,EACT7C,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAG3B+B,EAAKtC,GAAGQ,WADG,mCADA,IAEoBC,KAAK,SAACC,GAEpC,SAAQ,SAAAE,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAEDkI,OAAA,SAAOC,EAAYC,GAAoB5F,IACjCkB,EADiClB,EACrChD,KACA,OAAO,IAAIY,QAAQ,SAACC,EAASC,QACI,IAArB6H,EAAWpB,aAAiE,IAAjCvE,EAAKuE,OAAOoB,EAAWpB,QAC1EzG,EAAO,IAAIlB,EAAQ,EAAG,kDAAmD,CAACgC,SAAY+G,EAAWpB,OAAQhF,UAAYS,EAAKuE,eACtF,IAArBoB,EAAWpB,aAAkE,IAAlCvE,EAAKuE,OAAOoB,EAAWpB,UACjFrD,EAAKoE,OAAStF,EAAKuE,OAAOoB,EAAWpB,cAEd,IAAfqB,IACR1E,EAAK2E,WAAaD,GAEpB,IAAIE,EAAiB,CAAC,KAAM,SAAU,WAAY,SAAU,mBAAoB,iBAAkB,mBAAoB,kBAClHC,EAAoB,CAAC,SAAU,cACnCrJ,EAAEmF,QAAQ8D,EAAY,SAACK,EAAGC,IACS,GAA9BvJ,EAAE4C,QAAQwG,EAAeG,KAA4C,GAAlCvJ,EAAE4C,QAAQyG,EAAmBE,GACjE/E,EAAK+E,GAAKD,GACgC,GAAlCtJ,EAAE4C,QAAQyG,EAAmBE,IACrCnI,EAAO,IAAIlB,EAAQ,EAAG,qDAAsD,CAACgC,SAAYqH,EAAGC,MAASF,EAAGzG,UAAY7C,EAAEyJ,OAAOL,EAAgBC,KAEjJ,GAEA/F,EAAKzC,GAAGQ,WADG,8BACcmD,GAAMlD,KAAK,SAACC,QAER,IAAjBA,EAASC,QACjBD,EAASC,MAAQ,IAEnBL,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAkBD4I,OAAA,SAAOT,GAAe,IAChBzE,EADgBd,EACpBpD,KACA,OAAO,IAAIY,QAAQ,SAACC,EAASC,QACI,IAArB6H,EAAWpB,aAAiE,IAAjCnE,EAAKmE,OAAOoB,EAAWpB,QAC1EzG,EAAO,IAAIlB,EAAQ,EAAG,kDAAmD,CAACgC,SAAY+G,EAAWpB,OAAQhF,UAAYa,EAAKmE,eACtF,IAArBoB,EAAWpB,aAAkE,IAAlCnE,EAAKmE,OAAOoB,EAAWpB,UACjFrD,EAAKoE,OAASlF,EAAKmE,OAAOoB,EAAWpB,cAEJ,IAAzBoB,EAAWf,iBAA6E,IAAzCxE,EAAKwE,WAAWe,EAAWf,YAClF9G,EAAO,IAAIlB,EAAQ,EAAG,kDAAmD,CAACgC,SAAY+G,EAAWf,WAAYrF,UAAYa,EAAKwE,mBACtF,IAAzBe,EAAWf,iBAA8E,IAA1CxE,EAAKwE,WAAWe,EAAWf,cACzF1D,EAAKmF,SAAWjG,EAAKwE,WAAWe,EAAWf,aAE7C,IAAIkB,EAAiB,CAAC,KAAM,SAAU,SAAU,UAC5CC,EAAoB,CAAC,SAAU,YACnCrJ,EAAEmF,QAAQ8D,EAAY,SAACK,EAAGC,IACS,GAA9BvJ,EAAE4C,QAAQwG,EAAeG,KAA4C,GAAlCvJ,EAAE4C,QAAQyG,EAAmBE,GACjE/E,EAAK+E,GAAKD,GACgC,GAAlCtJ,EAAE4C,QAAQyG,EAAmBE,IACrCnI,EAAO,IAAIlB,EAAQ,EAAG,qDAAsD,CAACgC,SAAYqH,EAAGC,MAASF,EAAGzG,UAAY7C,EAAEyJ,OAAOL,EAAgBC,KAEjJ,GAGA3F,EAAK7C,GAAGQ,WADG,8BACcmD,GAAMlD,KAAK,SAACC,QAER,IAAjBA,EAASC,QACjBD,EAASC,MAAQ,IAEnBL,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EAED8I,oBAAA,SAAoBpH,EAAeqF,EAAgBgB,GAAsB5B,IAAAA,OACvE,OAAO,IAAI/F,QAAQ,SAACC,EAASC,QACK,IAAtB6F,EAAKY,OAAOA,IACpBzG,EAAO,IAAIlB,EAAQ,EAAG,kDAAmD,CAACgC,SAAY2F,EAAQhF,UAAYoE,EAAKY,UAQjHZ,EAAKpG,GAAGQ,WADG,2CALA,CACTyB,IAAON,EACPoG,OAAU3B,EAAKY,OAAOA,GACtBiB,YAAeD,IAGcvH,KAAK,SAACC,GAAiB,EAGxD,EACF,EAACT,EAED+I,WAAA,SAAWC,GAAQ,IAAAzC,EAAA/G,KACjB,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAK3BiG,EAAKxG,GAAGQ,WADG,gCAHA,CACT0I,QAAWD,IAGkBxI,KAAK,SAACC,GAEpC,EACH,EACF,EAACqG,CAAA,IChPG5H,EAAIC,QAAQ,UAEL+J,eAAM,WA+CjB,SAAAA,EAAYnJ,GAAEP,KA3CdO,QAKAoJ,EAAAA,KAAAA,YAAsB,CACpBC,KAAQ,EACRC,QAAW,EACXC,UAAa,EACbC,WAAc,EACdC,SAAY,EACZC,OAAU,EACVC,IAAO,EACPC,WAAc,EACdC,cAAiB,EACjBC,WAAc,EACdC,KAAQ,GACRC,gBAAmB,GACnBC,iBAAoB,GACpBC,YAAe,GACfC,SAAY,GACZC,aAAgB,GAChBC,aAAgB,GAChBC,WAAc,GACdhD,QAAW,GACXiD,SAAY,GACZxD,aAAgB,GAChByD,UAAa,GACbC,WAAc,GACdC,uBAA0B,GAC1BC,UAAa,GACbC,gBAAmB,GACnBC,aAAgB,GAChBC,YAAe,GACfC,iBAAoB,GACpBC,aAAgB,GAChBC,aAAgB,GAChBC,SAAY,IAOZzL,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAAkJ,EAAAjJ,iBAAAD,EASDkL,MAAA,SAAMC,GAAY,IAAAhL,EAChBX,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3BH,EAAKJ,GAAGQ,WAAW,kCAHR,CACT6K,gBAAmBD,IAEuC3K,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDqL,QAAA,SAAQC,EAAkB7H,GAAyN,IAAA1C,EACjPvB,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTb,SAAUyI,GAEZ5H,EAAOxE,EAAEqM,MAAM7H,EAAMD,GACrB1C,EAAKhB,GAAGQ,WAAW,qBAAsBmD,GAAMlD,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYDwL,SAAA,SAASC,EAAoBC,EAAiCC,EAAsBlG,GAAiB,IAAA7D,EACnGpC,KAAA,WAAWY,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAIkC,EAAKuH,YAAasC,QAEO,IAAlBC,GAAkD,MAAjBA,GAAyBA,EAAgBE,OAAO,SAA2B,IAAdD,QAA+C,IAAXlG,IACjJnF,EAAO,IAAIlB,EAAQ,EAAG,qEAFtBkB,EAAO,IAAIlB,EAAQ,EAAG,sDAAuD,CAACgC,SAAYqK,EAAY1J,UAAYH,EAAKuH,eAIzH,IAAIzF,EAAO,CAAA,EACPmI,EAAgB,QACI,IAAdF,QAA+C,IAAXlG,GAC5CoG,EAAgB,mBACQ,IAAdF,GAA0C,MAAbA,GACrCzM,EAAEgE,IAAIQ,EAAM,cAAeiI,QAER,IAAXlG,GAAoC,MAAVA,GAClCvG,EAAEgE,IAAIQ,EAAM,WAAY+B,KAIxBoG,EADa,QAAZJ,EACe,gBAEAA,EAAa,aAEH,IAAlBC,GAAkD,MAAjBA,GACzCxM,EAAEgE,IAAIQ,EAAM,kBAAmBgI,IAGnC9J,EAAK7B,GAAGQ,WAAW,cAAcsL,EAAenI,GAAMlD,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD8L,cAAA,SAAcL,GAAkBpJ,IAAAA,OAC9B,OAAO,IAAIjC,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAI2C,EAAK8G,YAAasC,IAC1BnL,EAAO,IAAIlB,EAAQ,EAAG,sDAAuD,CAACgC,SAAYqK,EAAY1J,UAAYM,EAAK8G,eAEzH,IAAIzF,EAAO,CACT+H,WAAYvM,EAAES,IAAI0C,EAAK8G,YAAasC,IAEtCpJ,EAAKtC,GAAGQ,WAAW,2BAA4BmD,GAAMlD,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD+L,MAAA,WAAK,IAAAvJ,EACHhD,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BkC,EAAKzC,GAAGQ,WAAW,mBADR,CAAE,GACgCC,KAAK,SAAAgB,GAChDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDgM,eAAA,SAAeC,GAAwB,IAAArJ,EAAApD,KACrC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAK3BsC,EAAK7C,GAAGQ,WAAW,wBAJR,CACT2L,QAAQ,EACRC,UAAWF,IAEqCzL,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDoM,gBAAA,SAAgBH,GAAwB,IAAA9F,EACtC3G,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAK3B6F,EAAKpG,GAAGQ,WAAW,wBAJR,CACT2L,QAAQ,EACRC,UAAWF,IAEqCzL,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDqM,cAAA,SAAcf,EAAkBK,GAAoBpF,IAAAA,OAClD,OAAO,IAAInG,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTb,SAAUyI,QAEY,IAAdK,GACRzM,EAAEgE,IAAIQ,EAAM,cAAeiI,GAE7BpF,EAAKxG,GAAGQ,WAAW,wBAAyBmD,GAAMlD,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDsM,eAAA,SAAeL,EAA0BN,GAAoB,IAAAlF,EAC3DjH,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTyI,UAAWF,QAEW,IAAdN,GACRzM,EAAEgE,IAAIQ,EAAM,cAAeiI,GAE7BlF,EAAK1G,GAAGQ,WAAW,yBAA0BmD,GAAMlD,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDuM,mBAAA,SAAmBN,GAAwB,IAAArF,EACzCpH,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3BsG,EAAK7G,GAAGQ,WAAW,6BAHR,CACT4L,UAAWF,IAE0CzL,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDwM,kBAAA,SAAkBP,GAAwB,IAAAQ,EACxCjN,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3BmM,EAAK1M,GAAGQ,WAAW,+BAHR,CACT4L,UAAWF,IAE4CzL,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWD0M,eAAA,SAAeC,EAAmBlJ,EAAkB6H,GAAoBsB,IAAAA,OACtE,gBADkDtB,IAAAA,EAAmB,GAC9D,IAAIlL,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAIkN,EAAKzD,YAAawD,IAC1BrM,EAAO,IAAIlB,EAAQ,EAAG,sDAAuD,CAACgC,SAAYuL,EAAW5K,UAAY6K,EAAKzD,eAExH,IAAIzF,EAAO,CACTmJ,UAAW3N,EAAES,IAAIiN,EAAKzD,YAAawD,GACnC9J,SAAUyI,GAEZ5H,EAAOxE,EAAEqM,MAAM7H,EAAMD,GACrBmJ,EAAK7M,GAAGQ,WAAW,4BAA6BmD,GAAMlD,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACuI,CAAA,CA7UgB,GCFbhK,EAAIC,QAAQ,UAELkK,0BAmBX,SAAAA,EAAYtJ,GAAEI,IAAAA,YAfdJ,QAAE,EAAAP,KAKFsN,WAKAC,EAAAA,KAAAA,oBA8FAC,UAAY,SAAClH,GACX,OAAO,IAAI1F,QAAQ,SAACC,EAASC,GAI3BH,EAAKJ,GAAGQ,WAAW,kEAHR,CACT0M,iBAAkBnH,IAEwEtF,KAAK,SAAAgB,GAC/FnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAnGEnB,KAAKO,GAAKA,CAGZ,CAAC,IAAAC,EAAAqJ,EAAApJ,UAwxBE,OAxxBFD,EASDkN,OAAA,SAAOC,GAAepM,IAAAA,OACpB,OAAO,IAAIX,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAIyN,EAAS,cAGjBpM,EAAKhB,GAAGQ,WAAW,4BAA6B4M,GAAS3M,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,+BAAgC,CAACgC,SAAY+L,IAQvE,EACF,EAACnN,EASD4I,OAAA,SAAOuE,GAAe,IAAAvL,EACpBpC,KAAA,WAAWY,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAIyN,EAAS,aAGjBvL,EAAK7B,GAAGQ,WAAW,4BAA6B4M,GAAS3M,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,8BAA+B,CAACgC,SAAY+L,IAQtE,EACF,EAACnN,EAaDoN,KAAA,SAAKtH,EAAmBuH,EAAWC,EAAWC,EAA6DC,GAAU,IAAAnL,EACnH7C,KAAA,WAAWY,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAI6N,EAAY,SAAYrO,EAAEQ,IAAI6N,EAAY,QAElDjN,EAAO,IAAIlB,EAAQ,EAAG,mEAAoE,CAACmO,WAAcA,KAE3G,IAAIE,EAAY,CACdC,UAAW5H,EACX6H,EAAGN,EACHO,EAAGN,QAES,IAAJE,GACRtO,EAAEgE,IAAIuK,EAAW,IAAKD,GAExB,IAAI9J,EAAOxE,EAAEqM,MAAMkC,EAAWF,GAC9BlL,EAAKtC,GAAGQ,WAAW,0BAA2BmD,GAAMlD,KAAK,SAAAgB,GACvDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EA8BD6N,cAAA,SAAc/H,EAAmBgI,OAAkBtL,EAAAhD,KACjD,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAK3BkC,EAAKzC,GAAGQ,WAAW,mCAJR,CACTmN,UAAW5H,EACXiI,WAAYD,IAE+CtN,KAAK,SAAAgB,GAChEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDgO,QAAA,SAAQlI,GAAiBlD,IAAAA,OACvB,OAAO,IAAIxC,QAAQ,SAACC,EAASC,GAI3BsC,EAAK7C,GAAGQ,WAAW,0BAHR,CACTmN,UAAW5H,IAEuCtF,KAAK,SAAAgB,GACvDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDiO,SAAA,SAASC,GAAyB/H,IAAAA,OAChC,OAAO,IAAI/F,QAAQ,SAACC,EAASC,GAI3B6F,EAAKpG,GAAGQ,WAAW,2BAHR,CACT4N,WAAYD,IAEuC1N,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDoO,YAAA,SAAYtI,GAAiBS,IAAAA,OAC3B,OAAO,IAAInG,QAAQ,SAACC,EAASC,GAE3BiG,EAAKxG,GAAGQ,WAAW,8BADR,CAACmN,UAAW5H,IACiCtF,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDqO,gBAAA,SAAgBH,GAAyB,IAAAzH,EACvCjH,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3BmG,EAAK1G,GAAGQ,WAAW,kCAHR,CACT4N,WAAYD,IAE8C1N,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDsO,0BAAA,SAA0BJ,EAA2BK,GAAkB3H,IAAAA,OACrE,OAAO,IAAIxG,QAAQ,SAACC,EAASC,GAK3BsG,EAAK7G,GAAGQ,WAAW,+CAJR,CACT4N,WAAYD,EACZM,WAAYD,IAE2D/N,KAAK,SAAAgB,GAC5EnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWAyO,OAAA,SAAOP,EAA2BQ,EAAuBC,GAAoBlC,IAAAA,OAC3E,OAAO,IAAIrM,QAAQ,SAACC,EAASC,GAE3B,IAAIoD,EAAiF,CAAEyK,WAAYD,QACzE,IAAhBQ,GACRxP,EAAEgE,IAAIQ,EAAM,eAAgBgL,QACH,IAAjBC,GACRzP,EAAEgE,IAAIQ,EAAM,gBAAiBiL,GAC/BlC,EAAK1M,GAAGQ,WAAW,4BAA6BmD,GAAMlD,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASA4O,SAAA,SAASV,GAAyB,IAAAtB,EAAApN,KAChC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BsM,EAAK7M,GAAGQ,WAAW,8BAHR,CACT4N,WAAYD,IAE0C1N,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD6O,MAAA,SAAMX,GAAyB,IAAAY,EAC7BtP,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BwO,EAAK/O,GAAGQ,WAAW,2BAHR,CACT4N,WAAYD,IAEuC1N,KAAK,SAAAgB,GACrDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAgP,OAAA,SAAOd,GAAyB,IAAAe,EAAAzP,KAC9B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3B2O,EAAKlP,GAAGQ,WAAW,4BAHR,CACT4N,WAAYD,IAEwC1N,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASH,OAAA,SAAOkO,OAAyBgB,EAAA1P,KAC9B,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3B4O,EAAKnP,GAAGQ,WAAW,4BAHR,CACT4N,WAAYD,IAEwC1N,KAAK,SAAAgB,GACtDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDkI,OAAA,SAAOiH,OAAkBC,EAAA5P,KACvB,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3B8O,EAAKrP,GAAGQ,WAAW,4BADR4O,GAC2C3O,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDqP,aAAA,SAAavJ,OAAiBwJ,EAAA9P,KAC5B,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BgP,EAAKvP,GAAGQ,WAAW,kCAHR,CACTmN,UAAW5H,IAE+CtF,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAaDuP,uBAAA,SAAuBJ,EAAoBK,EAAqBC,EAAuB/C,EAAgCgD,GAA0B,IAAAC,EAA1DjD,KACrF,YADqFA,IAAAA,IAAAA,GAA0B,QAAM,IAAAgD,IAAAA,GAAsB,GACpI,IAAItP,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAOyL,EACRjQ,EAAE0Q,SAASJ,KACZtQ,EAAEgE,IAAIQ,EAAM,aAAc8L,GAC1BtQ,EAAEgE,IAAIQ,EAAM,iBAAkBgJ,GAC9BxN,EAAEgE,IAAIQ,EAAM,aAAcgM,IAI5BC,EAAK5P,GAAGQ,WAAW,4CAA6CmD,GAAMlD,KAAK,SAAAgB,GACzEnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYF6P,gBAAA,SAAgBpK,EAAkBqK,EAA2BC,EAAsBC,GAAiC,IAAAC,EAAAzQ,KAClH,YADgC,IAAAsQ,IAAAA,GAAoB,QAA6B,IAAAE,IAAAA,GAA4B,GACtG,IAAI5P,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTwM,SAAUzK,EACV0K,iBAAkBH,EAClBI,SAAUN,GAET,MAAOC,GAAsD7Q,EAAEQ,IAAIqQ,EAAa,qBACjF7Q,EAAEgE,IAAIQ,EAAM,kBAAmBxE,EAAES,IAAIoQ,EAAa,oBACR,MAAvC7Q,EAAES,IAAIoQ,EAAa,oBAA4B7Q,EAAEQ,IAAIqQ,EAAa,yBACnE7Q,EAAEgE,IAAIQ,EAAM,uBAAwBxE,EAAES,IAAIoQ,EAAa,0BAG3DE,EAAKlQ,GAAGQ,WAAW,kCAAmCmD,GAAMlD,KAAK,SAAAgB,GAG/DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDqQ,YAAA,SAAYC,EAAgCC,EAAqCC,GAAyBC,IAAAA,EAA9FH,KACV,gBADUA,IAAAA,GAAyB,YAAOC,IAAAA,GAA+B,OAC9DnQ,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTgN,cAAeJ,EACfK,oBAAqBJ,QAEA,IAAbC,GACRtR,EAAEgE,IAAIQ,EAAM,YAAa8M,GAE3BC,EAAK1Q,GAAGQ,WAAW,8BAA+BmD,GAAMlD,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD4Q,sBAAA,SAAsBC,OAAgBC,EAAAtR,KACpC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BwQ,EAAK/Q,GAAGQ,WAAW,wCAHR,CACTwQ,SAAUF,IAEsDrQ,KAAK,SAAAgB,GACrEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDgR,cAAA,SAAclD,OAAkBmD,EAAAzR,KAC9B,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3B2Q,EAAKlR,GAAGQ,WAAW,gCAHR,CACT2Q,YAAapD,IAE2CtN,KAAK,SAAAgB,GAC7DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDmR,uBAAA,SAAuBrD,GAAkB,IAAAsD,EAAA5R,KACvC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3B8Q,EAAKrR,GAAGQ,WAAW,0CAHR,CACT2Q,YAAapD,IAEqDtN,KAAK,SAAAgB,GACvEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDqR,cAAA,SAAcvD,GAAkB,IAAAwD,EAAA9R,KAC9B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BgR,EAAKvR,GAAGQ,WAAW,wBAHR,CACT2Q,YAAapD,IAEmCtN,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDuR,eAAA,SAAezD,GAAkB,IAAA0D,EAC/BhS,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BkR,EAAKzR,GAAGQ,WAAW,sCAHR,CACTwN,WAAYD,IAEkDtN,KAAK,SAAAgB,GACnEnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDyR,YAAA,SAAYjB,GAAwB,IAAAkB,EAClClS,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3BoR,EAAK3R,GAAGQ,WAAW,mCAHR,CACToR,UAAWnB,IAEgDhQ,KAAK,SAAAgB,GAChEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUD4R,iBAAA,SAAiBC,EAAkBpM,GAAgBqM,IAAAA,OACjD,OAAO,IAAI1R,QAAQ,SAACC,EAASC,GAE3B,IAAIoD,EAAO,CACTwM,SAAUzK,GAERvG,EAAE6S,SAAS,CAAC,aAAc,YAAaF,GAGzCC,EAAK/R,GAAGQ,iCAAiCsR,EAAYnO,GAAMlD,KAAK,SAAAgB,GAC9DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,kDAAmD,CAACgC,SAAYyQ,IAQ1F,EACF,EAAC7R,EASDgS,eAAA,SAAevM,GAEb,YAAYmM,iBAAiB,aAAcnM,EAC7C,EAACzF,EASDiS,aAAA,SAAaxM,GAEX,OAAOjG,KAAKoS,iBAAiB,WAAYnM,EAC3C,EAACzF,EAQDkS,YAAA,eAAWC,EAAA3S,KACT,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B6R,EAAKpS,GAAGQ,WAAW,mCAAoC,CAAA,GAAIC,KAAK,SAAAgB,GAC9DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWAoS,iBAAA,SAAiBC,EAA4BC,EAA4BC,GAA0BC,IAAAA,OACjG,OAAO,IAAIpS,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTwN,YAAa,WAEkB,IAAvBoB,GACRpT,EAAEgE,IAAIQ,EAAM,sBAAuB4O,QAEJ,IAAvBC,GACRrT,EAAEgE,IAAIQ,EAAM,sBAAuB6O,GAGrCC,EAAKzS,GAAGQ,WAAW,mCAAoCmD,GAAMlD,KAAK,SAAAgB,GAChEnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYDyS,+BAAA,SAA+BtD,EAAoBK,EAAqBC,EAAuB/C,GAA8B,IAAAgG,EAAAlT,KAC3H,gBAD6FkN,IAAAA,GAA0B,GAChH,IAAItM,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAOyL,EACRjQ,EAAE0Q,SAASJ,KACZtQ,EAAEgE,IAAIQ,EAAM,aAAc8L,GAC1BtQ,EAAEgE,IAAIQ,EAAM,iBAAkBgJ,IAIhCgG,EAAK3S,GAAGQ,WAAW,oDAAqDmD,GAAMlD,KAAK,SAAAgB,GACjFnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASA2S,eAAA,SAAeN,EAA4BC,EAA4BC,GAA0BK,IAAAA,OAC/F,OAAO,IAAIxS,QAAQ,SAACC,EAASC,GAI3BsS,EAAK7S,GAAGQ,WAAW,gCAHR,CACT2Q,YAAa,OAE2C1Q,KAAK,SAAAgB,GAC7DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD6S,gBAAA,SAAgB1D,GAAkB2D,IAAAA,OAChC,OAAO,IAAI1S,QAAQ,SAACC,EAASC,GAE3BwS,EAAK/S,GAAGQ,WAAW,oCADR4O,GACmD3O,KAAK,SAAAgB,GACjEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAaD+S,aAAA,SAAaC,EAA4BC,EAA4BC,EAAoCZ,EAA4BC,OAA0BY,EAAA3T,KAC7J,YADuCyT,IAAAA,IAAAA,GAAqB,YAAOC,IAAAA,GAA6B,OACrF9S,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACT0P,UAAWH,EACXI,kBAAmBH,QAEI,IAAfF,GACR9T,EAAEgE,IAAIQ,EAAM,cAAesP,QAEI,IAAvBV,GACRpT,EAAEgE,IAAIQ,EAAM,sBAAuB4O,QAEJ,IAAvBC,GACRrT,EAAEgE,IAAIQ,EAAM,sBAAuB6O,GAErCY,EAAKpT,GAAGQ,WAAW,uCAAwCmD,GAAMlD,KAAK,SAAAgB,GACpEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDsT,eAAA,SAAejB,EAA4BkB,GAAgC,IAAAC,EAAhCD,KACzC,gBADyCA,IAAAA,GAA2B,OACzDnT,QAAQ,SAACC,EAASC,GAK3BkT,EAAKzT,GAAGQ,WAAW,gDAJR,CACT2Q,YAAamB,EACboB,gBAAiBF,IAEuD/S,KAAK,SAAAgB,GAC7EnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAAC0I,CAAA,ICjzBCnK,EAAIC,QAAQ,UAELoK,eAAU,WAcrB,SAAAA,EAAYxJ,GAAEP,KAVdO,QAAE,EAAAP,KAKFsN,WAME,EAAAtN,KAAKO,GAAKA,CAEZ,CAAC,IAAAC,EAAAuJ,EAAAtJ,UA4zBC,OA5zBDD,EASDkN,OAAA,SAAOwG,GAAiBvT,IAAAA,OACtB,OAAO,IAAIC,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAIgU,EAAW,eAAkBxU,EAAEQ,IAAIgU,EAAW,kBAGtDvT,EAAKJ,GAAGQ,WAAW,wBAAyBmT,GAAWlT,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,6DAA8D,CAACgC,SAAYsS,IAQrG,EACF,EAAC1T,EASA2T,mBAAA,SAAmBD,GAAiB3S,IAAAA,OACnC,OAAO,IAAIX,QAAQ,SAACC,EAASC,GACxBpB,EAAEQ,IAAIgU,EAAW,eAAkBxU,EAAEQ,IAAIgU,EAAW,kBAGtD3S,EAAKhB,GAAGQ,WAAW,oCAAqCmT,GAAWlT,KAAK,SAAAgB,GACtEnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,6DAA8D,CAACgC,SAAYsS,IAQpG,EACF,EAAC1T,EASA4T,iBAAA,SAAiBF,GAAiB,IAAA9R,EACjCpC,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAExBpB,EAAEQ,IAAIgU,EAAW,eAAkBxU,EAAEQ,IAAIgU,EAAW,mBAAsBxU,EAAEQ,IAAIgU,EAAW,gBAG7F9R,EAAK7B,GAAGQ,WAAW,kCAAmCmT,GAAWlT,KAAK,SAAAgB,GACpEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,6DAA8D,CAACgC,SAAYsS,IAQpG,EACF,EAAC1T,EASA6T,yBAAA,SAAyBH,GAAiB,IAAArR,EACzC7C,KAAA,WAAWY,QAAQ,SAACC,EAASC,GACxBpB,EAAEQ,IAAIgU,EAAW,eAAkBxU,EAAEQ,IAAIgU,EAAW,mBAAsBxU,EAAEQ,IAAIgU,EAAW,aAG7FrR,EAAKtC,GAAGQ,WAAW,0CAA2CmT,GAAWlT,KAAK,SAAAgB,GAC5EnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,6DAA8D,CAACgC,SAAYsS,IAQpG,EACF,EAAC1T,EASA8T,oBAAA,SAAoBJ,GAAiB,IAAAlR,EAAAhD,KACpC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAIxBpB,EAAEQ,IAAIgU,EAAW,eAAkBxU,EAAEQ,IAAIgU,EAAW,mBAAsBxU,EAAEQ,IAAIgU,EAAW,gBAG7FlR,EAAKzC,GAAGQ,WAAW,qCAAsCmT,GAAWlT,KAAK,SAAAgB,GACvEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,6DAA8D,CAACgC,SAAYsS,IAQpG,EACF,EAAC1T,EASD4I,OAAA,SAAO8K,GAAiB9Q,IAAAA,EACtBpD,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,OAAO,IAAIF,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAIgU,EAAW,gBAGnB9Q,EAAK7C,GAAGQ,WAAW,wBAAyBmT,GAAWlT,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,iCAAkC,CAACgC,SAAYsS,IAQzE,EACF,EACF,EAAC1T,EASDgO,QAAA,SAAQhI,GAAoBG,IAAAA,OAC1B,OAAO,IAAI/F,QAAQ,SAACC,EAASC,GAI3B6F,EAAKpG,GAAGQ,WAAW,sBAHR,CACTwT,aAAc/N,IAEgCxF,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDiO,SAAA,SAAS+F,GAA4BzN,IAAAA,OACnC,OAAO,IAAInG,QAAQ,SAACC,EAASC,GAI3BiG,EAAKxG,GAAGQ,WAAW,uBAHR,CACT0T,cAAeD,IAEgCxT,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWAyO,OAAA,SAAOuF,EAA8BtF,EAAuBC,GAAoB,IAAAlI,EAC9EjH,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAE3B,IAAIoD,EAAoF,CAAEuQ,cAAeD,QAC/E,IAAhBtF,IACRhL,EAAKwQ,aAAexF,QAEK,IAAjBC,IACRjL,EAAKyQ,cAAgBxF,GAEvBlI,EAAK1G,GAAGQ,WAAW,wBAAyBmD,GAAMlD,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASA4O,SAAA,SAASoF,OAA4BpN,EAAApH,KACnC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BsG,EAAK7G,GAAGQ,WAAW,0BAHR,CACT0T,cAAeD,IAEmCxT,KAAK,SAAAgB,GACvDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD6O,MAAA,SAAMmF,GAA4B,IAAAvH,EAChCjN,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3BmM,EAAK1M,GAAGQ,WAAW,uBAHR,CACT0T,cAAeD,IAEgCxT,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASFgP,OAAA,SAAOgF,GAA4BpH,IAAAA,EACjCpN,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BsM,EAAK7M,GAAGQ,WAAW,wBAHR,CACT0T,cAAeD,IAEiCxT,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD,OAAA,SAAOgU,GAA4B,IAAAlF,EACjCtP,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BwO,EAAK/O,GAAGQ,WAAW,wBAHR,CACT0T,cAAeD,IAEiCxT,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASFkI,OAAA,SAAOiH,GAAkB,IAAAF,EACvBzP,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3B2O,EAAKlP,GAAGQ,WAAW,wBADR4O,GACuC3O,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDqP,aAAA,SAAarJ,GAAoBkJ,IAAAA,EAC/B1P,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3B4O,EAAKnP,GAAGQ,WAAW,kCAHR,CACTwT,aAAc/N,IAE4CxF,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDoU,SAAA,WAAQ,IAAAhF,EAAA5P,KACN,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B8O,EAAKrP,GAAGQ,WAAW,0BAA2B,CAAA,GAAIC,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDqU,UAAA,SAAUC,EAA2C9D,GAAyBlB,IAAAA,OAC5E,YADQ,IAAAgF,IAAAA,GAAoC,GACjC,IAAAlU,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAwE,CAAA,EACzE4Q,IACD5Q,EAAK6Q,0BAA2B,QAEX,IAAb/D,IACR9M,EAAKiO,UAAYnB,GAEnBlB,EAAKvP,GAAGQ,WAAW,2BAA4BmD,GAAMlD,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAcDwU,aAAA,SAAaC,EAAoEzO,EAAsB0O,EAA0BC,GAAwD,IAAAhF,EAAlF+E,KACtG,YADgI,IAAAC,IAAAA,EAAsD,CAAE,OAC7KvU,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAkI,CACpIqQ,aAAc/N,GAEb9G,EAAEQ,IAAI+U,EAAQ,eAAiBvV,EAAEQ,IAAI+U,EAAQ,cAC9C/Q,EAAKmD,WAAa4N,EAAO5N,WACzBnD,EAAKkR,UAAYH,EAAOG,WAChB1V,EAAEQ,IAAI+U,EAAQ,YACtB/Q,EAAKmR,OAASJ,EAAOI,QAIpB3V,EAAEQ,IAAIiV,EAAU,iBACjBjR,EAAKoR,YAAcH,EAASG,aAE3B5V,EAAEQ,IAAIiV,EAAU,cACjBjR,EAAKqR,SAAWJ,EAASI,UAE3BpF,EAAK5P,GAAGQ,WAAW,2BAA4BmD,GAAMlD,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GAOPL,EAAOK,EACT,EACF,EACD,EAACX,EASDgV,WAAA,SAAWC,GAA0BhF,IAAAA,OACnC,OAAO,IAAI7P,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAA+D,CAAA,EAC5C,GAApBuR,EAAYrJ,OACblI,EAAKqQ,aAAekB,EAAY,GAEhCvR,EAAKuQ,cAAgBgB,EAEvBhF,EAAKlQ,GAAGQ,WAAW,yBAA0BmD,GAAMlD,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDoO,YAAA,SAAYpI,OAAoByK,EAAAjR,KAC9B,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BmQ,EAAK1Q,GAAGQ,WAAW,0BADR,CAACwT,aAAc/N,IAC0BxF,KAAK,SAAAgB,GACvDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAaDuP,uBAAA,SAAuBJ,EAAoBK,EAAqBC,EAAuB/C,EAAgCgD,GAA0B,IAAAoB,EAA1DpE,KACrF,YADqFA,IAAAA,IAAAA,GAA0B,QAAM,IAAAgD,IAAAA,GAAsB,GACpI,IAAItP,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAOyL,EACRjQ,EAAE0Q,SAASJ,KACZtQ,EAAEgE,IAAIQ,EAAM,aAAc8L,GAC1BtQ,EAAEgE,IAAIQ,EAAM,iBAAkBgJ,GAC9BxN,EAAEgE,IAAIQ,EAAM,aAAcgM,IAI5BoB,EAAK/Q,GAAGQ,WAAW,wCAAyCmD,GAAMlD,KAAK,SAAAgB,GACrEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDkV,aAAA,WAAY,IAAAjE,EAAAzR,KACV,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B2Q,EAAKlR,GAAGQ,WAAW,2BAA4B,CAAA,GAAIC,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDmV,kBAAA,WAAiB,IAAA/D,EACf5R,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B8Q,EAAKrR,GAAGQ,WAAW,gCAAiC,CAAA,GAAIC,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDoV,cAAA,eAAa9D,EAAA9R,KACX,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3BgR,EAAKvR,GAAGQ,WAAW,4BAA6B,CAAE,GAAEC,KAAK,SAAAgB,GACvDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDqV,aAAA,eAAY7D,EAAAhS,KACV,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3BkR,EAAKzR,GAAGQ,WAAW,2BAA4B,CAAE,GAAEC,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWD4R,iBAAA,SAAiBC,EAAkByC,EAA2C9D,GAAyBkB,IAAAA,OACrG,YADqE,IAApC4C,IAAAA,GAAoC,GAC1D,IAAAlU,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACT6Q,yBAA0BD,QAEN,IAAZ9D,GAAsC,MAAXA,GACnCtR,EAAEgE,IAAIQ,EAAM,YAAa8M,GAEd,aAAVqB,EACDvR,EAAO,IAAIlB,EAAQ,EAAG,gCAAiC,CAACgC,SAAYyQ,KAEpEH,EAAK3R,GAAGQ,WAA6BsR,kBAAAA,EAAYnO,GAAMlD,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EAEJ,EACF,EAACX,EAUDiS,aAAA,SAAaqC,EAA2C9D,GACtD,gBADW8D,IAAAA,GAAoC,GACpC9U,KAACoS,iBAAiB,YAAa0C,EAA0B9D,EACtE,EAACxQ,EAaDoN,KAAA,SAAKpH,EAAsBqH,EAAWC,EAAWC,EAA6DC,GAAU,IAAAsE,EAAAtS,KACtH,OAAW,IAAAY,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAI6N,EAAY,SAAYrO,EAAEQ,IAAI6N,EAAY,QAElDjN,EAAO,IAAIlB,EAAQ,EAAG,mEAAoE,CAACmO,WAAcA,KAE3G,IAAI+H,EAAY,CACdvB,aAAc/N,EACd2H,EAAGN,EACHO,EAAGN,QAEU,IAALE,GACRtO,EAAEgE,IAAIoS,EAAW,IAAK9H,GAExB,IAAI9J,EAAOxE,EAAEqM,MAAM+J,EAAW/H,GAC9BuE,EAAK/R,GAAGQ,WAAW,sBAAuBmD,GAAMlD,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAeD+S,aAAA,SAAawC,EAA6BtC,EAAqBxP,GAA0H0O,IAAAA,EACvL3S,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAA2K,CAAE,OACxJ,IAAf6R,IACR7R,EAAK8R,YAAcD,GAErB7R,EAAK0P,eAAgC,IAAbH,GAA2BA,EAC9B,iBAAXxP,GACRvE,EAAEuW,MAAMhS,EAAS,SAAC+E,EAAGC,GACnB/E,EAAK+E,GAAKD,CACZ,GAEF2J,EAAKpS,GAAGQ,WAAW,mCAAoCmD,GAAMlD,KAAK,SAAAgB,GAChEnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUD0V,kBAAA,SAAkBC,EAAgClS,OAAkE+O,EAAAhT,KAClH,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTkS,gBAAiBD,GAEE,iBAAXlS,GACRvE,EAAEuW,MAAMhS,EAAS,SAAC+E,EAAGC,GACnB/E,EAAK+E,GAAKD,CACZ,GAEFgK,EAAKzS,GAAGQ,WAAW,+BAAgCmD,GAAMlD,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASA6V,uBAAA,SAAuBF,OAA8BjD,EAAAlT,KACnD,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BoS,EAAK3S,GAAGQ,WAAW,qCAHR,CACTqV,gBAAiBD,IAE4CnV,KAAK,SAAAgB,GAClEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASF8V,MAAA,SAAMH,GAA8B/C,IAAAA,EAClCpT,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3BsS,EAAK7S,GAAGQ,WAAW,4BAHR,CACTqV,gBAAiBD,IAEmCnV,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASA+V,eAAA,SAAeJ,GAA8B7C,IAAAA,OAC3C,OAAO,IAAI1S,QAAQ,SAACC,EAASC,GAI3BwS,EAAK/S,GAAGQ,WAAW,4CAHR,CACTqV,gBAAiBD,IAEmDnV,KAAK,SAAAgB,GACzEnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EA0BDgW,kBAAA,SAAkBC,GAA4B9C,IAAAA,OAC5C,OAAO,IAAI/S,QAAQ,SAACC,EAASC,GAI3B6S,EAAKpT,GAAGQ,WAAW,8CAHR,CACT2V,cAAeD,IAEuDzV,KAAK,SAAAgB,GAC3EnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDmW,mBAAA,SAAmBC,GAAoB5C,IAAAA,OACrC,OAAO,IAAIpT,QAAQ,SAACC,EAASC,GAI3BkT,EAAKzT,GAAGQ,WAAW,+CAHR,CACT8V,aAAcD,IAEyD5V,KAAK,SAAAgB,GAE7E,GAAC,MAAO,SAAAb,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDsW,kBAAA,SAAkBF,OAAoBG,EAAA/W,KACpC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BiW,EAAKxW,GAAGQ,WAAW,2CAHR,CACT8V,aAAcD,IAEqD5V,KAAK,SAAAgB,GACxEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDwW,eAAA,SAAexC,OAA4ByC,EAAAjX,KACzC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BmW,EAAK1W,GAAGQ,WAAW,wCAHR,CACT0T,cAAeD,IAEiDxT,KAAK,SAAAgB,GACrEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAAC4I,CAAA,CA70BmB,GCFjBrK,EAAIC,QAAQ,UAGLmK,eAAS,WAmBpB,SAAAA,EAAYvJ,GAfZA,KAAAA,QAKA+M,EAAAA,KAAAA,WAKAC,EAAAA,KAAAA,aAME,EAAAvN,KAAKO,GAAKA,CAGZ,CAAC,IAAAC,EAAAsJ,EAAArJ,UAuyBA,OAvyBAD,EAWDkN,OAAA,SAAOwJ,EAAiB1C,EAA+B9F,OAA0B/N,EAAAX,KAC/E,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,GAAIpB,EAAEQ,IAAIgX,EAAS,iBAAoBxX,EAAEQ,IAAIgX,EAAS,cAE/C,CACL,IAAIhT,EAAOgT,OACgB,IAAjB1C,GAAiD,MAAjBA,GAA0B9U,EAAEQ,IAAIgE,EAAM,kBAC9ExE,EAAEgE,IAAIQ,EAAM,gBAAiBsQ,QAEP,IAAd9F,GAA2C,MAAdA,GAAuBhP,EAAEQ,IAAIgE,EAAM,eACxExE,EAAEgE,IAAIQ,EAAM,aAAcwK,GAE5B/N,EAAKJ,GAAGQ,WAAW,uBAAwBmD,GAAMlD,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACD,MAdCL,EAAO,IAAIlB,EAAQ,EAAG,8CAA+C,CAACgC,SAAYsV,IAetF,EACF,EAAC1W,EAUD4T,iBAAA,SAAiB8C,EAAiBC,EAA6BC,GAAiB7V,IAAAA,EAAjB6V,KAC7D,OAAO,IAAIxW,QAAQ,SAACC,EAASC,GAC3B,GAAIpB,EAAEQ,IAAIgX,EAAS,iBAAoBxX,EAAEQ,IAAIgX,EAAS,cAE/C,CACL,IAAIhT,EAAOgT,EACRxX,EAAE0Q,SAAS+G,GACZzX,EAAEgE,IAAIQ,EAAM,cAAeiT,GAE3BzX,EAAEgE,IAAIQ,EAAM,eAAgBiT,GAE9B5V,EAAKhB,GAAGQ,WAAW,uBAAwBmD,GAAMlD,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACD,MAbCL,EAAO,IAAIlB,EAAQ,EAAG,8CAA+C,CAACgC,SAAYsV,IActF,EACF,EAAC1W,EASD4I,OAAA,SAAO8N,GAAe,IAAA9U,EAAApC,KACpB,OAAO,IAAIY,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAIgX,EAAS,iBAAoBxX,EAAEQ,IAAIgX,EAAS,eAGpD9U,EAAK7B,GAAGQ,WAAW,uBAAwBmW,GAASlW,KAAK,SAAAgB,GACvDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,gDAAiD,CAACgC,SAAYsV,IAQxF,EACF,EAAC1W,EAWA6W,QAAA,SAAQC,EAAiCC,EAAuBC,GAAwC,IAAA3U,EAAxC2U,KAC9D,YAD8DA,IAAAA,IAAAA,GAAoC,GACvF,IAAA5W,QAAQ,SAACC,EAASC,GAM3B+B,EAAKtC,GAAGQ,WAAW,wBALR,CACT0W,yBAA0BD,EAC1BE,cAAeH,EACfI,iBAAkBL,IAE8BtW,KAAK,SAAAgB,GAClDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAcFoN,KAAA,SAAKgK,EAAqB/J,EAAWC,EAAWC,EAAoBC,GAAUhL,IAAAA,OAC5E,OAAO,IAAIpC,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAI6N,EAAY,SAAYrO,EAAEQ,IAAI6N,EAAY,QAElDjN,EAAO,IAAIlB,EAAQ,EAAG,mEAAoE,CAACmO,WAAcA,KAE3G,IAAIE,EAAY,CACd4J,YAAaD,EACbzJ,EAAGN,EACHO,EAAGN,QAES,IAAJE,GACRtO,EAAEgE,IAAIuK,EAAW,IAAKD,GAExB,IAAI9J,EAAOxE,EAAEqM,MAAMkC,EAAWF,GAC9B/K,EAAKzC,GAAGQ,WAAW,qBAAsBmD,GAAMlD,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDgO,QAAA,SAAQ2I,EAA6BC,GAAiB,IAAAhU,EAAApD,KACpD,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CAAE,EACb,GAAGxE,EAAE0Q,SAAS+G,GAAe,CAC3BzX,EAAEgE,IAAIQ,EAAM,cAAeiT,GAC3B,IAAIW,EAAO,oBACZ,MACCpY,EAAEgE,IAAIQ,EAAM,eAAgBiT,GACxBW,EAAO,sBAEb1U,EAAK7C,GAAGQ,WAAW+W,EAAM5T,GAAMlD,KAAK,SAAAgB,GAClCnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDiO,SAAA,SAASsJ,GAAmC,IAAApR,EAAA3G,KAC1C,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CAAE,EACb,GAAyB,GAAtB6T,EAAc3L,OAEftL,EAAO,IAAIlB,EAAQ,IAAK,oCAAqC,CAACoY,aAAgBD,SACzE,CACL,IAAID,EAAO,sBACRpY,EAAE0Q,SAAS2H,EAAc,KAC1BrY,EAAEgE,IAAIQ,EAAM,eAAgB6T,GAC5BD,EAAO,uBACCpY,EAAEuY,SAASF,EAAc,KACjCrY,EAAEgE,IAAIQ,EAAM,gBAAiB6T,GAC7BD,EAAO,wBAGPhX,EAAO,IAAIlB,EAAQ,EAAG,oCAAqC,CAACoY,aAAgBD,KAE9EpR,EAAKpG,GAAGQ,WAAW+W,EAAM5T,GAAMlD,KAAK,SAAAgB,GAClCnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACD,CACH,EACF,EAACX,EASD0X,gBAAA,SAAgBH,GAAmChR,IAAAA,EACjD/G,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CAAE,EACb,GAAyB,GAAtB6T,EAAc3L,OAEftL,EAAO,IAAIlB,EAAQ,IAAK,oCAAqC,CAACoY,aAAgBD,SACzE,CACL,IAAID,EAAO,sBACRpY,EAAE0Q,SAAS2H,EAAc,KAC1BrY,EAAEgE,IAAIQ,EAAM,eAAgB6T,GAC5BD,EAAO,4CACCpY,EAAEuY,SAASF,EAAc,KACjCrY,EAAEgE,IAAIQ,EAAM,gBAAiB6T,GAC7BD,EAAO,6CAGPhX,EAAO,IAAIlB,EAAQ,EAAG,oCAAqC,CAACoY,aAAgBD,KAE9EhR,EAAKxG,GAAGQ,WAAW+W,EAAM5T,GAAMlD,KAAK,SAAAgB,GAClCnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACD,CACH,EACF,EAACX,EASDoO,YAAA,SAAYuI,GAAoB,IAAAlQ,EAC9BjH,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,GACRxE,EAAE0Q,SAAS+G,GACZzX,EAAEgE,IAAIQ,EAAM,cAAeiT,GACnBzX,EAAEuY,SAASd,GACnBzX,EAAEgE,IAAIQ,EAAM,eAAgBiT,GAG5BrW,EAAO,IAAIlB,EAAQ,EAAG,oCAAqC,CAACoY,aAAgBb,KAE9ElQ,EAAK1G,GAAGQ,WAAW,yBAA0BmD,GAAMlD,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD2X,qBAAA,SAAqBJ,GAAmC3Q,IAAAA,EACtDpH,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CAAE,EACT4T,EAAO,6BACRpY,EAAE0Q,SAAS2H,EAAc,KAC1BrY,EAAEgE,IAAIQ,EAAM,eAAgB6T,GACxBD,EAAO,8BACHpY,EAAEuY,SAASF,EAAc,KACjCrY,EAAEgE,IAAIQ,EAAM,gBAAiB6T,GACzBD,EAAO,6CAGXhX,EAAO,IAAIlB,EAAQ,EAAG,oCAAqC,CAACwY,cAAiBL,KAE/E3Q,EAAK7G,GAAGQ,WAAW+W,EAAM5T,GAAMlD,KAAK,SAAAgB,GAClCnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUD6X,YAAA,SAAYN,EAAqClS,GAA0BoH,IAAAA,EAA1BpH,KAC/C,YAD+CA,IAAAA,IAAAA,GAAsB,GAC1D,IAAAjF,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACToU,WAAYzS,GAEW,GAAtBkS,EAAc3L,OAEftL,EAAO,IAAIlB,EAAQ,GAAI,oCAAqC,CAACoY,aAAgBD,KAE1ErY,EAAE0Q,SAAS2H,EAAc,IAC1BrY,EAAEgE,IAAIQ,EAAM,eAAgB6T,GACpBrY,EAAEuY,SAASF,EAAc,IACjCrY,EAAEgE,IAAIQ,EAAM,gBAAiB6T,GAE7BjX,EAAO,IAAIlB,EAAQ,GAAI,oCAAqC,CAACoY,aAAgBD,KAGjF9K,EAAK1M,GAAGQ,WAAW,yBAA0BmD,GAAMlD,KAAK,SAAAgB,GACnDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWA+X,YAAA,SAAYpB,EAA6BqB,EAAoBtD,GAAwB,IAAA9H,EAAApN,KACnF,gBAD2DkV,IAAAA,GAAoB,GACxE,IAAItU,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTuU,SAAUvD,GAETxV,EAAE0Q,SAAS+G,GACZzX,EAAEgE,IAAIQ,EAAM,cAAeiT,GAE3BzX,EAAEgE,IAAIQ,EAAM,eAAgBiT,GAE3BzX,EAAEQ,IAAIsY,EAAY,gBACnB9Y,EAAEgE,IAAIQ,EAAM,cAAexE,EAAES,IAAIqY,EAAY,gBAC5C9Y,EAAEQ,IAAIsY,EAAY,aACnB9Y,EAAEgE,IAAIQ,EAAM,WAAYxE,EAAES,IAAIqY,EAAY,aACzC9Y,EAAEQ,IAAIsY,EAAY,eAAiB9Y,EAAEQ,IAAIsY,EAAY,eACtD9Y,EAAEgE,IAAIQ,EAAM,aAAcxE,EAAES,IAAIqY,EAAY,eAC5C9Y,EAAEgE,IAAIQ,EAAM,aAAcxE,EAAES,IAAIqY,EAAY,gBAE5C1X,EAAO,IAAIlB,EAAQ,EAAG,+BAAgC,CAACoY,aAAgBb,EAAaqB,WAAcA,KAGpGpL,EAAK7M,GAAGQ,WAAW,4BAA6BmD,GAAMlD,KAAK,SAAAgB,GACtDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWAkY,aAAA,SAAavB,EAA6BqB,EAAoBG,GAA6B,IAAArJ,EAAAtP,KACzF,gBAD4D2Y,IAAAA,GAAwB,GAC7E,IAAI/X,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACT0U,aAAcD,GAEbjZ,EAAE0Q,SAAS+G,GACZzX,EAAEgE,IAAIQ,EAAM,cAAeiT,GAE3BzX,EAAEgE,IAAIQ,EAAM,eAAgBiT,GAE3BzX,EAAEQ,IAAIsY,EAAY,gBACnB9Y,EAAEgE,IAAIQ,EAAM,cAAexE,EAAES,IAAIqY,EAAY,gBAC5C9Y,EAAEQ,IAAIsY,EAAY,aACnB9Y,EAAEgE,IAAIQ,EAAM,WAAYxE,EAAES,IAAIqY,EAAY,aACzC9Y,EAAEQ,IAAIsY,EAAY,eAAiB9Y,EAAEQ,IAAIsY,EAAY,eACtD9Y,EAAEgE,IAAIQ,EAAM,YAAaxE,EAAES,IAAIqY,EAAY,cAC3C9Y,EAAEgE,IAAIQ,EAAM,aAAcxE,EAAES,IAAIqY,EAAY,gBAE5C1X,EAAO,IAAIlB,EAAQ,EAAG,+BAAgC,CAACoY,aAAgBb,EAAaqB,WAAcA,KAGpGlJ,EAAK/O,GAAGQ,WAAW,6BAA8BmD,GAAMlD,KAAK,SAAAgB,GACvDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWFqY,eAAA,SAAe1B,EAA6BqB,EAAoBtD,GAAwB,IAAAzF,EAAAzP,KACtF,gBAD8DkV,IAAAA,GAAoB,GAC3E,IAAItU,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTuU,SAAUvD,GAETxV,EAAE0Q,SAAS+G,GACZzX,EAAEgE,IAAIQ,EAAM,cAAeiT,GAE3BzX,EAAEgE,IAAIQ,EAAM,eAAgBiT,GAE3BzX,EAAEQ,IAAIsY,EAAY,aACnB9Y,EAAEgE,IAAIQ,EAAM,YAAaxE,EAAES,IAAIqY,EAAY,cACnC9Y,EAAEQ,IAAIsY,EAAY,eAAiB9Y,EAAEQ,IAAIsY,EAAY,eAC7D9Y,EAAEgE,IAAIQ,EAAM,aAAcxE,EAAES,IAAIqY,EAAY,eAC5C9Y,EAAEgE,IAAIQ,EAAM,aAAcxE,EAAES,IAAIqY,EAAY,gBAE5C1X,EAAO,IAAIlB,EAAQ,EAAG,+BAAgC,CAACoY,aAAgBb,EAAaqB,WAAcA,KAGpG/I,EAAKlP,GAAGQ,WAAW,+BAAgCmD,GAAMlD,KAAK,SAAAgB,GACzDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWFyO,OAAA,SAAO6J,EAA6B5J,EAAuBC,GAAoBO,IAAAA,EAC7E1P,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3B,IAAIoD,EAAmF,CAAE6U,aAAcD,QAC7E,IAAhB5J,GACRxP,EAAEgE,IAAIQ,EAAM,eAAgBgL,QACH,IAAjBC,GACRzP,EAAEgE,IAAIQ,EAAM,gBAAiBiL,GAC/BO,EAAKnP,GAAGQ,WAAW,uBAAwBmD,GAAMlD,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASA4O,SAAA,SAAS0J,GAA2BlJ,IAAAA,EAClC5P,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3B8O,EAAKrP,GAAGQ,WAAW,yBAHR,CACTgY,aAAcD,IAEmC9X,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASA6O,MAAA,SAAMyJ,GAA2B,IAAAhJ,EAAA9P,KAC/B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BgP,EAAKvP,GAAGQ,WAAW,sBAHR,CACTgY,aAAcD,IAEgC9X,KAAK,SAAAgB,GAChDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAgP,OAAA,SAAOsJ,GAA2B3I,IAAAA,EAChCnQ,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BqP,EAAK5P,GAAGQ,WAAW,uBAHR,CACTgY,aAAcD,IAEiC9X,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAAA,OASH,SAAOsY,GAA2BrI,IAAAA,EAChCzQ,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3B2P,EAAKlQ,GAAGQ,WAAW,uBAHR,CACTgY,aAAcD,IAEiC9X,KAAK,SAAAgB,GACjDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYDwY,iBAAA,SAAiB7R,EAAoB8R,EAA2BvQ,EAA+B0O,GAAiB,IAAAnG,EAAAjR,KAC9G,gBAD6FoX,IAAAA,GAAa,GACnG,IAAIxW,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CAAE,OACM,IAATwE,GACRhJ,EAAEqM,MAAM7H,EAAMwE,GAEZhJ,EAAEQ,IAAIgE,EAAM,eACdxE,EAAEgE,IAAIQ,EAAM,aAAciD,GAExBzH,EAAEQ,IAAIgE,EAAM,eACdxE,EAAEgE,IAAIQ,EAAM,aAAc+U,GAE5B,IAAInB,EAAO,8BACPV,IACFU,EAAO,wBAET7G,EAAK1Q,GAAGQ,WAAW+W,EAAM5T,GAAMlD,KAAK,SAAAgB,GAC/BA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD0Y,cAAA,SAActB,GAAmB,IAAAtG,EAAAtR,KAC/B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CAAE,EACbxE,EAAEgE,IAAIQ,EAAM,cAAe0T,GAC3BtG,EAAK/Q,GAAGQ,WAAW,6BAA8BmD,GAAMlD,KAAK,SAAAgB,GACvDA,EAAEsG,OAAO,EACVxH,EAAO,IAAIlB,EAAQ,EAAGoC,EAAEuN,QAAS,CAACtO,SAAYe,KAE9CnB,EAAQmB,EAAEd,MAEd,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWD4R,iBAAA,SAAiBC,EAAkByC,EAA2C9D,GAAyBS,IAAAA,EAApEqD,KACjC,YADiCA,IAAAA,IAAAA,GAAoC,GAC1D,IAAAlU,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACT6Q,yBAA0BD,QAEN,IAAZ9D,GAAsC,MAAXA,GACnCtR,EAAEgE,IAAIQ,EAAM,YAAa8M,GAEvBtR,EAAE6S,SAAS,CAAC,cAAe,aAAcF,GAG3CZ,EAAKlR,GAAGQ,WAAU,iBAAkBsR,EAAYnO,GAAMlD,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,GANAL,EAAO,IAAIlB,EAAQ,EAAG,oDAAqD,CAACgC,SAAYyQ,IAQ5F,EACF,EAAC7R,EAUDiS,aAAA,SAAaqC,EAA2C9D,GACtD,YADW8D,IAAAA,IAAAA,GAAoC,GACpC9U,KAACoS,iBAAiB,YAAa0C,EAA0B9D,EACtE,EAACxQ,EAUD2Y,eAAA,SAAerE,EAA2C9D,GACxD,YADa8D,IAAAA,IAAAA,GAAoC,GACtC9U,KAACoS,iBAAiB,cAAe0C,EAA0B9D,EACxE,EAACxQ,EAQDyR,YAAA,WAAWL,IAAAA,EACT5R,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B8Q,EAAKrR,GAAGQ,WAAW,yBAA0B,CAAA,GAAIC,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQF4Y,cAAA,WAAa,IAAAtH,EAAA9R,KACX,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3BgR,EAAKvR,GAAGQ,WAAW,2BAA4B,CAAE,GAAEC,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDgR,cAAA,WAAa,IAAAQ,EAAAhS,KACX,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3BkR,EAAKzR,GAAGQ,WAAW,2BAA4B,CAAA,GAAIC,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDkV,aAAA,WAAYxD,IAAAA,EACVlS,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3BoR,EAAK3R,GAAGQ,WAAW,0BAA2B,CAAE,GAAEC,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDmV,kBAAA,WAAiBrD,IAAAA,EACftS,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3BwR,EAAK/R,GAAGQ,WAAW,+BAAgC,CAAA,GAAIC,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDoV,cAAA,WAAa,IAAAjD,EAAA3S,KACX,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B6R,EAAKpS,GAAGQ,WAAW,2BAA4B,CAAE,GAAEC,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD6Y,UAAA,WAAS,IAAArG,EAAAhT,KACP,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3BkS,EAAKzS,GAAGQ,WAAW,uBAAwB,CAAA,GAAIC,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD8Y,gBAAA,WAAepG,IAAAA,EACblT,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3BoS,EAAK3S,GAAGQ,WAAW,6BAA8B,CAAE,GAAEC,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAAC2I,CAAA,CA9zBmB,GCHhBpK,EAAIC,QAAQ,UASL4Z,0BAmCX,SAAAA,EAAYhZ,GA/BZA,KAAAA,eAMA2D,UAAI,EAAAlE,KAIJwZ,WAIAC,EAAAA,KAAAA,qBAIAC,eAAS,EAAA1Z,KAITuN,aAIAD,EAAAA,KAAAA,aAMEtN,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAA+Y,EAAA9Y,UA4LA,OA5LAD,EAWDkN,OAAA,SAAOiM,EAAoBC,EAAmB3V,GAAgBtD,IAAAA,OAC5D,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3B,IAIIoD,EAAOxE,EAAEqM,MAJG,CACd8N,WAAYF,EACZG,UAAWF,GAEiB3V,GAC9BtD,EAAKJ,GAAGQ,WAAW,kBAAmBmD,GAAMlD,KAAK,SAAAgB,GAC/CnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWDuZ,YAAA,SAAYC,EAAmBC,EAA0BhW,GAAgB1C,IAAAA,OACvE,OAAO,IAAIX,QAAQ,SAACC,EAASC,GAC3B,IAIIoD,EAAOxE,EAAEqM,MAJG,CACdmO,UAAWF,EACXG,iBAAkBF,GAEUhW,GAC9B1C,EAAKhB,GAAGQ,WAAW,uBAAwBmD,GAAMlD,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYD4Z,kBAAA,SAAkBT,EAAoBC,EAAmBtT,EAAmBrC,OAAgB7B,EAAApC,KAC1F,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAKIoD,EAAOxE,EAAEqM,MALG,CACd8N,WAAYF,EACZG,UAAWF,EACXnM,iBAAkBnH,GAEUrC,GAC9B7B,EAAK7B,GAAGQ,WAAW,8CAA+CmD,GAAMlD,KAAK,SAAAgB,GAC3EnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUD4I,OAAA,SAAOiR,EAAoBpW,GAAgB,IAAApB,EACzC7C,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAHG,CACduO,WAAYD,GAEgBpW,GAC9BpB,EAAKtC,GAAGQ,WAAW,wBAAyBmD,GAAMlD,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDiO,SAAA,SAAS8L,OAA0BvX,EAAAhD,KACjC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BkC,EAAKzC,GAAGQ,WAAW,uBAHR,CACTyZ,YAAaD,IAEkCvZ,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDkI,OAAA,SAAO+R,GAAerX,IAAAA,OACpB,OAAO,IAAIxC,QAAQ,SAACC,EAASC,GAE3BsC,EAAK7C,GAAGQ,WAAW,wBADR0Z,GACuCzZ,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAaDoN,KAAA,SAAKyM,EAAoBxM,EAAWC,EAAWC,EAA6DC,GAAUrH,IAAAA,EACpH3G,KAAA,WAAWY,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAI6N,EAAY,SAAYrO,EAAEQ,IAAI6N,EAAY,QAElDjN,EAAO,IAAIlB,EAAQ,EAAG,mEAAoE,CAACmO,WAAcA,KAE3G,IAAI+H,EAAY,CACdwE,WAAYD,EACZlM,EAAGN,EACHO,EAAGN,QAES,IAAJE,GACRtO,EAAEgE,IAAIoS,EAAW,IAAK9H,GAExB,IAAI9J,EAAOxE,EAAEqM,MAAM+J,EAAW/H,GAC9BpH,EAAKpG,GAAGQ,WAAW,sBAAuBmD,GAAMlD,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD,OAAA,SAAO6Z,OAAkBtT,EAAA/G,KACvB,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BiG,EAAKxG,GAAGQ,WAAW,4BAHR,CACTuZ,WAAYD,IAEwCrZ,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACoY,CAAA,IC1OG7Z,EAAIC,QAAQ,UAEL+a,0BASX,SAAAA,EAAYna,GALZA,KAAAA,UAMEP,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAAka,EAAAja,UA0XA,OA1XAD,EAYAma,SAAA,SAASN,EAAoBO,EAAyBC,EAAmB5W,OAAmEtD,EAAAX,KAC3I,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACToW,WAAYD,EACZS,gBAAiBF,EACjBG,UAAWF,QAEO,IAAV5W,IACRC,EAAOxE,EAAEqM,MAAM7H,EAAMD,IAEvBtD,EAAKJ,GAAGQ,WAAW,wBAAyBmD,GAAMlD,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUAwa,iBAAA,SAAiBX,EAAoBL,GAAiB,IAAAzY,EACrDvB,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAK3BS,EAAKhB,GAAGQ,WAAW,+BAJR,CACTuZ,WAAYD,EACZH,UAAWF,IAE4ChZ,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAcAya,aAAA,SAAaC,EAA0BC,EAAuBC,EAAwBC,EAAoBC,EAAwBrX,GAAgB7B,IAAAA,OACjJ,OAAO,IAAIxB,QAAQ,SAACC,EAASC,GAC3B,IAOIoD,EAAOxE,EAAEqM,MAPG,CACdwP,iBAAkBL,EAClBM,cAAeL,EACfM,eAAgBL,EAChBM,WAAYL,EACZM,eAAgBL,GAEYrX,GAC9B7B,EAAK7B,GAAGQ,WAAW,wBAAyBmD,GAAMlD,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAob,kBAAA,SAAkBvB,OAAkBxX,EAAA7C,KACnC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3B+B,EAAKtC,GAAGQ,WAAW,iCAHR,CACTuZ,WAAYD,IAE6CrZ,KAAK,SAAAgB,GAC9DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAqb,qBAAA,SAAqBxB,OAAkBrX,EAAAhD,KACtC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BkC,EAAKzC,GAAGQ,WAAW,uCAHR,CACTuZ,WAAYD,IAEmDrZ,KAAK,SAAAgB,GACpEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAsb,gBAAA,SAAgBrB,GAAgBrX,IAAAA,OAC/B,OAAO,IAAIxC,QAAQ,SAACC,EAASC,GAC2G,GAAnIpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,gBAAiB,kBAAmB,YAAa,YAAa,WAAY,YAAYrO,QAC5HtL,EAAO,IAAIlB,EAAQ,EAAG,8HAGxBwD,EAAK7C,GAAGQ,WAAW,2BADR0Z,GAC0CzZ,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWAyb,SAAA,SAAS9U,EAAoB+U,EAAmBjY,GAAkF0C,IAAAA,OACjI,OAAO,IAAI/F,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTmD,WAAYF,EACZiO,UAAW8G,GAEVxc,EAAEQ,IAAI+D,EAAS,cAChBvE,EAAEgE,IAAIQ,EAAM,aAAcxE,EAAES,IAAI8D,EAAS,eACjCvE,EAAEQ,IAAI+D,EAAS,mBACvBvE,EAAEgE,IAAIQ,EAAM,kBAAmBxE,EAAES,IAAI8D,EAAS,oBAE9CnD,EAAO,IAAIlB,EAAQ,EAAG,oDAAqD,CAACgC,SAAYqC,KAEvFvE,EAAEQ,IAAI+D,EAAS,qBAChBvE,EAAEgE,IAAIQ,EAAM,mBAAoBxE,EAAES,IAAI8D,EAAS,qBAEjD0C,EAAKpG,GAAGQ,WAAW,oCAAqCmD,GAAMlD,KAAK,SAAAgB,GACjEnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYA2b,sBAAA,SAAsB9B,EAAoBlT,EAAoB+U,EAAmBf,GAAsBpU,IAAAA,EACtG/G,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACToW,WAAYD,EACZhT,WAAYF,EACZiO,UAAW8G,QAEa,IAAhBf,GACRzb,EAAEgE,IAAIQ,EAAM,gBAAiBiX,GAE/BpU,EAAKxG,GAAGQ,WAAW,oCAAqCmD,GAAMlD,KAAK,SAAAgB,GACjEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWA4b,UAAA,SAAUjB,EAAuBD,EAA0BjX,GAAgBgD,IAAAA,OAC1E,OAAO,IAAIrG,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTsX,cAAeL,EACfI,iBAAkBL,QAEA,IAAVjX,IACRC,EAAOxE,EAAEqM,MAAM7H,EAAMD,IAEvBgD,EAAK1G,GAAGQ,WAAW,yBAA0BmD,GAAMlD,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUA6b,aAAA,SAAaC,EAAwBrY,GAAgB,IAAAmD,EAAApH,KACpD,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTqY,eAAgBD,QAEE,IAAVrY,IACRC,EAAOxE,EAAEqM,MAAM7H,EAAMD,IAEvBmD,EAAK7G,GAAGQ,WAAW,4BAA6BmD,GAAMlD,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAgc,WAAA,SAAWF,OAAsBrP,EAAAjN,KAChC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAK3BmM,EAAK1M,GAAGQ,WAAW,gCAJR,CACTwb,eAAgBD,EAChBG,MAAM,IAEkDzb,KAAK,SAAAgB,GAC7DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAkc,aAAA,SAAaJ,GAAsB,IAAAlP,EAClCpN,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAK3BsM,EAAK7M,GAAGQ,WAAW,gCAJR,CACTwb,eAAgBD,EAChBG,MAAM,IAEkDzb,KAAK,SAAAgB,GAC7DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUAmc,aAAA,SAAaL,EAAwBM,GAAiB,IAAAtN,EACrDtP,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAK3BwO,EAAK/O,GAAGQ,WAAW,6BAJR,CACTwb,eAAgBD,EAChBO,UAAWD,IAE0C5b,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAsc,gBAAA,SAAgBR,GAAsB7M,IAAAA,EACrCzP,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3B2O,EAAKlP,GAAGQ,WAAW,gCAHR,CACTwb,eAAgBD,IAEwCtb,KAAK,SAAAgB,GAC7DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAuc,sBAAA,SAAsBtC,GAAgB/K,IAAAA,OACrC,OAAO,IAAI9O,QAAQ,SAACC,EAASC,GACqE,GAA7FpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,iBAAkB,eAAgB,cAAcrO,QACtFtL,EAAO,IAAIlB,EAAQ,EAAG,8FAGxB8P,EAAKnP,GAAGQ,WAAW,2BADR0Z,GAC0CzZ,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAwc,0BAAA,SAA0BvC,GAAgB7K,IAAAA,OACzC,OAAO,IAAIhP,QAAQ,SAACC,EAASC,GACsF,GAA9GpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,iBAAkB,eAAgB,YAAa,kBAAkBrO,QACvGtL,EAAO,IAAIlB,EAAQ,EAAG,6GAGxBgQ,EAAKrP,GAAGQ,WAAW,iCADR0Z,GACgDzZ,KAAK,SAAAgB,GAC9DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACuZ,CAAA,ICvYGhb,EAAIC,QAAQ,UAELsd,eASX,WAAA,SAAAA,EAAY1c,GALZA,KAAAA,QAME,EAAAP,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAAyc,EAAAxc,UA+zBA,OA/zBAD,EAWD0c,OAAA,SAAO7C,EAAoB8C,EAAoBlZ,GAAgB,IAAAtD,EAAAX,KAC7D,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAIIoD,EAAOxE,EAAEqM,MAJG,CACduO,WAAYD,EACZ+C,WAAYD,GAEgBlZ,GAC9BtD,EAAKJ,GAAGQ,WAAW,mBAAoBmD,GAAMlD,KAAK,SAAAgB,GAChDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUD6c,WAAA,SAAWhD,EAAoBpW,GAAe1C,IAAAA,EAC5CvB,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAHG,CACduO,WAAYD,GAEgBpW,GAC9B1C,EAAKhB,GAAGQ,WAAW,sBAAuBmD,GAAMlD,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWD8c,UAAA,SAAUC,EAAqBC,EAAsBjQ,GAAe,IAAAnL,EAAApC,KAClE,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAM3BsB,EAAK7B,GAAGQ,WAAW,4BALR,CACT0c,YAAaF,EACbG,aAAcF,EACdG,SAAUpQ,IAE0CvM,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDod,kBAAA,SAAkBC,EAAqB5Z,GAAepB,IAAAA,EACpD7C,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAHG,CACd+R,YAAaD,GAEe5Z,GAC9BpB,EAAKtC,GAAGQ,WAAW,6BAA8BmD,GAAMlD,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYDud,WAAA,SAAW1D,EAAoB2D,EAAmBC,EAAiB1Q,GAAgB,IAAAvK,EACjFhD,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACToW,WAAYD,EACZ6D,UAAWF,QAEM,IAATC,GACRve,EAAEgE,IAAIQ,EAAM,SAAU+Z,QAEJ,IAAV1Q,GACR7N,EAAEgE,IAAIQ,EAAM,cAAeqJ,GAE7BvK,EAAKzC,GAAGQ,WAAW,kBAAmBmD,GAAMlD,KAAK,SAAAgB,GAC/CnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAaD2d,cAAA,SAAc9D,EAAoB+D,EAAoBH,EAAgBI,EAAkBpa,GAAgB,IAAAb,EACtGpD,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAMIoD,EAAOxE,EAAEqM,MANG,CACduO,WAAYD,EACZiE,WAAYF,EACZG,OAAQN,EACRO,WAAYH,GAEgBpa,GAC9Bb,EAAK7C,GAAGQ,WAAW,yBAA0BmD,GAAMlD,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDie,UAAA,SAAUC,EAAiBza,GAAgB,IAAA0C,EAAA3G,KACzC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAHG,CACd4S,QAASD,GAEmBza,GAC9B0C,EAAKpG,GAAGQ,WAAW,sBAAuBmD,GAAMlD,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDoe,WAAA,SAAWC,EAA2BC,GAAc,IAAA/X,EAAA/G,KAClD,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAK3BiG,EAAKxG,GAAGQ,WAAW,+BAJR,CACTge,kBAAmBF,EACnBG,OAAQF,IAE+C9d,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDye,eAAA,SAAe5E,EAAoBL,OAAiB/S,EAAAjH,KAClD,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAK3BmG,EAAK1G,GAAGQ,WAAW,0BAJR,CACTuZ,WAAYD,EACZH,UAAWF,IAEuChZ,KAAK,SAAAgB,GACvDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUD0e,mBAAA,SAAmB7E,EAAoBL,OAAiB5S,EAAApH,KACtD,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAK3BsG,EAAK7G,GAAGQ,WAAW,6BAJR,CACTuZ,WAAYD,EACZH,UAAWF,IAE0ChZ,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD2e,QAAA,SAAQ9E,GAAkB,IAAApN,EACxBjN,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BmM,EAAK1M,GAAGQ,WAAW,4BAHR,CACTuZ,WAAYD,IAEwCrZ,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD4e,YAAA,SAAY/E,GAAkB,IAAAjN,EAAApN,KAC5B,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BsM,EAAK7M,GAAGQ,WAAW,+BAHR,CACTuZ,WAAYD,IAE2CrZ,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD6e,YAAA,SAAYhF,GAAkB,IAAA/K,EAAAtP,KAC5B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BwO,EAAK/O,GAAGQ,WAAW,+BAHR,CACTuZ,WAAYD,IAE2CrZ,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD8e,eAAA,SAAejF,OAAkB5K,EAAAzP,KAC/B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3B2O,EAAKlP,GAAGQ,WAAW,kCAHR,CACTuZ,WAAYD,IAE8CrZ,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD+e,UAAA,SAAUb,GAAe,IAAAhP,EAAA1P,KACvB,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3B4O,EAAKnP,GAAGQ,WAAW,sBAHR,CACT4d,QAASD,IAEqC1d,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDgf,mBAAA,SAAmBnF,GAAkB,IAAAzK,EAAA5P,KACnC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3B8O,EAAKrP,GAAGQ,WAAW,kCAHR,CACTuZ,WAAYD,IAE8CrZ,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDif,cAAA,SAAcf,OAAe5O,EAAA9P,KAC3B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BgP,EAAKvP,GAAGQ,WAAW,yBAHR,CACT4d,QAASD,IAEwC1d,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDkf,aAAA,SAAab,GAAyB,IAAA1O,EAAAnQ,KACpC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BqP,EAAK5P,GAAGQ,WAAW,+BAHR,CACTge,kBAAmBF,IAEoC7d,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDmf,uBAAA,SAAuBtF,GAAkB,IAAA5J,EAAAzQ,KACvC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3B2P,EAAKlQ,GAAGQ,WAAW,qCAHR,CACTuZ,WAAYD,IAEiDrZ,KAAK,SAAAgB,GAClEnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDof,cAAA,SAAc/B,OAAmB5M,EAAAjR,KAC/B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BmQ,EAAK1Q,GAAGQ,WAAW,yBAHR,CACT+c,YAAaD,IAEoC7c,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDqf,uBAAA,SAAuBxF,GAAkB,IAAA/I,EAAAtR,KACvC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BwQ,EAAK/Q,GAAGQ,WAAW,qCAHR,CACTuZ,WAAYD,IAEiDrZ,KAAK,SAAAgB,GAClEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDsf,iBAAA,SAAiBC,GAAsB,IAAAtO,EAAAzR,KACrC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3B2Q,EAAKlR,GAAGQ,WAAW,4BAHR,CACTif,eAAgBD,IAEoC/e,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDyf,0BAAA,SAA0B5F,OAAkBzI,EAAA5R,KAC1C,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3B8Q,EAAKrR,GAAGQ,WAAW,wCAHR,CACTuZ,WAAYD,IAEoDrZ,KAAK,SAAAgB,GACrEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD0f,WAAA,SAAWzF,GAAe3I,IAAAA,OACxB,OAAO,IAAIlR,QAAQ,SAACC,EAASC,GACqE,GAA7FpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,UAAW,aAAc,UAAW,YAAYrO,QACtFtL,EAAO,IAAIlB,EAAQ,EAAG,4FAGxBkS,EAAKvR,GAAGQ,WAAW,sBADR0Z,GACqCzZ,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD2f,eAAA,SAAe1F,GAAezI,IAAAA,OAC5B,OAAO,IAAIpR,QAAQ,SAACC,EAASC,GACwI,GAAhKpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,cAAe,cAAe,YAAa,UAAW,UAAW,iBAAkB,gBAAiB,eAAerO,QACzJtL,EAAO,IAAIlB,EAAQ,EAAG,uJAGxBoS,EAAKzR,GAAGQ,WAAW,yBADR0Z,GACwCzZ,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD4f,cAAA,SAAc3F,GAAevI,IAAAA,OAC3B,OAAO,IAAItR,QAAQ,SAACC,EAASC,GACsF,GAA9GpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,cAAe,oBAAqB,WAAY,iBAAiBrO,QACvGtL,EAAO,IAAIlB,EAAQ,EAAG,6GAGxBsS,EAAK3R,GAAGQ,WAAW,yBADR0Z,GACwCzZ,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD6f,eAAA,SAAe5F,GAAenI,IAAAA,OAC5B,OAAO,IAAI1R,QAAQ,SAACC,EAASC,GACiF,GAAzGpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,cAAe,aAAc,cAAe,gBAAgBrO,QAClGtL,EAAO,IAAIlB,EAAQ,EAAG,uGAGxB0S,EAAK/R,GAAGQ,WAAW,yBADR0Z,GACwCzZ,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD8f,mBAAA,WAAkB3N,IAAAA,EAChB3S,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAE3B6R,EAAKpS,GAAGQ,WAAW,mBADR,CAAA,GACkCC,KAAK,SAAAgB,GAChDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD+f,mBAAA,SAAmB9F,GAAezH,IAAAA,OAChC,OAAO,IAAIpS,QAAQ,SAACC,EAASC,GACsF,GAA9GpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,aAAc,YAAa,UAAW,UAAW,gBAAgBrO,QACvGtL,EAAO,IAAIlB,EAAQ,EAAG,0GAGxBoT,EAAKzS,GAAGQ,WAAW,sBADR0Z,GACqCzZ,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDggB,sBAAA,SAAsB/F,OAAevH,EAAAlT,KACnC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC4N,GAApPpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,eAAgB,SAAU,iBAAkB,WAAY,cAAe,UAAW,eAAgB,cAAe,eAAgB,cAAe,aAAc,eAAgB,YAAa,YAAYrO,QAC7OtL,EAAO,IAAIlB,EAAQ,EAAG,8NAGxBsT,EAAK3S,GAAGQ,WAAW,4BADR0Z,GAC2CzZ,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDigB,kBAAA,SAAkBxc,GAAe,IAAAmP,EAC/BpT,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BsS,EAAK7S,GAAGQ,WAAW,6BADRkD,GAC4CjD,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAcDkgB,yBAAA,SAAyBX,EAAwBY,EAAoBC,EAAoBC,EAAyBC,EAA0BvT,GAAgB,IAAA+F,EAC1JtT,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACT8b,eAAgBD,EAChBgB,aAAcH,EACdI,WAAYL,QAEe,IAAlBG,GAAkD,MAAjBA,QAAmD,IAAjBD,GAAgD,MAAhBA,OAE3E,IAAlBC,GAAkD,MAAjBA,EAChDphB,EAAEgE,IAAIQ,EAAM,kBAAmB4c,QACC,IAAjBD,GAAgD,MAAhBA,GAC/CnhB,EAAEgE,IAAIQ,EAAM,iBAAkB2c,GAJ9B/f,EAAO,IAAIlB,EAAQ,EAAG,qEAMJ,IAAV2N,GACR7N,EAAEgE,IAAIQ,EAAM,cAAeqJ,GAE7B+F,EAAK/S,GAAGQ,WAAW,2BAA4BmD,GAAMlD,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDygB,4BAAA,SAA4BC,GAAwBvN,IAAAA,EAClD3T,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3B6S,EAAKpT,GAAGQ,WAAW,8BAHR,CACTogB,iBAAkBD,IAEoClgB,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD4gB,6BAAA,SAA6B3G,OAAezG,EAAAhU,KAC1C,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAOuW,EAC8I,GAAtJ/a,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,iBAAkB,mBAAoB,iBAAkB,cAAe,kBAAmB,eAAerO,QAC/ItL,EAAO,IAAIlB,EAAQ,EAAG,iJAExBoU,EAAKzT,GAAGQ,WAAW,8BAA+BmD,GAAMlD,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD6gB,KAAA,WAAItK,IAAAA,EACF/W,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3BiW,EAAKxW,GAAGQ,WAAW,mBAAoB,CAAA,GAAIC,KAAK,SAAAgB,GAC9CnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD8gB,oBAAA,SAAoB7G,GAA4GxD,IAAAA,OAC9H,OAAO,IAAIrW,QAAQ,SAACC,EAASC,GACsF,GAA9GpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,cAAe,UAAW,UAAW,aAAc,cAAcrO,QACvGtL,EAAO,IAAIlB,EAAQ,EAAG,2GAGxBqX,EAAK1W,GAAGQ,WAAW,sBADR0Z,GACqCzZ,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD+gB,eAAA,WAAcC,IAAAA,OACZ,OAAO,IAAI5gB,QAAQ,SAACC,EAASC,GAE3B0gB,EAAKjhB,GAAGQ,WAAW,qBADR,CAAA,GACoCC,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDihB,cAAA,SAAcxd,GAAeyd,IAAAA,EAC3B1hB,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3B4gB,EAAKnhB,GAAGQ,WAAW,qBADRkD,GACoCjD,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDmhB,iBAAA,SAAiBC,EAAsB3d,GAAe4d,IAAAA,EACpD7hB,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAHG,CACd+V,aAAcF,GAEc3d,GAC9B4d,EAAKthB,GAAGQ,WAAW,wBAAyBmD,GAAMlD,KAAK,SAAAgB,GACrDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAAC8b,CAAA,CAj0BD,GCVIvd,EAAIC,QAAQ,UAMLge,eAmBX,WAAA,SAAAA,EAAYpd,EAASc,GAYnB,QA3BFd,QAAE,EAAAP,KAKFuD,mBAAa,EAAAvD,KAKb+hB,yBAME,EAAA/hB,KAAKO,GAAKA,EACVP,KAAKuD,cAAgB,IAAIE,EAAAA,QACzBzD,KAAKuD,cAAcG,IAAI,UAAW,GAClC1D,KAAKuD,cAAcG,IAAI,UAAW,GAClC1D,KAAKuD,cAAcG,IAAI,YAAa,GACpC1D,KAAKuD,cAAcG,IAAI,SAAU,GACjC1D,KAAKuD,cAAcG,IAAI,WAAY,GACnC1D,KAAKuD,cAAcG,IAAI,eAAgB,GACvC1D,KAAKuD,cAAcG,IAAI,UAAW,GAClC1D,KAAKuD,cAAcG,IAAI,WAAY,IAE/B1D,KAAKuD,cAAcrD,IAAImB,GACzB,UAAUzB,EAAQ,EAAG,mCAAoC,CAACgC,SAAYP,EAAc4C,QAAUjE,KAAKuD,gBAErGvD,KAAK+hB,oBAAsB1gB,CAC7B,CAAC,IAAAb,EAAAmd,EAAAld,iBAAAD,EASDmD,IAAA,SAAIqe,EAAazU,GAAe5M,IAAAA,EAC9BX,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTpC,aAAcnB,EAAK4C,cAAcpD,IAAIQ,EAAKohB,qBAC1CE,YAAaD,EACbrE,SAAUpQ,GAEZ5M,EAAKJ,GAAGQ,WAAW,kBAAmBmD,GAAMlD,KAAK,SAACC,GAChDJ,EAAQI,EAASC,MACnB,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD4I,OAAA,SAAO8Y,EAAY3U,GAAe,IAAAhM,EAChCvB,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTpC,aAAcP,EAAKgC,cAAcpD,IAAIoB,EAAKwgB,qBAC1CI,UAAWD,EACXvE,SAAUpQ,GAEZhM,EAAKhB,GAAGQ,WAAW,qBAAsBmD,GAAMlD,KAAK,SAACC,GACnDJ,EAAQI,EAASC,MACnB,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDL,IAAA,SAAIsE,GAAmBrC,IAAAA,EACrBpC,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,QAAiB,IAAP2D,GAA6B,MAAPA,EAAa,CAC3C,IAAIP,EAAO,CACTQ,aAAcD,EACd3C,aAAcM,EAAKmB,cAAcpD,IAAIiC,EAAK2f,sBAE5C3f,EAAK7B,GAAGQ,WAAW,6BAA8BmD,GAAMlD,KAAK,SAACC,GAEzDJ,EADc,GAAb4D,EAAK2H,OACEnL,EAASC,MAAMuD,EAAK,IAEpBxD,EAASC,MAErB,EACD,CACH,EACF,EAACV,EASD4hB,cAAA,SAAc9T,EAAqB+T,GAAiBxf,IAAAA,EAClD7C,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CAAA,EACkB,WAA1BrB,EAAKkf,qBACNriB,EAAEgE,IAAIQ,EAAM,aAAcoK,QAEP,IAAX+T,GAAqD,WAA1Bxf,EAAKkf,qBAA4D,aAA1Blf,EAAKkf,qBAC/EriB,EAAEgE,IAAIQ,EAAM,WAAYme,GAE1B3iB,EAAEgE,IAAIQ,EAAM,eAAgBrB,EAAKU,cAAcpD,IAAI0C,EAAKkf,sBACxDlf,EAAKtC,GAAGQ,WAAW,iCAAkCmD,GAAMlD,KAAK,SAACC,GAC/DJ,EAAQI,EAASC,MACnB,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACwc,CAAA,CA7GD,GC1BIje,EAAIC,QAAQ,UAGL2iB,eAcX,WAAA,SAAAA,EAAY/hB,GAVZA,KAAAA,eAKAoB,UAAI,EAMF3B,KAAKO,GAAKA,EACVP,KAAK2B,KAAO,CACV4L,QAAS,IAAIoQ,EAASpd,EAAI,UAE9B,CAAC,IAAAC,EAAA8hB,EAAA7hB,UAkbA,OAlbAD,EAaA+hB,QAAA,SAAQlI,EAAoBmI,EAAgBC,EAAoBC,EAAkBze,GAAgBtD,IAAAA,OACjG,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACToW,WAAYD,EACZsI,OAAQH,EACRI,WAAYH,EACZI,SAAUH,QAEQ,IAAVze,IACRC,EAAOxE,EAAEqM,MAAM7H,EAAMD,IAEvBtD,EAAKJ,GAAGQ,WAAW,mBAAoBmD,GAAMlD,KAAK,SAAAgB,GAChDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAcAsiB,cAAA,SAAczI,EAAoB0I,EAAkBC,EAAoBC,EAAkBC,EAAqBjf,GAAgB,IAAA1C,EAAAvB,KAC9H,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACToW,WAAYD,EACZ8I,SAAUJ,EACVK,WAAYJ,EACZK,SAAUJ,EACVK,YAAaJ,QAEK,IAAVjf,IACRC,EAAOxE,EAAEqM,MAAM7H,EAAMD,IAEvB1C,EAAKhB,GAAGQ,WAAW,0BAA2BmD,GAAMlD,KAAK,SAAAgB,GACvDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUA+iB,eAAA,SAAeR,EAAkBxV,GAAenL,IAAAA,OAC/C,OAAO,IAAIxB,QAAQ,SAACC,EAASC,GAK3BsB,EAAK7B,GAAGQ,WAAW,2BAJR,CACToiB,SAAUJ,EACVS,YAAajW,IAEsCvM,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUAijB,iBAAA,SAAiBpJ,EAAoBqJ,GAAkC,IAAA7gB,EAAlC6gB,KACpC,gBADoCA,IAAAA,GAA6B,GAC1D,IAAI9iB,QAAQ,SAACC,EAASC,GAK3B+B,EAAKtC,GAAGQ,WAAW,4BAJR,CACTuZ,WAAYD,EACZsJ,kBAAmBD,IAEiC1iB,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUAojB,aAAA,SAAaC,EAA0BH,GAAkC,IAAA1gB,EAAlC0gB,KACtC,YADsCA,IAAAA,IAAAA,GAA6B,GAC5D,IAAI9iB,QAAQ,SAACC,EAASC,GAK3BkC,EAAKzC,GAAGQ,WAAW,qBAJR,CACT+iB,UAAWD,EACXF,kBAAmBD,IAE0B1iB,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAujB,mBAAA,SAAmBF,OAAwBzgB,EAAApD,KAC1C,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3BsC,EAAK7C,GAAGQ,WAAW,kCAHR,CACT+iB,UAAWD,IAE+C7iB,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAwjB,mBAAA,SAAmBjB,GAAgBpc,IAAAA,OAClC,OAAO,IAAI/F,QAAQ,SAACC,EAASC,GAI3B6F,EAAKpG,GAAGQ,WAAW,kCAHR,CACTgiB,SAAUA,IAEgD/hB,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAyjB,oBAAA,SAAoBJ,GAAwB9c,IAAAA,EAC3C/G,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3BiG,EAAKxG,GAAGQ,WAAW,mCAHR,CACT8iB,UAAWA,IAEgD7iB,KAAK,SAAAgB,GAChEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUA0jB,WAAA,SAAWnB,EAAkB9e,GAAgBgD,IAAAA,EAC5CjH,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTif,SAAUJ,QAEQ,IAAV9e,IACRC,EAAOxE,EAAEqM,MAAM7H,EAAMD,IAEvBgD,EAAK1G,GAAGQ,WAAW,sBAAuBmD,GAAMlD,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWA2jB,kBAAA,SAAkBC,EAAyB7W,EAAiB8W,GAAkBjd,IAAAA,EAC7EpH,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTogB,gBAAiBF,EACjBZ,YAAajW,QAEO,IAAZ8W,GACR3kB,EAAEgE,IAAIQ,EAAM,YAAamgB,GAE3Bjd,EAAK7G,GAAGQ,WAAW,8BAA+BmD,GAAMlD,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWA+jB,cAAA,SAAcxB,EAAkBC,EAAoB/e,GAAgB,IAAAgJ,EAAAjN,KACnE,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTif,SAAUJ,GAE4E,GAArFrjB,EAAEqc,eAAerc,EAAEsc,OAAO/X,GAAU,CAAC,mBAAoB,oBAAoBmI,QAC9EtL,EAAO,IAAIlB,EAAQ,EAAG,6FAEJ,IAAVqE,IACRC,EAAOxE,EAAEqM,MAAM7H,EAAMD,IAEvBgJ,EAAK1M,GAAGQ,WAAW,yBAA0BmD,GAAMlD,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAgkB,WAAA,SAAWzB,GAAgB3V,IAAAA,EAC1BpN,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BsM,EAAK7M,GAAGQ,WAAW,sBAHR,CACToiB,SAAUJ,IAEoC/hB,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAikB,kBAAA,SAAkBpK,GAAkB,IAAA/K,EACnCtP,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BwO,EAAK/O,GAAGQ,WAAW,kCAHR,CACTuZ,WAAYD,IAE8CrZ,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAkkB,mBAAA,SAAmBC,GAA+B,IAAAlV,EAAAzP,KACjD,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3B2O,EAAKlP,GAAGQ,WAAW,8BAHR,CACT6jB,iBAAkBD,IAEoC3jB,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAqkB,eAAA,SAAepK,GAAgB,IAAA/K,EAAA1P,KAC9B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GACwF,GAAhHpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,oBAAqB,gBAAiB,eAAgB,aAAarO,QACzGtL,EAAO,IAAIlB,EAAQ,EAAG,+GAGxB8P,EAAKnP,GAAGQ,WAAW,sBADR0Z,GACqCzZ,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASAskB,qBAAA,SAAqBrK,GAAgB,IAAA7K,EAAA5P,KACpC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3B8O,EAAKrP,GAAGQ,WAAW,6BADR0Z,GAC4CzZ,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAaDukB,kBAAA,SAAkBhC,EAAkB1I,EAAoB2K,EAAiBC,EAAWC,GAAqB,IAAApV,EAAA9P,KACvG,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACToW,WAAYD,EACZ8I,SAAUJ,EACVoC,QAASH,QAEc,IAAfE,GACRxlB,EAAEgE,IAAIQ,EAAM,eAAgBghB,GAE9BpV,EAAKvP,GAAGQ,WAAW,gCAAiCmD,EAAM+gB,GAAMjkB,KAAK,SAAAgB,GACnEnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD4kB,mBAAA,SAAmBrC,GAAgB,IAAA5S,EAAAnQ,KACjC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BqP,EAAK5P,GAAGQ,WAAW,6BAHR,CACToiB,SAAUJ,IAE2C/hB,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD6kB,qBAAA,SAAqBC,GAAkB,IAAA7U,EAAAzQ,KACrC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3B2P,EAAKlQ,GAAGQ,WAAW,yBAHR,CACTwkB,WAAYD,IAEqCtkB,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACmhB,CAAA,CAvbD,GCjBI5iB,EAAIC,QAAQ,UAEL6lB,eAAS,WASpB,SAAAA,EAAYjlB,GAAEP,KALdO,QAAE,EAMAP,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAAglB,EAAA/kB,UAm2BA,OAn2BAD,EASDilB,wBAAA,SAAwBvhB,GAAYvD,IAAAA,OAClC,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BH,EAAKJ,GAAGQ,WAAW,uBAAwBmD,GAAMlD,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDklB,2BAAA,SAA2B1L,EAAmB/V,OAAe1C,EAAAvB,KAC3D,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAHG,CACdmO,UAAWF,GAEiB/V,GAC9B1C,EAAKhB,GAAGQ,WAAW,0BAA2BmD,GAAMlD,KAAK,SAAAgB,GACvDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDmlB,yBAAA,WAAwBvjB,IAAAA,EACtBpC,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BsB,EAAK7B,GAAGQ,WAAW,2BADR,CAAE,GACwCC,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWDolB,YAAA,SAAYC,EAAsBC,EAA4B7hB,GAAe,IAAApB,EAAA7C,KAC3E,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAIIoD,EAAOxE,EAAEqM,MAJG,CACdga,SAAUF,EACVG,mBAAoBF,GAEQ7hB,GAC9BpB,EAAKtC,GAAGQ,WAAW,mBAAoBmD,GAAMlD,KAAK,SAAAgB,GAChDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDylB,eAAA,SAAetM,EAAoB1V,GAAgB,IAAAjB,EAAAhD,KACjD,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAHG,CACd8N,WAAYF,GAEgB1V,GAC9BjB,EAAKzC,GAAGQ,WAAW,uBAAwBmD,GAAMlD,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD0lB,aAAA,WAAY,IAAA9iB,EAAApD,KACV,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BsC,EAAK7C,GAAGQ,WAAW,uBADR,CAAE,GACoCC,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD2lB,kBAAA,SAAkB1L,GAAe,IAAA9T,EAAA3G,KAC/B,OAAW,IAAAY,QAAQ,SAACC,EAASC,GACgE,GAAxFpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,WAAY,eAAgB,eAAerO,QACjFtL,EAAO,IAAIlB,EAAQ,EAAG,4FAGxB+G,EAAKpG,GAAGQ,WAAW,sBADR0Z,GACqCzZ,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD4lB,sBAAA,SAAsB3L,GAAe1T,IAAAA,OACnC,OAAO,IAAInG,QAAQ,SAACC,EAASC,GACgE,GAAxFpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,WAAY,eAAgB,eAAerO,QACjFtL,EAAO,IAAIlB,EAAQ,EAAG,yFAGxBmH,EAAKxG,GAAGQ,WAAW,4BADR0Z,GAC2CzZ,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWD6lB,WAAA,SAAWC,EAAqBC,EAA4BtiB,GAAgBgD,IAAAA,EAC1EjH,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAIIoD,EAAOxE,EAAEqM,MAJG,CACdya,QAASF,EACTG,YAAaF,GAEetiB,GAC9BgD,EAAK1G,GAAGQ,WAAW,kBAAmBmD,GAAMlD,KAAK,SAAAgB,GAC/CnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDkmB,cAAA,SAAc9M,EAAmB3V,GAAgBmD,IAAAA,EAC/CpH,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAHG,CACd+N,UAAWF,GAEiB3V,GAC9BmD,EAAK7G,GAAGQ,WAAW,qBAAsBmD,GAAMlD,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDmmB,YAAA,WAAW1Z,IAAAA,EACTjN,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAE3BmM,EAAK1M,GAAGQ,WAAW,sBADR,CAAA,GACqCC,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD2e,QAAA,WAAO,IAAA/R,EAAApN,KACL,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3BsM,EAAK7M,GAAGQ,WAAW,mBADR,CAAE,GACgCC,KAAK,SAAAgB,GAChDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD0f,WAAA,SAAWzF,GAA4GnL,IAAAA,EACrHtP,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GACsF,GAA9GpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,cAAe,UAAW,UAAW,aAAc,cAAcrO,QACvGtL,EAAO,IAAIlB,EAAQ,EAAG,2GAGxB0P,EAAK/O,GAAGQ,WAAW,sBADR0Z,GACqCzZ,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDomB,eAAA,WAAcnX,IAAAA,OACZ,OAAO,IAAI7O,QAAQ,SAACC,EAASC,GAE3B2O,EAAKlP,GAAGQ,WAAW,6BADR,CAAA,GAC4CC,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDqmB,cAAA,SAAc5iB,GAAgByL,IAAAA,EAC5B1P,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GACvBpB,EAAEQ,IAAI+D,EAAS,UAAavE,EAAEQ,IAAI+D,EAAS,uBAC7CnD,EAAO,IAAIlB,EAAQ,EAAG,uDAGxB8P,EAAKnP,GAAGQ,WAAW,yBADRkD,GACwCjD,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD4e,YAAA,WAAWxP,IAAAA,EACT5P,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3B8O,EAAKrP,GAAGQ,WAAW,kBADR,CAAE,GAC+BC,KAAK,SAAAgB,GAC/CnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD6f,eAAA,SAAe5F,OAAuH3K,EAAA9P,KACpI,OAAO,IAAIY,QAAQ,SAACC,EAASC,GACiG,GAAzHpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,cAAe,cAAe,cAAe,YAAa,kBAAkBrO,QAClHtL,EAAO,IAAIlB,EAAQ,EAAG,sHAGxBkQ,EAAKvP,GAAGQ,WAAW,qBADR0Z,GACoCzZ,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDsmB,eAAA,WAAc,IAAA3W,EAAAnQ,KACZ,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BqP,EAAK5P,GAAGQ,WAAW,qBADR,CAAA,GACoCC,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAWDumB,cAAA,SAAcC,EAAwBC,EAAwBhjB,OAAgBwM,EAAAzQ,KAC5E,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAIIoD,EAAOxE,EAAEqM,MAJG,CACdmb,eAAgBF,EAChBG,eAAgBF,GAEYhjB,GAC9BwM,EAAKlQ,GAAGQ,WAAW,qBAAsBmD,GAAMlD,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD4mB,eAAA,WAAcnW,IAAAA,OACZ,OAAO,IAAIrQ,QAAQ,SAACC,EAASC,GAE3BmQ,EAAK1Q,GAAGQ,WAAW,yBADR,CAAE,GACsCC,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD6mB,YAAA,SAAYC,EAAsBC,EAAsBtjB,GAAgBqN,IAAAA,EACtEtR,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAIIoD,EAAOxE,EAAEqM,MAJG,CACdyb,aAAcF,EACdG,aAAcF,GAEctjB,GAC9BqN,EAAK/Q,GAAGQ,WAAW,mBAAoBmD,GAAMlD,KAAK,SAAAgB,GAChDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDknB,aAAA,WAAYjW,IAAAA,OACV,OAAO,IAAI7Q,QAAQ,SAACC,EAASC,GAE3B2Q,EAAKlR,GAAGQ,WAAW,uBADR,CAAA,GACsCC,KAAK,SAAAgB,GACpDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDmnB,WAAA,SAAWC,EAAmBC,EAAqBC,GAAoBlW,IAAAA,EACrE5R,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACT6jB,YAAaH,EACbI,YAAaH,QAES,IAAdC,GACRpoB,EAAEgE,IAAIQ,EAAM,cAAe4jB,GAE7BlW,EAAKrR,GAAGQ,WAAW,kBAAmBmD,GAAMlD,KAAK,SAAAgB,GAC/CnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDynB,cAAA,SAAcC,GAAiB,IAAApW,EAC7B9R,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3BgR,EAAKvR,GAAGQ,WAAW,qBAHR,CACTonB,UAAWD,IAEkClnB,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD4nB,YAAA,eAAWpW,EAAAhS,KACT,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3BkR,EAAKzR,GAAGQ,WAAW,sBADR,IACqCC,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYD6nB,uBAAA,SAAuBC,EAAmBC,EAAmBC,EAAiBC,GAA8BvW,IAAAA,OAC1G,OAAO,IAAItR,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTwkB,UAAWJ,EACXK,UAAWJ,EACXK,QAASJ,QAEuB,IAAxBC,GACR/oB,EAAEgE,IAAIQ,EAAM,wBAAyBukB,GAEvCvW,EAAK3R,GAAGQ,WAAW,8BAA+BmD,GAAMlD,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDqoB,wBAAA,WAAuBvW,IAAAA,OACrB,OAAO,IAAI1R,QAAQ,SAACC,EAASC,GAE3BwR,EAAK/R,GAAGQ,WAAW,kCADR,CAAA,GACiDC,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDsoB,qBAAA,WAAoB,IAAAnW,EAAA3S,KAClB,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3B6R,EAAKpS,GAAGQ,WAAW,+CADR,CAAA,GAC8DC,KAAK,SAAAgB,GAC5EnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDuoB,qBAAA,WAAoB,IAAA/V,EAAAhT,KAClB,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3BkS,EAAKzS,GAAGQ,WAAW,+CADR,IAC8DC,KAAK,SAAAgB,GAC5EnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDwoB,kBAAA,SAAkB/kB,GAAe,IAAAiP,EAAAlT,KAC/B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3BoS,EAAK3S,GAAGQ,WAAW,yBADRkD,GACwCjD,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDyoB,qBAAA,SAAqBC,EAA0BjlB,GAAgB,IAAAmP,EAAApT,KAC7D,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAHG,CACdod,iBAAkBD,GAEUjlB,GAC9BmP,EAAK7S,GAAGQ,WAAW,4BAA6BmD,GAAMlD,KAAK,SAAAgB,GACzDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD4oB,mBAAA,WAAkB,IAAA9V,EAAAtT,KAChB,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3BwS,EAAK/S,GAAGQ,WAAW,6BADR,CAAE,GAC0CC,KAAK,SAAAgB,GAC1DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUD6oB,UAAA,SAAUppB,EAAcgE,GAAe,IAAA0P,EAAA3T,KACrC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAAM9H,EAHH,CACdqlB,KAAMrpB,IAGR0T,EAAKpT,GAAGQ,WAAW,iBAAkBmD,GAAMlD,KAAK,SAAAgB,GAC9CnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD+oB,UAAA,WAAS,IAAAvV,EAAAhU,KACP,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BkT,EAAKzT,GAAGQ,WAAW,qBADR,CAAA,GACoCC,KAAK,SAAAgB,GAClDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDgpB,cAAA,SAAcC,EAAkBxlB,GAAe8S,IAAAA,OAC7C,OAAO,IAAInW,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAAM9H,EAHH,CACdylB,SAAUD,IAGZ1S,EAAKxW,GAAGQ,WAAW,iBAAkBmD,GAAMlD,KAAK,SAAAgB,GAC9CnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDmpB,eAAA,WAAc1S,IAAAA,OACZ,OAAO,IAAIrW,QAAQ,SAACC,EAASC,GAE3BmW,EAAK1W,GAAGQ,WAAW,yBADR,CAAE,GACsCC,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDopB,oBAAA,SAAoB3lB,GAAeud,IAAAA,OACjC,OAAO,IAAI5gB,QAAQ,SAACC,EAASC,GAE3B0gB,EAAKjhB,GAAGQ,WAAW,2BADRkD,GAC0CjD,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDqpB,uBAAA,SAAuBC,EAAwB7lB,GAAeyd,IAAAA,OAC5D,OAAO,IAAI9gB,QAAQ,SAACC,EAASC,GAC3B,IAGIoD,EAAOxE,EAAEqM,MAAM9H,EAHH,CACd8lB,eAAgBD,IAGlBpI,EAAKnhB,GAAGQ,WAAW,2BAA4BmD,GAAMlD,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDwpB,qBAAA,WAAoBnI,IAAAA,OAClB,OAAO,IAAIjhB,QAAQ,SAACC,EAASC,GAE3B+gB,EAAKthB,GAAGQ,WAAW,+BADR,CAAA,GAC8CC,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDypB,uBAAA,SAAuBhmB,GAAeimB,IAAAA,OACpC,OAAO,IAAItpB,QAAQ,SAACC,EAASC,GAE3BopB,EAAK3pB,GAAGQ,WAAW,8BADRkD,GAC6CjD,KAAK,SAAAgB,GAC3DnB,EAAQmB,EAAEd,MACZ,SAAS,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASA2pB,0BAAA,SAA0BC,GAA6BC,IAAAA,EACtDrqB,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAI3BupB,EAAK9pB,GAAGQ,WAAW,iCAHR,CACTupB,sBAAuBF,IAEkCppB,KAAK,SAAAgB,GAC9DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASA+pB,kCAAA,SAAkC/H,GAAc,IAAAgI,EAC/CxqB,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAI3B0pB,EAAKjqB,GAAGQ,WAAW,yCAHR,CACT4hB,OAAQH,IAEyDxhB,KAAK,SAAAgB,GACtEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAYAiqB,0BAAA,SAA0BL,EAA+B5H,EAAgBkI,EAAsBvN,OAAmBwN,EAAA3qB,KACjH,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACTomB,sBAAuBF,EACvBzH,OAAQH,EACRoI,aAAcF,QAEO,IAAbvN,GACRzd,EAAEgE,IAAIQ,EAAM,aAAciZ,GAE5BwN,EAAKpqB,GAAGQ,WAAW,iCAAkCmD,GAAMlD,KAAK,SAAAgB,GAC9DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDqqB,uBAAA,eAAsBC,EAAA9qB,KACpB,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3BgqB,EAAKvqB,GAAGQ,WAAW,kCADR,CAAA,GACiDC,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACqkB,CAAA,CA92BmB,GCDhB9lB,EAAIC,QAAQ,UAELorB,eASX,WAAA,SAAAA,EAAYxqB,GAAEP,KALdO,QAAE,EAMAP,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAAuqB,EAAAtqB,iBAAAD,EAWAwqB,OAAA,SAAO3Q,EAAoBnF,EAA0BjR,GAA0rB,IAAAtD,EAAAX,KAC9uB,YAD8C,IAApBkV,IAAAA,GAAoB,GACvC,IAAItU,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAO,CACToW,WAAYD,EACZ5B,SAAUvD,QAEQ,IAAVjR,IACRC,EAAOxE,EAAEqM,MAAM7H,EAAMD,IAEvBtD,EAAKJ,GAAGQ,WAAW,sBAAuBmD,GAAMlD,KAAK,SAAAgB,GACnDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUDyqB,OAAA,SAAOC,EAAqBhW,GAAwB,IAAA3T,EAAAvB,KAClD,YAD0B,IAAAkV,IAAAA,GAAoB,GACvC,IAAItU,QAAQ,SAACC,EAASC,GAK3BS,EAAKhB,GAAGQ,WAAW,yBAJR,CACToqB,YAAaD,EACbzS,SAAUvD,IAEuClU,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUD4qB,UAAA,SAAU/Q,EAAoBnF,GAAyB9S,IAAAA,EAAzB8S,KAC5B,YAD4BA,IAAAA,IAAAA,GAAoB,GACrC,IAAAtU,QAAQ,SAACC,EAASC,GAK3BsB,EAAK7B,GAAGQ,WAAW,qCAJR,CACTuZ,WAAYD,EACZ5B,SAAUvD,IAEmDlU,KAAK,SAAAgB,GAClEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD6qB,WAAA,SAAWhR,GAAkB,IAAAxX,EAAA7C,KAC3B,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAI3B+B,EAAKtC,GAAGQ,WAAW,+BAHR,CACTuZ,WAAYD,IAE2CrZ,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAUAkI,OAAA,SAAO+R,GAAgBzX,IAAAA,EACtBhD,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GACuK,GAA/LpB,EAAEqc,eAAerc,EAAEsc,OAAOvB,GAAU,CAAC,YAAa,cAAe,aAAc,WAAY,cAAe,YAAa,YAAa,aAAc,eAAgB,QAAS,YAAYrO,QACxLtL,EAAO,IAAIlB,EAAQ,EAAG,gLAGxBoD,EAAKzC,GAAGQ,WAAW,yBADR0Z,GACwCzZ,KAAK,SAAAgB,GACtDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAAC4pB,CAAA,CAlHD,GCZQprB,QAAQ,UAEL,IAAA2rB,eAAc,WASzB,SAAAA,EAAY/qB,GALZA,KAAAA,QAME,EAAAP,KAAKO,GAAKA,CACZ,CAAC,IAAAC,EAAA8qB,EAAA7qB,iBAAAD,EAQD+qB,gBAAA,WAAe5qB,IAAAA,EACbX,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BH,EAAKJ,GAAGQ,WAAW,oBADR,CAAA,GACmCC,KAAK,SAAAgB,GACjDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQDgrB,eAAA,SAAeC,GAA0B,IAAAlqB,EAAAvB,KACvC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BS,EAAKhB,GAAGQ,WAAW,2BADR,CAAC2qB,aAAcD,IAC2BzqB,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EAQD+S,aAAA,SAAapM,EAAmBwkB,EAA8BC,GAAgCxpB,IAAAA,EAA9DupB,KAC9B,YAD8BA,IAAAA,IAAAA,GAAwB,YAAMC,IAAAA,GAA4B,GACjF,IAAIhrB,QAAQ,SAACC,EAASC,GAE3BsB,EAAK7B,GAAGQ,WAAW,2BADR,CAACsG,WAAYF,EAAY0kB,gBAAiBF,EAAiBG,oBAAqBF,IACtC5qB,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDurB,eAAA,SAAeC,GAAiB,IAAAnpB,EAAA7C,KAE9B,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3B+B,EAAKtC,GAAGQ,WAAW,2BADRirB,GAC0ChrB,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDyrB,uBAAA,SAAuBC,GAA2BlpB,IAAAA,EAChDhD,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BkC,EAAKzC,GAAGQ,WAAW,2BADR,CAACorB,cAAeD,IAC0BlrB,KAAK,SAAAgB,GACxDnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD4rB,oBAAA,SAAoBF,GAA2B9oB,IAAAA,EAC7CpD,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAE3BsC,EAAK7C,GAAGQ,WAAW,yCADR,CAACorB,cAAeD,IACwClrB,KAAK,SAAAgB,GACtEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD6rB,gBAAA,SAAgBH,GAA2B,IAAAvlB,EAAA3G,KACzC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3B6F,EAAKpG,GAAGQ,WAAW,sCADR,CAACorB,cAAeD,IACqClrB,KAAK,SAAAgB,GACnEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASD8rB,qBAAA,SAAqBC,GAAmB,IAAAxlB,EAAA/G,KACtC,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3BiG,EAAKxG,GAAGQ,WAAW,mCADR,CAACyrB,aAAcD,IACmCvrB,KAAK,SAAAgB,GAChEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDisB,iBAAA,SAAiBF,GAAmB,IAAAtlB,EAAAjH,KAClC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BmG,EAAK1G,GAAGQ,WAAW,+BADR,CAACyrB,aAAcD,IAC+BvrB,KAAK,SAAAgB,GAC5DnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDksB,oBAAA,SAAoBH,GAAmBnlB,IAAAA,EACrCpH,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BsG,EAAK7G,GAAGQ,WAAW,kCADR,CAACyrB,aAAcD,IACkCvrB,KAAK,SAAAgB,GAC/DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDmsB,0BAAA,SAA0BJ,GAAmBtf,IAAAA,EAC3CjN,KAAA,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BmM,EAAK1M,GAAGQ,WAAW,+CADR,CAAC6rB,oBAAqBL,IACwCvrB,KAAK,SAAAgB,GAC5EnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDqsB,iBAAA,SAAiBN,GAAmBnf,IAAAA,OAClC,OAAO,IAAIxM,QAAQ,SAACC,EAASC,GAE3BsM,EAAK7M,GAAGQ,WAAW,gCADR,CAACyrB,aAAcD,IACgCvrB,KAAK,SAAAgB,GAC7DnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACX,EASDssB,8BAAA,SAA8BP,GAAmB,IAAAjd,EAAAtP,KAC/C,OAAO,IAAIY,QAAQ,SAACC,EAASC,GAE3BwO,EAAK/O,GAAGQ,WAAW,qCADR,CAACyrB,aAAcD,IACqCvrB,KAAK,SAAAgB,GAClEnB,EAAQmB,EAAEd,MACZ,GAAE,MAAO,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAACmqB,CAAA,CAnPwB,GCFrB5rB,EAAIC,QAAQ,UAELotB,eASX,WAAA,SAAAA,EAAYxsB,GALZA,KAAAA,QAME,EAAAP,KAAKO,GAAKA,CACZ,QAACwsB,EAAAtsB,UAWD8S,aAAA,SAAawC,EAA6BtC,EAAqBxP,GAA0HtD,IAAAA,OACvL,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAA2K,CAAE,OACxJ,IAAf6R,IACR7R,EAAK8R,YAAcD,GAErB7R,EAAK0P,eAAgC,IAAbH,GAA2BA,EAC9B,iBAAXxP,GACRvE,EAAEuW,MAAMhS,EAAS,SAAC+E,EAAGC,GACnB/E,EAAK+E,GAAKD,CACZ,GAEFrI,EAAKJ,GAAGQ,WAAW,mCAAoCmD,GAAMlD,KAAK,SAAAgB,GAChEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAAC4rB,CAAA,CA/BD,GCXQptB,QAAQ,UAElB,IAAaqtB,0BASX,SAAAA,EAAYzsB,GAAEP,KALdO,QAME,EAAAP,KAAKO,GAAKA,CACZ,CAkBC,OAlBAysB,EAAAvsB,UASD8S,aAAA,SAAa5D,OAAkBhP,EAAAX,KAC7B,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BH,EAAKJ,GAAGQ,WAAW,uCADR4O,GACsD3O,KAAK,SAAAgB,GACpEnB,EAAQmB,EAAEd,MACZ,GAAQ,MAAC,SAAAC,GACPL,EAAOK,EACT,EACF,EACF,EAAC6rB,CAAA,ICZGC,EAAQttB,QAAQ,SAChButB,EAAcvtB,QAAQ,eACtBD,EAAIC,QAAQ,UAcZwtB,0BA8CJ,SAAAA,EAAYC,EAAmBC,EAAmBC,QA1C1CF,cAAQ,EAAAptB,KAIRutB,WAIAC,EAAAA,KAAAA,kBAIAC,cAAQ,EAAAztB,KAIR0tB,cAIAC,EAAAA,KAAAA,wBAIAN,cAAQ,EAAArtB,KAMhB4tB,WAEQC,EAAAA,KAAAA,uBACAC,cAAQ,EAAA9tB,KACR+tB,qBASN,EAAA/tB,KAAKotB,SAAW,kBAChBptB,KAAK6tB,WAAa,CAACG,iBAAoB,EAAGC,YAAe,EAAGC,SAAY,EAAGC,aAAgB,EAAGrmB,eAAkB,EAAGsmB,aAAgB,GACnIpuB,KAAK8tB,SAAW,CAACO,eAAkB,EAAGC,gBAAmB,EAAGC,gBAAmB,EAAGC,mBAAsB,EAAGC,mBAAsB,EAAGC,cAAiB,EAAGC,cAAiB,EAAGC,kBAAqB,EAAGC,YAAe,EAAGC,QAAW,EAAGC,KAAQ,GAAIC,eAAkB,GAAIC,UAAa,GAAIC,UAAa,GAAIC,IAAO,GAAIC,MAAS,GAAIC,YAAe,GAAIC,cAAiB,GAAIC,cAAiB,GAAIC,UAAa,GAAIC,qBAAwB,GAAIC,SAAY,GAAIC,YAAe,GAAIC,kBAAqB,GAAIC,sBAAyB,GAAIC,mBAAsB,GAAIC,iBAAoB,GAAIC,SAAY,GAAIC,IAAO,GAAIC,mBAAsB,GAAIC,yBAA4B,IACtoBnwB,KAAKqtB,SAAW,CACdvV,KAAM,YACNsY,QAAQ,EACRC,QAAS,KACTC,eAAgB,MAElBtwB,KAAK+tB,gBAAkB,CAAC,UAAW,gBAAiB,gBAAiB,MAAO,SAAU,UAAW,OAAQ,uBACpF,IAAXX,GACRptB,KAAKuwB,UAAUnD,EAAUC,EAAUC,EAEvC,CAAC,IAAA9sB,EAAA2sB,EAAA1sB,iBAAAD,EAUD+vB,UAAA,SAAUnD,EAAmBC,EAAmBC,GAAoB,IAAA3sB,EAClEX,KAAsCA,KAAKotB,cAApB,IAAbA,EAA4CA,EAAkC,kBACxFptB,KAAKqtB,SAAW,CACdvV,KAAM,YACNsY,QAAQ,EACRC,QAAS,KACTC,eAAgB,WAGG,IAAXjD,GACR3tB,EAAEmF,QAAQwoB,EAAU,SAACrkB,EAAEC,QACQ,IAAnBtI,EAAK0sB,SAASpkB,KAAmBtI,EAAK0sB,SAASpkB,GAAKD,EAChE,EAEJ,EAACxI,EAcDO,WAAA,SAAW+W,EAAM5T,EAAO+gB,OAAU1jB,EAAAvB,KAChC,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IAAI0vB,EAAK,CAAc,OAEH,IAAVtsB,IACRssB,EAAGtsB,KAAO9D,KAAKC,UAAU6D,SAGP,IAAV+gB,GAAgC,iCAANnN,GAA+C,uBAANA,IAC3E0Y,EAAGvL,KAAOA,QAGc,IAAhB1jB,EAAKgsB,OAAwC,IAAdhsB,EAAKgsB,OAAqB,sDAANzV,GAAoE,uCAANA,IACzH0Y,EAAGC,MAAQlvB,EAAKgsB,OAQlB,IAAItpB,EAAU,CACZysB,SAAUnvB,EAAK6rB,SACfuD,KAAM,IACN7Y,KAAM,IAAMvW,EAAK8rB,SAASvV,KAAO,aAAeA,EAChD8Y,OAAQ,OACRC,QAAS,CACN,eAAgB,oCAChB,iBAAkBC,OAAOC,WAAW7D,EAAY7sB,UAAUmwB,KAE7DQ,QAAS,KAEP3qB,EAAU4mB,EAAM5mB,QAAQpC,EAAS,SAAChD,GAClC,IAAIgwB,EAAI,GACRhwB,EAASiwB,GAAG,QAAQ,SAAS/vB,GACzBuB,QAAQC,IAAIxB,EAAG,mBACfL,EAAO,IAAIlB,EAAQ,GAAI,iBAAkBuB,GAC7C,GAEAF,EAASiwB,GAAG,OAAO,SAASC,GACxBF,GAAKE,CACT,GAEAlwB,EAASiwB,GAAG,MAAM,WAChB,IAEE,GAA8C,OAD/B9wB,KAAKC,UAAU4wB,GAAO,iBACzBG,MAAM,2BAAkC,CAClD,IAAIC,EAAIjxB,KAAKkxB,MAAML,GAInB,QAAgB,IAANI,EAERvwB,EAAO,IAAIlB,EAAQ,GAAI,kDAClB,QAAgB,IAANyxB,QAAwC,IAAZA,EAAInwB,MAC/C,OAAOmwB,EAAI/oB,QACT,OACExH,EAAO,IAAIlB,EAAQ,EAAG,QAASyxB,IAC/B,MACF,OACEvwB,EAAO,IAAIlB,EAAQ,EAAG,eAAgByxB,IACtC,MACF,OACEvwB,EAAO,IAAIlB,EAAQ,EAAG,qBAAsByxB,IAC5C,MAEF,QACExwB,EAAQwwB,QAIZvwB,EAAO,IAAIlB,EAAQ,EAAG,iBAAkB,CAACqE,QAASA,EAASstB,WAAYf,EAAIgB,oBAAqBH,IAEnG,MACCvwB,EAAO,IAAIlB,EAAQ,EAAG,+CAAgD,CAACqB,SAAUgwB,IAEpF,CAAC,MAAO9vB,GACHA,aAAaswB,aACf/uB,QAAQC,IAAI,2BACZ7B,EAAO,IAAIlB,EAAQ,EAAG,sBAAuB,CAACguB,MAAOzsB,OAErDuB,QAAQC,IAAI,gEACZ7B,EAAO,IAAIlB,EAAQ,EAAG,wBAEzB,CACH,EACJ,GACAyG,EAAQqrB,MAAMxE,EAAY7sB,UAAUmwB,IACpCnqB,EAAQsrB,KACV,EACF,EAACnxB,EAQDoxB,aAAA,SAAapE,EAAeC,OAAgBrrB,EAAApC,KAC1C,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAC3B,IACIgX,EAAO,sCACS,mBAAjB1V,EAAKgrB,WACNtV,EAAO,sDAET1V,EAAKrB,WAAW+W,EALL,CAAE+Z,UAAUrE,EAAOsE,SAASrE,IAKXzsB,KAAK,SAACC,GAK9BmB,EAAKorB,MAAQA,EACbprB,EAAKqrB,SAAWA,EAChBrrB,EAAKmrB,MAAQtsB,EAASC,MAAMqsB,MAC5B1sB,GAAQ,EAKZ,GAAQ,MAAC,SAAA+sB,GACP9sB,EAAO8sB,EACT,EACF,EACF,EAACptB,EASDuxB,yBAAA,SAAyBvE,EAAeE,EAAkBC,EAAqB0C,GAAgB,IAAAxtB,EAAA7C,KAQ7F,OAPAA,KAAKwtB,MAAQA,EACbxtB,KAAK0tB,SAAWA,EAChB1tB,KAAK2tB,YAAcA,OACC,IAAV0C,IACRA,EAAU,SAGD,IAAAzvB,QAAQ,SAACC,EAASC,GAI3B+B,EAAK9B,WAHM,8CACA,CAAE8wB,UAAUhvB,EAAK2qB,MAAOwE,SAAUnvB,EAAK6qB,SAAUuE,YAAapvB,EAAK8qB,YAAauE,QAAS7B,IAExErvB,KAAK,SAACC,QACH,IAAlBA,EAASqH,QAAwBrH,EAASqH,OAAO,SAG1B,IAAjBrH,EAASC,YAAqD,IAAvBD,EAASC,MAAMqsB,OACrE1qB,EAAK0qB,MAAQtsB,EAASC,MAAMqsB,MAC5B1sB,GAAQ,IAGRA,GAAQ,GAEZ,GAAQ,MAAC,SAAA+sB,GACP,MAAMA,CACR,EACF,EACF,EAACptB,EAQD2xB,cAAA,SAAc1B,EAAc/sB,GAAY,IAAAV,EACtChD,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAM3BkC,EAAKjC,WADM,kCADA,CAAEwsB,MAAOkD,IAEQzvB,KAAK,SAACC,GAC7BA,EAASqH,OAAO,EAEjBzH,GAAQ,IAEL6C,IACDV,EAAKuqB,MAAQkD,GAEf5vB,EAAQI,EAASC,OAErB,GAAQ,MAAC,SAAA0sB,GACP,MAAMA,CACR,EACF,EACF,EAACptB,EAOD4xB,SAAA,SAAS3B,GACP,MAAU,IAAPA,GAAoB,MAAPA,IACdzwB,KAAKutB,MAAQkD,GACN,EAIX,EAACjwB,EAOD6xB,SAAA,WACE,MAAe,IAAZryB,KAAKutB,OAAyB,MAAZvtB,KAAKutB,YAGZA,KAEhB,EAAC/sB,EAOD8xB,YAAA,SAAYC,GAAoB,IAAAnvB,EAC9BpD,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAG3BsC,EAAKrC,WADM,2BADA,CAAEyxB,WAAYD,IAEGvxB,KAAK,SAACC,GAG9BJ,SAF2B,IAAlBI,EAASqH,QAAwBrH,EAASqH,OAAO,GAM9D,GAAQ,MAAC,SAAAslB,GACP,MAAMA,CACR,EACF,EACF,EAACptB,EAQDiyB,wBAAA,WAAuB,IAAA9rB,EACrB3G,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAE3B6F,EAAK5F,WADM,4CACW,CAAA,GAAIC,KAAK,SAACC,GAC9BJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EAMDkyB,mBAAA,eAAkB3rB,EAAA/G,KAChB,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAE3BiG,EAAKhG,WADM,iCACW,CAAA,GAAIC,KAAK,SAACC,GAC9BJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EAMDmyB,mBAAA,WAAkB1rB,IAAAA,OAChB,OAAO,IAAIrG,QAAQ,SAACC,EAASC,GAE3BmG,EAAKlG,WADM,kCACW,IAAIC,KAAK,SAACC,GAC9BJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EASDoyB,iBAAA,SAAiBC,EAAcC,GAAe1rB,IAAAA,OAC5C,OAAO,IAAIxG,QAAQ,SAACC,EAASC,GAM3BsG,EAAKrG,WADM,mCAJA,CACTgyB,KAAQF,EACRG,QAAWF,IAGe9xB,KAAK,SAACC,GAChCJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EAUDyyB,uBAAA,SAAuBC,OAAiBjmB,EAAAjN,KACtC,OAAW,IAAAY,QAAQ,SAACC,EAASC,QACY,IAA7BmM,EAAK4gB,WAAWqF,IACxBpyB,EAAO,IAAIlB,EAAQ,EAAG,qDAAsD,CAACgC,SAAYsxB,EAAW3wB,UAAa0K,EAAK4gB,cAMxH5gB,EAAKlM,WADM,+CAHA,CACToyB,UAAalmB,EAAK4gB,WAAWqF,KAGHlyB,KAAK,SAACC,GAChCJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EAUD4yB,wBAAA,SAAwBvF,GAAyBzgB,IAAAA,OAC/C,OAAO,IAAIxM,QAAQ,SAACC,EAASC,GACzB,IAAIoD,EAAsC,CACxCmvB,WAAY,IAEhB3zB,EAAEmF,QAAQgpB,EAAY,SAAC7kB,QACU,IAArBoE,EAAKygB,WAAW7kB,GACxBlI,EAAO,IAAIlB,EAAQ,EAAG,qDAAsD,CAACgC,SAAYoH,EAAGzG,UAAa6K,EAAKygB,cAE9G3pB,EAAKmvB,WAAWruB,KAAKoI,EAAKygB,WAAW7kB,GAEzC,GAEAoE,EAAKrM,WADM,gDACWmD,GAAMlD,KAAK,SAACC,GAChC,IAAIqyB,EAAc,CAAE,EAEhBC,EAAiB7zB,EAAE8zB,OAAOpmB,EAAKygB,YACnCnuB,EAAEmF,QAAQ5D,EAAU,SAACwyB,EAASC,QACQ,IAA1BH,EAAeE,GACvB3yB,EAAO,IAAIlB,EAAQ,EAAG,wEAA0E,CAAC+zB,sBAAyBF,EAASlxB,UAAa6K,EAAKygB,cAGrJyF,EAAIC,EAAeE,IAAYC,CAEnC,GACA7yB,EAAQyyB,EACV,EACF,EACF,EAAC9yB,EAUDozB,qBAAA,SAAqBC,GAAevkB,IAAAA,OAClC,OAAO,IAAI1O,QAAQ,SAACC,EAASC,QACQ,IAAzBwO,EAAKwe,SAAS+F,IACtB/yB,EAAO,IAAIlB,EAAQ,EAAG,mDAAoD,CAACgC,SAAYiyB,EAAStxB,UAAa+M,EAAKwe,YAMpHxe,EAAKvO,WADM,6CAHA,CACT+yB,QAAWxkB,EAAKwe,SAAS+F,KAGC7yB,KAAK,SAACC,GAChCJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EAUDuzB,sBAAA,SAAsBjG,GAAuB,IAAAre,EAC3CzP,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAC3B,IAAIoD,EAAoC,CACtC8vB,SAAU,IAEZt0B,EAAEmF,QAAQipB,EAAU,SAAC9kB,QACU,IAAnByG,EAAKqe,SAAS9kB,GACtBlI,EAAO,IAAIlB,EAAQ,EAAG,mDAAoD,CAACgC,SAAYoH,EAAGzG,UAAakN,EAAKqe,YAE5G5pB,EAAK8vB,SAAShvB,KAAKyK,EAAKqe,SAAS9kB,GAErC,GAEAyG,EAAK1O,WADM,8CACWmD,GAAMlD,KAAK,SAACC,GAChC,IAAIqyB,EAAc,CAAE,EAEhBW,EAAev0B,EAAE8zB,OAAO/jB,EAAKqe,UACjCpuB,EAAEmF,QAAQ5D,EAASC,MAAO,SAACgzB,EAAUR,QACA,IAAzBO,EAAaC,GACrBpzB,EAAO,IAAIlB,EAAQ,EAAG,sEAAwE,CAACgC,SAAYsyB,EAAU3xB,UAAa0xB,KAGlIX,EAAIW,EAAaC,IAAaR,CAElC,GACA7yB,EAAQyyB,EACV,EACF,EACF,EAAC9yB,EAaD2zB,sBAAA,SAAsBC,GAAuB,IAAA1kB,EAC3C1P,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAK3B4O,EAAK3O,WAJM,8CAC6B,CACtCszB,SAAUD,IAEgBpzB,KAAK,SAACC,GAChCJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EASD8zB,qBAAA,SAAqB9G,EAAgBC,GAAiB,IAAA7d,EACpD5P,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAM3B8O,EAAK7O,WALM,8CACA,CACT8wB,eAA2B,IAARrE,EAAuBA,EAAO5d,EAAK4d,MACtDsE,cAA8B,IAAXrE,EAA0BA,EAAW7d,EAAK6d,WAEnCzsB,KAAK,SAACC,GAChCJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EAOD+zB,QAAA,WAAO,IAAAzkB,EACL9P,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAG3BgP,EAAK/O,WAFM,iCACA,CAAA,GACiBC,KAAK,SAACC,GAChCJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EAQDoG,KAAA,SAAK4mB,OAAcrd,EAAAnQ,KACjB,OAAW,IAAAY,QAAQ,SAACC,EAASC,GAG3BqP,EAAKpP,WAFM,8BACA,CAAE8wB,eAA2B,IAARrE,EAAuBA,EAAOrd,EAAKqd,QACvCxsB,KAAK,SAACC,GAChCJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACV,EAODg0B,QAAA,WAAO,IAAA/jB,EACLzQ,KAAA,WAAWY,QAAQ,SAACC,EAASC,GAG3B2P,EAAK1P,WAFM,iCACA,CAAA,GACiBC,KAAK,SAACC,GAChCJ,EAAQI,EAASC,MACnB,EACF,EACF,EAACisB,CAAA,IAGG5sB,EAAK,IAAI4sB,EAETsH,EAAU,IAAIn0B,EAAQC,GACtBm0B,EAAgB,IAAIpxB,EAAc/C,GAClCo0B,EAAgB,IAAIrtB,EAAa/G,GACjCmI,EAAS,IAAIgB,EAAOnJ,GACpBq0B,EAAM,IAAInvB,EAAIlF,GACd8F,EAAU,IAAIwD,EAAQtJ,GACtBgG,EAAa,IAAIwD,EAAWxJ,GAC5Bs0B,EAAY,IAAI/qB,EAAUvJ,GAC1Bu0B,EAAY,IAAIvb,EAAUhZ,GAEhCu0B,EAAU5wB,KAAO,IAAIwW,EAASna,GAC9Bu0B,EAAUpb,UAAY,IAAIuD,EAAc1c,GACxCu0B,EAAUrb,SAAW,IAAI6I,EAAa/hB,GACtCu0B,EAAUxnB,MAAQ,IAAIkY,EAAUjlB,GAChCu0B,EAAUvnB,QAAU,IAAIoQ,EAASpd,EAAI,YACrCu0B,EAAUtb,MAAQ,IAAIuR,EAAWxqB,GAEjCs0B,EAAUvnB,MAAQ,IAAIge,EAAe/qB,GACrCs0B,EAAUtnB,QAAU,IAAIoQ,EAASpd,EAAI,aAErCgG,EAAW+G,MAAQ,IAAIyf,EAAgBxsB,GAEvC8F,EAAQiH,MAAQ,IAAI0f,EAAazsB,GACjC8F,EAAQkH,QAAU,IAAIoQ,EAASpd,EAAI"}