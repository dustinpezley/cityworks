{"version":3,"file":"index.umd.js","sources":["../src/error.ts","../src/general.ts","../src/activity_link.ts","../src/gis.ts","../src/message_queue.ts","../src/search.ts","../src/request_admin.ts","../src/comments.ts","../src/request.ts","../src/inspection_admin.ts","../src/inspection.ts","../src/workorder_admin.ts","../src/workorder.ts","../src/case_data.ts","../src/case_financial.ts","../src/case_workflow.ts","../src/case_admin.ts","../src/case_assets.ts","../src/case.ts","../src/cityworks.ts"],"sourcesContent":["const _ = require('lodash')\n\n/**\n * CWErrorInt interface definition for implementation by CWError\n *\n * `{name: string, code: number, message: string, info?: string}`\n *\n */\nexport interface CWErrorInt {\n  name: string\n  code: number\n  message: string\n  info?: string\n}\n\n/**\n * CWError implements a custom error class for this codebase with additional information\n *\n */\nexport class CWError implements CWErrorInt {\n  /**\n   * Just statically set to \"Cityworks Exception\" for now\n   */\n  name: string\n  /**\n   * Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   */\n  code: number\n  /**\n   * The error message\n   */\n  message: string\n  /**\n   * Object stuffed with any other information one wishes to include in the thrown error\n   */\n  info?: string\n\n  /**\n   * CWError implements a custom error class for this codebase with additional information\n   *\n   * @param {number} code - Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   * @param {string} message - The error message\n   * @param {Object} info - Object stuffed with any other information one wishes to include in the thrown error\n   * @return {Object} Returns instance of CWError object\n   */\n  constructor(code:number, message:string, info?:object) {\n    this.name = \"Cityworks Exception\"\n    this.code = code\n    this.message = message\n    if(typeof(info) !== 'undefined') {\n      if(_.has(info, 'Message'))\n        this.message = _.get(info, 'Message')\n      this.info = JSON.stringify(info)\n    }\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n/**\n * A plugin that contains \"general\" methods for a Cityworks install\n */\nexport class General {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get notifications for currently authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of available notifications\n   */\n  notifications() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('General/ActivityNotification/User', {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Find out if the current user is watching a particular activity (case, task, null [as a string])\n   *\n   * @param {string} activityType - which activity type the following ID will be for.\n   * @param {number} activityId - activity Case or CaseTask (task instance) ID to check\n   * @return {Object} Returns Promise object that represents a boolean indicating the currently authenticated user is watching the provided activity\n   */\n  amIWatching(activityType, activityId: number) {\n    return new Promise((resolve, reject) => {\n      let aType = {'null': 0, 'case': 1, 'task': 2}\n      if(typeof(aType[activityType])=='undefined') {\n        // reject with error\n        reject(new CWError(1, \"Activity type provided does not exist.\", {provided: activityType, potential_activities: aType}))\n      } else {\n        let data = {\"ActivityType\": aType[activityType], \"ActivityId\": activityId}\n        this.cw.runRequest('General/ActivityNotification/UserWatching', data).then(r => {\n          // console.log(r, 'response')\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get CwMetatData by Type and CwSid\n   *\n   * @param {Array<number>} Ids\n   * @param {string} TableName - INSPECTION, REQUEST, WORKORDER require View permission on the activities\n   * @return {Object} Returns Promise object that represents a\n   */\n  getActivityMetadataByIds(ids: Array<number>, table: string) {\n    return new Promise((resolve, reject) => {\n      let tables = [\"INSPECTION\", \"REQUEST\", \"WORKORDER\"]\n      if(_.indexOf(tables, table)==-1) {\n        reject(new CWError(2, 'TableName provided does not exist or is mispelled.', {'provided': table, 'available':tables}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"TableName\": table\n      }\n      this.cw.runRequest('General/CwMetaData/ByTableNameSids', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get recent history for authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of RecentActivity objects\n   */\n  getHistory() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      this.cw.runRequest('Ams/Search/RecentActivity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities\n   *\n   * @param {Array<number>} ObjectIds\n   * @return {Object} Returns Promise object that represents a\n   */\n  getWOEntityCostSummary(object_ids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"ObjectIds\": object_ids\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities selected through a search definition\n   *\n   * @param {number} SearchId - Search Definition Id\n   * @return {Object} Returns Promise object that represents a\n   */\n  searchWOEntityCostSummary(search_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"SearchId\": search_id\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntitySearch', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\n/**\n * ActivityLink interface for ActivityLinks\n *\n */\nexport interface ActivityLink {\n  linkTypes: ReversibleMap<string, number>\n  activityTypes: ReversibleMap<string, number>\n  cw: any\n}\n\n/**\n * ActivityLinks implements the activity link functions via using the ActivityLink interface\n *\n */\nexport class ActivityLinks implements ActivityLink {\n  /**\n   * Activity types to map string to number for internal use. Activity types available are:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   */\n  activityTypes: ReversibleMap<string, number>\n  /**\n   * Link types to map string to number for internal use. Link types available are:\n   *\n   *      \"null\", \"parent\", \"related\"\n   */\n  linkTypes: ReversibleMap<string, number>\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"null\", 0)\n    this.activityTypes.set(\"case\", 1)\n    this.activityTypes.set(\"inspection\", 2)\n    this.activityTypes.set(\"request\", 3)\n    this.activityTypes.set(\"workorder\", 4)\n    this.activityTypes.set(\"wipcase\", 5)\n\n    this.linkTypes = new ReversibleMap<string, number>()\n    this.linkTypes.set(\"null\", 0)\n    this.linkTypes.set(\"parent\", 1)\n    this.linkTypes.set(\"related\", 2)\n  }\n\n  /**\n   * Create a new activity link between two items.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  add(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(3, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Add'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the links for a particular node type by ID.\n   *\n   * @param {string} type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {Array<number>} sids - Array of numeric (S)IDs you wish to get of the specified type\n   * @return {Object} Returns Promise object that represents a collection\n   */\n  get(type: string, sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(type)) {\n        reject(new CWError(4, 'Activity type not found.', {'provided': type, 'options':this.activityTypes}))\n      }\n      let data = {\n        ActivityType: this.activityTypes.get(type),\n        ActivitySids: sids\n      }\n      let _this = this\n      let path = 'General/ActivityLink/ByActivitySids'\n      this.cw.runRequest(path, data).then((response: any) => {\n        let return_data = new Array()\n        _.forEach(response.Value, (link, key) => {\n          link.DestType = _this.activityTypes.get(link.DestType)\n          link.SourceType = _this.activityTypes.get(link.SourceType)\n          link.LinkType = _this.linkTypes.get(link.LinkType)\n          return_data.push(link)\n        })\n        resolve(return_data)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Clone a current activity link.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to clone a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to clone a link between SID as destination and a particular source\n   * @return {Object} Returns Promise object that represents a\n   */\n  clone(source_type: string, source_sid: number, destination_type: string, destination_sid: number) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      let data = {\n        SourceActivityType: this.activityTypes.get(source_type),\n        SourceActivitySid: source_sid,\n        DestinationActivityType: this.activityTypes.get(destination_type),\n        DestinationActivitySid: destination_sid\n      }\n      let path = 'General/ActivityLink/CloneByActivitySid'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete an activity link by ID\n   *\n   * @param {number} activity_link_id - The ID of the activity link one wishes to delete\n   * @return {Object} Returns Promise object that represents a\n   */\n  delete(activity_link_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        ActivityLinkId: activity_link_id\n      }\n      let path = 'General/ActivityLink/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Remove a link by specifying everything.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  remove(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(1, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Remove'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Gis {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get gis service configuration for user, group, domain, or service id\n   *\n   * @param {string} [whichType] - domain, group, mapservice, or user\n   * @param {number} [whichId] - domain, group, mapservice, or user Id\n   * @param {number} [getGisData] - If true, check for feature server JSON data, default is true\n   * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  getConfig(whichType, whichId, getGisData: boolean = true, context: Array<string> = []) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain'\n      whichType = whichType.toLowerCase()\n      let data: {DomainId?: any, GroupId?: any, MapServiceId?: any, UserId?: any, GetGisData: boolean, Security: Array<string>}\n      switch(whichType) {\n        case 'domain':\n          data = {DomainId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'group':\n          data = {GroupId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'mapservice':\n          data = {MapServiceId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'user':\n          data = {UserId:whichId, GetGisData: getGisData, Security: context}\n          break\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n    * Get domain gis services\n    *\n    * @param {number} domainId - The mobile map cache Id to download\n    * @return {Object} Returns Promise object that represents an Object with the domain's default GIS services\n    */\n  domain(domainId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain'\n      let data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Download mobile map cache\n     *\n     * @param {number} cacheId - The mobile map cache Id to download\n     * @return {Object} Returns Promise object that represents a streaming download (?)\n     */\n  downloadMobile(cacheId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/DownloadMobileMapCache'\n      let data = {\n        MobileMapCacheId: cacheId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get initial extent for user\n   *\n   * @return {Object} Returns Promise object that represents ... (?)\n   */\n  initialExtent() {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InitialExtent'\n      let data = {};\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get service request gis services\n   *\n   * @param {number} requestId - The work order to check against.\n   * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n   * @return {Object} Returns Promise object that represents an Object with the specified request's entit(y|ies)\n   */\n  request(requestId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/ServiceRequestConfiguration'\n      let data = {\n        RequestId: requestId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get inspection gis services\n     *\n     * @param {number} inspectionId - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified inspection's entity\n     */\n  inspection(inspectionId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InspectionConfiguration'\n      let data = {\n        InspectionId: inspectionId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get workorder gis services\n     *\n     * @param {number} workOrderSid - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified work order's entit(y|ies)\n     */\n  workOrder(workOrderSid, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/WorkOrderConfiguration'\n      let data = {\n        WorkOrderSid: workOrderSid,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get service request gis services\n     *\n     * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n     * @param {boolean} [allDomains] services assigned to any domain the user belongs to, default is true\n     * @param {boolean} [allGroups] services assigned to any groups the user belongs to regardless of domain, default is true\n     * @param {boolean} [getGisData] If true, check for feature server JSON data, default is true\n     * @return {Object} Returns Promise object that represents an Object with the user's GIS services\n     */\n  user(context: Array<string> = [], allDomains: boolean = true, allGroups: boolean = true, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/User'\n      let data = {\n        AllDomains: allDomains,\n        AllGroups: allGroups,\n        GetGisData: getGisData,\n        Security: context\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Geocode server info by ServerId\n   *\n   * @param {number} ServiceId\n   * @return {Object} Returns Promise object that represents an object describing the provided Geocoder service configuration\n   */\n   // Gis/GeoCode/GeocodeServer\n\n   /**\n      * Get currently selected entities from the Cityworks install's session for your user\n      * @return {Object} Returns Promise object that represents an Object with the currently-selected entities\n      */\n   selectedEntities() {\n     return new Promise((resolve, reject) => {\n       let path = 'General/AppData/SelectedEntities'\n       this.cw.runRequest(path, {}).then((response: any) => {\n         resolve(response.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n      * Get attributes available for provided entity\n      *\n      * @param {string} entityType - The entity type to describe\n      * @return {Object} Returns Promise object that represents a collection of attribute description objects\n      */\n   getEntityAttributes(entityType:string) {\n     return new Promise((resolve, reject) => {\n       let data = {EntityType: entityType}\n       let path = 'AMS/Entity/Attributes'\n       this.cw.runRequest(path, data).then((response: any) => {\n         resolve(response.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class MessageQueue {\n  /**\n   * @hidden\n   */\n  cw: any\n  /**\n   * Statuses -\n   * Pending: 0,\n   * Processing: 1,\n   * Complete: 2,\n   * Failed: 3\n   */\n  status: Object = {\n    Pending: 0,\n    Processing: 1,\n    Complete: 2,\n    Failed: 3\n  }\n  /**\n   * Hook Types -\n   * Unknown: 0,\n   * ActivityUpdate: 1,\n   * Email: 2,\n   * WebHook: 3\n   */\n  hook_types: Object = {\n    Unknown: 0,\n    ActivityUpdate: 1,\n    Email: 2,\n    WebHook: 3\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Process Webhook MessageQueue records by MessageQueueId\n   *\n   * @param {Array<number>} [ids] - List of MessageQueueId values\n   * @param {boolean} [delete_successful] - automatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  processMessages(ids: Array<number>, delete_successful: boolean = false) {\n    return new Promise((resolve, reject) => {\n      let data = { Ids: ids, Delete: delete_successful}\n      let path = 'General/WebHookEvent/ProcessMessages'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status -\n   * @param {number} [maxcount] - Maximum number returned. Defaults to 15\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  get(ids: Array<number>, status: string, maxcount: number = 15) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(1, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"MaxCount\": typeof(maxcount)!='undefined' ? maxcount : 15,\n        \"Status\": this.status[status]\n      }\n      let path = 'General/MessageQueue/ByIds'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status - automatically delete messages that complete with successful execution, default is false\n   * @param {number} [hours_to_keep] - utomatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  delete(ids: Array<number>, status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // PreferencesList<GlobalPreference>\n  // Base response type: CoreResponseBase\n  // Get a list of message queue preferences\n  // This method has no parameters\n  preferences() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      let path = 'General/MessageQueue/Preferences'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  search(parameters, max_results?: number) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(max_results)!=='undefined') {\n        data.MaxResults = max_results\n      }\n      let allowed_params = ['Id', 'HookId', 'HookType', 'Result', 'DateCreatedBegin', 'DateCreatedEnd', 'DateUpdatedBegin', 'DateUpdatedEnd']\n      let disallowed_params = ['Status', 'MaxResults']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(4, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n      let path = 'General/MessageQueue/Search'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update queue message\n   *\n   * @param {Object} parameters - Provide allowed parameters:\n   *\n   *      {\n   *        HookId: number,\n   *        Id: number,\n   *        Packet: string,\n   *        Result: string,\n   *        Status: string, // Available options: Pending, Processing, Complete, Failed\n   *        HookType: string // Available options: Unknown, ActivityUpdate, Email, WebHook\n   *      }\n   *\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  update(parameters: any) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.hook_types, 'available':this.hook_types}))\n      } else if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])!=='undefined') {\n        data.HookType = this.hook_types[parameters.hook_types]\n      }\n      let allowed_params = ['Id', 'HookId', 'Packet', 'Result']\n      let disallowed_params = ['Status', 'HookType']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(5, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n\n      let path = 'General/MessageQueue/Update'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  updateMessageStatus(ids: number[], status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/UpdateMessageStatus'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  getWebooks(hook_ids) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"HookIds\": hook_ids\n      }\n      let path = 'General/MessageQueue/WebHooks'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Search {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Search Types: Null, Request, WorkOrder, Inspection, Contract, Permit, GIS, PermitTask, PermitAddress, InspCommon, Case, WorkOrderEntity, StoreTransaction, Requisition, Material, WorkActivity, MaterialLeaf, WoTemplate, Unknown, Employee, MessageQueue, Analytics, TokenState, AssetCalculationResult, Equipment, CustomerAccount, InspTemplate, ProblemLeaf, AssetSplitRecord, PavementInsp, TvInspection, Projects\n   */\n  searchTypes: Object = {\n    \"Null\": 0,\n    \"Request\": 1,\n    \"WorkOrder\": 2,\n    \"Inspection\": 3,\n    \"Contract\": 4,\n    \"Permit\": 5,\n    \"GIS\": 6,\n    \"PermitTask\": 7,\n    \"PermitAddress\": 8,\n    \"InspCommon\": 9,\n    \"Case\": 10,\n    \"WorkOrderEntity\": 11,\n    \"StoreTransaction\": 12,\n    \"Requisition\": 13,\n    \"Material\": 14,\n    \"WorkActivity\": 15,\n    \"MaterialLeaf\": 16,\n    \"WoTemplate\": 17,\n    \"Unknown\": 18,\n    \"Employee\": 19,\n    \"MessageQueue\": 20,\n    \"Analytics\": 21,\n    \"TokenState\": 22,\n    \"AssetCalculationResult\": 23,\n    \"Equipment\": 24,\n    \"CustomerAccount\": 25,\n    \"InspTemplate\": 26,\n    \"ProblemLeaf\": 27,\n    \"AssetSplitRecord\": 28,\n    \"PavementInsp\": 29,\n    \"TvInspection\": 30,\n    \"Projects\": 31\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Do a \"quick\" search for any string (an ID is best)\n   *\n   * @category Quick Search\n   * @param {string} text - text to search the system for\n   * @return {Object} Returns Promise object that represents a collection of the currently authenticated user's notifications\n   */\n  quick(text: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"QuickSearchText\": text,\n      }\n      this.cw.runRequest('General/QuickSearch/QuickSearch', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Execute a saved search\n   *\n   * @category Search\n   * @param {number} searchId - SearchId to execute\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @return {Object} Returns Promise object that represents a list of Objects\n   */\n  execute(searchId: number, options?: {EmployeeSid?: number, ExcludeEmptyXY?: boolean, Extent?: Object, Frequency?: boolean, IdsOnly?: boolean, IncludeSearchOrder?: boolean, MaxResults?: number, ResultFields?: Array<string>, TotalOnly?: boolean}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchId: searchId\n      }\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/Execute', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of the saved searches by search type and specific entity types OR employeeSid/domainId. You cannot search for saved searches by both specific entity type AND employeeSid/domainId.\n   *\n   * @category Search\n   * @param {string} searchType - Get the saved searches for a particular type\n   * @param {Array<string>} [applyToEntities] - Restrict GIS searches to specified entity types\n   * @param {number} [employeeSid] - The employee SID to retrieve the searches as\n   * @param {number} [domainId] - The domain ID of the domain to search\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionName\n   */\n  getSaved(searchType: string, applyToEntities?: Array<string>, employeeSid?: number, domainId?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(2, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      } else if(typeof(applyToEntities)!='undefined' && applyToEntities!=null && applyToEntities.length>0 && (typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined')) {\n        reject(new CWError(3, 'You cannot specify both applyToEntities AND employeeSid/domainId'))\n      }\n      var data = {}\n      var savedEndpoint = ''\n      if(typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined') {\n        savedEndpoint = 'SavedByType'\n        if(typeof(employeeSid)!='undefined' && employeeSid!=null) {\n          _.set(data, 'EmployeeSid', employeeSid)\n        }\n        if(typeof(domainId)!='undefined' && domainId!=null) {\n          _.set(data, 'DomainId', domainId)\n        }\n      } else {\n        if(searchType=='Case') {\n          savedEndpoint = 'PllSavedSaved'\n        } else {\n          savedEndpoint = searchType + 'Saved'\n        }\n        if(typeof(applyToEntities)!='undefined' && applyToEntities!=null) {\n          _.set(data, 'ApplyToEntities', applyToEntities)\n        }\n      }\n      this.cw.runRequest('Ams/Search/'+savedEndpoint, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list display fields for a Search Type\n   *\n   * @category Search Options\n   * @param {string} searchType - Restrict GIS searches to specified entity types\n   * @return {Object} Returns Promise object that represents a collection of SearchDisplayFields\n   */\n  displayFields(searchType: string) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      }\n      var data = {\n        searchType: _.get(this.searchTypes, searchType)\n      }\n      this.cw.runRequest('Ams/Search/DisplayFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list search types\n   *\n   * @category Search Options\n   * @return {Object} Returns Promise object that represents a collection of SearchTypeInfo objects\n   */\n  types() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Ams/Search/Types', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Enable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  enableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: true,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Disable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  disableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: false,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a search definition\n   *\n   * @category Search Definitions\n   * @param {number} searchId - SearchId to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a SearchDefinition object\n   */\n  getDefinition(searchId: number, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchId: searchId\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinition objects\n   */\n  getDefinitions(searchIds: Array<number>, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definition names\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionNames\n   */\n  getDefinitionNames(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DefinitionNames', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a list (dictionary) of search IDs and deletion success boolean\n   */\n  deleteDefinitions(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DeleteDefinitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Save a search definition\n   *\n   * @category Search Definitions\n   * @param {string} searchFor - Name of type to search for from searchTypes\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @param {number} searchId - SearchId to update. Defaults to \"0\" which is \"Create new saved search\"\n   * @return {Object} Returns Promise object that represents a SearchDefinitionName object\n   */\n  saveDefinition(searchFor: string, options?: Object, searchId: number = 0) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchFor)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchFor, 'available':this.searchTypes}))\n      }\n      var data = {\n        SearchFor: _.get(this.searchTypes, searchFor),\n        SearchId: searchId\n      }\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/SaveDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class RequestAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get service request templates\n   *\n   * @category Requests Admin\n   * @param {Object} searchData - search data\n   * @return {Object} Returns Promise that represents a collection of all Service Request Templates\n   */\n  getTemplates(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\n\n/**\n * A plugin that contains \"comments\" methods\n */\nexport class Comments {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Storage of all potential activity types which comments can be attached to: Unknown, Request, WorkOrder, CaTask, CaObject, CaCorrection, Project, Contract\n   */\n  activityTypes: ReversibleMap<string, number>\n\n  /**\n   * Storage of object's active activityType\n   */\n  currentActivityType: string\n\n  /**\n   * @hidden\n   */\n  constructor(cw, activityType) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"Unknown\", 0)\n    this.activityTypes.set(\"Request\", 1)\n    this.activityTypes.set(\"WorkOrder\", 2)\n    this.activityTypes.set(\"CaTask\", 3)\n    this.activityTypes.set(\"CaObject\", 4)\n    this.activityTypes.set(\"CaCorrection\", 5)\n    this.activityTypes.set(\"Project\", 6)\n    this.activityTypes.set(\"Contract\", 7)\n\n    if(!this.activityTypes.has(activityType)) {\n      throw new CWError(1, 'Activity type not found.', {'provided': activityType, 'options':this.activityTypes})\n    }\n    this.currentActivityType = activityType\n  }\n\n  /**\n   * Add a comment\n   *\n   * @param {number} sid - The SID of the activity to which the comment should be attached\n   * @param {string} comment - The text for the comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  add(sid: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        ActivitySid: sid,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Add', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a comment\n   *\n   * @param {number} id - The ID of the comment which should be updated\n   * @param {string} comment - The new text for the updated comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  update(id: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        CommentId: id,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Update', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get comments for activity items\n   *\n   * @param {Array<number>} sids - The options SIDs to get comments for.\n   * @return {Object} Returns Promise object that represents a collection of available comments\n   */\n  get(sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(typeof(sids)!='undefined' && sids !=null) {\n        var data = {\n          ActivitySids: sids,\n          ActivityType: this.activityTypes.get(this.currentActivityType),\n        }\n        this.cw.runRequest('Ams/Comment/ByActivitySids', data).then((response: any) => {\n          if(sids.length==1) {\n            resolve(response.Value[sids[0]])\n          } else {\n            resolve(response.Value)\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * Get pre-defined comments for activityTypes\n   *\n   * @param {number} problemSid - The ProblemSid if currentActivityType is (Service) Request\n   * @param {string} [category] - Only applies to WorkOrder and ServiceRequest category comments.\n   * @return {Object} Returns Promise object that represents a collection of available comment templates.\n   */\n  getPredefined(problemSid?: number, category?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(this.currentActivityType=='Request') {\n        _.set(data, 'ProblemSid', problemSid)\n      }\n      if(typeof(category)!='undefined' && (this.currentActivityType=='Request' || this.currentActivityType=='WorkOrder')) {\n        _.set(data, 'Category', category)\n      }\n      _.set(data, 'ActivityType', this.activityTypes.get(this.currentActivityType))\n      this.cw.runRequest('Ams/Comment/PredefinedComments', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // /**\n  //  * Get pre-set comments for activityTypes\n  //  *\n  //  * @param {Array<string>} [activityTypes] - Provide a list of activity types. Defaults to current activity type.\n  //  * @param {Array<string>} [categories] - Only applies to WorkOrder and ServiceRequest category comments.\n  //  * @return {Object} Returns Promise object that represents a collection of available comment templates.\n  //  */\n  // getForActivityList(activityTypes?: Array<string>, categories?: Array<string>) {\n  //   return new Promise((resolve, reject) => {\n  //     var data = {}\n  //     if(typeof(activityTypes)!='undefined') {\n  //       // TODO: iterate through it and output numeric types\n  //       _.set(data, 'ActivityTypes', activityTypes)\n  //     } else {\n  //       _.set(data, 'ActivityTypes', [this.activityTypes.get(this.currentActivityType)])\n  //     }\n  //     if(typeof(categories)!='undefined') {\n  //       _.set(data, 'Categories', categories)\n  //     }\n  //     console.log(data, 'data')\n  //     this.cw.runRequest('Ams/Comment/ByActivityTypes', data).then((response: any) => {\n  //       resolve(response.Value)\n  //     }).catch(e => {\n  //      reject(e)\n  //    })\n  //   })\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { RequestAdmin } from './request_admin'\nimport { Comments } from './comments'\n\nexport class Request {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Request Administration methods\n   */\n  admin?: Object\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new RequestAdmin(cw)\n    this.comment = new Comments(cw, 'Request')\n  }\n\n  /**\n   * Create new requests\n   *\n   * @category Requests\n   * @param {Object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created request\n   */\n  create(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'ProblemSid')) {\n        reject(new CWError(2, 'ProblemSid must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Create', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a request\n   *\n   * @category Requests\n   * @param {object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  update(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'RequestId')) {\n        reject(new CWError(3, 'RequestId must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Update', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Move a request's point\n   *\n   * @category Requests\n   * @param {number} requestId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(requestId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        RequestId: requestId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'Z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/ServiceRequest/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Change a request's problem code\n   *\n   * @category Requests\n   * @param {number} requestId - The request ID to change\n   * @param {number} problemSid - The request's new ProblemSID\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  changeProblem(requestId: number, problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId,\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeProblem', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a request by ID\n   *\n   * @category Requests\n   * @param {number} requestId - The ID of the request to retrieve\n   * @return {Object} Returns Promise that represents an object describing the request\n   */\n  getById(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get requests by array of IDs\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The request IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the requests\n   */\n  getByIds(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific request\n   *\n   * @category Requests\n   * @param {number} requestId - A Request ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {RequestId: requestId}\n      this.cw.runRequest('Ams/ServiceRequest/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom fields for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFields(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/CustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Change custom field category for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @param {number} categoryId - The new custom field grouping/category which should be assigned to the provided requests\n   * @return {Object} Returns Promise that represents a collection of requests\n   */\n  changeCustomFieldCategory(requestIds: Array<number>, categoryId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n        CategoryId: categoryId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeCustomFieldCategory', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to cancel the matched requests\n   * @param {string} [cancelReason] - A reason for cancelling the request(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the request was cancelled\n   * @return {Object} Returns object that represents a collection of requests\n   */\n   cancel(requestIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {RequestIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { RequestIds: requestIds }\n       if(typeof(cancelReason)!=='undefined')\n         _.set(data, 'CancelReason', cancelReason);\n       if(typeof(dateCancelled)!=='undefined')\n         _.set(data, 'DateCancelled', dateCancelled);\n       this.cw.runRequest('Ams/ServiceRequest/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to close the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    close(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed requests\n     *\n     * @category Requests\n     * @param {Array<number>} requestIds - An array of the IDs to reopen the matched requests\n     * @return {Object} Returns object that represents a collection of requests\n     */\n     reopen(requestIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           RequestIds: requestIds\n         }\n         this.cw.runRequest('Ams/ServiceRequest/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to delete the matched requests\n   * @return {Object} Returns object that represents a collection of request Ids which have been deleted\n   */\n   delete(requestIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestIds: requestIds\n       }\n       this.cw.runRequest('Ams/ServiceRequest/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Search for requests\n    *\n    * @category Request Search\n    * @param {Object} searchData - The search information to retrieve matched requests, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents an Array of the matching request IDs\n    */\n   search(searchData: Object) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       this.cw.runRequest('Ams/ServiceRequest/Search', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the records on the basis of RequestId, only populates RequestId, Description, ProblemCode properties\n    *\n    * @category Request Object Search\n    * @param {string} requestId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents a collection of the matching (limited) request objects\n    */\n   searchObject(requestId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestId: requestId\n       }\n       this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Requests\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n    */\n   createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         _.set(data, 'EnableEurl', enableEurl)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequest/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get a list of problem nodes for a domain\n   *\n   * @category Request Categorization\n   * @param {number} domainId - The domain ID for which to retrieve problem nodes.\n   * @param {boolean} viewOnly - Return only view only problem nodes. Defaults to false.\n   * @param {Object} [displayMode] - Object that should contain two properties if you provide it: DisplayTextMode: string (C = Code, D = Description, CD = Code ~ Description). DisplayTextDelimeter: string, only impacts CD display text mode.\n   * @param {boolean} includeCancelled - Return only cancelled problem nodes as well. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of problem node objects.\n   */\n  getProblemNodes(domainId: number, viewOnly: boolean = false, displayMode?: Object, includeCancelled: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainId: domainId,\n        IncludeCancelled: includeCancelled,\n        ViewOnly: viewOnly\n      }\n      if(typeof displayMode != 'undefined' && displayMode !== null && _.has(displayMode, 'DisplayTextMode')) {\n        _.set(data, 'DisplayTextMode', _.get(displayMode, 'DisplayTextMode'))\n        if(_.get(displayMode, 'DisplayTextMode')=='CD' && _.has(displayMode, 'DisplayTextDelimeter')) {\n          _.set(data, 'DisplayTextDelimeter', _.get(displayMode, 'DisplayTextDelimeter'))\n        }\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemNodes', data).then(r => {\n        // console.log(_.filter(r, function(o) { return !o.Cancel; }), 'filter');\n        // console.log(_.some(r.Value, ['Cancel', true]), 'some');\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes\n   *\n   * @category Request Options\n   * @param {boolean} forPublicOnly - Return only publicly-available service requests. Defaults to false.\n   * @param {boolean} onlyActiveTemplates - Return only active templates. Defaults to true.\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblems(forPublicOnly: boolean = false, onlyActiveTemplates: boolean = true, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ForPublicOnly: forPublicOnly,\n        OnlyActiveTemplates: onlyActiveTemplates\n      }\n      if(typeof domainIds != 'undefined') {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Problems', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes by keywords\n   *\n   * @category Request Options\n   * @param {string} keywords - Keywords to search for potential problem codes\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblemsByKeywords(keywords: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Keywords: keywords\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemsByKeywords', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of a problem code's priorities\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return priorities for given problemSid\n   * @return {Object} Returns Promise that represents an Array of priorities\n   */\n  getPriorities(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Priorities', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field templates for problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose template custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFieldTemplate(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/TemplateCustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the questions and answer options for a problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose Q&A should be returned\n   * @return {Object} Returns Promise that represents a collection of questions and answer settings\n   */\n  getQASettings(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get problem leaf (template) by Sid\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return problem leaf for given problemSid\n   * @return {Object} Returns Promise that represents an Object that describes the problem leaf (template)\n   */\n  getProblemLeaf(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemLeafBySid', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of default statuses\n   *\n   * @category Request Options\n   * @param {Array<number>} domainIds - List of domains to return default statuses for\n   * @return {Object} Returns Promise that represents an Array of statuses.\n   */\n  getStatuses(domainIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainIds: domainIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/DefaultStatus', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of possible Employee values\n   *\n   * @category Request Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only DispatchTo & SubmitTo.\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of Employee options.\n   */\n  getEmployeeLists(listType: string, domainId: number) {\n    return new Promise((resolve, reject) => {\n      // TODO: make a default domain option on the CW object for cases like this.\n      var data = {\n        DomainId: domainId\n      }\n      if(!_.includes(['DispatchTo', 'SubmitTo'], listType)) {\n        reject(new CWError(2, 'listType must be either SubmitTo or DispatchTo.', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/ServiceRequest/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get a list of possible DispatchTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of dispatchTo options.\n   */\n  getDispatchTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('DispatchTo', domainId);\n  }\n\n  /**\n   * Get a list of possible SubmitTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible submitTo values for\n   * @return {Object} Returns Promise that represents an Array of submitTo options.\n   */\n  getSubmitTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('SubmitTo', domainId);\n  }\n\n  /**\n   * Get street codes\n   *\n   * @category Request Options\n   * @return {Object} Returns Promise that represents an Array of Street Codes.\n   */\n  streetCodes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/ServiceRequest/AllStreetCode', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates\n   *\n   * @category Request Templates\n   * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n   * @param {Date} [minimumDateModified] - ?\n   * @param {Date} [maximumDateModified] - ?\n   * @return {Object} Returns Promise that represents\n   */\n   getTemplatesById(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         ProblemSids: null\n       }\n       if(typeof minimumDateModified != 'undefined') {\n         _.set(data, 'MinimumDateModified', minimumDateModified)\n       }\n       if(typeof maximumDateModified != 'undefined') {\n         _.set(data, 'MaximumDateModified', maximumDateModified)\n       }\n\n       this.cw.runRequest('Ams/ServiceRequestTemplate/ByIds', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Request Templates\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CWMetadata\n    */\n   createTemplateSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequestTemplate/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the questions and answers for a(many) request template(s)\n    *\n    * @category Request Templates\n    * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n    * @return {Object} Returns Promise that represents a collection of ProblemQAs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemQA\n    */\n    getTemplateQAs(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: null\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/QA', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get a list of template id results for a provided search parameters\n     *\n     * @category Request Templates\n     * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n     * @return {Object} Returns Promise that represents a list of template IDs.\n     */\n    searchTemplates(searchData: Object) {\n      return new Promise((resolve, reject) => {\n        var data = searchData\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Search', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get request templates (problem leaf[s])\n     *\n     * @category Request Templates\n     * @param {Array<number>} [templateIds] - Array of specific template IDs to retrieve\n     * @param {number} canCreate - If true, only return templates the user can create, ignored if false or null, default is false\n     * @param {boolean} includeInactiveIf - If true, returns inactive templates, default is false\n     * @param {Date} [minimumDateModified] - ?\n     * @param {Date} [maximumDateModified] - ?\n     * @return {Object} Returns Promise that represents a collection of Problem Leafs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemLeaf\n     */\n    getTemplates(templateIds: Array<number>, canCreate: boolean = false, includeInactiveIf: boolean = false, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          CanCreate: canCreate,\n          IncludeInactiveIf: includeInactiveIf\n        }\n        if(typeof templateIds != 'undefined') {\n          _.set(data, 'TemplateIds', templateIds)\n        }\n        if(typeof minimumDateModified != 'undefined') {\n          _.set(data, 'MinimumDateModified', minimumDateModified)\n        }\n        if(typeof maximumDateModified != 'undefined') {\n          _.set(data, 'MaximumDateModified', maximumDateModified)\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get work order templates that are associated to this request template type\n     *\n     * @category Request Templates\n     * @param {Array<number>} problemSids - An array list of problemSids to retrieve Problem WO templates for\n     * @param {boolean} includeInactiveIf - Include inactive work order templates, default is false\n     * @return {Object} Returns Promise that represents a collection of Problem WO Templates. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemWOTemplate\n     */\n    getWOTemplates(problemSids: Array<number>, includeInactive: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: problemSids,\n          IncludeInactive: includeInactive\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/WorkOrderTemplates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class InspectionAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all Inspections matching the provided parameters\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { InspectionAdmin } from './inspection_admin'\n\nexport class Inspection {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Inspection Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new InspectionAdmin(cw)\n  }\n\n  /**\n   * Create new inspection\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created inspection\n   */\n  create(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n        reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n      } else {\n        this.cw.runRequest('Ams/Inspection/Create', insp_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create inspections from an array of entities\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents a collection of objects describing the newly-created inspections\n   */\n   createFromEntities(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromEntities', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a parent inspection (TODO: what parent!?)\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromParent(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // see if it's just InspectionId\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'InspectionId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromParent', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a service request\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromServiceRequest(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'RequestId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromServiceRequest', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a work order\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromWorkOrder(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // Are they  both actually required?!?!\n      // WorkOrderId\n      // WorkOrderSid ...do with only SID first then check\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'WorkOrderSid')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromWorkOrder', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Update an inspection\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated inspection\n   */\n  update(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      return new Promise((resolve, reject) => {\n        if(!_.has(insp_data, 'InspectionId')) {\n          reject(new CWError(1, 'InspectionId must be provided.', {'provided': insp_data}))\n        } else {\n          this.cw.runRequest('Ams/Inspection/Update', insp_data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Get an inspection by ID\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The inspection ID to retrieve\n   * @return {Object} Returns Promise that represents an object describing the inspection\n   */\n  getById(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/Inspection/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections by array of IDs\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - The inspection IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the inspections\n   */\n  getByIds(inspectionIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionIds: inspectionIds\n      }\n      this.cw.runRequest('Ams/Inspection/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to cancel the matched inspections\n   * @param {string} [cancelReason] - A reason for cancelling the inspection(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the inspection was cancelled\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   cancel(inspectionIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {InspectionIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { InspectionIds: inspectionIds }\n       if(typeof(cancelReason)!=='undefined') {\n         data.CancelReason = cancelReason\n       }\n       if(typeof(dateCancelled)!=='undefined') {\n         data.DateCancelled = dateCancelled\n       }\n       this.cw.runRequest('Ams/Inspection/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel inspections\n    *\n    * @category Requests\n    * @param {Array<number>} inspectionIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close inspections\n    *\n    * @category Inspections\n    * @param {Array<number>} inspectionIds - An array of the IDs to close the matched inspections\n    * @return {Object} Returns object that represents a collection of inspections\n    */\n    close(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Close', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Reopen closed inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   reopen(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Reopen', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Delete inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to delete the matched inspections\n   * @return {Object} Returns object that represents a collection of inspection Ids which have been deleted\n   */\n   delete(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Delete', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Search for inspections\n   *\n   * @category Inspection Search\n   * @param {Object} searchData - The search information to retrieve matched inspections, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents an array of the matching inspection IDs\n   */\n  search(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/Inspection/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the records on the basis of inspectionId, only populates InspectionId, InspTemplateName, and Location properties\n   *\n   * @category Inspection Object Search\n   * @param {string} inspectionId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents a collection of the matching (limited) inspection objects\n   */\n  searchObject(inspectionId: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get list of statuses\n   *\n   * @category Inspection Options\n   * @return {Object} Returns object that represents an array of all possible statuses for an Inspection\n   */\n  statuses() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Statuses', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection submit to list\n   *\n   * @category Inspection Options\n   * @param {boolean} [includeInactiveEmployees] - whether to include inactive employees in the return. Defaults to false.\n   * @param {boolean} [domainIds] - which domains to include in the return, default to All domains\n   * @return {Object} Returns object that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  submitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {IncludeInactiveEmployees?: boolean, DomainIds?: Array<number>} = {}\n      if(includeInactiveEmployees) {\n        data.IncludeInactiveEmployees = true\n      }\n      if(typeof(domainIds)!=='undefined') {\n        data.DomainIds = domainIds\n      }\n      this.cw.runRequest('Ams/Inspection/SubmitTos', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Add an entity to an existing inspection\n   * This method requires an Entity/Asset to be specified. You can either specify the Entity Type and its UID or a WorkOrderEntityBase Object.\n   *\n   * @category Inspections\n   * @param {Object} entity - Either of two attribute combinations are valid: entityType & entityUid OR Entity as a fully-inflated WorkOrderEntity (WorkOrderEntityBase) object.\n   * @param {number} inspectionId - An Inspection ID to attach the entity/asset to.\n   * @param {boolean} updateXY - Provide a boolean to whether the inspection's X/Y coordinates should be updated. Default is true.\n   * @param {Object} facility - Add Facility_Id for the Facility Identifier and Level_id for the Facility Level Identifier. Defaults to empty so that no facility is specified.\n   * @return {Object} Returns object that represents an object which describes an Inspection Entity\n   */\n  connectAsset(entity: {EntityType?: string, EntityUid?: string, Entity?: Object}, inspectionId: number, updateXY: boolean = true, facility: {Facility_Id?: string, Level_Id?: string} = {}) {\n   return new Promise((resolve, reject) => {\n     var data: {InspectionId: number, EntityType?: string, EntityUid?: string, Entity?: Object, Facility_Id?: string, Level_Id?: string} = {\n       InspectionId: inspectionId\n     }\n     if(_.has(entity, 'EntityType') && _.has(entity, 'EntityUid')) {\n       data.EntityType = entity.EntityType\n       data.EntityUid = entity.EntityUid\n     } else if(_.has(entity, 'Entity')) {\n       data.Entity = entity.Entity\n     } else {\n       // Throw error, no entity/asset provided\n     }\n     if(_.has(facility, 'Facility_Id')) {\n       data.Facility_Id = facility.Facility_Id\n     }\n     if(_.has(facility, 'Level_Id')) {\n       data.Level_Id = facility.Level_Id\n     }\n     this.cw.runRequest('Ams/Inspection/AddEntity', data).then(r => {\n       resolve(r.Value)\n     }).catch(e => {\n       // 4 NotAuthorizedToUpdateInspection\n       // 9 InvalidActivityMapLogicXY\n       // 21 ErrorUnknownEntityType\n       // 30 InvalidField\n       // 60 WarningItemNotFound\n       // 68 MoveInvalidCityworksWkid\n       reject(e)\n     })\n   })\n  }\n\n  /**\n   * Get the answers for inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspections - An Array of one or more Inspection IDs\n   * @return {Object} Returns Promise that represents a collection of Inspection Answers\n   */\n  getAnswers(inspections: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {InspectionId?: number, InspectionIds?: Array<number>} = {}\n      if(inspections.length==0) {\n        data.InspectionId = inspections[0]\n      } else {\n        data.InspectionIds = inspections\n      }\n      this.cw.runRequest('Ams/Inspection/Answers', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific Inspection\n   *\n   * @category Inspections\n   * @param {number} inspectionId - An Inspection ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {InspectionId: inspectionId}\n      this.cw.runRequest('Ams/Inspection/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n   *\n   * @category Inspections\n   * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @param {number} [searchName] - What to name your search (if it should be saved)\n   * @param {number} [sharedWithin] - What group or domain to share the search to.\n   * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n   * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      if(_.isString(searchName)) {\n        _.set(data, 'SearchName', searchName)\n        _.set(data, 'SaveDefinition', saveDefinition)\n        _.set(data, 'EnableEurl', enableEurl)\n        // not sure how to handle sharedWithin...\n        // _.set(data, 'SharedWithin', sharedWithin)\n      }\n      this.cw.runRequest('Ams/Inspection/CreateSearchDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle from\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents ... I have no idea what this endpoint does\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle intervals\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle intervals available\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle types\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle types available\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get districts\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents an Array of the districts\n   */\n  getDistricts() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Districts', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Inspection Employee lists. Abstraction done here, though only one employee list field, AFAIK.\n   *\n   * @category Inspection Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only SubmitTos.\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        IncludeInactiveEmployees: includeInactiveEmployees\n      }\n      if(typeof(domainIds)!='undefined' && domainIds!=null) {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      if(listType!='SubmitTos') {\n        reject(new CWError(2, 'listType must be \"SubmitTos\".', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/Inspection/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get SubmitTo list\n   *\n   * @category WorkOrder Options\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n  }\n\n  /**\n   * Move inspection by InspectionId. Must provide well known id (WKID) or well known text (WKT)\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The ID of the inspection that should be moved\n   * @param {number} x - The X coordinate for the move\n   * @param {number} y - The Y coordinate for the move\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - the optional Z coordinate for the move\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(inspectionId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(3, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        InspectionId: inspectionId,\n        X: x,\n        Y: y\n      }\n      if(typeof z != 'undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Ams/Inspection/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /////\n  // INSPECTION TEMPLATES\n  /////\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all Inspections matching the provided parameters\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates by IDs\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspectionIds - An array of the IDs to retrieve the matched inspections\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns object that represents an object describing the inspection\n   */\n  getTemplatesByIds(inspTemplateIds: Array<number>, options?: {MaximumDateModified?: Date, MinimumDateModified?: Date}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types for inspection template(s)\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents an array of Entity Types\n   */\n   getTemplateEntityTypes(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/EntityTypes', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n  * Get the questions and answers for inspection template(s)\n  *\n  * @category Inspection Templates\n  * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n  * @return {Object} Returns object that represents an array which contains a list of InspQuestionPanel for the template\n  */\n  getQA(inspTemplateIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection template question conditions\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of template IDs to get the matched inspection template Question conditions for\n   * @return {Object} Returns object that represents an array which contains a dictionary of InspQuestion IDs to configs\n   */\n   getQConditions(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/QuestionConditions', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  // Attachments\n\n  // AddInspectionAttachment InspAttachment\n  // Add an inspection attachment\n  // Request Parameters\n  // Int32 AttachmentType V15_4\n  // String Comments\n  // String Filename\n  // Int32 req InspectionId\n  // Ams/Attachments/AddInspectionAttachment?data={\n  //   \"Comments\": null,\n  //   \"Filename\": null,\n  //   \"InspectionId\": null,\n  //   \"AttachmentType\": null\n  // }\n\n  /**\n   * Delete inspection attachments\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} attachmentIds - An array of inspection attachment IDs to delete\n   * @return {Object} Returns object that represents a boolean for action resolution\n   */\n   deleteAttachments(attachmentIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentIds: attachmentIds\n       }\n       this.cw.runRequest('Ams/Attachments/DeleteInspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Download an inspection attachment\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - ID of an inspection attachment to download\n   * @return {Object} Returns object that represents a file stream\n   */\n   downloadAttachment(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/DownloadInspectionAttachment', data).then(r => {\n         // TODO, pass file through // resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - An attachment ID to get info for\n   * @return {Object} Returns object that represents an object that describes the matched inspection attachment\n   */\n   getAttachmentById(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachmentById', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} inspectionIds - An array of inspection IDs to get attachments for\n   * @return {Object} Returns object that represents a collection of attachments from the matched inspections\n   */\n   getAttachments(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class WorkOrderAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get entity groups\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all entity groups\n   */\n  getEntityGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Ams/Entity/Groups', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all GIS Work Order entity types\n   */\n  getEntityTypes(entityGroups:Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data = {EntityGroups: entityGroups}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get work order templates\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all Work Order templates\n   */\n  getTemplates(entityType:string, includeComments:boolean=true, includeInstructions:boolean=true) {\n    return new Promise((resolve, reject) => {\n      var data = {EntityType: entityType, IncludeComments: includeComments, IncludeInstructions: includeInstructions}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Work Order template\n   *\n   * @category WorkOrders Admin\n   * @param {Object} wOTemplate - Obect that describes the Work Order Template\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  updateTemplate(wOTemplate:Object) {\n    let valid_fields = [\"AcctNum\", \"AutoCreateTask\", \"Cancel\", \"Comments\", \"CopyCustomFieldVal\", \"CycleFrom\", \"CycleIncludeWeekends\", \"CycleIntervalNum\", \"CycleIntervalUnit\", \"CycleType\", \"DaysToComplete\", \"DefaultProject\", \"DefaultProjectSid\", \"Description\", \"Effort\", \"ExpenseType\", \"Instructions\", \"IsReactive\", \"MaintScore\", \"NumDaysBefore\", \"Priority\",   \"RequireAssetOnClose\", \"Shop\", \"Stage\", \"SubmitToEmployeeSid\", \"SupervisorEmployeeSid\", \"UnitsAccompDesc\", \"UnitsAccompDescLock\", \"WOCategory\", \"WOCustFieldCatId\", \"WOPrintTmpt\", \"WOTemplateId\", \"WorkMonth\"]\n    return new Promise((resolve, reject) => {\n      var data = wOTemplate\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get template group rights for provided WorkOrder Templates\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateGroupRights(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => { // TODO: Update this URL\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get template activity services for provided WorkOrder Templates\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateActivity(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplateActivityService', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get fields which will be updated when provided WorkOrder Template instance closes\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getUpdateFields(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplateUpdateFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get equipment\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateEquipment(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateEquipment', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get labor\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateLabor(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateLabor', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get material\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateMaterial(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateMaterial', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get map layer fields configured for provided work order template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateMapLayerFields(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WorkOrderTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WorkOrderTemplateMapLayerFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks configured for provided work order template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all tasks on work order template\n   */\n  getTemplateTasks(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Tasks/ByWorkOrderTemplate', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections connected to provided work order template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all tasks on work order template\n   */\n  getRelatedInspectionTemplates(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateInspections', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { WorkOrderAdmin } from './workorder_admin'\nimport { Comments } from './comments'\n\nexport class WorkOrder {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * WorkOrder Administration methods\n   */\n  admin: Object\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin = new WorkOrderAdmin(cw)\n    this.comment = new Comments(cw, 'WorkOrder')\n  }\n\n  /**\n   * Create new workorders, including linkin to Requests & Inspections (optionally)\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {Array<number>} [inspectionIds] - The inspection IDs which the workorder should be linked to.\n   * @param {Array<number>} [requestIds] - The inspection IDs which the workorder should be linked to.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  create(wo_data: Object, inspectionIds?: Array<number>, requestIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(typeof inspectionIds != 'undefined' && inspectionIds != null && !_.has(data, 'InspectionIds')) {\n          _.set(data, 'InspectionIds', inspectionIds);\n        }\n        if(typeof requestIds != 'undefined' && requestIds != null && !_.has(data, 'RequestIds')) {\n          _.set(data, 'RequestIds', requestIds);\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create new workorder linked to parent workorder\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  createFromParent(wo_data: Object, workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a WorkOrder\n   *\n   * @category WorkOrders\n   * @param {object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  update(wo_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WorkOrderSid') && !_.has(wo_data, 'WorkOrderId')) {\n        reject(new CWError(3, 'WorkOrderId or WorkOrderSid must be provided.', {'provided': wo_data}))\n      } else {\n        this.cw.runRequest('Ams/WorkOrder/Update', wo_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Combine WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<string>} fromWorkOrderIds - The workorder IDs which should be combined.\n   * @param {string} toWorkOrderId - The work order ID for the single work order that should contain the info/entities from the other work orders\n   * @param {boolean} cancelCombinedWorkOrders - If the work orders combined into the single should then be canceled, default is true.\n   * @return {Object} Returns object that represents a collection of WorkOrders\n   */\n   combine(fromWorkOrderIds: Array<string>, toWorkOrderId: string, cancelCombinedWorkOrders: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         CancelCombinedWorkOrders: cancelCombinedWorkOrders,\n         ToWorkOrderId: toWorkOrderId,\n         FromWorkOrderIds: fromWorkOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Combine', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  /**\n   * Move a workorder's point\n   *\n   * @category WorkOrders\n   * @param {string} workOrderId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include WKT or WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  move(workOrderId: string, x: number, y: number, projection: Object, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        WorkOrderId: workOrderId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/WorkOrder/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Get a workorder by S/ID\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The S/ID of the workorder to retrieve. # for SID, string for ID.\n   * @param {boolean} s - Whether first argument is an SID (true) or an ID (false). Defaults to true.\n   * @return {Object} Returns Promise that represents an object describing the workorder\n   */\n  getById(workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n        var path = 'Ams/WorkOrder/ById';\n      } else {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n        var path = 'Ams/WorkOrder/BySid';\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get workorders by an array of S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getByIds(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(101, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/ByIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/BySids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get instructions by an array of workorders S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents an array of String, String describing the workorder instructions\n   */\n  getInstructions(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(102, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderSids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get the audit log for a specific workorder\n   *\n   * @category WorkOrder\n   * @param {number} workOrderSId - A WorkOrder S/ID to get the audit log for. SID is default.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(workOrderSId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n      } else if(_.isNumber(workOrderSId)) {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'Workorder S/IDs was not provided.', {'workorderSId': workOrderSId}))\n      }\n      this.cw.runRequest('Ams/WorkOrder/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field values for the workorder S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. #s for SID, strings for ID.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getCustomFieldValues(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      var path = 'Ams/WorkOrder/CustomFields';\n      if(_.isString(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderIds', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFields';\n      } else if(_.isNumber(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderSids', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFieldsByWorkOrderSids';\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSIds': workOrderSIds}))\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entities on an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs which the entities should be added to. # for SID, string for ID.\n   * @param {boolean} getGisData - Query gis to populate Entity.Attributes with current gis data. Defaults to true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n  getEntities(workOrderSIds: Array<string|number>, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        GetGisData: getGisData\n      }\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(11, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n        } else {\n          reject(new CWError(12, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n      }\n      this.cw.runRequest('Ams/WorkOrder/Entities', data).then(r => {\n        if(r.Status>0) {\n          reject(new CWError(4, r.Message, {'response': r}))\n        } else {\n          resolve(r.Value)\n        }\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add entities to an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUids: {Array<string>}, Facility_Id: {string}, Level_Id: {string}\n   * @param {boolean} updateXY - Update work order xy after adding entit(y|ies), default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   addEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'Facility_Id'))\n         _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n       if(_.has(entityInfo, 'Level_Id'))\n         _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n       if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/AddEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Update a WorkOrder entity\n    *\n    * @category WorkOrders\n    * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n    * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUid: {string}, Facility_Id: {string}, Level_Id: {string}\n    * @param {boolean} workComplete - Update WorkOrder completeness, default is true.\n    * @return {Object} Returns object that represents a list of entities removed.\n    */\n    updateEntity(workOrderSId: string|number, entityInfo: Object, workComplete: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkComplete: workComplete\n        }\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        if(_.has(entityInfo, 'Facility_Id'))\n          _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n        if(_.has(entityInfo, 'Level_Id'))\n          _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n        if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n          _.set(data, 'EntityUid', _.get(entityInfo, 'EntityUid'))\n          _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n        } else {\n          reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n        }\n\n        this.cw.runRequest('Ams/WorkOrder/UpdateEntity', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(4, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Remove entities from a work order. Provide WorkOrderId and either ObjectIds or EntityType and EntityUids\n   *\n   * @category WorkOrders\n   * @param {number} workOrderSId - The workorder S/ID which the entities should be removed from. # for SID, string for ID.\n   * @param {Object} entityInfo - Remove entities by WorkOrderEntity.ObjectId (not gis objectId).\n   * @param {boolean} updateXY - Update work order xy after removing entities, default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   removeEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'ObjectIds')) {\n         _.set(data, 'ObjectIds', _.get(entityInfo, 'ObjectIds'))\n       } else if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(8, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/RemoveEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Cancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to cancel the matched workorders\n   * @param {string} [cancelReason] - A reason for cancelling the workorder(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the workorder was cancelled\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n  cancel(workOrderIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n    return new Promise((resolve, reject) => {\n      var m = new Date()\n      var data: {WorkOrderIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { WorkOrderIds: workOrderIds }\n      if(typeof(cancelReason)!=='undefined')\n        _.set(data, 'CancelReason', cancelReason);\n      if(typeof(dateCancelled)!=='undefined')\n        _.set(data, 'DateCancelled', dateCancelled);\n      this.cw.runRequest('Ams/WorkOrder/Cancel', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Uncancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to uncancel the matched workorders\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n   uncancel(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Uncancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Close WorkOrders\n    *\n    * @category WorkOrders\n    * @param {Array<number>} workOrderIds - An array of the IDs to close the matched WorkOrders\n    * @return {Object} Returns object that represents a collection of WorkOrders\n    */\n    close(workOrderIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkOrderIds: workOrderIds\n        }\n        this.cw.runRequest('Ams/WorkOrder/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed WorkOrders\n     *\n     * @category WorkOrders\n     * @param {Array<number>} workOrderIds - An array of the IDs to reopen the matched WorkOrders\n     * @return {Object} Returns object that represents a collection of WorkOrders\n     */\n     reopen(workOrderIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           WorkOrderIds: workOrderIds\n         }\n         this.cw.runRequest('Ams/WorkOrder/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to delete the matched WorkOrders\n   * @return {Object} Returns object that represents a collection of WorkOrder Ids which have been deleted\n   */\n   delete(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderS/IDs connected to provided entities\n    *\n    * @category WorkOrder Search\n    * @param {string} entityType - The entity type to find connected work orders\n    * @param {Array<string>} entityUIDs - The list of entities to search for connected WorkOrders\n    * @param {boolean} s - Get WorkOrderSids. Defaults to true. When false, returned list is WorkOrderIds\n    * @param {Object} [search] - Any additional search properties of the work order (open/closed, etc)\n    * @return {Object} Returns Promise that represents an array of WorkOrderS/IDs\n    */\n   getWOsByEntities(entityType: string, entityUids: Array<string>, search?: Array<string|number>, s: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       if(typeof(search)!='undefined') {\n         _.merge(data, search)\n       }\n       if(!_.has(data, 'EntityType')) {\n         _.set(data, 'EntityType', entityType)\n       }\n       if(!_.has(data, 'EntityUids')) {\n         _.set(data, 'EntityUids', entityUids)\n       }\n       var path = 'Ams/WorkOrder/SearchForSids'\n       if(!s) {\n         path = 'Ams/WorkOrder/Search'\n       }\n       this.cw.runRequest(path, data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderSid and description for provided WorkOrderId\n    *\n    * @category WorkOrder Search\n    * @param {string} workOrderId - The WorkOrderId for which to get the WorkOrderSid and description\n    * @return {Object} Returns Promise that represents an object with WorkOrderS/IDs & Description\n    */\n   getSearchList(workOrderId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       _.set(data, 'WorkOrderId', workOrderId)\n       this.cw.runRequest('Ams/WorkOrder/SearchObject', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrder Employee lists\n    *\n    * @category WorkOrder Options\n    * @param {string} listType - Which list (endpoint) to get. Includes Supervisors & SubmitTos.\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         IncludeInactiveEmployees: includeInactiveEmployees\n       }\n       if(typeof(domainIds)!='undefined' && domainIds!=null) {\n         _.set(data, 'DomainIds', domainIds)\n       }\n       if(!_.includes(['Supervisors', 'SubmitTos'], listType)) {\n         reject(new CWError(2, 'listType must be either SubmitTos or Supervisors.', {'provided': listType}))\n       } else {\n         this.cw.runRequest(`Ams/WorkOrder/${listType}`, data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       }\n     })\n   }\n\n   /**\n    * Get SubmitTo list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Supervisors list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSupervisors(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('Supervisors', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Status Options\n    *\n    * @category WorkOrder Options\n    * @return {Object} Returns Promise that represents a collection of codes. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CodeDesc\n    */\n   getStatuses() {\n     return new Promise((resolve, reject) => {\n       this.cw.runRequest('Ams/WorkOrder/Statuses', {}).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get Categories\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder category code descriptions\n   */\n  getCategories() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Categories', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Priorities\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder priorities\n   */\n  getPriorities() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Priorities', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle From\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle From options for workorders\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Intervals\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Interval options for workorders\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Type options for workorders\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get WorkOrder Stages\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Stage options for WorkOrders\n   */\n  getStages() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Stages', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Expense Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Expense Type options for workorders\n   */\n  getExpenseTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/ExpenseTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseData {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Case Data Group\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} caseDataGroupId - CaseDataGroupId as defined in CaseDataGroup admin.\n   * @param {string} groupCode - The Group Code.\n   * @param {Object} [options] - Options for CaseDataGroup including GroupDesc, GroupSum, and SumFlag\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addGroup(caObjectId: number, caseDataGroupId: number, groupCode: string, options?: {GroupDesc?: string, GroupSum?: number, SumFlag?: string}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaseDataGroupId: caseDataGroupId,\n        GroupCode: groupCode\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Default Case Data Groups\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} busCaseId - The business case ID\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   addDefaultGroups(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a data detail entry to the case data group specified by the CaDataGroupId. The CaDataGroupId is associated to a case.\n   *\n   * @category Data Groups\n   * @param {number} caseDataDetailId - The Data Detail template ID\n   * @param {number} caDataGroupId - The Case Instance Data Group ID\n   * @param {string} columnSequence - The column sequence\n   * @param {string} detailCode - The detail Code\n   * @param {number} detailSequence - The detail order number\n   * @param {Object} [options] - Other options for CaseDataDetail. See WIPAdd here: /{subdirectory}/apidocs/#/service-info/Pll/CaseDataDetail\n   * @return {Object} Returns Promise that represents an object describing CaDataDetailItemBase.\n   */\n   wipAddDetail(caseDataDetailId: number, caDataGroupId: number, columnSequence: string, detailCode: string, detailSequence: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseDataDetailId: caseDataDetailId,\n        CaDataGroupId: caDataGroupId,\n        ColumnSequence: columnSequence,\n        DetailCode: detailCode,\n        DetailSequence: detailSequence\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get groups by CaObjectId\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to get the attached data groups.\n   * @return {Object} Returns Promise that represents a collection of the CaDataGroupItemBases.\n   */\n   getGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Data Groups by Case Object ID.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   deleteGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Data Groups. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data Groups\n   * @param {Object} filters - The parameters to search by. (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag)\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   searchForGroups(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataGroupId', 'CaseDataGroupId', 'GroupCode', 'GroupDesc', 'GroupSum', 'SumFlag']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Data Groups by Case ObjectId\n   *\n   * @category Data Groups\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {Object} options - The other options for checkGIS. Either CaObjectId or CaseDataGroupId is required.\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   checkGIS(entityType: string, entityUid: string, options: {CaObjectId?:number, CaseDataGroupId?: number, CaseDataDetailId?: number}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(_.has(options, 'CaObjectId')) {\n        _.set(data, 'CaObjectId', _.get(options, 'CaObjectId'))\n      } else if(_.has(options, 'CaseDataGroupId')) {\n        _.set(data, 'CaseDataGroupId', _.get(options, 'CaseDataGroupId'))\n      } else {\n        reject(new CWError(1, 'Either CaObjectId or CaseDataGroupId is required.', {'provided': options}))\n      }\n      if(_.has(options, 'CaseDataDetailId')) {\n        _.set(data, 'CaseDataDetailId', _.get(options, 'CaseDataDetailId'))\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/CheckGISChanges', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update data groups on a case based on asset value mappings.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The case to update\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {number} [caDataGroupId] - The specific data group ID to limit updates to\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   updateGroupsFromAsset(caObjectId: number, entityType: string, entityUid: string, caDataGroupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(typeof(caDataGroupId)!='undefined') {\n        _.set(data, 'CaDataGroupId', caDataGroupId)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/UpdateFromAsset', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Attach Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataGroupId - The Case Data Group ID to attach the data detail to.\n   * @param {number} caseDataDetailId - caseDataDetailId to attach.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addDetail(caDataGroupId: number, caseDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataGroupId: caDataGroupId,\n        CaseDataDetailId: caseDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to attach the data detail to.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   updateDetail(caDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Lock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to lock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   lockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: true\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Unlock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to unlock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   unlockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: false\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a list of possible values to the data detail entry specified by the CaDataDetailId.\n   *\n   * @category Data List Values\n   * @param {number} caDataDetailId - The Case Object to attach the data group to.\n   * @param {string} listValue - The Group Code.\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   addListValue(caDataDetailId: number, listValue: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        ListValue: listValue\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete by Id (Ca Data List Id)\n   *\n   * @category Data List Values\n   * @param {number} CaDataListId - The Case Data List ID\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   deleteListValue(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value IDs. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue)\n   * @return {Object} Returns Promise that represents an Array of resulting CaDataListIds\n   */\n   searchForListValueIds(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataDetailId', 'CaDataListId', 'ListValue']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue)\n   * @return {Object} Returns Promise that represents a collection of resulting CaDataListValuesItemBase objects\n   */\n   searchForListValueObjects(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataDetailId', 'CaDataListId', 'ListValue']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseFinancial {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw: Object) {\n    this.cw = cw\n  }\n\n  /**\n   * Adds a fee to the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} feeSetupId - The fee setup id for the fee to add to the case.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addFee(caObjectId: number, feeSetupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        FeeSetupId: feeSetupId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Fee Payment. Adds a payment to the case fee specified by caObjectId.\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addPayment(caObjectId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Payment Refund. Refunds a payment on the case payment specified by caPaymentId.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentId - The Case Payment ID for the case payment which to refund\n   * @param {number} refundAmount - The amount to refund\n   * @param {string} comment - A comment to append to the refund\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  addRefund(caPaymentId: number, refundAmount: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentId: caPaymentId,\n        RefundAmount: refundAmount,\n        Comments: comment\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Deposit Payment. Adds a payment to the case deposit specified by CaDepositId.\n   *\n   * @category Case Payments\n   * @param {number} caDepositId - The Case Deposit ID for the case deposit to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addDepositPayment(caDepositId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaDepositId: caDepositId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/AddDeposit', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a deposit to the case specified by the CaObectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} depositId - The deposit setup id for the deposit to add to the case.\n   * @param {number} [amount] - The amount of the deposit (optional)\n   * @param {string} [comment] - Comment text to add to the deposit (optional)\n   * @return {Object} Returns Promise that represents an object describing the newly-added deposit. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDeposit(caObjectId: number, depositId: number, amount?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        DepositId: depositId\n      }\n      if(typeof(amount)!='undefined') {\n        _.set(data, 'Amount', amount)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('CaseDeposit/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds an instrument to the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the instrument\n   * @param {number} instTypeId - The instrument type id for the instrument being added to the case.\n   * @param {number} amount - The amount of the instrument\n   * @param {Date} dateExpire - The datetime for the instrument to expire.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument for more options.\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument. See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument\n   */\n  addInstrument(caObjectId: number, instTypeId: number, amount: number, dateExpire: Date, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        InstTypeId: instTypeId,\n        Amount: amount,\n        DateExpire: dateExpire\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseInstrument/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a fee specified by the CaFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Fee ID for the specific instance of the fee you wish to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the updated fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  updateFee(caFeeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaFeeId: caFeeId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Void a refund.\n   *\n   * @category Case Refund Payment\n   * @param {number} caPaymentRefundId - The Refund ID for the specific refund to void\n   * @param {String} voided - A string. No clue.\n   * @return {Object} Returns Promise that represents an object describing the voided refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  voidRefund(caPaymentRefundId: number, voided: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId,\n        Voided: voided\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Fees. Adds fees to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default fees\n   * @param {number} busCaseId - The business case ID whose default fees should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Fee Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addDefaultFees(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseFees/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Deposits. Adds deposits to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default deposits\n   * @param {number} busCaseId - The business case ID whose default deposits should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Deposit Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDefaultDeposits(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the fees from the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Fees.\n   */\n  getFees(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Deposit by Case ObjectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the deposits\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  getDeposits(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Payments by Case ObjectId\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the payments\n   * @return {Object} Returns Promise that represents a collection of Case Payments.\n   */\n  getPayments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the instruments from the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Instruments.\n   */\n  getInstruments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Case Fee ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Fee object.\n   */\n  deleteFee(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CaseFees/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteFeesByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete a Case Payment by Id. Delete a specific case payment by CaPaymentId.\n   *\n   * @category Case Payments\n   * @param {number} caPaymentId - The Case Payment ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Payment object.\n   */\n  deletePayment(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CasePayment/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payment Refund. Removes a refund on a payment.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentRefundId - The Case Payment ID for the case payment which to refund\n   * @return {Object} Returns Promise that represents an object describing the deleted payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  deleteRefund(caPaymentRefundId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payments by Case ObjectId. Delete from the system all payments associated to a specific case as specified by the case id (CaObjectId)\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID whose payments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deletePaymentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Deposits\n   * @param {number} caDepositId - The Case Deposit ID which should be deleted\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  deleteDeposit(caDepositId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDepositId: caDepositId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteDepositsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the instrument specified by the caInstrumentId.\n   *\n   * @category Case Instruments\n   * @param {number} caInstrumentId - The Case Instrument ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Instrument.\n   */\n  deleteInstrument(caInstrumentId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Instruments by Case ObjectId. Delete from the system all Instruments linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID whose instruments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteInstrumentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFees(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaFeeId', 'CaObjectId', 'FeeCode', 'FeeDesc']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseFees/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payments. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payments\n   * @param {Object} filters - The filters to search for matched Case Payments\n   * @return {Object} Returns Promise that represents an Array of case payment IDs\n   */\n  searchPayments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaPaymentId', 'CommentText', 'FeeAmount', 'FeeCode', 'FeeDesc', 'PaymentAccount', 'PaymentAmount', 'TenderType']).length==0) {\n        reject(new CWError(5, 'At least one of the attributes (CaPaymentId, CommentText, FeeAmount, FeeCode, FeeDesc, PaymentAccount, PaymentAmount, TenderType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payment Refunds. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payment Refunds\n   * @param {Object} filters - The filters to search for matched Case Payments.\n   * @return {Object} Returns Promise that represents an Array of case payment refund IDs\n   */\n  searchRefunds(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaPaymentId', 'CaPaymentRefundId', 'Comments', 'RefundAmount']).length==0) {\n        reject(new CWError(6, 'At least one of the attributes (CaPaymentId, CaPaymentRefundId, Comments, RefundAmount) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Deposits\n   * @param {Object} filters - The parameters to search by.\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchDeposits(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDepositId', 'CaObjectId', 'DepositCode', 'DepositDesc']).length==0) {\n        reject(new CWError(1, 'At least one of the arguments (CaDepositId, CaObjectId, DepositCode, DepositDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDeposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fee Templates\n   *\n   * @category Case Fees\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  getAllFeeTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameters to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFeeTemplates(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['FeeSetupId', 'FeeTypeId', 'FeeCode', 'FeeDesc', 'AccountCode']).length==0) {\n        reject(new CWError(7, 'At least one of the arguments (FeeSetupId, FeeTypeId, FeeCode, FeeDesc, AccountCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instruments. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Instruments\n   * @param {Object} filters - The parameters to search by (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of case instrument IDs\n   */\n  searchCaseInstruments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AddressLine1', 'Amount', 'CaInstrumentId', 'CityName', 'CommentText', 'Company', 'ContactEmail', 'ContactName', 'ContactPhone', 'CountryCode', 'InstTypeId', 'SerialNumber', 'StateCode', 'ZipCode']).length==0) {\n        reject(new CWError(9, 'At least one of the arguments (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseInstrument/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the Defined Instruments\n   *\n   * @category Instruments\n   * @param {Object} options - the options to filter the instruments returned by\n   * @return {Object} Returns Promise that represents an Array of CaInstrumentItem\n   */\n  getInstrumentList(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/CaseInstrument/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a release to a case instrument specified by the caInstrumentId. Must provide either amountReleased OR percentReleased\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstrumentId - The Case Instrument ID to which to add the instrument release\n   * @param {number} releasedBy - UserID to attach to the release.\n   * @param {Date} dateReleased - The date of the release\n   * @param {number} [amountReleased] - The amount to be released\n   * @param {number} [percentReleased] - OR the percent to be released\n   * @param {string} [comment] - Comment to attach to the release\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  addCaseInstrumentRelease(caInstrumentId: number, releasedBy: number, dateReleased: Date, amountReleased?: number, percentReleased?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId,\n        DateReleased: dateReleased,\n        ReleasedBy: releasedBy\n      }\n      if((typeof(percentReleased)!='undefined' || percentReleased!=null) && (typeof(amountReleased)!='undefined' || amountReleased!=null)) {\n        reject(new CWError(2, 'Either amountReleased or percentReleased must be specified.'))\n      } else if(typeof(percentReleased)!='undefined' && percentReleased!=null) {\n        _.set(data, 'PercentReleased', percentReleased)\n      } else if(typeof(amountReleased)!='undefined' && amountReleased!=null) {\n        _.set(data, 'AmountReleased', amountReleased)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a release specified by the caInstReleasesId.\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstReleasesId - The Case Instrument Release ID to delete\n   * @return {Object} Returns Promise that represents an object describing the deleted instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  deleteCaseInstrumentRelease(caInstReleasesId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstReleasesId: caInstReleasesId\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instrument Releases. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Case Instrument Releases\n   * @param {Object} filters - Specify at least one of the following: AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy\n   * @return {Object} Returns Promise that represents an Array of Case Instruments resulting from the search\n   */\n  searchCaseInstrumentReleases(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      if(_.intersectionBy(_.keysIn(filters), ['AmountReleased', 'CaInstReleasesId', 'CaInstrumentId', 'CommentText', 'PercentReleased', 'ReleasedBy']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy) must be defined.'))\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  fees() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/FeeSetup/All', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Fees\n   * @param {Object} filters - Specify at least one.\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  searchAvailableFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(8, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all tender types configured\n   *\n   * @category Tender Types\n   * @return {Object} Returns Promise that represents a collection of tender type objects. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  getTenderTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TenderType/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a tender type configuration\n   *\n   * @category Tender Types\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  addTenderType(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TenderType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a tender type configuration\n   *\n   * @category Tender Types\n   * @param {number} tenderTypeId - ID of the tender type to update\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  updateTenderType(tenderTypeId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        TenderTypeId: tenderTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/TenderType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { Comments } from './comments'\n\nexport class CaseWorkflow {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Task sub-methods\n   */\n  task: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.task = {\n      comment: new Comments(cw, 'CaTask')\n    }\n  }\n\n  /**\n   * Adds a task to the case specified by the CaObectId.\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} taskId - The task ID to add to the case workflow\n   * @param {number} startPoint - The start point in the workflow for the task\n   * @param {number} endPoint - The end point in the workflow for the task\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   addTask(caObjectId: number, taskId: number, startPoint: number, endPoint: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        TaskId: taskId,\n        StartPoint: startPoint,\n        EndPoint: endPoint\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Result\n   *\n   * @category Task Results\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} caTaskId - The Case task ID to add the result to\n   * @param {number} resultCode - The result Code\n   * @param {number} resultID - The result ID\n   * @param {number} resultSetID - The result set ID\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents an object describing CaTaskResultsItem.\n   */\n   addTaskResult(caObjectId: number, caTaskId: number, resultCode: number, resultID: number, resultSetID: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaTaskId: caTaskId,\n        ResultCode: resultCode,\n        ResultID: resultID,\n        ResultSetID: resultSetID\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   addTaskComment(caTaskId: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId,\n        CommentText: comment\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by CaObjectId\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to get the attached tasks\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksByCaseId(caObjectId: number, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by TaskIds\n   *\n   * @category Tasks\n   * @param {Array<number>} caTaskIds - The IDs of the tasks to retrieve\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksById(caTaskIds: Array<number>, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get CaTaskResultsItem by CaTaskIds\n   *\n   * @category Task Results\n   * @param {Array<number>} caTaskIds - The IDs of the tasks for which to retrieve results\n   * @return {Object} Returns Promise that represents a collection of CaTaskResultsItems.\n   */\n   getResultsByTaskId(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {number} caTaskId - The task ID for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CommentRecords.\n   */\n   getCommentsForTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskIds - The task IDs for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CaTaskCommentsItemBase.\n   */\n   getCommentsForTasks(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {Object} [options] - Options for Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   updateTask(caTaskId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskCommentId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @param {number} commentId - Probably unnecessary?\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   updateTaskComment(caTaskCommentId: number, comment: string, commentId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentId: caTaskCommentId,\n        CommentText: comment\n      }\n      if(typeof(commentId)!='undefined') {\n        _.set(data, 'CommentId', commentId)\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {string} resultCode - The result code to set for the specified Task\n   * @param {Object} [options] - Options for Task. Specify either or both TaskCompletedBy & TaskCompleteDate. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   setTaskResult(caTaskId: number, resultCode: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(_.intersectionBy(_.keysIn(options), ['TaskCompleteDate', 'TaskCompletedBy']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (TaskCompletedBy, TaskCompleteDate) must be defined.'))\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/SetResult', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   deleteTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTask/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents the number of the CaObjectID\n   */\n   deleteTasksOnCase(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseTask/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes tasks by TaskID\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskCommentIds - The comments to delete\n   * @return {Object} Returns Promise that represents a dictionary of comment IDs.\n   */\n   deleteTaskComments(caTaskCommentIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentIds: caTaskCommentIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Tasks. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Tasks\n   * @param {Object} filters - The parameters to search by. (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType)\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskIDs\n   */\n   searchForTasks(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['ResponsibleUserId', 'TaskAvailable', 'TaskComplete', 'TaskType']).length==0) {\n        reject(new CWError(1, 'At least one of the attributes (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseTask/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskResults Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Task Results\n   * @param {Object} filters - The parameters to search by. See: /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskResultsItem\n   */\n   searchForTaskResults(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseTaskResults/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Adds a task to the case specified by the CaObectId.\n     *\n     * @category Task Attachments\n     * @param {number} caTaskId - The Task ID to attach the document to\n     * @param {number} caObjectId - The Case Object ID\n     * @param {string} docName - The file name as it should display in the system\n     * @param {string} locationType - The location of the file...leave blank\n     * @param {any} file - The binary string for the file\n     * @return {Object} Returns Promise that represents an object describing added Attachment\n     */\n  addTaskAttachment(caTaskId: number, caObjectId: number, docName: number, file: any, locationType?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaTaskId: caTaskId,\n        DocName: docName\n      }\n      if(typeof(locationType)!='undefined') {\n        _.set(data, 'LocationType', locationType)\n      }\n      this.cw.runRequest('Pll/CaseRelDocs/AddTaskRelDoc', data, file).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Gets each Document Attached to the specified Task\n     *\n     * @category Task Attachments\n     * @param {number} caTaskId - The Task ID to attach the document to\n     * @return {Object} Returns Promise that represents a collection of objects describing each Attachment on the provided task\n     */\n  getTaskAttachments(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseRelDocs/ByCaTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task attachment by caRelDocId (Related Case Document ID). Same as RelDocs delete for case.\n   *\n   * @category Task Attachments\n   * @param {number} caRelDocId - The caRelDocId for the related document which should be deleted\n   * @return {Object} Returns Promise that represents the an object describing the deleted document.\n   */\n  deleteTaskAttachment(caRelDocId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaRelDocId: caRelDocId\n      }\n      this.cw.runRequest('PLL/CaseRelDocs/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n\n\n\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Business Case Template\n   *\n   * @category Case Templates\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the created case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  addBusinessCaseTemplate(data: Object) {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/BusinessCase/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Business Case Template\n   *\n   * @category Case Templates\n   * @param {number} busCaseId - The Business Case ID to update\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the updated case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  updateBusinessCaseTemplate(busCaseId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/BusinessCase/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Business Case Templates\n   *\n   * @category Case Templates\n   * @return {Object} Returns Promise that represents a collection of Business Case Templates\n   */\n  getBusinessCaseTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/BusinessCase/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Type\n   *\n   * @category Types & SubTypes\n   * @param {string} caseTypeName - The case type name\n   * @param {string} caseTypeDesciption - The case type description\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the added case type\n   */\n  addCaseType(caseTypeName: string, caseTypeDesciption: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseType: caseTypeName,\n        CaseTypeDesciption: caseTypeDesciption\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Type\n   *\n   * @category Types & SubTypes\n   * @param {number} caseTypeId - The case Type ID\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the updated case type\n   */\n  updateCaseType(caseTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Types\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems\n   */\n  getCaseTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents an Array of CaseTypeIDs\n   */\n  searchCaseTypeIDs(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CaseTypeItem\n   */\n  searchCaseTypeObjects(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaseType, CaseTypeDesc, CaseTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add SubType\n   *\n   * @category Types & SubTypes\n   * @param {string} subTypeName - The SubTypeId\n   * @param {string} subTypeDescription - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  addSubtype(subTypeName: string, subTypeDescription: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubType: subTypeName,\n        SubTypeDesc: subTypeDescription\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update SubType\n   *\n   * @category Types & SubTypes\n   * @param {number} subTypeId - The SubTypeId\n   * @param {Object} options - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the updated SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  updateSubtype(subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get SubTypes\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  getSubtypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/SubType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getFees() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Expirations\n   *\n   * @category Expirations\n   * @return {Object} Returns Promise that represents a collection of ExpirationTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  getExpirations() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/ExpirationType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add an Expiration type\n   *\n   * @category Expirations\n   * @param {Object} options - Must specify OrgId and ExpirationDescType attributes. See: /{subdirectory}/apidocs/#/service-info/Pll/ExpirationType\n   * @return {Object} Returns Promise that represents an object describing the newly-added ExpirationTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  addExpiration(options?: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(options, 'OrgId') || !_.has(options, 'ExpirationTypeDesc')) {\n        reject(new CWError(5, 'OrgId and ExpirationTypeDesc must both be defined.'))\n      }\n      var data = options\n      this.cw.runRequest('Pll/ExpirationType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Deposits\n   *\n   * @category Deposits\n   * @return {Object} Returns Promise that represents a collection of DepositItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepositItemBase\n   */\n  getDeposits() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Deposit/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchDeposits(filters: {AccountCode?: string, DepositCode?: string, DepositDesc?: string, DepositId?: number, DepositTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'DepositCode', 'DepositDesc', 'DepositId', 'DepositTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/Deposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Disciplines\n   *\n   * @category Disciplines\n   * @return {Object} Returns Promise that represents a collection of DisciplineItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DisciplineItem\n   */\n  getDisciplines() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Discipline/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Department\n   *\n   * @category Departments & Divisions\n   * @param {string} departmentCode - The SubTypeId\n   * @param {string} departmentName - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  addDepartment(departmentCode: string, departmentName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentCode: departmentCode,\n        DepartmentName: departmentName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Department/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Departments\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getDepartments() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Department/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Division\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  addDivision(departmentId: number, divisionName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentId: departmentId,\n        DivisionName: divisionName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Division/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Divisions\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of DivisionItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  getDivisions() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Division/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Holiday\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  addHoliday(holidayDate: Date, holidayDesc: string, halfDayFlag?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayDate: holidayDate,\n        HolidayDesc: holidayDesc\n      }\n      if(typeof(halfDayFlag)!='undefined') {\n        _.set(data, 'HalfDayFlag', halfDayFlag)\n      }\n      this.cw.runRequest('Pll/Holiday/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Holiday\n   *\n   * @category Holidays\n   * @param {number} holidayId - ID of Holiday to delete\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  deleteHoliday(holidayId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayId: holidayId\n      }\n      this.cw.runRequest('Pll/Holiday/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Holidays\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents a collection of HolidaysItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  getHolidays() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Holiday/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Inspection Time Block\n   *\n   * @category Inspections\n   * @param {string} labelText - Label for the time block\n   * @param {string} startTime - Start time in 24 hour format (HH:mm)\n   * @param {string} endTime - End time in 24 hour format (HH:mm)\n   * @param {Object} inspTimeBlocksDetails - See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspTimeBlocksDetailItem\n   * @return {Object} Returns Promise that represents an object describing the newly-added InspectionTimeBlocksItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  addInspectionTimeBlock(labelText: string, startTime: string, endTime: string, inspTimeBlocksDetails?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        LabelText: labelText,\n        StartTime: startTime,\n        EndTime: endTime\n      }\n      if(typeof(inspTimeBlocksDetails)!='undefined') {\n        _.set(data, 'InspTimeBlocksDetails', inspTimeBlocksDetails)\n      }\n      this.cw.runRequest('Pll/InspectionTimeBlock/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Inspection Time Blocks\n   *\n   * @category Inspections\n   * @return {Object} Returns Promise that represents a collection of InspectionTimeBlocksItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  getInspectionTimeBlocks() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/InspectionTimeBlock/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all NotificationCases\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationCaseItem\n   */\n  getNotificationCases() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationCase/GetNotificationCaseList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Notification Types\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationTypeItem\n   */\n  getNotificationTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationType/GetNotificationTypeList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} options - attributes or update\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addNumberingGroup(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/NumberingGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} numberingGroupId - ID of NumberGroup to update\n   * @param {number} options - updates attributes\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  updateNumberingGroup(numberingGroupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        NumberingGroupId: numberingGroupId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/NumberingGroup/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Numbering Groups\n   *\n   * @category NumberingGroups\n   * @return {Object} Returns Promise that represents a collection of NumberingGroupItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  getNumberingGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NumberingGroup/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Person\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addPerson(name: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        Name: name\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all People\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleItem\n   */\n  getPeople() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/People/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add People Role\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/PeopleRole\n   * @return {Object} Returns Promise that represents an object describing the newly-added PeopleRoleItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  addPeopleRole(roleCode: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        RoleCode: roleCode\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all PeopleRoles\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getPeopleRoles() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/PeopleRole/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultDetail. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  addTaskResultDetail(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {string} resultDetailId - Result Detail ID\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  updateTaskResultDetail(resultDetailId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        ResultDetailId: resultDetailId\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all TaskResultDetails\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getTaskResultDetails() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultDetail/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultFeeInsert. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultFeeInsertItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  addTaskResultFeeInsert(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the deleted TaskResultFeeInsertItem.\n   */\n   deleteTaskResultFeeInsert(taskResultFeeInsertId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert(s) by Task ID\n   *\n   * @category TaskResults\n   * @param {number} taskId - ID for Task parent of TaskResultFeeInsert(s) to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the Task parent of the deleted TaskResultFeeInsertItem(s).\n   */\n   deleteTaskResultFeeInsertByTaskId(taskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskId: taskId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/DeleteByTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be updated.\n   * @param {number} taskId - Updated TaskID\n   * @param {number} taskResultId - Updated TaskResultId\n   * @param {number} [feeSetupId] - Fee setup ID update for TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents the ID Number of the updated TaskResultFeeInsertItem.\n   */\n   updateTaskResultFeeInsert(taskResultFeeInsertId: number, taskId: number, taskResultId: number, feeSetupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId,\n        TaskId: taskId,\n        TaskResultId: taskResultId\n      }\n      if(typeof(feeSetupId)!='undefined') {\n        _.set(data, 'FeeSetupId', feeSetupId)\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Get all TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of TaskResultFeeInsertItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  getTaskResultFeeInsert() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultFeeInsert/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\n\nconst _ = require('lodash')\n\nexport class CaseAssets {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Attach asset to case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when attaching the asset. Defaults to true.\n   * @param {Object} [options] - Options for CaseDataGroup including Address, AddressId, AssetId, AssetObjectId, AssetType, CityName, CrossStreet, DateExpired, ExpiredFlag, Facility_Id, FeatureAssetId, FeatureClass, FeatureObjectId, LegacyId, Level_Id, LndObjectId, Location, MasterFlag, ObjectId, StateCode, StreetDirection, StreetFraction, StreetName, StreetNumber, StreetPostDir, StreetType, Suite, TileNo, UpdateCaseData, XCoord, YCoord, ZCoord, and ZipCode\n   * @return {Object} Returns Promise that represents an object describing CaAddress.\n   */\n   attach(caObjectId: number, updateXY: boolean = true, options?: {Address?: string, AddressId?: number, AssetId?: string, AssetObjectId?: number, AssetType?: string, CityName?: string, CrossStreet?: string, DateExpired?: string, ExpiredFlag?: string, Facility_Id?: string, FeatureAssetId?: string, FeatureClass?: string, FeatureObjectId?: number, LegacyId?: string, Level_Id?: string, LndObjectId?: number, Location?: string, MasterFlag?: string, ObjectId?: string, StateCode?: string, StreetDirection?: string, StreetFraction?: string, StreetName?: string, StreetNumber?: number, StreetPostDir?: string, StreetType?: string, Suite?: string, TileNo?: string, UpdateCaseData?: boolean, XCoord?: number, YCoord?: number, ZCoord?: number, ZipCode?: string}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        UpdateXY: updateXY\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseAddress/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Detach specific asset from case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when detaching the assets. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n  detach(caAddressId: number, updateXY: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaAddressId: caAddressId,\n        UpdateXY: updateXY\n      }\n      this.cw.runRequest('Pll/CaseAddress/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Detach all assets from case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to detach the assets from.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when detaching the asset(s). Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of detached CaAddressIds.\n   */\n  detachAll(caObjectId: number, updateXY: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        UpdateXY: updateXY\n      }\n      this.cw.runRequest('Pll/CaseAddress/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get assets attached to a specific case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object from which to get attached assets\n   * @return {Object} Returns Promise that represents a collection of the default CaAddresses.\n   */\n  getForCase(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseAddress/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Search for Case Assets. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Case Assets\n   * @param {Object} filters - The parameters to search by. (AssetType, CaAddressId, CaObjectId, CityName, ExpiredFlag, StateCode, StateName, StreetName, StreetNumber, Suite, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of resulting CaAddresses\n   */\n   search(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AssetType', 'CaAddressId', 'CaObjectId', 'CityName', 'ExpiredFlag', 'StateCode', 'StateName', 'StreetName', 'StreetNumber', 'Suite', 'ZipCode']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AssetType, CaAddressId, CaObjectId, CityName, ExpiredFlag, StateCode, StateName, StreetName, StreetNumber, Suite, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseAddress/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nimport { CaseData } from './case_data'\nimport { CaseFinancial } from './case_financial'\nimport { CaseWorkflow} from './case_workflow'\nimport { CaseAdmin } from './case_admin'\nimport { Comments } from './comments'\nimport { CaseAssets } from './case_assets'\n\nexport class Case {\n  /**\n   * @hidden\n   */\n  cw: any\n\n\n  /**\n   * Data Detail methods\n   */\n  data?: Object\n  /**\n   * Asset (Address) methods\n   */\n  assets?: Object\n  /**\n   * Workflow & task methods\n   */\n  workflow?: Object\n  /**\n   * Payment, Receipt, & Fee methods\n   */\n  financial?: Object\n  /**\n   * Commenting methods\n   */\n  comment?: Object\n  /**\n   * PLL Administration methods\n   */\n  admin?: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.data = new CaseData(cw)\n    this.assets = new CaseAssets(cw)\n    this.workflow = new CaseWorkflow(cw)\n    this.financial = new CaseFinancial(cw)\n    this.comment = new Comments(cw, 'CaObject')\n    this.admin = new CaseAdmin(cw)\n  }\n\n  /**\n   * Create new case\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  create(caseTypeId: number, subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/Create', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a child case\n   *\n   * @category Cases\n   * @param {number} busCaseId - The case Type ID\n   * @param {number} parentCaObjectId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createChild(busCaseId: number, parentCaObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId,\n        ParentCaObjectId: parentCaObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/CreateChild', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a case from a Service Request\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {number} requestId - The service request ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createFromRequest(caseTypeId: number, subTypeId: number, requestId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId,\n        ServiceRequestId: requestId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/CreateCaseFromServiceRequest', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the updated case\n   */\n  update(caObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cases by IDs\n   *\n   * @category Cases\n   * @param {Array<number>} caObjectIds - The case Object ID to update\n   * @return {Object} Returns Promise that represents a collection of objects describing the cases\n   */\n  getByIds(caObjectIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectIds: caObjectIds\n      }\n      this.cw.runRequest('Pll/CaseObject/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Cases. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Cases\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case Object IDs\n   */\n  search(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseObject/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Move a Case point\n   *\n   * @category Cases\n   * @param {string} caObjectId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(caObjectId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(1, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        CaObjectId: caObjectId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Pll/CaseObject/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the deleted case\n   */\n  delete(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseObject/DeleteCase', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport { General } from './general'\nimport { ActivityLinks } from './activity_link'\nimport { Gis } from './gis'\nimport { MessageQueue } from './message_queue'\nimport { Search } from './search'\nimport { Request } from './request'\nimport { Inspection } from './inspection'\nimport { WorkOrder } from './workorder'\n\nimport { Case } from './case'\n\nconst https = require('https')\nconst querystring = require('querystring')\nconst _ = require('lodash')\n\ninterface postData {\n  data?: string\n  token?: string\n  file?: any\n}\n\n/**\n * Core interface Citywork which defines the access vars for many of the functions and the connection settings\n */\ninterface Citywork {\n  base_url: any\n  settings: Object\n  login?: string\n  password?: string\n  Token?: string\n  gisToken?: string\n  gisTokenUrl?: string\n\n  default_domain?: any\n\n  general?: Object\n  search?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  inspection?: Object\n  workorder?: Object\n  request?: Object\n\n  case?: Object\n\n  extensions: Object\n  features: Object\n}\n\n/**\n * Core class Cityworks with most of the authentication and install capabilities functions\n */\nmodule.exports = class Cityworks implements Citywork {\n  /**\n   * The domain of the cityworks install. Defaults to Cityworks Online\n   */\n  base_url: string\n  /**\n   * Stores the currently in use authentication token\n   */\n  Token?: string\n  /**\n   * Stores the login username\n   */\n  login?: string\n  /**\n   * Holds the login password\n   */\n  password?: string\n  /**\n   * Holds the GIS Token for GIS-based Authentication (Portal)\n   */\n  gisToken?: string\n  /**\n   * Holds the GIS Token URL for GIS-based Authentication (Portal)\n   */\n  gisTokenUrl?: string\n  /**\n   * Stores settings including path (defaults to \"cityworks\"), secure (defaults to true), expires (defaults to null - does not expire), default_domain\n   */\n  settings: {\n    path: string,\n    secure: boolean,\n    expires: any,\n    default_domain?: any\n  }\n  error?: Object\n  general?: Object\n  search?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  request?: Object\n  inspection?: Object\n  workorder?: Object\n\n  case?: Object\n\n  extensions: Object\n  features: Object\n  potential_loads: Array<string>\n\n  /**\n     * Contructor for a new cityworks instance's object, allows one to optionally configure the domain and other settings right from the get-go\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'workorder', 'inspection', 'request', 'case']\n     */\n  constructor(base_url?: string, settings?: Object, load?: Array<string>) {\n    this.base_url = 'cityworksonline'\n    this.extensions = {\"UnknownExtension\": 0, \"CwAnalytics\": 1, \"WebHooks\": 2, \"PLLPublicApp\": 3, \"ActivityUpdate\": 4, \"SingleSignOn\": 5}\n    this.features = {\"UnknownFeature\": 0, \"ViewInspections\": 1, \"EditInspections\": 2, \"ViewServiceRequest\": 3, \"EditServiceRequest\": 4, \"ViewWorkOrder\": 5, \"EditWorkOrder\": 6, \"EquipmentCheckOut\": 7, \"OfficeField\": 8, \"Respond\": 9, \"Eurl\": 10, \"PaverInterface\": 11, \"Contracts\": 12, \"Storeroom\": 13, \"PLL\": 14, \"Cw4XL\": 15, \"TableEditor\": 16, \"CCTVInterface\": 17, \"MobileAndroid\": 18, \"MobileiOS\": 19, \"PerformanceBudgeting\": 20, \"Insights\": 21, \"RespondCase\": 22, \"RespondInspection\": 23, \"RespondServiceRequest\": 24, \"RespondTaskManager\": 25, \"RespondWorkOrder\": 26, \"Workload\": 27, \"OpX\": 28, \"TrimbleUnityMobile\": 29, \"TrimbleVegetationManager\": 30}\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n    this.potential_loads = ['general', 'activity_link', 'message_queue', 'gis', 'search', 'request', 'case', 'case_financial']\n    if(typeof(base_url)!='undefined') {\n      this.configure(base_url, settings, load)\n    }\n  }\n\n  /**\n     * Configure a new cityworks instance's domain and other settings\n     *\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'search', 'workorder', 'inspection', 'request', 'case']\n     * @return {boolean} Returns true if successful, otherwise, throws error\n     */\n  configure(base_url?: string, settings?: Object, load?: Array<string>) {\n    if(typeof base_url !== 'undefined') { this.base_url = base_url } else { this.base_url = 'cityworksonline' }\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n\n    if(typeof(settings)!='undefined') {\n      _.forEach(settings, (v,k) => {\n        if(typeof(this.settings[k])!='undefined') {this.settings[k] = v}\n      })\n    }\n\n    if(typeof(load)=='undefined') {\n      this.general = new General(this)\n      this.activity_link = new ActivityLinks(this)\n      this.message_queue = new MessageQueue(this)\n      this.request = new Request(this)\n      this.inspection = new Inspection(this)\n      this.workorder = new WorkOrder(this)\n      this.case = new Case(this)\n      this.search = new Search(this)\n    } else {\n      let _this = this\n      _.forEach(this.potential_loads, function(v) {\n        switch(v) {\n          case 'general':\n            _this.general = new General(_this)\n          break\n          case 'activity_link':\n            _this.activity_link = new ActivityLinks(_this)\n          break\n          case 'message_queue':\n            _this.message_queue = new MessageQueue(_this)\n          break\n          case 'gis':\n            _this.gis = new Gis(_this)\n          break\n          case 'search':\n            _this.search = new Search(_this)\n          break\n          case 'request':\n            _this.request = new Request(_this)\n          break\n          case 'case':\n            _this.case = new Case(_this)\n          break\n          case 'inspection':\n            _this.inspection = new Inspection(_this)\n          break\n          case 'workorder':\n            _this.workorder = new WorkOrder(_this)\n          break\n        }\n      })\n    }\n  }\n\n  /**\n     * Send a request to the Cityworks API\n     *\n     * If one ever needs to access or call an unimplemented API endpoint of a Cityworks install, one can call this method directly with the path and data payload:\n     *\n     * `cityworks.runRequest(path, data)`\n     *\n     * @param {string} path - The path to the particular endpoint\n     * @param {Object} data - The data object to be sent to the Cityworks API\n     * @param {any} file - The file to send in binary to the Cityworks API\n     * @return {Object} Returns Promise object that represents the json object returned from the Cityworks API\n     */\n  runRequest(path, data, file?: any) {\n    return new Promise((resolve, reject) => {\n      let pd = {} as postData\n      pd.data = JSON.stringify(data)\n\n      if(typeof(file) !== 'undefined' && (path=='Pll/CaseRelDocs/AddTaskRelDoc' || path=='Pll/CaseRelDocs/Add')) {\n        pd.file = file\n      }\n\n      if(typeof(this.Token) !== 'undefined' && this.Token != '' && path!='General/Authentication/CityworksOnlineAuthenticate' && path!='General/Authentication/Authenticate') {\n        pd.token = this.Token\n      }\n\n      let obj: {\n        Status: number,\n        Message: string\n      }\n\n      let options = {\n        hostname: this.base_url,\n        port: 443,\n        path: '/' + this.settings.path + '/services/' + path,\n        method: 'POST',\n        headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n           'Content-Length': Buffer.byteLength(querystring.stringify(pd))\n        },\n        timeout: 10000000\n      }\n      let request = https.request(options, (response) => {\n          let str=''\n          response.on('error',function(e){\n              console.log(e, 'Caught on error')\n              reject(new CWError(13, \"Unknown error.\", e))\n          })\n\n          response.on('data',function(chunk){\n              str+=chunk\n          })\n\n          response.on('end',function(){\n            try {\n              var test_str = JSON.stringify(str) + \"[test string]\"\n              if(test_str.match(/\\<h2\\>Object\\ moved\\ to/)==null) {\n                var obj=JSON.parse(str)\n                // if(path=='General/ActivityNotification/UserWatching') {\n                //   console.log(str, options, pd, obj)\n                // }\n                if(typeof(obj)=='undefined') {\n                  // failed\n                  reject(new CWError(10, 'No response received from Cityworks API.'))\n                } else if(typeof(obj)!='undefined' && typeof(obj.Value)!='undefined') { // && typeof(response.Value.Token)!='undefined') {\n                  switch(obj.Status) {\n                    case 1:\n                      reject(new CWError(1, 'Error', obj))\n                      break;\n                    case 2:\n                      reject(new CWError(2, 'Unauthorized', obj))\n                      break;\n                    case 3:\n                      reject(new CWError(3, 'InvalidCredentials', obj))\n                      break;\n                    case 0:\n                    default:\n                      resolve(obj);\n                      break;\n                  }\n                } else {\n                  reject(new CWError(4, \"Unknown error.\", {options: options, postedData: pd, api_returned_string: obj}))\n                }\n              } else {\n                reject(new CWError(5, \"Error parsing JSON. Cityworks returned HTML.\", {response: str}))\n              }\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log('try/catch error on JSON')\n                reject(new CWError(6, \"Error parsing JSON.\", {error: e}))\n              } else {\n                console.log('try/catch error on JSON - but not an instance of SyntaxError')\n                reject(new CWError(7, \"Error parsing JSON.\"))\n              }\n            }\n          })\n      })\n      request.write(querystring.stringify(pd))\n      request.end()\n    })\n  }\n\n  /**\n     * Authenticate with the Cityworks API and store an access token for use. Stores the token on cityworks.Token.\n     * @param {string} login - User's login name\n     * @param {password} password - User's password\n     * @return {Object} Returns Promise object that represents a boolean which tells you the login succeeded (true) or failed (false).\n     */\n  authenticate(login: string, password: string) {\n    return new Promise((resolve, reject) => {\n      let data = { LoginName:login, Password:password }\n      let path = 'General/Authentication/Authenticate'\n      if(this.base_url == 'cityworksonline') {\n        path = 'General/Authentication/CityworksOnlineAuthenticate'\n      }\n      this.runRequest(path, data).then((response: any) => {\n        // if(response.Status>0) {\n        //   // failed\n        //   reject(new CWError(100, response.Message))\n        // } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.login = login\n          this.password = password\n          this.Token = response.Value.Token\n          resolve(true)\n        // } else {\n        //   // failed\n        //   reject(new CWError(11, 'Unknown Error'))\n        // }\n      }).catch(error => {\n        reject(error);\n      })\n    })\n  }\n\n  /**\n     * Authenticate a username with a GIS Token\n     * @param {login} - Gis user name, should match a Cityworks employee login name\n     * @param {string} gisToken - Gis Oauth2 access token\n     * @param {string} gisTokenUrl - Base url to GIS server (not the '/generateToken' endpoint)\n     * @param {number} [expires] - Authenticate to Cityworks for a specified number of milliseconds, defaults to 2 weeks\n     */\n  authenticateWithGISToken(login: string, gisToken: string, gisTokenUrl: string, expires?: number) {\n    this.login = login\n    this.gisToken = gisToken\n    this.gisTokenUrl = gisTokenUrl\n    if(typeof(expires)!='undefined') {\n      expires = 1209600000\n    }\n\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/AuthenticateGisToken'\n      let data = { LoginName:this.login, GisToken: this.gisToken, GisTokenUrl: this.gisTokenUrl, Expires: expires}\n\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          // TODO: CWError here.\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          resolve(false)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Validate provided token\n     * @param {string} token - User's login name\n     * @param {boolean} [set] - Set a valid token as the cityworks instance's active token\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the token's validity and that is was set (true) or throws an error if was not valid (and not set).\n     */\n  validateToken(token:string, set?:boolean) {\n    return new Promise((resolve, reject) => {\n      if(typeof(set)=='undefined') {\n        let set = false\n      }\n      let data = { Token: token }\n      let path = 'General/Authentication/Validate'\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          resolve(false)\n        } else {\n          if(set) {\n            this.Token = token\n          }\n          resolve(response.Value)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Set a token you've retrieved from your storage system as the active token for the cityworks instance. Note that this doesn't check the token for validity.\n     * @param {token} token - The token string to set as the active token.\n     * @return {boolean} Returns a boolean which apprises one that the token was set (true) or not set (false).\n     */\n  setToken(token) {\n    if(token!='' && token!=null) {\n      this.Token = token\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n     * Get currently set, valid token\n     * @param {token} token - The token string to set as the active token.\n     * @return {string} Returns a string which is the currently-set token or the boolean false value if no (valid) token set\n     */\n  getToken() {\n    if(this.Token=='' || this.Token==null) {\n      return false\n    } else {\n      return this.Token\n    }\n  }\n\n  /**\n     * Revoke all current user's tokens or only tokens created before a particular date and time.\n     * @param {number} [revokeBefore] - Datetime as an Epoch integer (number), if you wish to revoke only tokens created before a particular datetime\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the revocation outcome's success (true) or failure (false)\n     */\n  revokeToken(revokeBefore?:number) {\n    return new Promise((resolve, reject) => {\n      let data = { RevokeDate: revokeBefore }\n      let path = 'General/Token/RevokeUser'\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          resolve(false)\n        } else {\n          resolve(true)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  // App data\n\n  /**\n     * Get the localization settings for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the localization settings for the current Cityworks install\n     */\n  getLocalizationSettings() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/LocalizationSettings'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the system timezone options for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the timezone settings for the currentCityworks install\n     */\n  getTimezoneOptions() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/TimeZones'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the current install's location information\n     * @return {Object} Returns Promise object that represents an Object which contains the location information\n     */\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/CurrentLocation'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  // Licensing Checks\n  /**\n     * Check if a particular license is available to the currently-authenticated user\n     * @param {string} area - Area of access\n     * @param {string} service - Service to access\n     * @return {boolean} Returns Promise object that represents a boolean which informs access is granted (true) or denied (false)\n     */\n  licensedApiCheck(area: string, service: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"Area\": area,\n        \"Service\": service\n      }\n      let path = 'General/AppData/SelectedEntities'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if a current Cityworks install is licensed to use a particular extension\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {string} extension - Extension name\n     * @return {boolean} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionCheck(extension: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.extensions[extension])=='undefined') {\n        reject(new CWError(4, 'Extension provided does not exist or is mispelled.', {'provided': extension, 'available': this.extensions}))\n      }\n      let data = {\n        \"Extension\": this.extensions[extension]\n      }\n      let path = 'General/Authorization/LicensedExtensionCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check a whole list to see if current Cityworks install is licensed to use extensions\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {Array<string>} extension - Extension names\n     * @return {Object} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionsCheck(extensions: Array<string>) {\n    return new Promise((resolve, reject) => {\n        var data: { Extensions: Array<number> } = {\n          Extensions: []\n        }\n      _.forEach(extensions, (v) => {\n        if(typeof(this.extensions[v])=='undefined') {\n          reject(new CWError(5, 'Extension provided does not exist or is mispelled.', {'provided': v, 'available': this.extensions}))\n        } else {\n          data.Extensions.push(this.extensions[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedExtensionsCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_extensions = _.invert(this.extensions)\n        _.forEach(response, (ext_num, bool) => {\n          if(typeof(inv_extensions[ext_num])=='undefined') {\n            reject(new CWError(6, 'Extension index provided does not exist or isn\\'t configured properly.', {'provided_num_returned': ext_num, 'available': this.extensions}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_extensions[ext_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use a feature:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {string} [feature] - Feature to check to see if ciurrently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeatureCheck(feature: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.features[feature])=='undefined') {\n        reject(new CWError(7, 'Feature provided does not exist or is mispelled.', {'provided': feature, 'available': this.features}))\n      }\n      let data = {\n        \"Feature\": this.features[feature]\n      }\n      let path = 'General/Authorization/LicensedFeatureCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use features:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {Array<string>} [feature] - Features to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeaturesCheck(features: Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data: { Features: Array<number> } = {\n        Features: []\n      }\n      _.forEach(features, (v: string) => {\n        if(typeof(this.features[v])=='undefined') {\n          reject(new CWError(8, 'Feature provided does not exist or is mispelled.', {'provided': v, 'available': this.features}))\n        } else {\n          data.Features.push(this.features[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedFeaturesCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_features = _.invert(this.features)\n        _.forEach(response.Value, (feat_num, bool) => {\n          if(typeof(inv_features[feat_num])=='undefined') {\n            reject(new CWError(9, 'Feature index provided does not exist or isn\\'t configured properly.', {'provided': feat_num, 'available': inv_features}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_features[feat_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  // LicensedServicesCheck\n  // Check if current user is licensed to use services\n  // List req ServicesList of 'Area/Service', i.e. ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n  /**\n     * Check if current user is licensed to use services. List req ServicesList of 'Area/Service', i.e.:\n     *\n     * ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n     *\n     * @param {Array<string>} [services] - Services to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedServicesCheck(services: Array<string>) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authorization/LicensedServicesCheck'\n      var data: { Services: Array<string> } = {\n        Services: services\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of CityworksOnline sites for this user\n     *\n     * @param {string} [login] - Login Name to use when checking. Defaults to previously-stored login name.\n     * @param {string} [password] - Password to use when checking. Defaults to previously-stored password.\n     * @return {Object} Returns Promise object that represents an array of cityworks online sites available to this user.\n     */\n  cityworksOnlineSites(login?: string, password?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/CityworksOnlineSites'\n      var data = {\n        LoginName: (typeof(login)!='undefined') ? login: this.login,\n        Password:  (typeof(password)!='undefined') ? password : this.password\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a collection of the configured domains.\n     */\n  domains() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Domains'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @param {string} [login] - Optional login name to get user information for. Defaults to currently-set user name used for login.\n     * @return {Object} Returns Promise object that represents an Object with the user information\n     */\n  user(login?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/User'\n      let data = { LoginName: (typeof(login)!='undefined') ? login: this.login }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the software version number of the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a string of the version number\n     */\n  version() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Version'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n\n\n // export default new Cityworks() as cityworks\n"],"names":["require","CWError","code","message","info","name","this","_","has","get","JSON","stringify","General","cw","notifications","_this","Promise","resolve","reject","runRequest","then","response","Value","e","amIWatching","activityType","activityId","_this2","aType","null","case","task","provided","potential_activities","ActivityType","ActivityId","r","_proto","getActivityMetadataByIds","ids","table","_this3","tables","indexOf","available","Ids","TableName","console","log","getHistory","_this4","getWOEntityCostSummary","object_ids","_this5","ObjectIds","searchWOEntityCostSummary","search_id","_this6","SearchId","ActivityLinks","activityTypes","linkTypes","ReversibleMap","set","prototype","add","source_type","source_sid","destination_type","destination_sid","link_type","options","data","SourceType","SourceSid","DestType","DestSid","LinkType","type","sids","ActivitySids","return_data","Array","forEach","link","key","push","clone","SourceActivityType","SourceActivitySid","DestinationActivityType","DestinationActivitySid","activity_link_id","ActivityLinkId","remove","Gis","getConfig","whichType","whichId","getGisData","context","toLowerCase","domain","domainId","downloadMobile","cacheId","initialExtent","request","requestId","inspection","inspectionId","workOrder","workOrderSid","_this7","user","allDomains","allGroups","_this8","selectedEntities","_this9","getEntityAttributes","entityType","_this10","EntityType","MessageQueue","status","Pending","Processing","Complete","Failed","hook_types","Unknown","ActivityUpdate","Email","WebHook","processMessages","delete_successful","Delete","maxcount","MaxCount","Status","hours_to_keep","HoursToKeep","preferences","search","parameters","max_results","MaxResults","allowed_params","disallowed_params","v","k","value","concat","update","HookType","updateMessageStatus","getWebooks","hook_ids","HookIds","Search","searchTypes","Null","Request","WorkOrder","Inspection","Contract","Permit","GIS","PermitTask","PermitAddress","InspCommon","Case","WorkOrderEntity","StoreTransaction","Requisition","Material","WorkActivity","MaterialLeaf","WoTemplate","Employee","Analytics","TokenState","AssetCalculationResult","Equipment","CustomerAccount","InspTemplate","ProblemLeaf","AssetSplitRecord","PavementInsp","TvInspection","Projects","quick","text","QuickSearchText","execute","searchId","merge","getSaved","searchType","applyToEntities","employeeSid","length","savedEndpoint","displayFields","types","enableServices","searchIds","Enable","SearchIds","disableServices","getDefinition","getDefinitions","getDefinitionNames","deleteDefinitions","_this11","saveDefinition","searchFor","_this12","SearchFor","RequestAdmin","getTemplates","searchData","Comments","currentActivityType","sid","comment","ActivitySid","id","CommentId","getPredefined","problemSid","category","admin","create","sr_data","move","x","y","projection","z","base_data","RequestId","X","Y","changeProblem","ProblemSid","getById","getByIds","requestIds","RequestIds","getAuditLog","getCustomFields","changeCustomFieldCategory","categoryId","CategoryId","cancel","cancelReason","dateCancelled","uncancel","close","Message","reopen","_this13","_this14","_this15","searchObject","_this16","createSearchDefinition","searchName","sharedWithin","enableEurl","_this17","isString","getProblemNodes","viewOnly","displayMode","includeCancelled","DomainId","IncludeCancelled","ViewOnly","_this18","getProblems","forPublicOnly","onlyActiveTemplates","domainIds","ForPublicOnly","OnlyActiveTemplates","_this19","getProblemsByKeywords","keywords","_this20","Keywords","getPriorities","_this21","ProblemSids","getCustomFieldTemplate","_this22","getQASettings","_this23","getProblemLeaf","_this24","getStatuses","_this25","DomainIds","getEmployeeLists","listType","_this26","includes","getDispatchTos","getSubmitTos","streetCodes","_this27","getTemplatesById","problemSids","minimumDateModified","maximumDateModified","_this28","createTemplateSearchDefinition","_this29","getTemplateQAs","_this30","searchTemplates","_this31","templateIds","canCreate","includeInactiveIf","CanCreate","IncludeInactiveIf","_this32","getWOTemplates","includeInactive","_this33","IncludeInactive","InspectionAdmin","entityTypes","EntityTypes","forIn","insp_data","createFromEntities","createFromParent","createFromServiceRequest","createFromWorkOrder","InspectionId","inspectionIds","InspectionIds","CancelReason","DateCancelled","statuses","submitTos","includeInactiveEmployees","IncludeInactiveEmployees","connectAsset","entity","updateXY","facility","EntityUid","Entity","Facility_Id","Level_Id","getAnswers","inspections","getCycleFrom","getCycleIntervals","getCycleTypes","getDistricts","data_init","getTemplatesByIds","inspTemplateIds","InspTemplateIds","getTemplateEntityTypes","getQA","getQConditions","deleteAttachments","attachmentIds","AttachmentIds","downloadAttachment","attachmentId","_this34","AttachmentId","getAttachmentById","_this35","getAttachments","_this36","WorkOrderAdmin","getEntityGroups","getEntityTypes","entityGroups","EntityGroups","includeComments","includeInstructions","IncludeComments","IncludeInstructions","updateTemplate","wOTemplate","getTemplateGroupRights","wOTemplateIds","WOTemplateIds","getTemplateActivity","getUpdateFields","getTemplateEquipment","wOTemplateId","WOTemplateId","getTemplateLabor","getTemplateMaterial","getTemplateMapLayerFields","WorkOrderTemplateId","getTemplateTasks","getRelatedInspectionTemplates","wo_data","workOrderSId","s","combine","fromWorkOrderIds","toWorkOrderId","cancelCombinedWorkOrders","CancelCombinedWorkOrders","ToWorkOrderId","FromWorkOrderIds","workOrderId","WorkOrderId","path","workOrderSIds","workorderSId","isNumber","getInstructions","getCustomFieldValues","workorderSIds","getEntities","GetGisData","addEntities","entityInfo","UpdateXY","updateEntity","workComplete","WorkComplete","removeEntities","workOrderIds","WorkOrderIds","getWOsByEntities","entityUids","getSearchList","getSupervisors","getCategories","getStages","getExpenseTypes","CaseData","addGroup","caObjectId","caseDataGroupId","groupCode","CaObjectId","CaseDataGroupId","GroupCode","addDefaultGroups","busCaseId","BusCaseId","wipAddDetail","caseDataDetailId","caDataGroupId","columnSequence","detailCode","detailSequence","CaseDataDetailId","CaDataGroupId","ColumnSequence","DetailCode","DetailSequence","getGroupsByCaseId","deleteGroupsByCaseId","searchForGroups","filters","intersectionBy","keysIn","checkGIS","entityUid","updateGroupsFromAsset","addDetail","updateDetail","caDataDetailId","CaDataDetailId","lockDetail","Lock","unlockDetail","addListValue","listValue","ListValue","deleteListValue","searchForListValueIds","searchForListValueObjects","CaseFinancial","addFee","feeSetupId","FeeSetupId","addPayment","addRefund","caPaymentId","refundAmount","CaPaymentId","RefundAmount","addDepositPayment","caDepositId","CaDepositId","addDeposit","depositId","amount","DepositId","addInstrument","instTypeId","dateExpire","InstTypeId","Amount","DateExpire","updateFee","caFeeId","CaFeeId","voidRefund","caPaymentRefundId","voided","CaPaymentRefundId","Voided","addDefaultFees","addDefaultDeposits","getFees","getDeposits","getPayments","getInstruments","deleteFee","deleteFeesByCaseId","deletePayment","deleteRefund","deletePaymentsByCaseId","deleteDeposit","deleteDepositsByCaseId","deleteInstrument","caInstrumentId","CaInstrumentId","deleteInstrumentsByCaseId","searchFees","searchPayments","searchRefunds","searchDeposits","getAllFeeTemplates","searchFeeTemplates","searchCaseInstruments","getInstrumentList","addCaseInstrumentRelease","releasedBy","dateReleased","amountReleased","percentReleased","DateReleased","ReleasedBy","deleteCaseInstrumentRelease","caInstReleasesId","CaInstReleasesId","searchCaseInstrumentReleases","fees","searchAvailableFees","getTenderTypes","_this37","addTenderType","_this38","updateTenderType","tenderTypeId","_this39","TenderTypeId","CaseWorkflow","addTask","taskId","startPoint","endPoint","TaskId","StartPoint","EndPoint","addTaskResult","caTaskId","resultCode","resultID","resultSetID","CaTaskId","ResultCode","ResultID","ResultSetID","addTaskComment","CommentText","getTasksByCaseId","checkRelatedItems","CheckRelatedItems","getTasksById","caTaskIds","CaTaskIds","getResultsByTaskId","getCommentsForTask","getCommentsForTasks","updateTask","updateTaskComment","caTaskCommentId","commentId","CaTaskCommentId","setTaskResult","deleteTask","deleteTasksOnCase","deleteTaskComments","caTaskCommentIds","CaTaskCommentIds","searchForTasks","searchForTaskResults","addTaskAttachment","docName","file","locationType","DocName","getTaskAttachments","deleteTaskAttachment","caRelDocId","CaRelDocId","CaseAdmin","addBusinessCaseTemplate","updateBusinessCaseTemplate","getBusinessCaseTemplates","addCaseType","caseTypeName","caseTypeDesciption","CaseType","CaseTypeDesciption","updateCaseType","caseTypeId","CaseTypeId","getCaseTypes","searchCaseTypeIDs","searchCaseTypeObjects","addSubtype","subTypeName","subTypeDescription","SubType","SubTypeDesc","updateSubtype","subTypeId","SubTypeId","getSubtypes","getExpirations","addExpiration","getDisciplines","addDepartment","departmentCode","departmentName","DepartmentCode","DepartmentName","getDepartments","addDivision","departmentId","divisionName","DepartmentId","DivisionName","getDivisions","addHoliday","holidayDate","holidayDesc","halfDayFlag","HolidayDate","HolidayDesc","deleteHoliday","holidayId","HolidayId","getHolidays","addInspectionTimeBlock","labelText","startTime","endTime","inspTimeBlocksDetails","LabelText","StartTime","EndTime","getInspectionTimeBlocks","getNotificationCases","getNotificationTypes","addNumberingGroup","updateNumberingGroup","numberingGroupId","NumberingGroupId","getNumberingGroups","addPerson","Name","getPeople","addPeopleRole","roleCode","RoleCode","getPeopleRoles","addTaskResultDetail","updateTaskResultDetail","resultDetailId","ResultDetailId","getTaskResultDetails","addTaskResultFeeInsert","_this40","deleteTaskResultFeeInsert","taskResultFeeInsertId","_this41","TaskResultFeeInsertId","deleteTaskResultFeeInsertByTaskId","_this42","updateTaskResultFeeInsert","taskResultId","_this43","TaskResultId","getTaskResultFeeInsert","_this44","CaseAssets","attach","detach","caAddressId","CaAddressId","detachAll","getForCase","assets","workflow","financial","createChild","parentCaObjectId","ParentCaObjectId","createFromRequest","ServiceRequestId","caObjectIds","CaObjectIds","module","exports","base_url","settings","load","Token","login","password","gisToken","gisTokenUrl","error","general","activity_link","message_queue","gis","workorder","extensions","features","potential_loads","UnknownExtension","CwAnalytics","WebHooks","PLLPublicApp","SingleSignOn","UnknownFeature","ViewInspections","EditInspections","ViewServiceRequest","EditServiceRequest","ViewWorkOrder","EditWorkOrder","EquipmentCheckOut","OfficeField","Respond","Eurl","PaverInterface","Contracts","Storeroom","PLL","Cw4XL","TableEditor","CCTVInterface","MobileAndroid","MobileiOS","PerformanceBudgeting","Insights","RespondCase","RespondInspection","RespondServiceRequest","RespondTaskManager","RespondWorkOrder","Workload","OpX","TrimbleUnityMobile","TrimbleVegetationManager","secure","expires","default_domain","configure","pd","token","hostname","port","method","headers","Buffer","byteLength","querystring","timeout","https","str","on","chunk","match","obj","parse","postedData","api_returned_string","SyntaxError","write","end","authenticate","LoginName","Password","authenticateWithGISToken","GisToken","GisTokenUrl","Expires","validateToken","setToken","getToken","revokeToken","revokeBefore","RevokeDate","getLocalizationSettings","getTimezoneOptions","getCurrentLocation","licensedApiCheck","area","service","Area","Service","licensedExtensionCheck","extension","Extension","licensedExtensionsCheck","Extensions","rez","inv_extensions","invert","ext_num","bool","provided_num_returned","licensedFeatureCheck","feature","Feature","licensedFeaturesCheck","Features","inv_features","feat_num","licensedServicesCheck","services","Services","cityworksOnlineSites","domains","version","Cityworks"],"mappings":"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"}