{"version":3,"file":"index.js","sources":["../src/error.ts","../src/general.ts","../src/activity_link.ts","../src/gis.ts","../src/message_queue.ts","../src/search.ts","../src/cityworks.ts"],"sourcesContent":["interface CWErrorInt {\n  name: string\n  code: number\n  message: string\n  info?: string\n}\n\n/**\n * CWError implements a custom error class for this codebase with additional information\n *\n * `{name: string, code:number, info: object}`\n *\n */\nexport class CWError implements CWErrorInt {\n  /**\n   * Just statically set to \"Cityworks Exception\" for now\n   */\n  name: string\n  /**\n   * Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   */\n  code: number\n  /**\n   * The error message\n   */\n  message: string\n  /**\n   * Object stuffed with any other information one wishes to include in the thrown error\n   */\n  info?: string\n\n  /**\n   * CWError implements a custom error class for this codebase with additional information\n   *\n   * @param {number} code - Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   * @param {string} message - The error message\n   * @param {Object} info - Object stuffed with any other information one wishes to include in the thrown error\n   * @return {Object} Returns instance of CWError object\n   */\n  constructor(code:number, message:string, info?:object) {\n    this.name = \"Cityworks Exception\"\n    this.code = code\n    this.message = message\n    if(typeof(info) !== 'undefined') {\n      this.info = JSON.stringify(info)\n    }\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n/**\n * A plugin that contains \"general\" methods for a Cityworks install\n */\nexport class General {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get notifications for currently authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of available notifications\n   */\n  notifications() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('General/ActivityNotification/User', {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n\n  /**\n   * Find out if the current user is watching a particular activity (case, task, null [as a string])\n   *\n   * @param {string} activityType - which activity type the following ID will be for.\n   * @param {number} activityId - activity Case or CaseTask (task instance) ID to check\n   * @return {Object} Returns Promise object that represents a boolean indicating the currently authenticated user is watching the provided activity\n   */\n  amIWatching(activityType, activityId: number) {\n    return new Promise((resolve, reject) => {\n      let aType = {'null': 0, 'case': 1, 'task': 2}\n      if(typeof(aType[activityType])=='undefined') {\n        // reject with error\n        reject(new CWError(1, \"Activity type provided does not exist.\", {provided: activityType, potential_activities: aType}))\n      } else {\n        let data = {\"ActivityType\": aType[activityType], \"ActivityId\": activityId}\n        this.cw.runRequest('General/ActivityNotification/UserWatching', data).then(r => {\n          // console.log(r, 'response')\n          resolve(r.Value)\n        }).catch(e => {\n          reject(new CWError(2, \"Unknown error.\"))\n        })\n      }\n    })\n  }\n\n  /**\n   * Do a \"quick\" search for any string (an ID is best)\n   *\n   * @param {string} text - text to search the system for\n   * @return {Object} Returns Promise object that represents a collection of the currently authenticated user's notifications\n   */\n  quickSearch(text: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"QuickSearchText\": text,\n      }\n      this.cw.runRequest('General/QuickSearch/QuickSearch', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get CwMetatData by Type and CwSid\n   *\n   * @param {Array<number>} Ids\n   * @param {string} TableName - INSPECTION, REQUEST, WORKORDER require View permission on the activities\n   * @return {Object} Returns Promise object that represents a\n   */\n  getActivityMetadataByIds(ids: Array<number>, table: string) {\n    return new Promise((resolve, reject) => {\n      let tables = [\"INSPECTION\", \"REQUEST\", \"WORKORDER\"]\n      if(_.indexOf(tables, table)==-1) {\n        reject(new CWError(2, 'TableName provided does not exist or is mispelled.', {'provided': table, 'available':tables}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"TableName\": table\n      }\n      this.cw.runRequest('General/CwMetaData/ByTableNameSids', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities\n   *\n   * @param {Array<number>} ObjectIds\n   * @return {Object} Returns Promise object that represents a\n   */\n  getWOEntityCostSummary(object_ids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"ObjectIds\": object_ids\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for work order entities selected through a search definition\n   *\n   * @param {number} SearchId - Search Definition Id\n   * @return {Object} Returns Promise object that represents a\n   */\n  searchWOEntityCostSummary(search_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"SearchId\": search_id\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntitySearch', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\ninterface ActivityLink {\n  linkTypes: ReversibleMap<string, number>\n  activityTypes: ReversibleMap<string, number>\n  cw: any\n}\n\n/**\n * ActivityLinks implements the activity link functions\n *\n */\nexport class ActivityLinks implements ActivityLink {\n  /**\n   * Activity types to map string to number for internal use. Activity types available are:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   */\n  activityTypes: ReversibleMap<string, number>\n  /**\n   * Link types to map string to number for internal use. Link types available are:\n   *\n   *      \"null\", \"parent\", \"related\"\n   */\n  linkTypes: ReversibleMap<string, number>\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"null\", 0)\n    this.activityTypes.set(\"case\", 1)\n    this.activityTypes.set(\"inspection\", 2)\n    this.activityTypes.set(\"request\", 3)\n    this.activityTypes.set(\"workorder\", 4)\n    this.activityTypes.set(\"wipcase\", 5)\n\n    this.linkTypes = new ReversibleMap<string, number>()\n    this.linkTypes.set(\"null\", 0)\n    this.linkTypes.set(\"parent\", 1)\n    this.linkTypes.set(\"related\", 2)\n  }\n\n  /**\n   * Create a new activity link between two items.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  add(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(3, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Add'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Get the links for a particular node type by ID.\n   *\n   * @param {string} type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {Array<number>} sids - Array of numeric (S)IDs you wish to get of the specified type\n   * @return {Object} Returns Promise object that represents a collection\n   */\n  get(type: string, sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(type)) {\n        reject(new CWError(4, 'Activity type not found.', {'provided': type, 'options':this.activityTypes}))\n      }\n      let data = {\n        ActivityType: this.activityTypes.get(type),\n        ActivitySids: sids\n      }\n      let _this = this\n      let path = 'General/ActivityLink/ByActivitySids'\n      this.cw.runRequest(path, data).then((response: any) => {\n        let return_data = new Array()\n        _.forEach(response.Value, (link, key) => {\n          link.DestType = _this.activityTypes.get(link.DestType)\n          link.SourceType = _this.activityTypes.get(link.SourceType)\n          link.LinkType = _this.linkTypes.get(link.LinkType)\n          return_data.push(link)\n        })\n        resolve(return_data)\n      })\n    })\n  }\n\n  /**\n   * Clone a current activity link.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to clone a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to clone a link between SID as destination and a particular source\n   * @return {Object} Returns Promise object that represents a\n   */\n  clone(source_type: string, source_sid: number, destination_type: string, destination_sid: number) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      let data = {\n        SourceActivityType: this.activityTypes.get(source_type),\n        SourceActivitySid: source_sid,\n        DestinationActivityType: this.activityTypes.get(destination_type),\n        DestinationActivitySid: destination_sid\n      }\n      let path = 'General/ActivityLink/CloneByActivitySid'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Delete an activity link by ID\n   *\n   * @param {number} activity_link_id - The ID of the activity link one wishes to delete\n   * @return {Object} Returns Promise object that represents a\n   */\n  delete(activity_link_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        ActivityLinkId: activity_link_id\n      }\n      let path = 'General/ActivityLink/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Remove a link by specifying everything.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  remove(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(1, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Remove'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Gis {\n  /**\n   * @hidden\n   */\n  cw: any;\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw;\n  }\n\n  /**\n   * Get gis service configuration for user, group, domain, or service id\n   *\n   * @param {string} [whichType] - domain, group, mapservice, or user\n   * @param {number} [whichId] - domain, group, mapservice, or user Id\n   * @param {number} [getGisData] - If true, check for feature server JSON data, default is true\n   * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  getConfig(whichType, whichId, getGisData: boolean = true, context: Array<string> = []) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      whichType = whichType.toLowerCase();\n      let data: {DomainId?: any, GroupId?: any, MapServiceId?: any, UserId?: any, GetGisData: boolean, Security: Array<string>}\n      switch(whichType) {\n        case 'domain':\n          data = {DomainId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'group':\n          data = {GroupId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'mapservice':\n          data = {MapServiceId:whichId, GetGisData: getGisData, Security: context}\n          break;\n        case 'user':\n          data = {UserId:whichId, GetGisData: getGisData, Security: context}\n          break;\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n    * Get domain gis services\n    *\n    * @param {number} domainId - The mobile map cache Id to download\n    * @return {Object} Returns Promise object that represents an Object with the domain's default GIS services\n    */\n  domain(domainId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain';\n      let data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Download mobile map cache\n     *\n     * @param {number} cacheId - The mobile map cache Id to download\n     * @return {Object} Returns Promise object that represents a streaming download (?)\n     */\n  downloadMobile(cacheId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/DownloadMobileMapCache';\n      let data = {\n        MobileMapCacheId: cacheId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get initial extent for user\n   *\n   * @return {Object} Returns Promise object that represents ... (?)\n   */\n  initialExtent() {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InitialExtent';\n      let data = {};\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get service request gis services\n   *\n   * @param {number} requestId - The work order to check against.\n   * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n   * @return {Object} Returns Promise object that represents an Object with the specified request's entit(y|ies)\n   */\n  request(requestId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/ServiceRequestConfiguration';\n      let data = {\n        RequestId: requestId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get inspection gis services\n     *\n     * @param {number} inspectionId - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified inspection's entity\n     */\n  inspection(inspectionId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InspectionConfiguration';\n      let data = {\n        InspectionId: inspectionId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get workorder gis services\n     *\n     * @param {number} workOrderSid - The work order to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified work order's entit(y|ies)\n     */\n  workOrder(workOrderSid, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/WorkOrderConfiguration';\n      let data = {\n        WorkOrderSid: workOrderSid,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n     * Get service request gis services\n     *\n     * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n     * @param {boolean} [allDomains] services assigned to any domain the user belongs to, default is true\n     * @param {boolean} [allGroups] services assigned to any groups the user belongs to regardless of domain, default is true\n     * @param {boolean} [getGisData] If true, check for feature server JSON data, default is true\n     * @return {Object} Returns Promise object that represents an Object with the user's GIS services\n     */\n  user(context: Array<string> = [], allDomains: boolean = true, allGroups: boolean = true, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/User';\n      let data = {\n        AllDomains: allDomains,\n        AllGroups: allGroups,\n        GetGisData: getGisData,\n        Security: context\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n\n  /**\n     * Get currently selected entities from the Cityworks install's session for your user\n     * @return {Object} Returns Promise object that represents an Object with the currently-selected entities\n     */\n  selectedEntities() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/SelectedEntities';\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value);\n      });\n    });\n  }\n\n  /**\n   * Get Geocode server info by ServerId\n   *\n   * @param {number} ServiceId\n   * @return {Object} Returns Promise object that represents an object describing the provided Geocoder service configuration\n   */\n   // gis/GeoCode/GeocodeServer\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class MessageQueue {\n  /**\n   * @hidden\n   */\n  cw: any\n  /**\n   * Statuses -\n   * Pending: 0,\n   * Processing: 1,\n   * Complete: 2,\n   * Failed: 3\n   */\n  status: Object\n  /**\n   * Hook Types -\n   * Unknown: 0,\n   * ActivityUpdate: 1,\n   * Email: 2,\n   * WebHook: 3\n   */\n  hook_types: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.status = {\n      Pending: 0,\n      Processing: 1,\n      Complete: 2,\n      Failed: 3\n    }\n    this.hook_types = {\n      Unknown: 0,\n      ActivityUpdate: 1,\n      Email: 2,\n      WebHook: 3\n    }\n  }\n\n  /**\n   * Process Webhook MessageQueue records by MessageQueueId\n   *\n   * @param {Array<number>} [ids] - List of MessageQueueId values\n   * @param {boolean} [delete_successful] - automatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  processMessages(ids: Array<number>, delete_successful: boolean = false) {\n    return new Promise((resolve, reject) => {\n      let data = { Ids: ids, Delete: delete_successful}\n      let path = 'General/WebHookEvent/ProcessMessages'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  /**\n   * Get Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status -\n   * @param {number} [maxcount] - Maximum number returned. Defaults to 15\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  get(ids: Array<number>, status: string, maxcount: number = 15) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(1, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"MaxCount\": typeof(maxcount)!='undefined' ? maxcount : 15,\n        \"Status\": this.status[status]\n      }\n      let path = 'General/MessageQueue/ByIds'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  /**\n   * Delete Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status - automatically delete messages that complete with successful execution, default is false\n   * @param {number} [hours_to_keep] - utomatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  delete(ids: Array<number>, status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  // PreferencesList<GlobalPreference>\n  // Base response type: CoreResponseBase\n  // Get a list of message queue preferences\n  // This method has no parameters\n  preferences() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      let path = 'General/MessageQueue/Preferences'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  search(parameters, max_results?: number) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(max_results)!=='undefined') {\n        data.MaxResults = max_results\n      }\n      let allowed_params = ['Id', 'HookId', 'HookType', 'Result', 'DateCreatedBegin', 'DateCreatedEnd', 'DateUpdatedBegin', 'DateUpdatedEnd']\n      let disallowed_params = ['Status', 'MaxResults']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(4, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n      let path = 'General/MessageQueue/Search'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n   * Update queue message\n   *\n   * @param {Object} parameters - Provide allowed parameters:\n   *\n   *      {\n   *        HookId: number,\n   *        Id: number,\n   *        Packet: string,\n   *        Result: string,\n   *        Status: string, // Available options: Pending, Processing, Complete, Failed\n   *        HookType: string // Available options: Unknown, ActivityUpdate, Email, WebHook\n   *      }\n   *\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  update(parameters: any) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.hook_types, 'available':this.hook_types}))\n      } else if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])!=='undefined') {\n        data.HookType = this.hook_types[parameters.hook_types]\n      }\n      let allowed_params = ['Id', 'HookId', 'Packet', 'Result']\n      let disallowed_params = ['Status', 'HookType']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(5, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n\n      let path = 'General/MessageQueue/Update'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  updateMessageStatus(ids: number[], status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/UpdateMessageStatus'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  getWebooks(hook_ids) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"HookIds\": hook_ids\n      }\n      let path = 'General/MessageQueue/WebHooks'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Search {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n}\n","import { CWError } from './error'\nimport { General } from './general'\nimport { ActivityLinks } from './activity_link'\nimport { Gis } from './gis'\nimport { MessageQueue } from './message_queue'\nimport { Search } from './search'\n\nconst https = require('https')\nconst querystring = require('querystring')\nconst _ = require('lodash')\n\ninterface postData {\n  data?: string\n  token?: string\n}\n\n/**\n * Core interface Citywork which defines the access vars for many of the functions and the connection settings\n */\ninterface Citywork {\n  domain: any\n  settings: Object\n  login?: string\n  password?: string\n  Token?: string\n  gisToken?: string\n  gisTokenUrl?: string\n\n  general?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  // case: Object\n  // inspection: Object\n  // workorder: Object\n  // request: Object\n\n  extensions: Object\n  features: Object\n}\n\n/**\n * Core class Cityworks with most of the authentication and install capabilities functions\n */\nmodule.exports = class Cityworks implements Citywork {\n  /**\n   * The domain of the cityworks install. Defaults to Cityworks Online\n   */\n  domain: string\n  /**\n   * Stores the currently in use authentication token\n   */\n  Token?: string\n  /**\n   * Stores the login username\n   */\n  login?: string\n  /**\n   * Holds the login password\n   */\n  password?: string\n  /**\n   * Holds the GIS Token for GIS-based Authentication (Portal)\n   */\n  gisToken?: string\n  /**\n   * Holds the GIS Token URL for GIS-based Authentication (Portal)\n   */\n  gisTokenUrl?: string\n  /**\n   * Stores settings including path (defaults to \"cityworks\"), secure (defaults to true), expires (defaults to null - does not expire)\n   */\n  settings: {\n    path: string,\n    secure: boolean,\n    expires: any\n  }\n  error?: Object\n  general?: Object\n  activity_link?: Object\n  message_queue?: Object\n  gis?: Object\n  search?: Object\n\n  extensions: Object\n  features: Object\n  potential_loads: Array<string>\n\n  /**\n     * Contructor for a new cityworks instance's object, allows one to optionally configure the domain and other settings right from the get-go\n     * @param {string} [domain] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'workorder', 'inspection', 'request', 'case']\n     */\n  constructor(domain?: string, settings?: Object, load?: Array<string>) {\n    this.domain = 'cityworksonline'\n    this.extensions = {\"UnknownExtension\": 0, \"CwAnalytics\": 1, \"WebHooks\": 2, \"PLLPublicApp\": 3, \"ActivityUpdate\": 4, \"SingleSignOn\": 5}\n    this.features = {\"UnknownFeature\": 0, \"ViewInspections\": 1, \"EditInspections\": 2, \"ViewServiceRequest\": 3, \"EditServiceRequest\": 4, \"ViewWorkOrder\": 5, \"EditWorkOrder\": 6, \"EquipmentCheckOut\": 7, \"OfficeField\": 8, \"Respond\": 9, \"Eurl\": 10, \"PaverInterface\": 11, \"Contracts\": 12, \"Storeroom\": 13, \"PLL\": 14, \"Cw4XL\": 15, \"TableEditor\": 16, \"CCTVInterface\": 17, \"MobileAndroid\": 18, \"MobileiOS\": 19, \"PerformanceBudgeting\": 20, \"Insights\": 21, \"RespondCase\": 22, \"RespondInspection\": 23, \"RespondServiceRequest\": 24, \"RespondTaskManager\": 25, \"RespondWorkOrder\": 26, \"Workload\": 27, \"OpX\": 28, \"TrimbleUnityMobile\": 29, \"TrimbleVegetationManager\": 30}\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null\n    }\n    this.potential_loads = ['general', 'activity_link', 'message_queue', 'gis', 'search']\n    if(typeof(domain)!='undefined') {\n      this.configure(domain, settings, load)\n    }\n  }\n\n  /**\n     * Configure a new cityworks instance's domain and other settings\n     *\n     * @param {string} [domain] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'search', 'workorder', 'inspection', 'request', 'case']\n     * @return {boolean} Returns true if successful, otherwise, throws error\n     */\n  configure(domain?: string, settings?: Object, load?: Array<string>) {\n    if(typeof domain !== 'undefined') { this.domain = domain } else { this.domain = 'cityworksonline' }\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null\n    }\n\n    if(typeof(settings)!='undefined') {\n      _.forEach(settings, (v,k) => {\n        if(typeof(this.settings[k])!='undefined') {this.settings[k] = v}\n      })\n    }\n\n    if(typeof(load)=='undefined') {\n      this.general = new General(this)\n      this.activity_link = new ActivityLinks(this)\n      this.message_queue = new MessageQueue(this)\n    } else {\n      let _this = this\n      _.forEach(this.potential_loads, function(v) {\n        switch(v) {\n          case 'general':\n            _this.general = new General(_this)\n          break\n          case 'activity_link':\n            _this.activity_link = new ActivityLinks(_this)\n          break\n          case 'message_queue':\n            _this.message_queue = new MessageQueue(_this)\n          break\n          case 'gis':\n            _this.gis = new Gis(_this)\n          break\n          case 'search':\n            _this.search = new Search(_this)\n          break\n        }\n      })\n    }\n  }\n\n  /**\n     * Send a request to the Cityworks API\n     *\n     * If one ever needs to access or call an unimplemented API endpoint of a Cityworks install, one can call this method directly with the path and data payload:\n     *\n     * `cityworks.runRequest(path, data)`\n     *\n     * @param {string} path - The path to the particular endpoint\n     * @param {Object} data - The data object to be sent to the Cityworks API\n     * @return {Object} Returns Promise object that represents the json object returned from the Cityworks API\n     */\n  runRequest(path, data) {\n    return new Promise((resolve, reject) => {\n      let pd = {} as postData\n      pd.data = JSON.stringify(data)\n\n      if(typeof(this.Token) !== 'undefined' && this.Token != '' && path!='General/Authentication/CityworksOnlineAuthenticate' && path!='General/Authentication/Authenticate') {\n        pd.token = this.Token\n      }\n      let obj: {\n        Status: number,\n        Message: string\n      }\n      let options = {\n        hostname: this.domain,\n        port: 443,\n        path: '/' + this.settings.path + '/services/' + path,\n        method: 'POST',\n        headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n           'Content-Length': Buffer.byteLength(querystring.stringify(pd))\n        },\n        timeout: 10000000\n      }\n\n      let request = https.request(options, (response) => {\n          let str=''\n          response.on('error',function(e){\n              console.log(e, 'Caught on error')\n              reject(new CWError(13, \"Unknown error.\", e))\n          })\n\n          response.on('data',function(chunk){\n              str+=chunk\n          })\n\n          response.on('end',function(){\n            try {\n              var test_str = JSON.stringify(str) + \"[test string]\"\n              if(test_str.match(/\\<h2\\>Object\\ moved\\ to/)==null) {\n                var obj=JSON.parse(str)\n                // if(path=='General/ActivityNotification/UserWatching') {\n                //   console.log(str, options, pd, obj)\n                // }\n                if(typeof(obj)=='undefined') {\n                  // failed\n                  reject(new CWError(10, 'No response received from Cityworks API.'))\n                } else if(typeof(obj)!='undefined' && typeof(obj.Value)!='undefined') { // && typeof(response.Value.Token)!='undefined') {\n                  // console.log(str, options, pd, obj)\n                  resolve(obj)\n                } else {\n                  reject(new CWError(3, \"Unknown error.\", {options: options, postedData: pd, api_returned_string: obj}))\n                }\n              } else {\n                reject(new CWError(1, \"Error parsing JSON. Cityworks returned HTML.\", {response: str}))\n              }\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log('try/catch error on JSON')\n                reject(new CWError(1, \"Error parsing JSON.\", {error: e}))\n              } else {\n                console.log('try/catch error on JSON')\n                reject(new CWError(1, \"Error parsing JSON.\"))\n              }\n            }\n          })\n      })\n      request.write(querystring.stringify(pd))\n      request.end()\n    })\n  }\n\n  /**\n     * Authenticate with the Cityworks API and store an access token for use. Stores the token on cityworks.Token.\n     * @param {string} login - User's login name\n     * @param {password} password - User's password\n     * @return {Object} Returns Promise object that represents a boolean which tells you the login succeeded (true) or failed (false).\n     */\n  authenticate(login: string, password: string) {\n    return new Promise((resolve, reject) => {\n      let data = { LoginName:login, Password:password }\n      let path = 'General/Authentication/Authenticate'\n      if(this.domain == 'cityworksonline') {\n        path = 'General/Authentication/CityworksOnlineAuthenticate'\n      }\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          reject(new CWError(10, response.Message))\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.login = login\n          this.password = password\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          reject(new CWError(11, 'Unknown Error'))\n        }\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  }\n\n  /**\n     * Authenticate a username with a GIS Token\n     * @param {login} - Gis user name, should match a Cityworks employee login name\n     * @param {string} gisToken - Gis Oauth2 access token\n     * @param {string} gisTokenUrl - Base url to GIS server (not the '/generateToken' endpoint)\n     * @param {number} [expires] - Authenticate to Cityworks for a specified number of milliseconds, defaults to 2 weeks\n     */\n  authenticateWithGISToken(login: string, gisToken: string, gisTokenUrl: string, expires?: number) {\n    this.login = login\n    this.gisToken = gisToken\n    this.gisTokenUrl = gisTokenUrl\n    if(typeof(expires)!='undefined') {\n      expires = 1209600000\n    }\n\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/AuthenticateGisToken'\n      let data = { LoginName:this.login, GisToken: this.gisToken, GisTokenUrl: this.gisTokenUrl, Expires: expires}\n\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          // TODO: CWError here.\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          resolve(false)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Validate provided token\n     * @param {string} token - User's login name\n     * @param {boolean} [set] - Set a valid token as the cityworks instance's active token\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the token's validity and that is was set (true) or throws an error if was not valid (and not set).\n     */\n  validateToken(token:string, set?:boolean) {\n    return new Promise((resolve, reject) => {\n      if(typeof(set)=='undefined') {\n        let set = false\n      }\n      let data = { Token: token }\n      let path = 'General/Authentication/Validate'\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          resolve(false)\n        } else {\n          if(set) {\n            this.Token = token\n          }\n          resolve(response.Value)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Set a token you've retrieved from your storage system as the active token for the cityworks instance. Note that this doesn't check the token for validity.\n     * @param {token} token - The token string to set as the active token.\n     * @return {boolean} Returns a boolean which apprises one that the token was set (true) or not set (false).\n     */\n  setToken(token) {\n    if(token!='' && token!=null) {\n      this.Token = token\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n     * Get currently set, valid token\n     * @param {token} token - The token string to set as the active token.\n     * @return {string} Returns a string which is the currently-set token or the boolean false value if no (valid) token set\n     */\n  getToken() {\n    if(this.Token=='' || this.Token==null) {\n      return false\n    } else {\n      return this.Token\n    }\n  }\n\n  /**\n     * Revoke all current user's tokens or only tokens created before a particular date and time.\n     * @param {number} [revokeBefore] - Datetime as an Epoch integer (number), if you wish to revoke only tokens created before a particular datetime\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the revocation outcome's success (true) or failure (false)\n     */\n  revokeToken(revokeBefore?:number) {\n    return new Promise((resolve, reject) => {\n      let data = { RevokeDate: revokeBefore }\n      let path = 'General/Token/RevokeUser'\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          resolve(false)\n        } else {\n          resolve(true)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  // App data\n\n  /**\n     * Get the localization settings for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the localization settings for the current Cityworks install\n     */\n  getLocalizationSettings() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/LocalizationSettings'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the system timezone options for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the timezone settings for the currentCityworks install\n     */\n  getTimezoneOptions() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/TimeZones'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the current install's location information\n     * @return {Object} Returns Promise object that represents an Object which contains the location information\n     */\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/CurrentLocation'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  // Licensing Checks\n  /**\n     * Check if a particular license is available to the currently-authenticated user\n     * @param {string} area - Area of access\n     * @param {string} service - Service to access\n     * @return {boolean} Returns Promise object that represents a boolean which informs access is granted (true) or denied (false)\n     */\n  licensedApiCheck(area: string, service: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"Area\": area,\n        \"Service\": service\n      }\n      let path = 'General/AppData/SelectedEntities'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if a current Cityworks install is licensed to use a particular extension\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {string} extension - Extension name\n     * @return {boolean} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionCheck(extension: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.extensions[extension])=='undefined') {\n        reject(new CWError(4, 'Extension provided does not exist or is mispelled.', {'provided': extension, 'available': this.extensions}))\n      }\n      let data = {\n        \"Extension\": this.extensions[extension]\n      }\n      let path = 'General/Authorization/LicensedExtensionCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check a whole list to see if current Cityworks install is licensed to use extensions\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {Array<string>} extension - Extension names\n     * @return {Object} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionsCheck(extensions: Array<string>) {\n    return new Promise((resolve, reject) => {\n        var data: { Extensions: Array<number> } = {\n          Extensions: []\n        }\n      _.forEach(extensions, (v) => {\n        if(typeof(this.extensions[v])=='undefined') {\n          reject(new CWError(5, 'Extension provided does not exist or is mispelled.', {'provided': v, 'available': this.extensions}))\n        } else {\n          data.Extensions.push(this.extensions[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedExtensionsCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_extensions = _.invert(this.extensions)\n        _.forEach(response, (ext_num, bool) => {\n          if(typeof(inv_extensions[ext_num])=='undefined') {\n            reject(new CWError(6, 'Extension index provided does not exist or isn\\'t configured properly.', {'provided_num_returned': ext_num, 'available': this.extensions}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_extensions[ext_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use a feature:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {string} [feature] - Feature to check to see if ciurrently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeatureCheck(feature: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.features[feature])=='undefined') {\n        reject(new CWError(7, 'Feature provided does not exist or is mispelled.', {'provided': feature, 'available': this.features}))\n      }\n      let data = {\n        \"Feature\": this.features[feature]\n      }\n      let path = 'General/Authorization/LicensedFeatureCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use features:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {Array<string>} [feature] - Features to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeaturesCheck(features: Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data: { Features: Array<number> } = {\n        Features: []\n      }\n      _.forEach(features, (v: string) => {\n        if(typeof(this.features[v])=='undefined') {\n          reject(new CWError(8, 'Feature provided does not exist or is mispelled.', {'provided': v, 'available': this.features}))\n        } else {\n          data.Features.push(this.features[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedFeaturesCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_features = _.invert(this.features)\n        _.forEach(response.Value, (feat_num, bool) => {\n          if(typeof(inv_features[feat_num])=='undefined') {\n            reject(new CWError(9, 'Feature index provided does not exist or isn\\'t configured properly.', {'provided': feat_num, 'available': inv_features}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_features[feat_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  // LicensedServicesCheck\n  // Check if current user is licensed to use services\n  // List req ServicesList of 'Area/Service', i.e. ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n  /**\n     * Check if current user is licensed to use services. List req ServicesList of 'Area/Service', i.e.:\n     *\n     * ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n     *\n     * @param {Array<string>} [services] - Services to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedServicesCheck(services: Array<string>) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authorization/LicensedServicesCheck'\n      var data: { Services: Array<string> } = {\n        Services: services\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of CityworksOnline sites for this user\n     *\n     * @param {string} [login] - Login Name to use when checking. Defaults to previously-stored login name.\n     * @param {string} [password] - Password to use when checking. Defaults to previously-stored password.\n     * @return {Object} Returns Promise object that represents an array of cityworks online sites available to this user.\n     */\n  cityworksOnlineSites(login?: string, password?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/CityworksOnlineSites'\n      var data = {\n        LoginName: (typeof(login)!='undefined') ? login: this.login,\n        Password:  (typeof(password)!='undefined') ? password : this.password\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a collection of the configured domains.\n     */\n  domains() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Domains'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @param {string} [login] - Optional login name to get user information for. Defaults to currently-set user name used for login.\n     * @return {Object} Returns Promise object that represents an Object with the user information\n     */\n  user(login?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/User'\n      let data = { LoginName: (typeof(login)!='undefined') ? login: this.login }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the software version number of the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a string of the version number\n     */\n  version() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Version'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n\n\n // export default new Cityworks() as cityworks\n"],"names":["CWError","code","message","info","name","this","JSON","stringify","_","require","General","cw","notifications","Promise","resolve","reject","_this","runRequest","then","response","Value","amIWatching","activityType","activityId","aType","null","case","task","provided","potential_activities","_this2","ActivityType","ActivityId","r","e","quickSearch","text","_this3","QuickSearchText","getActivityMetadataByIds","ids","table","tables","indexOf","available","_this4","Ids","TableName","console","log","getWOEntityCostSummary","object_ids","_this5","ObjectIds","searchWOEntityCostSummary","search_id","_this6","SearchId","ActivityLinks","activityTypes","linkTypes","ReversibleMap","set","add","source_type","source_sid","destination_type","destination_sid","link_type","has","options","data","SourceType","get","SourceSid","DestType","DestSid","LinkType","type","sids","ActivitySids","return_data","Array","forEach","link","key","push","clone","SourceActivityType","SourceActivitySid","DestinationActivityType","DestinationActivitySid","activity_link_id","ActivityLinkId","remove","Gis","getConfig","whichType","whichId","getGisData","context","toLowerCase","domain","domainId","downloadMobile","cacheId","initialExtent","request","requestId","inspection","inspectionId","workOrder","workOrderSid","_this7","user","allDomains","allGroups","_this8","selectedEntities","_this9","MessageQueue","status","hook_types","Pending","Processing","Complete","Failed","Unknown","ActivityUpdate","Email","WebHook","processMessages","delete_successful","Delete","maxcount","MaxCount","Status","hours_to_keep","HoursToKeep","preferences","search","parameters","max_results","MaxResults","allowed_params","disallowed_params","v","k","value","concat","update","HookType","updateMessageStatus","getWebooks","hook_ids","HookIds","Search","https","querystring","module","exports","settings","load","Token","login","password","gisToken","gisTokenUrl","error","general","activity_link","message_queue","gis","extensions","features","potential_loads","UnknownExtension","CwAnalytics","WebHooks","PLLPublicApp","SingleSignOn","UnknownFeature","ViewInspections","EditInspections","ViewServiceRequest","EditServiceRequest","ViewWorkOrder","EditWorkOrder","EquipmentCheckOut","OfficeField","Respond","Eurl","PaverInterface","Contracts","Storeroom","PLL","Cw4XL","TableEditor","CCTVInterface","MobileAndroid","MobileiOS","PerformanceBudgeting","Insights","RespondCase","RespondInspection","RespondServiceRequest","RespondTaskManager","RespondWorkOrder","Workload","OpX","TrimbleUnityMobile","TrimbleVegetationManager","path","secure","expires","configure","pd","token","hostname","port","method","headers","Buffer","byteLength","timeout","str","on","chunk","match","obj","parse","postedData","api_returned_string","SyntaxError","write","end","authenticate","LoginName","Password","Message","authenticateWithGISToken","GisToken","GisTokenUrl","Expires","validateToken","setToken","getToken","revokeToken","revokeBefore","RevokeDate","getLocalizationSettings","getTimezoneOptions","getCurrentLocation","_this10","licensedApiCheck","area","service","_this11","Area","Service","licensedExtensionCheck","extension","_this12","Extension","licensedExtensionsCheck","Extensions","_this13","rez","inv_extensions","invert","ext_num","bool","provided_num_returned","licensedFeatureCheck","feature","_this14","Feature","licensedFeaturesCheck","Features","_this15","inv_features","feat_num","licensedServicesCheck","services","_this16","Services","cityworksOnlineSites","_this17","domains","_this18","_this19","version","_this20"],"mappings":"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"}