{"version":3,"file":"index.js","sources":["../src/error.ts","../src/general.ts","../src/activity_link.ts","../src/gis.ts","../src/message_queue.ts","../src/search.ts","../src/request.ts","../src/inspection.ts","../src/workorder.ts","../src/briefcase.ts","../src/case_data.ts","../src/case_financial.ts","../src/comments.ts","../src/case_workflow.ts","../src/case_admin.ts","../src/case_assets.ts","../src/workorder_admin.ts","../src/inspection_admin.ts","../src/request_admin.ts","../src/workorder_costs.ts","../src/inspection_costs.ts","../src/request_costs.ts","../src/index.ts"],"sourcesContent":["const _ = require('lodash')\n\n/**\n * CWErrorInt interface definition for implementation by CWError\n *\n * `{name: string, code: number, message: string, info?: string}`\n *\n */\nexport interface CWErrorInt {\n  name: string\n  code: number\n  message: string\n  info?: string\n}\n\n/**\n * CWError implements a custom error class for this codebase with additional information\n *\n */\nexport class CWError implements CWErrorInt {\n  /**\n   * Just statically set to \"Cityworks Exception\" for now\n   */\n  name: string\n  /**\n   * Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   */\n  code: number\n  /**\n   * The error message\n   */\n  message: string\n  /**\n   * Object stuffed with any other information one wishes to include in the thrown error\n   */\n  info?: string\n\n  /**\n   * CWError implements a custom error class for this codebase with additional information\n   *\n   * @param {number} code - Number for the thrown error (Efforts were made to make these unique when thrown throughout the codebase)\n   * @param {string} message - The error message\n   * @param {Object} info - Object stuffed with any other information one wishes to include in the thrown error\n   * @return {Object} Returns instance of CWError object\n   */\n  constructor(code:number, message:string, info?:object) {\n    this.name = \"Cityworks Exception\"\n    this.code = code\n    this.message = message\n    if(typeof(info) !== 'undefined') {\n      if(_.has(info, 'Message'))\n        this.message = _.get(info, 'Message')\n      this.info = JSON.stringify(info)\n    }\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n/**\n * A plugin that contains \"general\" methods for a Cityworks install\n */\nexport class General {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get notifications for currently authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of available notifications\n   */\n  notifications() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('General/ActivityNotification/User', {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Find out if the current user is watching a particular activity (case, task, null [as a string])\n   *\n   * @param {string} activityType - which activity type the following ID will be for.\n   * @param {number} activityId - activity Case or CaseTask (task instance) ID to check\n   * @return {Object} Returns Promise object that represents a boolean indicating the currently authenticated user is watching the provided activity\n   */\n  amIWatching(activityType, activityId: number) {\n    return new Promise((resolve, reject) => {\n      let aType = {'null': 0, 'case': 1, 'task': 2}\n      if(typeof(aType[activityType])=='undefined') {\n        // reject with error\n        reject(new CWError(1, \"Activity type provided does not exist.\", {provided: activityType, potential_activities: aType}))\n      } else {\n        let data = {\"ActivityType\": aType[activityType], \"ActivityId\": activityId}\n        this.cw.runRequest('General/ActivityNotification/UserWatching', data).then(r => {\n          // console.log(r, 'response')\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get CwMetatData by Type and CwSid\n   *\n   * @param {Array<number>} Ids\n   * @param {string} TableName - INSPECTION, REQUEST, WORKORDER require View permission on the activities\n   * @return {Object} Returns Promise object that represents a\n   */\n  getActivityMetadataByIds(ids: Array<number>, table: string) {\n    return new Promise((resolve, reject) => {\n      let tables = [\"INSPECTION\", \"REQUEST\", \"WORKORDER\"]\n      if(_.indexOf(tables, table)==-1) {\n        reject(new CWError(2, 'TableName provided does not exist or is mispelled.', {'provided': table, 'available':tables}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"TableName\": table\n      }\n      this.cw.runRequest('General/CwMetaData/ByTableNameSids', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get recent history for authenticated user\n   *\n   * @return {Object} Returns Promise object that represents a collection of RecentActivity objects\n   */\n  getHistory() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      this.cw.runRequest('Ams/Search/RecentActivity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for WorkOrder entities\n   *\n   * @param {Array<number>} ObjectIds\n   * @return {Object} Returns Promise object that represents a\n   */\n  getWOEntityCostSummary(object_ids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"ObjectIds\": object_ids\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntity', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cost summary for WorkOrder entities selected through a search definition\n   *\n   * @param {number} SearchId - Search Definition Id\n   * @return {Object} Returns Promise object that represents a\n   */\n  searchWOEntityCostSummary(search_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"SearchId\": search_id\n      }\n      this.cw.runRequest('General/CostSummary/WorkOrderEntitySearch', data).then(r => {\n        console.log(r)\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\n/**\n * ActivityLink interface for ActivityLinks\n *\n */\nexport interface ActivityLink {\n  linkTypes: ReversibleMap<string, number>\n  activityTypes: ReversibleMap<string, number>\n  cw: any\n}\n\n/**\n * ActivityLinks implements the activity link functions via using the ActivityLink interface\n *\n */\nexport class ActivityLinks implements ActivityLink {\n  /**\n   * Activity types to map string to number for internal use. Activity types available are:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   */\n  activityTypes: ReversibleMap<string, number>\n  /**\n   * Link types to map string to number for internal use. Link types available are:\n   *\n   *      \"null\", \"parent\", \"related\"\n   */\n  linkTypes: ReversibleMap<string, number>\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"null\", 0)\n    this.activityTypes.set(\"case\", 1)\n    this.activityTypes.set(\"inspection\", 2)\n    this.activityTypes.set(\"request\", 3)\n    this.activityTypes.set(\"workorder\", 4)\n    this.activityTypes.set(\"wipcase\", 5)\n\n    this.linkTypes = new ReversibleMap<string, number>()\n    this.linkTypes.set(\"null\", 0)\n    this.linkTypes.set(\"parent\", 1)\n    this.linkTypes.set(\"related\", 2)\n  }\n\n  /**\n   * Create a new activity link between two items.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  add(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(3, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Add'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the links for a particular node type by ID.\n   *\n   * @param {string} type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {Array<number>} sids - Array of numeric (S)IDs you wish to get of the specified type\n   * @return {Object} Returns Promise object that represents a collection\n   */\n  get(type: string, sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(type)) {\n        reject(new CWError(4, 'Activity type not found.', {'provided': type, 'options':this.activityTypes}))\n      }\n      let data = {\n        ActivityType: this.activityTypes.get(type),\n        ActivitySids: sids\n      }\n      let _this = this\n      let path = 'General/ActivityLink/ByActivitySids'\n      this.cw.runRequest(path, data).then((response: any) => {\n        let return_data = new Array()\n        _.forEach(response.Value, (link, key) => {\n          link.DestType = _this.activityTypes.get(link.DestType)\n          link.SourceType = _this.activityTypes.get(link.SourceType)\n          link.LinkType = _this.linkTypes.get(link.LinkType)\n          return_data.push(link)\n        })\n        resolve(return_data)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Clone a current activity link.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to clone a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to clone a link between SID as destination and a particular source\n   * @return {Object} Returns Promise object that represents a\n   */\n  clone(source_type: string, source_sid: number, destination_type: string, destination_sid: number) {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(2, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      let data = {\n        SourceActivityType: this.activityTypes.get(source_type),\n        SourceActivitySid: source_sid,\n        DestinationActivityType: this.activityTypes.get(destination_type),\n        DestinationActivitySid: destination_sid\n      }\n      let path = 'General/ActivityLink/CloneByActivitySid'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete an activity link by ID\n   *\n   * @param {number} activity_link_id - The ID of the activity link one wishes to delete\n   * @return {Object} Returns Promise object that represents a\n   */\n  delete(activity_link_id: number) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        ActivityLinkId: activity_link_id\n      }\n      let path = 'General/ActivityLink/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Remove a link by specifying everything.\n   *\n   * @param {string} source_type - Source type as string. Options:\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} source_sid - Source SID (numeric ID) one wishes to remove a link between SID as source and a particular destination\n   * @param {string} destination_type - Destination type as string\n   *\n   *      \"null\", \"case\", \"inspection\", \"request\", \"workorder\", \"wipcase\"\n   *\n   * @param {number} destination_sid - Destination SID (numeric ID) one wishes to remove a link between SID as destination and a particular source\n   * @param {string} link_type - The type of link which exists between provided source and destination. Defaults to `related`. Options:\n   *\n   *      \"null\", \"parent\", \"related\"\n   *\n   * @return {Object} Returns Promise object that represents a\n   */\n  remove(source_type: string, source_sid: number, destination_type: string, destination_sid: number, link_type: string = 'related') {\n    return new Promise((resolve, reject) => {\n      if(!this.activityTypes.has(source_type)) {\n        reject(new CWError(1, 'Source type not found.', {'provided': source_type, 'options':this.activityTypes}))\n      }\n      if(!this.activityTypes.has(destination_type)) {\n        reject(new CWError(1, 'Destination type not found.', {'provided': destination_type, 'options':this.activityTypes}))\n      }\n      if(!this.linkTypes.has(link_type)) {\n        reject(new CWError(1, 'Link type not found.', {'provided': link_type, 'options':this.linkTypes}))\n      }\n      let data = {\n        SourceType: this.activityTypes.get(source_type),\n        SourceSid: source_sid,\n        DestType: this.activityTypes.get(destination_type),\n        DestSid: destination_sid,\n        LinkType: this.linkTypes.get(link_type)\n      }\n      let path = 'General/ActivityLink/Remove'\n      this.cw.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Gis {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get gis service configuration for user, group, domain, or service id\n   *\n   * @param {string} [whichType] - domain, group, mapservice, or user\n   * @param {number} [whichId] - domain, group, mapservice, or user Id\n   * @param {number} [getGisData] - If true, check for feature server JSON data, default is true\n   * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  getConfig(whichType, whichId, getGisData: boolean = true, context: Array<string> = []) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain'\n      whichType = whichType.toLowerCase()\n      let data: {DomainId?: any, GroupId?: any, MapServiceId?: any, UserId?: any, GetGisData: boolean, Security: Array<string>}\n      switch(whichType) {\n        case 'domain':\n          data = {DomainId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'group':\n          data = {GroupId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'mapservice':\n          data = {MapServiceId:whichId, GetGisData: getGisData, Security: context}\n          break\n        case 'user':\n          data = {UserId:whichId, GetGisData: getGisData, Security: context}\n          break\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n    * Get domain gis services\n    *\n    * @param {number} domainId - The mobile map cache Id to download\n    * @return {Object} Returns Promise object that represents an Object with the domain's default GIS services\n    */\n  domain(domainId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/Domain'\n      let data = {\n        DomainId: domainId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Download mobile map cache\n     *\n     * @param {number} cacheId - The mobile map cache Id to download\n     * @return {Object} Returns Promise object that represents a streaming download (?)\n     */\n  downloadMobile(cacheId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/DownloadMobileMapCache'\n      let data = {\n        MobileMapCacheId: cacheId\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get initial extent for user\n   *\n   * @return {Object} Returns Promise object that represents ... (?)\n   */\n  initialExtent() {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InitialExtent'\n      let data = {};\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get service request gis services\n   *\n   * @param {number} requestId - The WorkOrder to check against.\n   * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n   * @return {Object} Returns Promise object that represents an Object with the specified request's entit(y|ies)\n   */\n  request(requestId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/ServiceRequestConfiguration'\n      let data = {\n        RequestId: requestId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get inspection gis services\n     *\n     * @param {number} inspectionId - The WorkOrder to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified inspection's entity\n     */\n  inspection(inspectionId, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/InspectionConfiguration'\n      let data = {\n        InspectionId: inspectionId,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get workorder gis services\n     *\n     * @param {number} workOrderSid - The WorkOrder to check against.\n     * @param {boolean} getGisData - If true, check for feature server JSON data, default is true.\n     * @return {Object} Returns Promise object that represents an Object with the specified WorkOrder's entit(y|ies)\n     */\n  workOrder(workOrderSid, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/WorkOrderConfiguration'\n      let data = {\n        WorkOrderSid: workOrderSid,\n        GetGisData: getGisData\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Get service request gis services\n     *\n     * @param {Array<string>} [context] Filter returned list by specific context, i.e. Office, Field, Mobile, Public, etc. Default is all.\n     * @param {boolean} [allDomains] services assigned to any domain the user belongs to, default is true\n     * @param {boolean} [allGroups] services assigned to any groups the user belongs to regardless of domain, default is true\n     * @param {boolean} [getGisData] If true, check for feature server JSON data, default is true\n     * @return {Object} Returns Promise object that represents an Object with the user's GIS services\n     */\n  user(context: Array<string> = [], allDomains: boolean = true, allGroups: boolean = true, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      let path = 'Gis/MapService/User'\n      let data = {\n        AllDomains: allDomains,\n        AllGroups: allGroups,\n        GetGisData: getGisData,\n        Security: context\n      }\n      this.cw.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Geocode server info by ServerId\n   *\n   * @param {number} ServiceId\n   * @return {Object} Returns Promise object that represents an object describing the provided Geocoder service configuration\n   */\n   // Gis/GeoCode/GeocodeServer\n\n   /**\n      * Get currently selected entities from the Cityworks install's session for your user\n      * @return {Object} Returns Promise object that represents an Object with the currently-selected entities\n      */\n   selectedEntities() {\n     return new Promise((resolve, reject) => {\n       let path = 'General/AppData/SelectedEntities'\n       this.cw.runRequest(path, {}).then((response: any) => {\n         resolve(response.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n      * Get attributes available for provided entity\n      *\n      * @param {string} entityType - The entity type to describe\n      * @return {Object} Returns Promise object that represents a collection of attribute description objects\n      */\n   getEntityAttributes(entityType:string) {\n     return new Promise((resolve, reject) => {\n       let data = {EntityType: entityType}\n       let path = 'AMS/Entity/Attributes'\n       this.cw.runRequest(path, data).then((response: any) => {\n         resolve(response.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class MessageQueue {\n  /**\n   * @hidden\n   */\n  cw: any\n  /**\n   * Statuses -\n   * Pending: 0,\n   * Processing: 1,\n   * Complete: 2,\n   * Failed: 3\n   */\n  status: Object = {\n    Pending: 0,\n    Processing: 1,\n    Complete: 2,\n    Failed: 3\n  }\n  /**\n   * Hook Types -\n   * Unknown: 0,\n   * ActivityUpdate: 1,\n   * Email: 2,\n   * WebHook: 3\n   */\n  hook_types: Object = {\n    Unknown: 0,\n    ActivityUpdate: 1,\n    Email: 2,\n    WebHook: 3\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Process Webhook MessageQueue records by MessageQueueId\n   *\n   * @param {Array<number>} [ids] - List of MessageQueueId values\n   * @param {boolean} [delete_successful] - automatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  processMessages(ids: Array<number>, delete_successful: boolean = false) {\n    return new Promise((resolve, reject) => {\n      let data = { Ids: ids, Delete: delete_successful}\n      let path = 'General/WebHookEvent/ProcessMessages'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status -\n   * @param {number} [maxcount] - Maximum number returned. Defaults to 15\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  get(ids: Array<number>, status: string, maxcount: number = 15) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(1, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"MaxCount\": typeof(maxcount)!='undefined' ? maxcount : 15,\n        \"Status\": this.status[status]\n      }\n      let path = 'General/MessageQueue/ByIds'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Messages specified in list of MessageQueueIds\n   *\n   * @param {Array<number>} ids - List of MessageQueueId values\n   * @param {string} status - automatically delete messages that complete with successful execution, default is false\n   * @param {number} [hours_to_keep] - utomatically delete messages that complete with successful execution, default is false\n   * @return {Array<>} Returns Promise object that represents a collection of QueueMessages which have been processed\n   */\n  delete(ids: Array<number>, status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/Delete'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // PreferencesList<GlobalPreference>\n  // Base response type: CoreResponseBase\n  // Get a list of message queue preferences\n  // This method has no parameters\n  preferences() {\n    return new Promise((resolve, reject) => {\n      let data = {}\n      let path = 'General/MessageQueue/Preferences'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  search(parameters, max_results?: number) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(max_results)!=='undefined') {\n        data.MaxResults = max_results\n      }\n      let allowed_params = ['Id', 'HookId', 'HookType', 'Result', 'DateCreatedBegin', 'DateCreatedEnd', 'DateUpdatedBegin', 'DateUpdatedEnd']\n      let disallowed_params = ['Status', 'MaxResults']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(4, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n      let path = 'General/MessageQueue/Search'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update queue message\n   *\n   * @param {Object} parameters - Provide allowed parameters:\n   *\n   *      {\n   *        HookId: number,\n   *        Id: number,\n   *        Packet: string,\n   *        Result: string,\n   *        Status: string, // Available options: Pending, Processing, Complete, Failed\n   *        HookType: string // Available options: Unknown, ActivityUpdate, Email, WebHook\n   *      }\n   *\n   * @return {Object} Returns Promise object that represents an Object with the desired GIS service definitions\n   */\n  update(parameters: any) {\n    let data: any\n    return new Promise((resolve, reject) => {\n      if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.status, 'available':this.status}))\n      } else if(typeof(parameters.status)!=='undefined' && typeof(this.status[parameters.status])!=='undefined') {\n        data.Status = this.status[parameters.status]\n      }\n      if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])=='undefined') {\n        reject(new CWError(3, 'Status provided does not exist or is mispelled.', {'provided': parameters.hook_types, 'available':this.hook_types}))\n      } else if(typeof(parameters.hook_types)!=='undefined' && typeof(this.hook_types[parameters.hook_types])!=='undefined') {\n        data.HookType = this.hook_types[parameters.hook_types]\n      }\n      let allowed_params = ['Id', 'HookId', 'Packet', 'Result']\n      let disallowed_params = ['Status', 'HookType']\n      _.forEach(parameters, (v, k) => {\n        if(_.indexOf(allowed_params,k)!=-1 && _.indexOf(disallowed_params, k)==-1) {\n          data[k] = v\n        } else if(_.indexOf(disallowed_params, k)==-1) {\n          reject(new CWError(5, 'Provided parameter does not exist or is mispelled.', {'provided': k, 'value': v, 'available':_.concat(allowed_params, disallowed_params)}))\n        }\n      })\n\n      let path = 'General/MessageQueue/Update'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n        if(typeof(response.Value)=='undefined') {\n          response.Value = []\n        }\n        resolve(response.Value)\n      })\n    })\n  }\n\n  updateMessageStatus(ids: number[], status: string, hours_to_keep?: number) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.status[status])=='undefined') {\n        reject(new CWError(2, 'Status provided does not exist or is mispelled.', {'provided': status, 'available':this.status}))\n      }\n      let data = {\n        \"Ids\": ids,\n        \"Status\": this.status[status],\n        \"HoursToKeep\": hours_to_keep\n      }\n      let path = 'General/MessageQueue/UpdateMessageStatus'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n\n  getWebooks(hook_ids) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"HookIds\": hook_ids\n      }\n      let path = 'General/MessageQueue/WebHooks'\n      this.cw.runRequest(path, data).then((response: any) => {\n        // TODO\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Search {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Search Types: Null, Request, WorkOrder, Inspection, Contract, Permit, GIS, PermitTask, PermitAddress, InspCommon, Case, WorkOrderEntity, StoreTransaction, Requisition, Material, WorkActivity, MaterialLeaf, WoTemplate, Unknown, Employee, MessageQueue, Analytics, TokenState, AssetCalculationResult, Equipment, CustomerAccount, InspTemplate, ProblemLeaf, AssetSplitRecord, PavementInsp, TvInspection, Projects\n   */\n  searchTypes: Object = {\n    \"Null\": 0,\n    \"Request\": 1,\n    \"WorkOrder\": 2,\n    \"Inspection\": 3,\n    \"Contract\": 4,\n    \"Permit\": 5,\n    \"GIS\": 6,\n    \"PermitTask\": 7,\n    \"PermitAddress\": 8,\n    \"InspCommon\": 9,\n    \"Case\": 10,\n    \"WorkOrderEntity\": 11,\n    \"StoreTransaction\": 12,\n    \"Requisition\": 13,\n    \"Material\": 14,\n    \"WorkActivity\": 15,\n    \"MaterialLeaf\": 16,\n    \"WoTemplate\": 17,\n    \"Unknown\": 18,\n    \"Employee\": 19,\n    \"MessageQueue\": 20,\n    \"Analytics\": 21,\n    \"TokenState\": 22,\n    \"AssetCalculationResult\": 23,\n    \"Equipment\": 24,\n    \"CustomerAccount\": 25,\n    \"InspTemplate\": 26,\n    \"ProblemLeaf\": 27,\n    \"AssetSplitRecord\": 28,\n    \"PavementInsp\": 29,\n    \"TvInspection\": 30,\n    \"Projects\": 31\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Do a \"quick\" search for any string (an ID is best)\n   *\n   * @category Quick Search\n   * @param {string} text - text to search the system for\n   * @return {Object} Returns Promise object that represents a collection of the currently authenticated user's notifications\n   */\n  quick(text: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"QuickSearchText\": text,\n      }\n      this.cw.runRequest('General/QuickSearch/QuickSearch', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Execute a saved search\n   *\n   * @category Search\n   * @param {number} searchId - SearchId to execute\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @return {Object} Returns Promise object that represents a list of Objects\n   */\n  execute(searchId: number, options?: {EmployeeSid?: number, ExcludeEmptyXY?: boolean, Extent?: Object, Frequency?: boolean, IdsOnly?: boolean, IncludeSearchOrder?: boolean, MaxResults?: number, ResultFields?: Array<string>, TotalOnly?: boolean}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchId: searchId\n      }\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/Execute', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of the saved searches by search type and specific entity types OR employeeSid/domainId. You cannot search for saved searches by both specific entity type AND employeeSid/domainId.\n   *\n   * @category Search\n   * @param {string} searchType - Get the saved searches for a particular type\n   * @param {Array<string>} [applyToEntities] - Restrict GIS searches to specified entity types\n   * @param {number} [employeeSid] - The employee SID to retrieve the searches as\n   * @param {number} [domainId] - The domain ID of the domain to search\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionName\n   */\n  getSaved(searchType: string, applyToEntities?: Array<string>, employeeSid?: number, domainId?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(2, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      } else if(typeof(applyToEntities)!='undefined' && applyToEntities!=null && applyToEntities.length>0 && (typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined')) {\n        reject(new CWError(3, 'You cannot specify both applyToEntities AND employeeSid/domainId'))\n      }\n      var data = {}\n      var savedEndpoint = ''\n      if(typeof(employeeSid)!='undefined' || typeof(domainId)!='undefined') {\n        savedEndpoint = 'SavedByType'\n        if(typeof(employeeSid)!='undefined' && employeeSid!=null) {\n          _.set(data, 'EmployeeSid', employeeSid)\n        }\n        if(typeof(domainId)!='undefined' && domainId!=null) {\n          _.set(data, 'DomainId', domainId)\n        }\n      } else {\n        if(searchType=='Case') {\n          savedEndpoint = 'PllSavedSaved'\n        } else {\n          savedEndpoint = searchType + 'Saved'\n        }\n        if(typeof(applyToEntities)!='undefined' && applyToEntities!=null) {\n          _.set(data, 'ApplyToEntities', applyToEntities)\n        }\n      }\n      this.cw.runRequest('Ams/Search/'+savedEndpoint, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list display fields for a Search Type\n   *\n   * @category Search Options\n   * @param {string} searchType - Restrict GIS searches to specified entity types\n   * @return {Object} Returns Promise object that represents a collection of SearchDisplayFields\n   */\n  displayFields(searchType: string) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchType)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchType, 'available':this.searchTypes}))\n      }\n      var data = {\n        searchType: _.get(this.searchTypes, searchType)\n      }\n      this.cw.runRequest('Ams/Search/DisplayFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list search types\n   *\n   * @category Search Options\n   * @return {Object} Returns Promise object that represents a collection of SearchTypeInfo objects\n   */\n  types() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Ams/Search/Types', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Enable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  enableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: true,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Disable Service URLs on Saved Searches\n   *\n   * @category Search Options\n   * @param {Array<number>} searchIds - Search IDs to enable eURL on\n   * @return {Object} Returns Promise object that represents a dictionary of SearchIds and EURL booleans\n   */\n  disableServices(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Enable: false,\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/UpdateEurl', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a search definition\n   *\n   * @category Search Definitions\n   * @param {number} searchId - SearchId to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a SearchDefinition object\n   */\n  getDefinition(searchId: number, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchId: searchId\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @param {number} employeeSid - Enforces employee security settings on search definition if provided.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinition objects\n   */\n  getDefinitions(searchIds: Array<number>, employeeSid?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      if(typeof(employeeSid)!='undefined') {\n        _.set(data, 'EmployeeSid', employeeSid)\n      }\n      this.cw.runRequest('Ams/Search/Definitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get search definition names\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a collection of SearchDefinitionNames\n   */\n  getDefinitionNames(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DefinitionNames', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete search definitions\n   *\n   * @category Search Definitions\n   * @param {Array<number>} searchIds - SearchIds to get.\n   * @return {Object} Returns Promise object that represents a list (dictionary) of search IDs and deletion success boolean\n   */\n  deleteDefinitions(searchIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        SearchIds: searchIds\n      }\n      this.cw.runRequest('Ams/Search/DeleteDefinitions', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Save a search definition\n   *\n   * @category Search Definitions\n   * @param {string} searchFor - Name of type to search for from searchTypes\n   * @param {Object} options - Other options. See: /{subdirectory}/apidocs/#/service-info/Ams/Search\n   * @param {number} searchId - SearchId to update. Defaults to \"0\" which is \"Create new saved search\"\n   * @return {Object} Returns Promise object that represents a SearchDefinitionName object\n   */\n  saveDefinition(searchFor: string, options?: Object, searchId: number = 0) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(this.searchTypes, searchFor)) {\n        reject(new CWError(1, 'SearchType provided does not exist or is mispelled.', {'provided': searchFor, 'available':this.searchTypes}))\n      }\n      var data = {\n        SearchFor: _.get(this.searchTypes, searchFor),\n        SearchId: searchId\n      }\n      data = _.merge(data, options)\n      this.cw.runRequest('Ams/Search/SaveDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Request {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Request Administration methods\n   */\n  admin?: any\n\n  /**\n   * Request Costing methods\n   */\n  costs: any\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin\n    this.comment\n  }\n\n  /**\n   * Create new requests\n   *\n   * @category Requests\n   * @param {Object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created request\n   */\n  create(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'ProblemSid')) {\n        reject(new CWError(2, 'ProblemSid must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Create', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a request\n   *\n   * @category Requests\n   * @param {object} sr_data - See /{subdirectory}/apidocs/#/data-type-infodataType=RequestBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  update(sr_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(sr_data, 'RequestId')) {\n        reject(new CWError(3, 'RequestId must be provided.', {'provided': sr_data}))\n      } else {\n        this.cw.runRequest('Ams/ServiceRequest/Update', sr_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Move a request's point\n   *\n   * @category Requests\n   * @param {number} requestId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(requestId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        RequestId: requestId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'Z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/ServiceRequest/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update request's map layer fields\n   *\n   * @category Requests\n   * @param {number} requestId\n   * @return {Object} Returns Promise that represents an object describing the updated map layer fields\n   */\n  updateMLF = (requestId: number) => {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ServiceRequestId: requestId\n      }\n      this.cw.runRequest('Ams/TemplateMapLayer/ServiceRequestInstanceMapLayersByRequestId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Change a request's problem code\n   *\n   * @category Requests\n   * @param {number} requestId - The request ID to change\n   * @param {number} problemSid - The request's new ProblemSID\n   * @return {Object} Returns Promise that represents an object describing the updated request\n   */\n  changeProblem(requestId: number, problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId,\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeProblem', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a request by ID\n   *\n   * @category Requests\n   * @param {number} requestId - The ID of the request to retrieve\n   * @return {Object} Returns Promise that represents an object describing the request\n   */\n  getById(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestId: requestId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get requests by array of IDs\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The request IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the requests\n   */\n  getByIds(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific request\n   *\n   * @category Requests\n   * @param {number} requestId - A Request ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {RequestId: requestId}\n      this.cw.runRequest('Ams/ServiceRequest/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom fields for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFields(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/CustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Change custom field category for provided requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - The RequestIds whose custom fields should be returned\n   * @param {number} categoryId - The new custom field grouping/category which should be assigned to the provided requests\n   * @return {Object} Returns Promise that represents a collection of requests\n   */\n  changeCustomFieldCategory(requestIds: Array<number>, categoryId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds,\n        CategoryId: categoryId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ChangeCustomFieldCategory', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to cancel the matched requests\n   * @param {string} [cancelReason] - A reason for cancelling the request(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the request was cancelled\n   * @return {Object} Returns object that represents a collection of requests\n   */\n   cancel(requestIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {RequestIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { RequestIds: requestIds }\n       if(typeof(cancelReason)!=='undefined')\n         _.set(data, 'CancelReason', cancelReason);\n       if(typeof(dateCancelled)!=='undefined')\n         _.set(data, 'DateCancelled', dateCancelled);\n       this.cw.runRequest('Ams/ServiceRequest/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close requests\n    *\n    * @category Requests\n    * @param {Array<number>} requestIds - An array of the IDs to close the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    close(requestIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          RequestIds: requestIds\n        }\n        this.cw.runRequest('Ams/ServiceRequest/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed requests\n     *\n     * @category Requests\n     * @param {Array<number>} requestIds - An array of the IDs to reopen the matched requests\n     * @return {Object} Returns object that represents a collection of requests\n     */\n     reopen(requestIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           RequestIds: requestIds\n         }\n         this.cw.runRequest('Ams/ServiceRequest/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete requests\n   *\n   * @category Requests\n   * @param {Array<number>} requestIds - An array of the IDs to delete the matched requests\n   * @return {Object} Returns object that represents a collection of request Ids which have been deleted\n   */\n   delete(requestIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestIds: requestIds\n       }\n       this.cw.runRequest('Ams/ServiceRequest/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Search for requests\n    *\n    * @category Request Search\n    * @param {Object} searchData - The search information to retrieve matched requests, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents an Array of the matching request IDs\n    */\n   search(searchData: Object) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       this.cw.runRequest('Ams/ServiceRequest/Search', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the records on the basis of RequestId, only populates RequestId, Description, ProblemCode properties\n    *\n    * @category Request Object Search\n    * @param {string} requestId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @return {Object} Returns Promise that represents a collection of the matching (limited) request objects\n    */\n   searchObject(requestId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         RequestId: requestId\n       }\n       this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Requests\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequest\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n    */\n   createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         _.set(data, 'EnableEurl', enableEurl)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequest/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get a list of problem nodes for a domain\n   *\n   * @category Request Categorization\n   * @param {number} domainId - The domain ID for which to retrieve problem nodes.\n   * @param {boolean} viewOnly - Return only view only problem nodes. Defaults to false.\n   * @param {Object} [displayMode] - Object that should contain two properties if you provide it: DisplayTextMode: string (C = Code, D = Description, CD = Code ~ Description). DisplayTextDelimeter: string, only impacts CD display text mode.\n   * @param {boolean} includeCancelled - Return only cancelled problem nodes as well. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of problem node objects.\n   */\n  getProblemNodes(domainId: number, viewOnly: boolean = false, displayMode?: Object, includeCancelled: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainId: domainId,\n        IncludeCancelled: includeCancelled,\n        ViewOnly: viewOnly\n      }\n      if(typeof displayMode != 'undefined' && displayMode !== null && _.has(displayMode, 'DisplayTextMode')) {\n        _.set(data, 'DisplayTextMode', _.get(displayMode, 'DisplayTextMode'))\n        if(_.get(displayMode, 'DisplayTextMode')=='CD' && _.has(displayMode, 'DisplayTextDelimeter')) {\n          _.set(data, 'DisplayTextDelimeter', _.get(displayMode, 'DisplayTextDelimeter'))\n        }\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemNodes', data).then(r => {\n        // console.log(_.filter(r, function(o) { return !o.Cancel; }), 'filter');\n        // console.log(_.some(r.Value, ['Cancel', true]), 'some');\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes\n   *\n   * @category Request Options\n   * @param {boolean} forPublicOnly - Return only publicly-available service requests. Defaults to false.\n   * @param {boolean} onlyActiveTemplates - Return only active templates. Defaults to true.\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblems(forPublicOnly: boolean = false, onlyActiveTemplates: boolean = true, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ForPublicOnly: forPublicOnly,\n        OnlyActiveTemplates: onlyActiveTemplates\n      }\n      if(typeof domainIds != 'undefined') {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Problems', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of problem codes by keywords\n   *\n   * @category Request Options\n   * @param {string} keywords - Keywords to search for potential problem codes\n   * @return {Object} Returns Promise that represents an Array of problem name objects.\n   */\n  getProblemsByKeywords(keywords: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Keywords: keywords\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemsByKeywords', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of a problem code's priorities\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return priorities for given problemSid\n   * @return {Object} Returns Promise that represents an Array of priorities\n   */\n  getPriorities(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/Priorities', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field templates for problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose template custom fields should be returned\n   * @return {Object} Returns Promise that represents a collection of custom fields\n   */\n  getCustomFieldTemplate(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/TemplateCustomFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the questions and answer options for a problem code\n   *\n   * @category Request Options\n   * @param {number} problemSid - The problemSid whose Q&A should be returned\n   * @return {Object} Returns Promise that represents a collection of questions and answer settings\n   */\n  getQASettings(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSids: problemSid,\n      }\n      this.cw.runRequest('Ams/ServiceRequest/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get problem leaf (template) by Sid\n   *\n   * @category Request Options\n   * @param {number} problemSid - Return problem leaf for given problemSid\n   * @return {Object} Returns Promise that represents an Object that describes the problem leaf (template)\n   */\n  getProblemLeaf(problemSid: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ProblemSid: problemSid\n      }\n      this.cw.runRequest('Ams/ServiceRequest/ProblemLeafBySid', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of default statuses\n   *\n   * @category Request Options\n   * @param {Array<number>} domainIds - List of domains to return default statuses for\n   * @return {Object} Returns Promise that represents an Array of statuses.\n   */\n  getStatuses(domainIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        DomainIds: domainIds\n      }\n      this.cw.runRequest('Ams/ServiceRequest/DefaultStatus', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of possible Employee values\n   *\n   * @category Request Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only DispatchTo & SubmitTo.\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of Employee options.\n   */\n  getEmployeeLists(listType: string, domainId: number) {\n    return new Promise((resolve, reject) => {\n      // TODO: make a default domain option on the CW object for cases like this.\n      var data = {\n        DomainId: domainId\n      }\n      if(!_.includes(['DispatchTo', 'SubmitTo'], listType)) {\n        reject(new CWError(2, 'listType must be either SubmitTo or DispatchTo.', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/ServiceRequest/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get a list of possible DispatchTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible dispatchTo values for\n   * @return {Object} Returns Promise that represents an Array of dispatchTo options.\n   */\n  getDispatchTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('DispatchTo', domainId);\n  }\n\n  /**\n   * Get a list of possible SubmitTo values\n   *\n   * @category Request Options\n   * @param {number} domainId - Domain to return possible submitTo values for\n   * @return {Object} Returns Promise that represents an Array of submitTo options.\n   */\n  getSubmitTos(domainId: number) {\n    // Fix name for choice of non-pluralized endpoint. Unlike WOs & Inspections...\n    return this.getEmployeeLists('SubmitTo', domainId);\n  }\n\n  /**\n   * Get street codes\n   *\n   * @category Request Options\n   * @return {Object} Returns Promise that represents an Array of Street Codes.\n   */\n  streetCodes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/ServiceRequest/AllStreetCode', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates\n   *\n   * @category Request Templates\n   * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n   * @param {Date} [minimumDateModified] - ?\n   * @param {Date} [maximumDateModified] - ?\n   * @return {Object} Returns Promise that represents\n   */\n   getTemplatesById(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         ProblemSids: null\n       }\n       if(typeof minimumDateModified != 'undefined') {\n         _.set(data, 'MinimumDateModified', minimumDateModified)\n       }\n       if(typeof maximumDateModified != 'undefined') {\n         _.set(data, 'MaximumDateModified', maximumDateModified)\n       }\n\n       this.cw.runRequest('Ams/ServiceRequestTemplate/ByIds', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n    *\n    * @category Request Templates\n    * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n    * @param {number} [searchName] - What to name your search (if it should be saved)\n    * @param {number} [sharedWithin] - What group or domain to share the search to.\n    * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n    * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CWMetadata\n    */\n   createTemplateSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = searchData\n       if(_.isString(searchName)) {\n         _.set(data, 'SearchName', searchName)\n         _.set(data, 'SaveDefinition', saveDefinition)\n         // not sure how to handle sharedWithin...\n         // _.set(data, 'SharedWithin', sharedWithin)\n       }\n       this.cw.runRequest('Ams/ServiceRequestTemplate/CreateSearchDefinition', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get the questions and answers for a(many) request template(s)\n    *\n    * @category Request Templates\n    * @param {Array<number>} problemSids - An array list of problemSids to retrieve templates for\n    * @return {Object} Returns Promise that represents a collection of ProblemQAs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemQA\n    */\n    getTemplateQAs(problemSids: Array<number>, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: null\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/QA', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get a list of template id results for a provided search parameters\n     *\n     * @category Request Templates\n     * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/ServiceRequestTemplate\n     * @return {Object} Returns Promise that represents a list of template IDs.\n     */\n    searchTemplates(searchData: Object) {\n      return new Promise((resolve, reject) => {\n        var data = searchData\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Search', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get request templates (problem leaf[s])\n     *\n     * @category Request Templates\n     * @param {Array<number>} [templateIds] - Array of specific template IDs to retrieve\n     * @param {number} canCreate - If true, only return templates the user can create, ignored if false or null, default is false\n     * @param {boolean} includeInactiveIf - If true, returns inactive templates, default is false\n     * @param {Date} [minimumDateModified] - ?\n     * @param {Date} [maximumDateModified] - ?\n     * @return {Object} Returns Promise that represents a collection of Problem Leafs. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemLeaf\n     */\n    getTemplates(templateIds: Array<number>, canCreate: boolean = false, includeInactiveIf: boolean = false, minimumDateModified?: Date, maximumDateModified?: Date) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          CanCreate: canCreate,\n          IncludeInactiveIf: includeInactiveIf\n        }\n        if(typeof templateIds != 'undefined') {\n          _.set(data, 'TemplateIds', templateIds)\n        }\n        if(typeof minimumDateModified != 'undefined') {\n          _.set(data, 'MinimumDateModified', minimumDateModified)\n        }\n        if(typeof maximumDateModified != 'undefined') {\n          _.set(data, 'MaximumDateModified', maximumDateModified)\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Get WorkOrder templates that are associated to this request template type\n     *\n     * @category Request Templates\n     * @param {Array<number>} problemSids - An array list of problemSids to retrieve Problem WO templates for\n     * @param {boolean} includeInactiveIf - Include inactive WorkOrder templates, default is false\n     * @return {Object} Returns Promise that represents a collection of Problem WO Templates. See /{subdirectory}/apidocs/#/data-type-info;dataType=ProblemWOTemplate\n     */\n    getWOTemplates(problemSids: Array<number>, includeInactive: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          ProblemSids: problemSids,\n          IncludeInactive: includeInactive\n        }\n        this.cw.runRequest('Ams/ServiceRequestTemplate/WorkOrderTemplates', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Get Map Layer Fields\n   *\n   * @category Requests\n   * @param {number} requestId - The request ID to get the map layer fields for.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the request map layer fields\n   */\n  getMLFs(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ServiceRequestId: requestId\n      }\n      var path = 'Ams/TemplateMapLayer/ServiceRequestInstanceMapLayersByRequestId';\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Map Layer Fields\n   *\n   * @category Requests\n   * @param {number} requestId - The service request ID to get the map layer fields for.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} domainId - Domain ID\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents a ...\n   */\n    updateMLFs(requestId: number, x?: number, y?: number, domainId?: number, z?: number) { // |number\n      return new Promise((resolve, reject) => {\n        var data = {}\n        var path = 'Ams/TemplateMapLayer/UpdateServiceRequestInstanceMapLayers';\n        _.set(data, 'ServiceRequestId', requestId)\n        if(_.isNumber(x)) {\n          _.set(data, 'X', x)\n        }\n        if(_.isNumber(y)) {\n          _.set(data, 'Y', y)\n        }\n        if(_.isNumber(z)) {\n          _.set(data, 'Z', z)\n        }\n        if(_.isNumber(domainId)) {\n          _.set(data, 'DomainId', domainId)\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Delete Map Layer Fields\n   *\n   * @category Requests\n   * @param {number} requestId - The request ID to delete the map layer fields for.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the deleted map layer fields\n   */\n  deleteMLFs(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ServiceRequestId: requestId\n      }\n      var path = 'Ams/TemplateMapLayer/DeleteServiceRequestInstancesByRequestId';\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class Inspection {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Inspection Administration methods\n   */\n  admin?: Object\n\n  /**\n   * Inspection Costing methods\n   */\n  costs: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin\n  }\n\n  /**\n   * Create new inspection\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the newly-created inspection\n   */\n  create(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n        reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n      } else {\n        this.cw.runRequest('Ams/Inspection/Create', insp_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create inspections from an array of entities\n   *\n   * @category Inspections\n   * @param {Object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns Promise that represents a collection of objects describing the newly-created inspections\n   */\n   createFromEntities(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromEntities', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a parent inspection (TODO: what parent!?)\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromParent(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // see if it's just InspectionId\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'InspectionId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromParent', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a service request\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromServiceRequest(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'RequestId')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromServiceRequest', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Create an inspection from a WorkOrder\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on your Cityworks instance\n   * @return {Object} Returns object that represents an object describing the newly-created inspection\n   */\n   createFromWorkOrder(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      // Are they  both actually required?!?!\n      // WorkOrderId\n      // WorkOrderSid ...do with only SID first then check\n     if(!_.has(insp_data, 'EntityType') || !_.has(insp_data, 'InspTemplateId') || !_.has(insp_data, 'WorkOrderSid')) {\n       reject(new CWError(1, 'EntityType and InspTemplateId properties must be provided.', {'provided': insp_data}))\n     } else {\n       this.cw.runRequest('Ams/Inspection/CreateFromWorkOrder', insp_data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     }\n    })\n  }\n\n  /**\n   * Update an inspection\n   *\n   * @category Inspections\n   * @param {object} insp_data - See /{subdirectory}/apidocs/#/data-type-infodataType=InspectionBase on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated inspection\n   */\n  update(insp_data: Object) {\n    return new Promise((resolve, reject) => {\n      return new Promise((resolve, reject) => {\n        if(!_.has(insp_data, 'InspectionId')) {\n          reject(new CWError(1, 'InspectionId must be provided.', {'provided': insp_data}))\n        } else {\n          this.cw.runRequest('Ams/Inspection/Update', insp_data).then(r => {\n            resolve(r.Value)\n          }).catch(e => {\n            reject(e)\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Get an inspection by ID\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The inspection ID to retrieve\n   * @return {Object} Returns Promise that represents an object describing the inspection\n   */\n  getById(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/Inspection/ById', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections by array of IDs\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - The inspection IDs to retrieve\n   * @return {Object} Returns Promise that represents a collection of Objects describing the inspections\n   */\n  getByIds(inspectionIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionIds: inspectionIds\n      }\n      this.cw.runRequest('Ams/Inspection/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Cancel inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to cancel the matched inspections\n   * @param {string} [cancelReason] - A reason for cancelling the inspection(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the inspection was cancelled\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   cancel(inspectionIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n     return new Promise((resolve, reject) => {\n       var m = new Date()\n       var data: {InspectionIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { InspectionIds: inspectionIds }\n       if(typeof(cancelReason)!=='undefined') {\n         data.CancelReason = cancelReason\n       }\n       if(typeof(dateCancelled)!=='undefined') {\n         data.DateCancelled = dateCancelled\n       }\n       this.cw.runRequest('Ams/Inspection/Cancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Uncancel inspections\n    *\n    * @category Requests\n    * @param {Array<number>} inspectionIds - An array of the IDs to uncancel the matched requests\n    * @return {Object} Returns object that represents a collection of requests\n    */\n    uncancel(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Uncancel', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n   /**\n    * Close inspections\n    *\n    * @category Inspections\n    * @param {Array<number>} inspectionIds - An array of the IDs to close the matched inspections\n    * @return {Object} Returns object that represents a collection of inspections\n    */\n    close(inspectionIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionIds: inspectionIds\n        }\n        this.cw.runRequest('Ams/Inspection/Close', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Reopen closed inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents a collection of inspections\n   */\n   reopen(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Reopen', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Delete inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspectionIds - An array of the IDs to delete the matched inspections\n   * @return {Object} Returns object that represents a collection of inspection Ids which have been deleted\n   */\n   delete(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Inspection/Delete', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Search for inspections\n   *\n   * @category Inspection Search\n   * @param {Object} searchData - The search information to retrieve matched inspections, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents an array of the matching inspection IDs\n   */\n  search(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/Inspection/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the records on the basis of inspectionId, only populates InspectionId, InspTemplateName, and Location properties\n   *\n   * @category Inspection Object Search\n   * @param {string} inspectionId - ???, see instance docs: /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @return {Object} Returns Promise that represents a collection of the matching (limited) inspection objects\n   */\n  searchObject(inspectionId: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      this.cw.runRequest('Ams/ServiceRequest/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get list of statuses\n   *\n   * @category Inspection Options\n   * @return {Object} Returns object that represents an array of all possible statuses for an Inspection\n   */\n  statuses() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Statuses', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection submit to list\n   *\n   * @category Inspection Options\n   * @param {boolean} [includeInactiveEmployees] - whether to include inactive employees in the return. Defaults to false.\n   * @param {boolean} [domainIds] - which domains to include in the return, default to All domains\n   * @return {Object} Returns object that represents a collection of all possible employees for an Inspection's SubmitTo\n   */\n  submitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {IncludeInactiveEmployees?: boolean, DomainIds?: Array<number>} = {}\n      if(includeInactiveEmployees) {\n        data.IncludeInactiveEmployees = true\n      }\n      if(typeof(domainIds)!=='undefined') {\n        data.DomainIds = domainIds\n      }\n      this.cw.runRequest('Ams/Inspection/SubmitTos', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Add an entity to an existing inspection\n   * This method requires an Entity/Asset to be specified. You can either specify the Entity Type and its UID or a WorkOrderEntityBase Object.\n   *\n   * @category Inspections\n   * @param {Object} entity - Either of two attribute combinations are valid: entityType & entityUid OR Entity as a fully-inflated WorkOrderEntity (WorkOrderEntityBase) object.\n   * @param {number} inspectionId - An Inspection ID to attach the entity/asset to.\n   * @param {boolean} updateXY - Provide a boolean to whether the inspection's X/Y coordinates should be updated. Default is true.\n   * @param {Object} facility - Add Facility_Id for the Facility Identifier and Level_id for the Facility Level Identifier. Defaults to empty so that no facility is specified.\n   * @return {Object} Returns object that represents an object which describes an Inspection Entity\n   */\n  connectAsset(entity: {EntityType?: string, EntityUid?: string, Entity?: Object}, inspectionId: number, updateXY: boolean = true, facility: {Facility_Id?: string, Level_Id?: string} = {}) {\n   return new Promise((resolve, reject) => {\n     var data: {InspectionId: number, EntityType?: string, EntityUid?: string, Entity?: Object, Facility_Id?: string, Level_Id?: string} = {\n       InspectionId: inspectionId\n     }\n     if(_.has(entity, 'EntityType') && _.has(entity, 'EntityUid')) {\n       data.EntityType = entity.EntityType\n       data.EntityUid = entity.EntityUid\n     } else if(_.has(entity, 'Entity')) {\n       data.Entity = entity.Entity\n     } else {\n       // Throw error, no entity/asset provided\n     }\n     if(_.has(facility, 'Facility_Id')) {\n       data.Facility_Id = facility.Facility_Id\n     }\n     if(_.has(facility, 'Level_Id')) {\n       data.Level_Id = facility.Level_Id\n     }\n     this.cw.runRequest('Ams/Inspection/AddEntity', data).then(r => {\n       resolve(r.Value)\n     }).catch(e => {\n       // 4 NotAuthorizedToUpdateInspection\n       // 9 InvalidActivityMapLogicXY\n       // 21 ErrorUnknownEntityType\n       // 30 InvalidField\n       // 60 WarningItemNotFound\n       // 68 MoveInvalidCityworksWkid\n       reject(e)\n     })\n   })\n  }\n\n  /**\n   * Get the answers for inspections\n   *\n   * @category Inspections\n   * @param {Array<number>} inspections - An Array of one or more Inspection IDs\n   * @return {Object} Returns Promise that represents a collection of Inspection Answers\n   */\n  getAnswers(inspections: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data: {InspectionId?: number, InspectionIds?: Array<number>} = {}\n      if(inspections.length==0) {\n        data.InspectionId = inspections[0]\n      } else {\n        data.InspectionIds = inspections\n      }\n      this.cw.runRequest('Ams/Inspection/Answers', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the audit log for a specific Inspection\n   *\n   * @category Inspections\n   * @param {number} inspectionId - An Inspection ID to get the audit log for\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {InspectionId: inspectionId}\n      this.cw.runRequest('Ams/Inspection/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a search definition. Save the definition by setting SaveDefinition = true and supplying a SearchName.\n   *\n   * @category Inspections\n   * @param {Object} searchData - Search data variables. See /{subdirectory}/apidocs/#/service-info/Ams/Inspection\n   * @param {number} [searchName] - What to name your search (if it should be saved)\n   * @param {number} [sharedWithin] - What group or domain to share the search to.\n   * @param {boolean} saveDefinition - Whether or not to save the search definition. Defaults to true when a search name is specified.\n   * @param {boolean} enableEurl - Whether or not to enable EURL for the saved search. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  createSearchDefinition(searchData: Object, searchName?: string, sharedWithin?: number, saveDefinition: boolean = true, enableEurl: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      if(_.isString(searchName)) {\n        _.set(data, 'SearchName', searchName)\n        _.set(data, 'SaveDefinition', saveDefinition)\n        _.set(data, 'EnableEurl', enableEurl)\n        // not sure how to handle sharedWithin...\n        // _.set(data, 'SharedWithin', sharedWithin)\n      }\n      this.cw.runRequest('Ams/Inspection/CreateSearchDefinition', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle from\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents ... I have no idea what this endpoint does\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle intervals\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle intervals available\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cycle types\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents a Dictionary of the cycle types available\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get districts\n   *\n   * @category Inspection Options\n   * @return {Object} Returns Promise that represents an Array of the districts\n   */\n  getDistricts() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/Inspection/Districts', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Inspection Employee lists. Abstraction done here, though only one employee list field, AFAIK.\n   *\n   * @category Inspection Options\n   * @param {string} listType - Which list (endpoint) to get. Includes only SubmitTos.\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        IncludeInactiveEmployees: includeInactiveEmployees\n      }\n      if(typeof(domainIds)!='undefined' && domainIds!=null) {\n        _.set(data, 'DomainIds', domainIds)\n      }\n      if(listType!='SubmitTos') {\n        reject(new CWError(2, 'listType must be \"SubmitTos\".', {'provided': listType}))\n      } else {\n        this.cw.runRequest(`Ams/Inspection/${listType}`, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get SubmitTo list\n   *\n   * @category WorkOrder Options\n   * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n   * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n   * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n   */\n  getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n    return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n  }\n\n  /**\n   * Move inspection by InspectionId. Must provide well known id (WKID) or well known text (WKT)\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The ID of the inspection that should be moved\n   * @param {number} x - The X coordinate for the move\n   * @param {number} y - The Y coordinate for the move\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - the optional Z coordinate for the move\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(inspectionId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(3, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        InspectionId: inspectionId,\n        X: x,\n        Y: y\n      }\n      if(typeof z != 'undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Ams/Inspection/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /////\n  // INSPECTION TEMPLATES\n  /////\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all Inspections matching the provided parameters\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get a list of templates by IDs\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspectionIds - An array of the IDs to retrieve the matched inspections\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns object that represents an object describing the inspection\n   */\n  getTemplatesByIds(inspTemplateIds: Array<number>, options?: {MaximumDateModified?: Date, MinimumDateModified?: Date}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types for inspection template(s)\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n   * @return {Object} Returns object that represents an array of Entity Types\n   */\n   getTemplateEntityTypes(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/EntityTypes', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n  * Get the questions and answers for inspection template(s)\n  *\n  * @category Inspection Templates\n  * @param {Array<number>} inspTemplateIds - An array of the IDs to reopen the matched inspections\n  * @return {Object} Returns object that represents an array which contains a list of InspQuestionPanel for the template\n  */\n  getQA(inspTemplateIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspTemplateIds: inspTemplateIds\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/QA', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspection template question conditions\n   *\n   * @category Inspection Templates\n   * @param {Array<number>} inspTemplateIds - An array of template IDs to get the matched inspection template Question conditions for\n   * @return {Object} Returns object that represents an array which contains a dictionary of InspQuestion IDs to configs\n   */\n   getQConditions(inspTemplateIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspTemplateIds: inspTemplateIds\n       }\n       this.cw.runRequest('Ams/InspectionTemplate/QuestionConditions', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  // Attachments\n\n  // AddInspectionAttachment InspAttachment\n  // Add an inspection attachment\n  // Request Parameters\n  // Int32 AttachmentType V15_4\n  // String Comments\n  // String Filename\n  // Int32 req InspectionId\n  // Ams/Attachments/AddInspectionAttachment?data={\n  //   \"Comments\": null,\n  //   \"Filename\": null,\n  //   \"InspectionId\": null,\n  //   \"AttachmentType\": null\n  // }\n\n  /**\n   * Delete inspection attachments\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} attachmentIds - An array of inspection attachment IDs to delete\n   * @return {Object} Returns object that represents a boolean for action resolution\n   */\n   deleteAttachments(attachmentIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentIds: attachmentIds\n       }\n       this.cw.runRequest('Ams/Attachments/DeleteInspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Download an inspection attachment\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - ID of an inspection attachment to download\n   * @return {Object} Returns object that represents a file stream\n   */\n   downloadAttachment(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/DownloadInspectionAttachment', data).then(r => {\n         // TODO, pass file through // resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {number} attachmentId - An attachment ID to get info for\n   * @return {Object} Returns object that represents an object that describes the matched inspection attachment\n   */\n   getAttachmentById(attachmentId: number) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         AttachmentId: attachmentId\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachmentById', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get inspection attachment by ID\n   *\n   * @category Inspection Attachments\n   * @param {Array<number>} inspectionIds - An array of inspection IDs to get attachments for\n   * @return {Object} Returns object that represents a collection of attachments from the matched inspections\n   */\n   getAttachments(inspectionIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         InspectionIds: inspectionIds\n       }\n       this.cw.runRequest('Ams/Attachments/InspectionAttachments', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  /**\n   * Get Map Layer Fields\n   *\n   * @category Inspections\n   * @param {number} requestId - The inspection ID to get the map layer fields for.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the inspections\n   */\n  getMLFs(requestId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ServiceRequestId: requestId\n      }\n      var path = 'Ams/TemplateMapLayer/ServiceRequestInstanceMapLayersByRequestId';\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Map Layer Fields\n   *\n   * @category Inspections\n   * @param {number} requestId - The inspection ID to get the map layer fields for.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} domainId - Domain ID\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents a ...\n   */\n    updateMLFs(requestId: number, x?: number, y?: number, domainId?: number, z?: number) { // |number\n      return new Promise((resolve, reject) => {\n        var data = {}\n        var path = 'Ams/TemplateMapLayer/UpdateServiceRequestInstanceMapLayers';\n        _.set(data, 'ServiceRequestId', requestId)\n        if(_.isNumber(x)) {\n          _.set(data, 'X', x)\n        }\n        if(_.isNumber(y)) {\n          _.set(data, 'Y', y)\n        }\n        if(_.isNumber(z)) {\n          _.set(data, 'Z', z)\n        }\n        if(_.isNumber(domainId)) {\n          _.set(data, 'DomainId', domainId)\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Delete Map Layer Fields\n   *\n   * @category Inspections\n   * @param {number} inspectionId - The inspection ID to delete the map layer fields for.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  deleteMLFs(inspectionId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionId: inspectionId\n      }\n      var path = 'Ams/TemplateMapLayer/DeleteInspectionInstancesByInspectionId';\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\n\nexport class WorkOrder {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * WorkOrder Administration methods\n   */\n  admin: any\n\n  /**\n   * WorkOrder Costing methods\n   */\n  costs: any\n\n  /**\n   * WorkOrder Comments methods\n   */\n  comment: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.admin\n    this.comment\n  }\n\n  /**\n   * Create new workorders, including linkin to Requests & Inspections (optionally)\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {Array<number>} [inspectionIds] - The inspection IDs which the workorder should be linked to.\n   * @param {Array<number>} [requestIds] - The inspection IDs which the workorder should be linked to.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  create(wo_data: Object, inspectionIds?: Array<number>, requestIds?: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(typeof inspectionIds != 'undefined' && inspectionIds != null && !_.has(data, 'InspectionIds')) {\n          _.set(data, 'InspectionIds', inspectionIds);\n        }\n        if(typeof requestIds != 'undefined' && requestIds != null && !_.has(data, 'RequestIds')) {\n          _.set(data, 'RequestIds', requestIds);\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Create new workorder linked to parent workorder\n   *\n   * @category WorkOrders\n   * @param {Object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @return {Object} Returns Promise that represents an object describing the newly-created workorder\n   */\n  createFromParent(wo_data: Object, workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WOTemplateId') || !_.has(wo_data, 'EntityType')) {\n        reject(new CWError(2, 'WOTemplateId & EntityType must be provided.', {'provided': wo_data}))\n      } else {\n        var data = wo_data;\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        this.cw.runRequest('Ams/WorkOrder/Create', data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Update a WorkOrder\n   *\n   * @category WorkOrders\n   * @param {object} wo_data - See /{subdirectory}/apidocs/#/data-type-infodataType=WorkOrder on the Cityworks instance\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  update(wo_data: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(wo_data, 'WorkOrderSid') && !_.has(wo_data, 'WorkOrderId')) {\n        reject(new CWError(3, 'WorkOrderId or WorkOrderSid must be provided.', {'provided': wo_data}))\n      } else {\n        this.cw.runRequest('Ams/WorkOrder/Update', wo_data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Combine WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<string>} fromWorkOrderIds - The workorder IDs which should be combined.\n   * @param {string} toWorkOrderId - The WorkOrder ID for the single WorkOrder that should contain the info/entities from the other WorkOrders\n   * @param {boolean} cancelCombinedWorkOrders - If the WorkOrders combined into the single should then be canceled, default is true.\n   * @return {Object} Returns object that represents a collection of WorkOrders\n   */\n   combine(fromWorkOrderIds: Array<string>, toWorkOrderId: string, cancelCombinedWorkOrders: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         CancelCombinedWorkOrders: cancelCombinedWorkOrders,\n         ToWorkOrderId: toWorkOrderId,\n         FromWorkOrderIds: fromWorkOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Combine', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n\n  /**\n   * Move a workorder's point\n   *\n   * @category WorkOrders\n   * @param {string} workOrderId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include WKT or WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated workorder\n   */\n  move(workOrderId: string, x: number, y: number, projection: Object, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(6, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var base_data = {\n        WorkOrderId: workOrderId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(base_data, 'z', z)\n      }\n      var data = _.merge(base_data, projection);\n      this.cw.runRequest('Ams/WorkOrder/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    });\n  }\n\n  /**\n   * Get a workorder by S/ID\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The S/ID of the workorder to retrieve. # for SID, string for ID.\n   * @param {boolean} s - Whether first argument is an SID (true) or an ID (false). Defaults to true.\n   * @return {Object} Returns Promise that represents an object describing the workorder\n   */\n  getById(workOrderSId: string|number, s: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n        var path = 'Ams/WorkOrder/ById';\n      } else {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n        var path = 'Ams/WorkOrder/BySid';\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get workorders by an array of S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getByIds(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(101, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/ByIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/BySids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get instructions by an array of workorders S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. If providing WorkOrderID, should be all strings, else provide all numbers for WorkOrderSID\n   * @return {Object} Returns Promise that represents an array of String, String describing the workorder instructions\n   */\n  getInstructions(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(102, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        var path = 'Ams/WorkOrder/ByIds';\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderIds';\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n          path = 'Ams/WorkOrder/InstructionsByWorkOrderSids';\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      }\n    })\n  }\n\n  /**\n   * Get the audit log for a specific workorder\n   *\n   * @category WorkOrder\n   * @param {number} workOrderSId - A WorkOrder S/ID to get the audit log for. SID is default.\n   * @return {Object} Returns Promise that represents a collection of Cityworks Metadata Objects\n   */\n  getAuditLog(workOrderSId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(_.isString(workOrderSId)) {\n        _.set(data, 'WorkOrderId', workOrderSId)\n      } else if(_.isNumber(workOrderSId)) {\n        _.set(data, 'WorkOrderSid', workOrderSId)\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'Workorder S/IDs was not provided.', {'workorderSId': workOrderSId}))\n      }\n      this.cw.runRequest('Ams/WorkOrder/AuditLog', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get custom field values for the workorder S/IDs\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs to retrieve. #s for SID, strings for ID.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getCustomFieldValues(workOrderSIds: Array<string|number>) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      var path = 'Ams/WorkOrder/CustomFields';\n      if(_.isString(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderIds', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFields';\n      } else if(_.isNumber(workOrderSIds[0])) {\n        _.set(data, 'WorkOrderSids', workOrderSIds)\n        var path = 'Ams/WorkOrder/CustomFieldsByWorkOrderSids';\n      } else {\n        // throw error - was not number or string\n        reject(new CWError(9, 'No workorder S/IDs were provided.', {'workorderSIds': workOrderSIds}))\n      }\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entities on an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {Array<string|number>} workOrderSIds - The workorder S/IDs which the entities should be added to. # for SID, string for ID.\n   * @param {boolean} getGisData - Query gis to populate Entity.Attributes with current gis data. Defaults to true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n  getEntities(workOrderSIds: Array<string|number>, getGisData: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        GetGisData: getGisData\n      }\n      if(workOrderSIds.length==0) {\n        // throw error\n        reject(new CWError(11, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n      } else {\n        if(_.isString(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderIds', workOrderSIds)\n        } else if(_.isNumber(workOrderSIds[0])) {\n          _.set(data, 'WorkOrderSids', workOrderSIds)\n        } else {\n          reject(new CWError(12, 'No workorder S/IDs were provided.', {'workorderSId': workOrderSIds}))\n        }\n      }\n      this.cw.runRequest('Ams/WorkOrder/Entities', data).then(r => {\n        if(r.Status>0) {\n          reject(new CWError(4, r.Message, {'response': r}))\n        } else {\n          resolve(r.Value)\n        }\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add entities to an existing WorkOrder\n   *\n   * @category WorkOrders\n   * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n   * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUids: {Array<string>}, Facility_Id: {string}, Level_Id: {string}\n   * @param {boolean} updateXY - Update WorkOrder xy after adding entit(y|ies), default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   addEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'Facility_Id'))\n         _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n       if(_.has(entityInfo, 'Level_Id'))\n         _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n       if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/AddEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Update a WorkOrder entity\n    *\n    * @category WorkOrders\n    * @param {string|number} workOrderSId - The workorder S/ID which the entities should be added to. # for SID, string for ID.\n    * @param {Object} entityInfo - Entity info object including: (req) EntityType: {string}, (req) EntityUid: {string}, Facility_Id: {string}, Level_Id: {string}\n    * @param {boolean} workComplete - Update WorkOrder completeness, default is true.\n    * @return {Object} Returns object that represents a list of entities removed.\n    */\n    updateEntity(workOrderSId: string|number, entityInfo: Object, workComplete: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkComplete: workComplete\n        }\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        }\n        if(_.has(entityInfo, 'Facility_Id'))\n          _.set(data, 'Facility_Id', _.get(entityInfo, 'Facility_Id'))\n        if(_.has(entityInfo, 'Level_Id'))\n          _.set(data, 'Level_Id', _.get(entityInfo, 'Level_Id'))\n        if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n          _.set(data, 'EntityUid', _.get(entityInfo, 'EntityUid'))\n          _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n        } else {\n          reject(new CWError(7, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n        }\n\n        this.cw.runRequest('Ams/WorkOrder/UpdateEntity', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(4, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Remove entities from a WorkOrder. Provide WorkOrderId and either ObjectIds or EntityType and EntityUids\n   *\n   * @category WorkOrders\n   * @param {number} workOrderSId - The workorder S/ID which the entities should be removed from. # for SID, string for ID.\n   * @param {Object} entityInfo - Remove entities by WorkOrderEntity.ObjectId (not gis objectId).\n   * @param {boolean} updateXY - Update WorkOrder xy after removing entities, default is true.\n   * @return {Object} Returns object that represents a list of entities removed.\n   */\n   removeEntities(workOrderSId: string|number, entityInfo: Object, updateXY: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         UpdateXY: updateXY\n       }\n       if(_.isString(workOrderSId)) {\n         _.set(data, 'WorkOrderId', workOrderSId)\n       } else {\n         _.set(data, 'WorkOrderSid', workOrderSId)\n       }\n       if(_.has(entityInfo, 'ObjectIds')) {\n         _.set(data, 'ObjectIds', _.get(entityInfo, 'ObjectIds'))\n       } else if(_.has(entityInfo, 'EntityUids') && _.has(entityInfo, 'EntityType')) {\n         _.set(data, 'EntityUids', _.get(entityInfo, 'EntityUids'))\n         _.set(data, 'EntityType', _.get(entityInfo, 'EntityType'))\n       } else {\n         reject(new CWError(8, 'No entity info was provided.', {'workorderSId': workOrderSId,'entityInfo': entityInfo}))\n       }\n\n       this.cw.runRequest('Ams/WorkOrder/RemoveEntities', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Cancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to cancel the matched workorders\n   * @param {string} [cancelReason] - A reason for cancelling the workorder(s)\n   * @param {datetime} [dateCancelled] - The date/time that it should be indicated the workorder was cancelled\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n  cancel(workOrderIds: Array<number>, cancelReason?: string, dateCancelled?: Date) {\n    return new Promise((resolve, reject) => {\n      var m = new Date()\n      var data: {WorkOrderIds: Array<number>, CancelReason?: string, DateCancelled?: Date} = { WorkOrderIds: workOrderIds }\n      if(typeof(cancelReason)!=='undefined')\n        _.set(data, 'CancelReason', cancelReason);\n      if(typeof(dateCancelled)!=='undefined')\n        _.set(data, 'DateCancelled', dateCancelled);\n      this.cw.runRequest('Ams/WorkOrder/Cancel', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Uncancel workorders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to uncancel the matched workorders\n   * @return {Object} Returns object that represents a collection of workorders\n   */\n   uncancel(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Uncancel', data).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Close WorkOrders\n    *\n    * @category WorkOrders\n    * @param {Array<number>} workOrderIds - An array of the IDs to close the matched WorkOrders\n    * @return {Object} Returns object that represents a collection of WorkOrders\n    */\n    close(workOrderIds: Array<number>) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          WorkOrderIds: workOrderIds\n        }\n        this.cw.runRequest('Ams/WorkOrder/Close', data).then(r => {\n          if(r.Status>0) {\n            reject(new CWError(5, r.Message, {'response': r}))\n          } else {\n            resolve(r.Value)\n          }\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n    /**\n     * Reopen closed WorkOrders\n     *\n     * @category WorkOrders\n     * @param {Array<number>} workOrderIds - An array of the IDs to reopen the matched WorkOrders\n     * @return {Object} Returns object that represents a collection of WorkOrders\n     */\n     reopen(workOrderIds: Array<number>) {\n       return new Promise((resolve, reject) => {\n         var data = {\n           WorkOrderIds: workOrderIds\n         }\n         this.cw.runRequest('Ams/WorkOrder/ReOpen', data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       })\n     }\n\n  /**\n   * Delete WorkOrders\n   *\n   * @category WorkOrders\n   * @param {Array<number>} workOrderIds - An array of the IDs to delete the matched WorkOrders\n   * @return {Object} Returns object that represents a collection of WorkOrder Ids which have been deleted\n   */\n   delete(workOrderIds: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         WorkOrderIds: workOrderIds\n       }\n       this.cw.runRequest('Ams/WorkOrder/Delete', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderS/IDs connected to provided entities\n    *\n    * @category WorkOrder Search\n    * @param {string} entityType - The entity type to find connected WorkOrders\n    * @param {Array<string>} entityUIDs - The list of entities to search for connected WorkOrders\n    * @param {boolean} s - Get WorkOrderSids. Defaults to true. When false, returned list is WorkOrderIds\n    * @param {Object} [search] - Any additional search properties of the WorkOrder (open/closed, etc)\n    * @return {Object} Returns Promise that represents an array of WorkOrderS/IDs\n    */\n   getWOsByEntities(entityType: string, entityUids: Array<string>, search?: Array<string|number>, s: boolean = true) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       if(typeof(search)!='undefined') {\n         _.merge(data, search)\n       }\n       if(!_.has(data, 'EntityType')) {\n         _.set(data, 'EntityType', entityType)\n       }\n       if(!_.has(data, 'EntityUids')) {\n         _.set(data, 'EntityUids', entityUids)\n       }\n       var path = 'Ams/WorkOrder/SearchForSids'\n       if(!s) {\n         path = 'Ams/WorkOrder/Search'\n       }\n       this.cw.runRequest(path, data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrderSid and description for provided WorkOrderId\n    *\n    * @category WorkOrder Search\n    * @param {string} workOrderId - The WorkOrderId for which to get the WorkOrderSid and description\n    * @return {Object} Returns Promise that represents an object with WorkOrderS/IDs & Description\n    */\n   getSearchList(workOrderId: string) {\n     return new Promise((resolve, reject) => {\n       var data = {}\n       _.set(data, 'WorkOrderId', workOrderId)\n       this.cw.runRequest('Ams/WorkOrder/SearchObject', data).then(r => {\n         if(r.Status>0) {\n           reject(new CWError(4, r.Message, {'response': r}))\n         } else {\n           resolve(r.Value)\n         }\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n   /**\n    * Get WorkOrder Employee lists\n    *\n    * @category WorkOrder Options\n    * @param {string} listType - Which list (endpoint) to get. Includes Supervisors & SubmitTos.\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getEmployeeLists(listType: string, includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return new Promise((resolve, reject) => {\n       var data = {\n         IncludeInactiveEmployees: includeInactiveEmployees\n       }\n       if(typeof(domainIds)!='undefined' && domainIds!=null) {\n         _.set(data, 'DomainIds', domainIds)\n       }\n       if(!_.includes(['Supervisors', 'SubmitTos'], listType)) {\n         reject(new CWError(2, 'listType must be either SubmitTos or Supervisors.', {'provided': listType}))\n       } else {\n         this.cw.runRequest(`Ams/WorkOrder/${listType}`, data).then(r => {\n           resolve(r.Value)\n         }).catch(e => {\n           reject(e)\n         })\n       }\n     })\n   }\n\n   /**\n    * Get SubmitTo list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSubmitTos(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('SubmitTos', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Supervisors list\n    *\n    * @category WorkOrder Options\n    * @param {boolean} includeInactiveEmployees - Whether to include inactive employees in the returned list. Defaults to false.\n    * @param {Array<number>} [domainIds] - Filter to certain domains within the Cityworks instance.\n    * @return {Object} Returns Promise that represents a collection of employees. See: /{subdirectory}/apidocs/#/data-type-info;dataType=EmployeeNameId\n    */\n   getSupervisors(includeInactiveEmployees: boolean = false, domainIds?: Array<number>) {\n     return this.getEmployeeLists('Supervisors', includeInactiveEmployees, domainIds);\n   }\n\n   /**\n    * Get Status Options\n    *\n    * @category WorkOrder Options\n    * @return {Object} Returns Promise that represents a collection of codes. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CodeDesc\n    */\n   getStatuses() {\n     return new Promise((resolve, reject) => {\n       this.cw.runRequest('Ams/WorkOrder/Statuses', {}).then(r => {\n         resolve(r.Value)\n       }).catch(e => {\n         reject(e)\n       })\n     })\n   }\n\n  /**\n   * Get Categories\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder category code descriptions\n   */\n  getCategories() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Categories', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Priorities\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of configured workorder priorities\n   */\n  getPriorities() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Priorities', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle From\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle From options for workorders\n   */\n  getCycleFrom() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleFrom', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Intervals\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Interval options for workorders\n   */\n  getCycleIntervals() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleIntervals', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Cycle Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Cycle Type options for workorders\n   */\n  getCycleTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/CycleTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get WorkOrder Stages\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Stage options for WorkOrders\n   */\n  getStages() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/Stages', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Expense Types\n   *\n   * @category WorkOrder Options\n   * @return {Object} Returns Promise that represents an array of string/string Expense Type options for workorders\n   */\n  getExpenseTypes() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Ams/WorkOrder/ExpenseTypes', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Map Layer Fields\n   *\n   * @category WorkOrders\n   * @param {string} workOrderSId - The workorder S/ID to get the map layer fields for.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  getMLFs(workOrderSId: string) { // |number\n    return new Promise((resolve, reject) => {\n      var data = {\n        WorkOrderId: workOrderSId\n      }\n      var path = 'Ams/TemplateMapLayer/WorkOrderInstanceMapLayersByWorkOrderId';\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Map Layer Fields\n   *\n   * @category WorkOrders\n   * @param {string} workOrderSId - The workorder S/ID to get the map layer fields for.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} domainId - Should include WKT or WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents a ...\n   */\n    updateMLFs(workOrderSId: string, x?: number, y?: number, domainId?: number, z?: number) { // |number\n      return new Promise((resolve, reject) => {\n        var data = {}\n        var path = 'Ams/TemplateMapLayer/UpdateWorkOrderInstanceMapLayers';\n        if(_.isString(workOrderSId)) {\n          _.set(data, 'WorkOrderId', workOrderSId)\n        } else if(_.isNumber(workOrderSId)) {\n          _.set(data, 'WorkOrderSid', workOrderSId)\n        } else {\n          // throw error - was not number or string\n          reject(new CWError(9, 'No workorder S/ID was provided.', {'workorderSId': workOrderSId}))\n        }\n        if(_.isNumber(x)) {\n          _.set(data, 'X', x)\n        }\n        if(_.isNumber(y)) {\n          _.set(data, 'Y', y)\n        }\n        if(_.isNumber(z)) {\n          _.set(data, 'Z', z)\n        }\n        if(_.isNumber(domainId)) {\n          _.set(data, 'DomainId', domainId)\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Delete Map Layer Fields\n   *\n   * @category WorkOrders\n   * @param {string} workOrderSId - The workorder S/ID to delete the map layer fields for.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the workorders\n   */\n  deleteMLFs(workOrderSId: string) { // |number\n    return new Promise((resolve, reject) => {\n      var data = {\n        WorkOrderId: workOrderSId\n      }\n      var path = 'Ams/TemplateMapLayer/DeleteWorkOrderInstancesByWorkOrderId';\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nimport { CaseData } from './case_data'\nimport { CaseFinancial } from './case_financial'\nimport { CaseWorkflow} from './case_workflow'\nimport { CaseAdmin } from './case_admin'\nimport { Comments } from './comments'\nimport { CaseAssets } from './case_assets'\n\nexport class Briefcase {\n  /**\n   * @hidden\n   */\n  cw: any\n\n\n  /**\n   * Data Detail methods\n   */\n  data?: any\n  /**\n   * Asset (Address) methods\n   */\n  asset?: any\n  /**\n   * Workflow & task methods\n   */\n  workflow?: any\n  /**\n   * Payment, Receipt, & Fee methods\n   */\n  financial?: any\n  /**\n   * Commenting methods\n   */\n  comment?: any\n  /**\n   * PLL Administration methods\n   */\n  admin?: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Create new case\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  create(caseTypeId: number, subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/Create', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a child case\n   *\n   * @category Cases\n   * @param {number} busCaseId - The case Type ID\n   * @param {number} parentCaObjectId - The case subType ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createChild(busCaseId: number, parentCaObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId,\n        ParentCaObjectId: parentCaObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Case/CreateChild', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Create a case from a Service Request\n   *\n   * @category Cases\n   * @param {number} caseTypeId - The case Type ID\n   * @param {number} subTypeId - The case subType ID\n   * @param {number} requestId - The service request ID\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the newly-created case\n   */\n  createFromRequest(caseTypeId: number, subTypeId: number, requestId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId,\n        SubTypeId: subTypeId,\n        ServiceRequestId: requestId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/CreateCaseFromServiceRequest', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/data-type-info;dataType=CaObjectItemBase\n   * @return {Object} Returns Promise that represents an object describing the updated case\n   */\n  update(caObjectId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseObject/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get cases by IDs\n   *\n   * @category Cases\n   * @param {Array<number>} caObjectIds - The case Object ID to update\n   * @return {Object} Returns Promise that represents a collection of objects describing the cases\n   */\n  getByIds(caObjectIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectIds: caObjectIds\n      }\n      this.cw.runRequest('Pll/CaseObject/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Cases. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Cases\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case Object IDs\n   */\n  search(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseObject/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Move a Case point\n   *\n   * @category Cases\n   * @param {string} caObjectId\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} projection - Should include at least WKT _or_ WKID attribute. Can also include VcsWKID attribute.\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents an object describing the updated GISPoint\n   */\n  move(caObjectId: number, x: number, y: number, projection: {WKID?: string, WKT?: string, VcsWKID?: string}, z?: number) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(projection, 'WKID') && !_.has(projection, 'WKT')) {\n        // Throw error\n        reject(new CWError(1, 'You must provide either the WKID or WKT for the x/y coordinates.', {'projection': projection}))\n      }\n      var data_init = {\n        CaObjectId: caObjectId,\n        X: x,\n        Y: y\n      };\n      if(typeof(z)!='undefined') {\n        _.set(data_init, 'Z', z)\n      }\n      var data = _.merge(data_init, projection);\n      this.cw.runRequest('Pll/CaseObject/Move', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete case\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the deleted case\n   */\n  delete(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseObject/DeleteCase', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Map Layer Fields\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case object ID to get the map layer fields for.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the case object map layer fields\n   */\n  getMLFs(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      var path = 'Ams/TemplateMapLayer/CaseInstanceMapLayersByCaObjectId';\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Map Layer Fields\n   *\n   * @category Cases\n   * @param {number} caObjectId - The case object ID to get the map layer fields for.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} domainId - The domain ID for the case in question\n   * @param {number} [z] - Optional Z coordinate\n   * @return {Object} Returns Promise that represents a collection of Objects describing the case object map layer fields\n   */\n    updateMLFs(caObjectId: number, x?: number, y?: number, domainId?: number, z?: number) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          CaObjectId: caObjectId\n        }\n        var path = 'Ams/TemplateMapLayer/UpdateCaseInstanceMapLayers';\n        \n        if(_.isNumber(x)) {\n          _.set(data, 'X', x)\n        }\n        if(_.isNumber(y)) {\n          _.set(data, 'Y', y)\n        }\n        if(_.isNumber(z)) {\n          _.set(data, 'Z', z)\n        }\n        if(_.isNumber(domainId)) {\n          _.set(data, 'DomainId', domainId)\n        }\n        this.cw.runRequest(path, data).then(r => {\n          resolve(r.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Delete Map Layer Fields\n   *\n   * @category Cases\n   * @param {string} workOrderSId - The case object ID to delete the map layer fields for.\n   * @return {Object} Returns Promise that represents a collection of Objects describing the case object map layer fields deleted\n   */\n  deleteMLFs(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      var path = 'Ams/TemplateMapLayer/DeleteCaseInstanceMapLayersByCaObjectId';\n      this.cw.runRequest(path, data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n  \n\n  // importCase(caseTypeId: number, subTypeId: number, caseName: string, location: string, x: number, y:number, appData: object, comment: string, expiration: string, assetIds: object) {\n  //   return new Promise(resolve => {\n  //     const _this = this;\n  //     let case_data = {\"CaseName\":caseName, \"Location\":location, \"DateExpiration\": expiration, \"X\":x,\"Y\":y}\n  //     this.create(caseTypeId, subTypeId, case_data).then((response: any) => {\n  //       if(response) {\n  //         if(typeof(response.CaObjectId)!='undefined') {\n  //           var CaObjectId = response.CaObjectId\n  //           if(typeof(comment) != 'undefined') {\n  //             _this.comments.add(CaObjectId, comment)\n  //           }\n  //           if(assetIds) {\n  //             _this.assets!.attach(CaObjectId, true, assetIds)\n  //           }\n  //           if(appData) {\n  //             _this.data!.getGroupsByCaseId(response.CaObjectId).then(response_one => {\n  //               // loop through all groups\n  //               let data_details_items = []\n  //               _this.data!.caseDataGroupIterator(appData, response_one, data_details_items).then(di => {\n  //                 _this.data!.caseDataDetailIterator(appData, di).then(resp => {\n  //                   resolve(response)\n  //                 })\n  //               })\n  //             })\n  //           } else {\n  //             resolve(response)\n  //           }\n  //         } else {\n  //           console.log('Error creating case: '+ JSON.stringify(case_data))\n  //           process.exit(0)\n  //         }\n  //       } else {\n  //         resolve(false)\n  //       }\n  //     })\n  //   })\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseData {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Case Data Group\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} caseDataGroupId - CaseDataGroupId as defined in CaseDataGroup admin.\n   * @param {string} groupCode - The Group Code.\n   * @param {Object} [options] - Options for CaseDataGroup including GroupDesc, GroupSum, and SumFlag\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addGroup(caObjectId: number, caseDataGroupId: number, groupCode: string, options?: {GroupDesc?: string, GroupSum?: number, SumFlag?: string}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaseDataGroupId: caseDataGroupId,\n        GroupCode: groupCode\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Default Case Data Groups\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {number} busCaseId - The business case ID\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   addDefaultGroups(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a data detail entry to the case data group specified by the CaDataGroupId. The CaDataGroupId is associated to a case.\n   *\n   * @category Data Groups\n   * @param {number} caseDataDetailId - The Data Detail template ID\n   * @param {number} caDataGroupId - The Case Instance Data Group ID\n   * @param {string} columnSequence - The column sequence\n   * @param {string} detailCode - The detail Code\n   * @param {number} detailSequence - The detail order number\n   * @param {Object} [options] - Other options for CaseDataDetail. See WIPAdd here: /{subdirectory}/apidocs/#/service-info/Pll/CaseDataDetail\n   * @return {Object} Returns Promise that represents an object describing CaDataDetailItemBase.\n   */\n   wipAddDetail(caseDataDetailId: number, caDataGroupId: number, columnSequence: string, detailCode: string, detailSequence: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseDataDetailId: caseDataDetailId,\n        CaDataGroupId: caDataGroupId,\n        ColumnSequence: columnSequence,\n        DetailCode: detailCode,\n        DetailSequence: detailSequence\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseDataGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get groups by CaObjectId\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to get the attached data groups.\n   * @return {Object} Returns Promise that represents a collection of the CaDataGroupItemBases.\n   */\n   getGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Data Groups by Case Object ID.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   deleteGroupsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Data Groups. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data Groups\n   * @param {Object} filters - The parameters to search by. (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag)\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n   searchForGroups(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataGroupId', 'CaseDataGroupId', 'GroupCode', 'GroupDesc', 'GroupSum', 'SumFlag']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Data Groups by Case ObjectId\n   *\n   * @category Data Groups\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {Object} options - The other options for checkGIS. Either CaObjectId or CaseDataGroupId is required.\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   checkGIS(entityType: string, entityUid: string, options: {CaObjectId?:number, CaseDataGroupId?: number, CaseDataDetailId?: number}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(_.has(options, 'CaObjectId')) {\n        _.set(data, 'CaObjectId', _.get(options, 'CaObjectId'))\n      } else if(_.has(options, 'CaseDataGroupId')) {\n        _.set(data, 'CaseDataGroupId', _.get(options, 'CaseDataGroupId'))\n      } else {\n        reject(new CWError(1, 'Either CaObjectId or CaseDataGroupId is required.', {'provided': options}))\n      }\n      if(_.has(options, 'CaseDataDetailId')) {\n        _.set(data, 'CaseDataDetailId', _.get(options, 'CaseDataDetailId'))\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/CheckGISChanges', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update data groups on a case based on asset value mappings.\n   *\n   * @category Data Groups\n   * @param {number} caObjectId - The case to update\n   * @param {string} entityType - The entity type to check\n   * @param {string} entityUid - The specific entityUID to check\n   * @param {number} [caDataGroupId] - The specific data group ID to limit updates to\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n   updateGroupsFromAsset(caObjectId: number, entityType: string, entityUid: string, caDataGroupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        EntityType: entityType,\n        EntityUid: entityUid\n      }\n      if(typeof(caDataGroupId)!='undefined') {\n        _.set(data, 'CaDataGroupId', caDataGroupId)\n      }\n      this.cw.runRequest('Pll/CaseDataGroup/UpdateFromAsset', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Attach Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataGroupId - The Case Data Group ID to attach the data detail to.\n   * @param {number} caseDataDetailId - caseDataDetailId to attach.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   addDetail(caDataGroupId: number, caseDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataGroupId: caDataGroupId,\n        CaseDataDetailId: caseDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to attach the data detail to.\n   * @param {Object} [options] - Options\n   * @return {Object} Returns Promise that represents an object describing CaDataGroupItemBase.\n   */\n   updateDetail(caDataDetailId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Lock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to lock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   lockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: true\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Unlock Case Data Detail\n   *\n   * @category Data Details\n   * @param {number} caDataDetailId - The Case Data Group ID to unlock\n   * @return {Object} Returns Promise which represents an object describing the CaDataDetailItem.\n   */\n   unlockDetail(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        Lock: false\n      }\n      this.cw.runRequest('Pll/CaseDataDetail/UpdateLock', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Data Details. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data Details\n   * @param {Object} filters - The parameters to search by. (CaDataGroupId, CaseDataGroupId, GroupCode, GroupDesc, GroupSum, SumFlag)\n   * @return {Object} Returns Promise that represents a number that is the CaObjectId (?)\n   */\n  searchForDetails(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataDetailId', 'CaDataGroupId', 'CalcRateFlag', 'CaseDataDetailId', 'CommentFlag', 'DateFlag', 'DetailCode', 'DetailDesc', 'ListValuesFlag', 'NumberFlag', 'TextFlag', 'ValueFlag', 'YesNoFlag']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaDataDetailId, CaDataGroupId, CalcRateFlag, CaseDataDetailId, CommentFlag, DateFlag, DetailCode, DetailDesc, ListValuesFlag, NumberFlag, TextFlag, ValueFlag, YesNoFlag) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataDetail/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Adds a list of possible values to the data detail entry specified by the CaDataDetailId.\n   *\n   * @category Data List Values\n   * @param {number} caDataDetailId - The Case Object to attach the data group to.\n   * @param {string} listValue - The Group Code.\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   addListValue(caDataDetailId: number, listValue: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId,\n        ListValue: listValue\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete by Id (Ca Data List Id)\n   *\n   * @category Data List Values\n   * @param {number} CaDataListId - The Case Data List ID\n   * @return {Object} Returns Promise that represents an object describing CaDataListValuesItemBase.\n   */\n   deleteListValue(caDataDetailId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDataDetailId: caDataDetailId\n      }\n      this.cw.runRequest('Pll/CaseDataListValues/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value IDs. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue)\n   * @return {Object} Returns Promise that represents an Array of resulting CaDataListIds\n   */\n   searchForListValueIds(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataDetailId', 'CaDataListId', 'ListValue']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for List Value Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Data List Values\n   * @param {Object} filters - The parameters to search by. (CaDataDetailId, CaDataListId, ListValue, CaDataGroupId)\n   * @return {Object} Returns Promise that represents a collection of resulting CaDataListValuesItemBase objects\n   */\n   searchForListValueObjects(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDataDetailId', 'CaDataListId', 'ListValue', 'CaDataGroupId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaDataDetailId, CaDataListId, ListValue, CaDataGroupId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDataGroup/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // caseDataGroupIterator(appData: object, groups: Array<number>, items: Array<object>) {\n  //   return new Promise(resolve => {\n  //     var detail_items = items\n  //     var dataDetailGroup = groups.pop()\n  //     this.searchForListValueObjects({CaDataGroupId: dataDetailGroup!.CaDataGroupId}).then(r => {\n  //       r.forEach(function (item) {\n  //         detail_items.push(item)\n  //       })\n  //       if(groups.length>0) {\n  //         this.caseDataGroupIterator(appData, groups, detail_items).then(di => {\n  //           resolve(di)\n  //         })\n  //       } else {\n  //         resolve(detail_items)\n  //       }\n  //     })\n  //   })\n  // }\n\n  // caseDataDetailIterator(appData: object, detail_items: Array<object>) {\n  //   return new Promise(resolve => {\n  //     const this_data_detail = detail_items.pop()\n  //     const detailCode = this_data_detail.DetailCode\n  //     const detailId = this_data_detail.CaDataDetailId\n  //     if(typeof(this_data_detail)!='undefined' && typeof(appData[detailCode])!='undefined') {\n  //       this.searchForListValueObjects(detailId).then(r => {\n  //         var CaseDataDetailUpdate = r.Value\n  //         var rType = r.Value\n  //         CaseDataDetailUpdate[rType] = appData[CaseDataDetailUpdate.DetailCode]\n  //         this.updateDetail(CaseDataDetailUpdate).then(response => {\n  //           if(detail_items.length > 0) {\n  //             this.caseDataDetailIterator(appData, detail_items).then(resp => {\n  //               resolve(resp)\n  //             })\n  //           } else {\n  //             resolve(true)\n  //           }\n  //         })\n  //       })\n  //     } else {\n  //       if(detail_items.length > 0) {\n  //         this.caseDataDetailIterator(appData, detail_items).then(resp => {\n  //           resolve(resp)\n  //         })\n  //       } else {\n  //         resolve(true)\n  //       }\n  //     }\n  //   });\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseFinancial {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw: Object) {\n    this.cw = cw\n  }\n\n  /**\n   * Adds a fee to the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} feeSetupId - The fee setup id for the fee to add to the case.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addFee(caObjectId: number, feeSetupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        FeeSetupId: feeSetupId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Fee Payment. Adds a payment to the case fee specified by caObjectId.\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addPayment(caObjectId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Payment Refund. Refunds a payment on the case payment specified by caPaymentId.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentId - The Case Payment ID for the case payment which to refund\n   * @param {number} refundAmount - The amount to refund\n   * @param {string} comment - A comment to append to the refund\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  addRefund(caPaymentId: number, refundAmount: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentId: caPaymentId,\n        RefundAmount: refundAmount,\n        Comments: comment\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Deposit Payment. Adds a payment to the case deposit specified by CaDepositId.\n   *\n   * @category Case Payments\n   * @param {number} caDepositId - The Case Deposit ID for the case deposit to which to add the fee\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/CasePayment for more options, including required fields.\n   * @return {Object} Returns Promise that represents an object describing the newly-added payment. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentItemBase\n   */\n  addDepositPayment(caDepositId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaDepositId: caDepositId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CasePayment/AddDeposit', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a deposit to the case specified by the CaObectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the fee\n   * @param {number} depositId - The deposit setup id for the deposit to add to the case.\n   * @param {number} [amount] - The amount of the deposit (optional)\n   * @param {string} [comment] - Comment text to add to the deposit (optional)\n   * @return {Object} Returns Promise that represents an object describing the newly-added deposit. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDeposit(caObjectId: number, depositId: number, amount?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        DepositId: depositId\n      }\n      if(typeof(amount)!='undefined') {\n        _.set(data, 'Amount', amount)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('CaseDeposit/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds an instrument to the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the instrument\n   * @param {number} instTypeId - The instrument type id for the instrument being added to the case.\n   * @param {number} amount - The amount of the instrument\n   * @param {Date} dateExpire - The datetime for the instrument to expire.\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument for more options.\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument. See /{subdirectory}/apidocs/#/service-info/Pll/CaseInstrument\n   */\n  addInstrument(caObjectId: number, instTypeId: number, amount: number, dateExpire: Date, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaObjectId: caObjectId,\n        InstTypeId: instTypeId,\n        Amount: amount,\n        DateExpire: dateExpire\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseInstrument/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a fee specified by the CaFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Fee ID for the specific instance of the fee you wish to update\n   * @param {Object} [options] - See /{subdirectory}/apidocs/#/service-info/Pll/CaseFees for more options. (Checkboxes -- Autorecalculate -- are Y/N strings)\n   * @return {Object} Returns Promise that represents an object describing the updated fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  updateFee(caFeeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var init_data = {\n        CaFeeId: caFeeId\n      }\n      var data = _.merge(init_data, options);\n      this.cw.runRequest('Pll/CaseFees/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Void a refund.\n   *\n   * @category Case Refund Payment\n   * @param {number} caPaymentRefundId - The Refund ID for the specific refund to void\n   * @param {String} voided - A string. No clue.\n   * @return {Object} Returns Promise that represents an object describing the voided refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  voidRefund(caPaymentRefundId: number, voided: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId,\n        Voided: voided\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Fees. Adds fees to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default fees\n   * @param {number} busCaseId - The business case ID whose default fees should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Fee Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  addDefaultFees(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseFees/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds Default Case Deposits. Adds deposits to the case specified by the CaObectId and BusCaseId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to add the default deposits\n   * @param {number} busCaseId - The business case ID whose default deposits should be added to the case\n   * @return {Object} Returns Promise that represents a collection of Deposit Items. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaDepositItemBase\n   */\n  addDefaultDeposits(caObjectId: number, busCaseId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        BusCaseId: busCaseId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/AddDefault', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the fees from the case specified by the CaObectId.\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Fees.\n   */\n  getFees(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Deposit by Case ObjectId.\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the deposits\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  getDeposits(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Payments by Case ObjectId\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the payments\n   * @return {Object} Returns Promise that represents a collection of Case Payments.\n   */\n  getPayments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Gets the instruments from the case specified by the CaObectId.\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID for the case to which to get the fees\n   * @return {Object} Returns Promise that represents a collection of Case Instruments.\n   */\n  getInstruments(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Fees\n   * @param {number} caFeeId - The Case Fee ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Fee object.\n   */\n  deleteFee(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CaseFees/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Fees\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteFeesByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseFees/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete a Case Payment by Id. Delete a specific case payment by CaPaymentId.\n   *\n   * @category Case Payments\n   * @param {number} caPaymentId - The Case Payment ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Payment object.\n   */\n  deletePayment(caFeeId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaFeeId: caFeeId\n      }\n      this.cw.runRequest('Pll/CasePayment/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payment Refund. Removes a refund on a payment.\n   *\n   * @category Case Payment Refunds\n   * @param {number} caPaymentRefundId - The Case Payment ID for the case payment which to refund\n   * @return {Object} Returns Promise that represents an object describing the deleted payment refund. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaPaymentRefundItemBase\n   */\n  deleteRefund(caPaymentRefundId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaPaymentRefundId: caPaymentRefundId\n      }\n      this.cw.runRequest('Pll/CasePaymentRefund/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Payments by Case ObjectId. Delete from the system all payments associated to a specific case as specified by the case id (CaObjectId)\n   *\n   * @category Case Payments\n   * @param {number} caObjectId - The Case Object ID whose payments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deletePaymentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CasePayment/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the fee specified by the caFeeId.\n   *\n   * @category Case Deposits\n   * @param {number} caDepositId - The Case Deposit ID which should be deleted\n   * @return {Object} Returns Promise that represents a collection of Case Deposits.\n   */\n  deleteDeposit(caDepositId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaDepositId: caDepositId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Fees by Case ObjectId. Delete from the system all Fees linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Deposits\n   * @param {number} caObjectId - The Case Object ID whose fees should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteDepositsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseDeposit/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete the instrument specified by the caInstrumentId.\n   *\n   * @category Case Instruments\n   * @param {number} caInstrumentId - The Case Instrument ID which should be deleted\n   * @return {Object} Returns Promise that represents a Case Instrument.\n   */\n  deleteInstrument(caInstrumentId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Case Instruments by Case ObjectId. Delete from the system all Instruments linked to a specific Case as specified by the Case Id parameter (CaObjectId).\n   *\n   * @category Case Instruments\n   * @param {number} caObjectId - The Case Object ID whose instruments should be deleted\n   * @return {Object} Returns Promise that represents a number (?)\n   */\n  deleteInstrumentsByCaseId(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseInstrument/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameter(s) to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFees(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaFeeId', 'CaObjectId', 'FeeCode', 'FeeDesc']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseFees/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payments. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payments\n   * @param {Object} filters - The filters to search for matched Case Payments\n   * @return {Object} Returns Promise that represents an Array of case payment IDs\n   */\n  searchPayments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaPaymentId', 'CommentText', 'FeeAmount', 'FeeCode', 'FeeDesc', 'PaymentAccount', 'PaymentAmount', 'TenderType']).length==0) {\n        reject(new CWError(5, 'At least one of the attributes (CaPaymentId, CommentText, FeeAmount, FeeCode, FeeDesc, PaymentAccount, PaymentAmount, TenderType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Payment Refunds. Include one or more of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Payment Refunds\n   * @param {Object} filters - The filters to search for matched Case Payments.\n   * @return {Object} Returns Promise that represents an Array of case payment refund IDs\n   */\n  searchRefunds(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaPaymentId', 'CaPaymentRefundId', 'Comments', 'RefundAmount']).length==0) {\n        reject(new CWError(6, 'At least one of the attributes (CaPaymentId, CaPaymentRefundId, Comments, RefundAmount) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CasePayment/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Deposits\n   * @param {Object} filters - The parameters to search by.\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchDeposits(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaDepositId', 'CaObjectId', 'DepositCode', 'DepositDesc']).length==0) {\n        reject(new CWError(1, 'At least one of the arguments (CaDepositId, CaObjectId, DepositCode, DepositDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseDeposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fee Templates\n   *\n   * @category Case Fees\n   * @return {Object} Returns Promise that represents an object describing the newly-added fee. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaFeesItemBase\n   */\n  getAllFeeTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Fees\n   * @param {Object} filters - The parameters to search by\n   * @return {Object} Returns Promise that represents an Array of case fee IDs\n   */\n  searchFeeTemplates(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['FeeSetupId', 'FeeTypeId', 'FeeCode', 'FeeDesc', 'AccountCode']).length==0) {\n        reject(new CWError(7, 'At least one of the arguments (FeeSetupId, FeeTypeId, FeeCode, FeeDesc, AccountCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instruments. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Case Instruments\n   * @param {Object} filters - The parameters to search by (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of case instrument IDs\n   */\n  searchCaseInstruments(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AddressLine1', 'Amount', 'CaInstrumentId', 'CityName', 'CommentText', 'Company', 'ContactEmail', 'ContactName', 'ContactPhone', 'CountryCode', 'InstTypeId', 'SerialNumber', 'StateCode', 'ZipCode']).length==0) {\n        reject(new CWError(9, 'At least one of the arguments (AddressLine1, Amount, CaInstrumentId, CityName, CommentText, Company, ContactEmail, ContactName, ContactPhone, CountryCode, InstTypeId, SerialNumber, StateCode, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseInstrument/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get the Defined Instruments\n   *\n   * @category Instruments\n   * @param {Object} options - the options to filter the instruments returned by\n   * @return {Object} Returns Promise that represents an Array of CaInstrumentItem\n   */\n  getInstrumentList(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/CaseInstrument/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a release to a case instrument specified by the caInstrumentId. Must provide either amountReleased OR percentReleased\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstrumentId - The Case Instrument ID to which to add the instrument release\n   * @param {number} releasedBy - UserID to attach to the release.\n   * @param {Date} dateReleased - The date of the release\n   * @param {number} [amountReleased] - The amount to be released\n   * @param {number} [percentReleased] - OR the percent to be released\n   * @param {string} [comment] - Comment to attach to the release\n   * @return {Object} Returns Promise that represents an object describing the newly-added instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  addCaseInstrumentRelease(caInstrumentId: number, releasedBy: number, dateReleased: Date, amountReleased?: number, percentReleased?: number, comment?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstrumentId: caInstrumentId,\n        DateReleased: dateReleased,\n        ReleasedBy: releasedBy\n      }\n      if((typeof(percentReleased)!='undefined' || percentReleased!=null) && (typeof(amountReleased)!='undefined' || amountReleased!=null)) {\n        reject(new CWError(2, 'Either amountReleased or percentReleased must be specified.'))\n      } else if(typeof(percentReleased)!='undefined' && percentReleased!=null) {\n        _.set(data, 'PercentReleased', percentReleased)\n      } else if(typeof(amountReleased)!='undefined' && amountReleased!=null) {\n        _.set(data, 'AmountReleased', amountReleased)\n      }\n      if(typeof(comment)!='undefined') {\n        _.set(data, 'CommentText', comment)\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a release specified by the caInstReleasesId.\n   *\n   * @category Case Instrument Releases\n   * @param {number} caInstReleasesId - The Case Instrument Release ID to delete\n   * @return {Object} Returns Promise that represents an object describing the deleted instrument release. See /{subdirectory}/apidocs/#/data-type-info;dataType=CaInstReleasesItemBase\n   */\n  deleteCaseInstrumentRelease(caInstReleasesId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaInstReleasesId: caInstReleasesId\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Instrument Releases. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Case Instrument Releases\n   * @param {Object} filters - Specify at least one of the following: AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy\n   * @return {Object} Returns Promise that represents an Array of Case Instruments resulting from the search\n   */\n  searchCaseInstrumentReleases(filters: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      if(_.intersectionBy(_.keysIn(filters), ['AmountReleased', 'CaInstReleasesId', 'CaInstrumentId', 'CommentText', 'PercentReleased', 'ReleasedBy']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AmountReleased, CaInstReleasesId, CaInstrumentId, CommentText, PercentReleased, ReleasedBy) must be defined.'))\n      }\n      this.cw.runRequest('Pll/CaseInstReleases/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get All Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  fees() {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/FeeSetup/All', {}).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include one or more of the search fields. A logical 'and' operation is applied for muliple search fields.\n   *\n   * @category Fees\n   * @param {Object} filters - Specify at least one.\n   * @return {Object} Returns Promise that represents a collection of FeeSetups. See /{subdirectory}/apidocs/#/data-type-info;dataType=FeeSetupItemBase\n   */\n  searchAvailableFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(8, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all tender types configured\n   *\n   * @category Tender Types\n   * @return {Object} Returns Promise that represents a collection of tender type objects. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  getTenderTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TenderType/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Adds a tender type configuration\n   *\n   * @category Tender Types\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  addTenderType(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TenderType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a tender type configuration\n   *\n   * @category Tender Types\n   * @param {number} tenderTypeId - ID of the tender type to update\n   * @param {Object} options - See /{subdirectory}/apidocs/#/service-info/Pll/TenderType\n   * @return {Object} Returns Promise that represents an object describing the newly-added tender type. See /{subdirectory}/apidocs/#/data-type-info;dataType=TenderTypeItem\n   */\n  updateTenderType(tenderTypeId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        TenderTypeId: tenderTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/TenderType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\n\n/**\n * A plugin that contains \"comments\" methods\n */\nexport class Comments {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Storage of all potential activity types which comments can be attached to: Unknown, Request, WorkOrder, CaTask, CaObject, CaCorrection, Project, Contract\n   */\n  activityTypes: ReversibleMap<string, number>\n\n  /**\n   * Storage of object's active activityType\n   */\n  currentActivityType: string\n\n  /**\n   * @hidden\n   */\n  constructor(cw: any, activityType: string) {\n    this.cw = cw\n    this.activityTypes = new ReversibleMap<string, number>()\n    this.activityTypes.set(\"Unknown\", 0)\n    this.activityTypes.set(\"Request\", 1)\n    this.activityTypes.set(\"WorkOrder\", 2)\n    this.activityTypes.set(\"CaTask\", 3)\n    this.activityTypes.set(\"CaObject\", 4)\n    this.activityTypes.set(\"CaCorrection\", 5)\n    this.activityTypes.set(\"Project\", 6)\n    this.activityTypes.set(\"Contract\", 7)\n\n    if(!this.activityTypes.has(activityType)) {\n      throw new CWError(1, 'Comment activity type not found.', {'provided': activityType, 'options':this.activityTypes})\n    }\n    this.currentActivityType = activityType\n  }\n\n  /**\n   * Add a comment - for adding a comment to an object when the object is already known. Always call comment.add from request, case, workorder, or inspection.\n   * \n   * @param {number} sid - The SID of the activity to which the comment should be attached\n   * @param {string} comment - The text for the comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  add(sid: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        ActivitySid: sid,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Add', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update a comment\n   *\n   * @param {number} id - The ID of the comment which should be updated\n   * @param {string} comment - The new text for the updated comment\n   * @return {Object} Returns a Promise which represents a CommentRecord object\n   */\n  update(id: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        ActivityType: this.activityTypes.get(this.currentActivityType),\n        CommentId: id,\n        Comments: comment\n      }\n      this.cw.runRequest('Ams/Comment/Update', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get comments for activity items\n   *\n   * @param {Array<number>} sids - The options SIDs to get comments for.\n   * @return {Object} Returns Promise object that represents a collection of available comments\n   */\n  get(sids: Array<number>) {\n    return new Promise((resolve, reject) => {\n      if(typeof(sids)!='undefined' && sids !=null) {\n        var data = {\n          ActivitySids: sids,\n          ActivityType: this.activityTypes.get(this.currentActivityType),\n        }\n        this.cw.runRequest('Ams/Comment/ByActivitySids', data).then((response: any) => {\n          if(sids.length==1) {\n            resolve(response.Value[sids[0]])\n          } else {\n            resolve(response.Value)\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * Get pre-defined comments for activityTypes\n   *\n   * @param {number} problemSid - The ProblemSid if currentActivityType is (Service) Request\n   * @param {string} [category] - Only applies to WorkOrder and ServiceRequest category comments.\n   * @return {Object} Returns Promise object that represents a collection of available comment templates.\n   */\n  getPredefined(problemSid?: number, category?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      if(this.currentActivityType=='Request') {\n        _.set(data, 'ProblemSid', problemSid)\n      }\n      if(typeof(category)!='undefined' && (this.currentActivityType=='Request' || this.currentActivityType=='WorkOrder')) {\n        _.set(data, 'Category', category)\n      }\n      _.set(data, 'ActivityType', this.activityTypes.get(this.currentActivityType))\n      this.cw.runRequest('Ams/Comment/PredefinedComments', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // /**\n  //  * Get pre-set comments for activityTypes\n  //  *\n  //  * @param {Array<string>} [activityTypes] - Provide a list of activity types. Defaults to current activity type.\n  //  * @param {Array<string>} [categories] - Only applies to WorkOrder and ServiceRequest category comments.\n  //  * @return {Object} Returns Promise object that represents a collection of available comment templates.\n  //  */\n  // getForActivityList(activityTypes?: Array<string>, categories?: Array<string>) {\n  //   return new Promise((resolve, reject) => {\n  //     var data = {}\n  //     if(typeof(activityTypes)!='undefined') {\n  //       // TODO: iterate through it and output numeric types\n  //       _.set(data, 'ActivityTypes', activityTypes)\n  //     } else {\n  //       _.set(data, 'ActivityTypes', [this.activityTypes.get(this.currentActivityType)])\n  //     }\n  //     if(typeof(categories)!='undefined') {\n  //       _.set(data, 'Categories', categories)\n  //     }\n  //     console.log(data, 'data')\n  //     this.cw.runRequest('Ams/Comment/ByActivityTypes', data).then((response: any) => {\n  //       resolve(response.Value)\n  //     }).catch(e => {\n  //      reject(e)\n  //    })\n  //   })\n  // }\n\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\nimport { Comments } from './comments'\n\nexport class CaseWorkflow {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Task sub-methods\n   */\n  task: Object\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n    this.task = {\n      comment: new Comments(cw, 'CaTask')\n    }\n  }\n\n  /**\n   * Adds a task to the case specified by the CaObectId.\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} taskId - The task ID to add to the case workflow\n   * @param {number} startPoint - The start point in the workflow for the task\n   * @param {number} endPoint - The end point in the workflow for the task\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   addTask(caObjectId: number, taskId: number, startPoint: number, endPoint: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        TaskId: taskId,\n        StartPoint: startPoint,\n        EndPoint: endPoint\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Result\n   *\n   * @category Task Results\n   * @param {number} caObjectId - The Case Object to attach the task to\n   * @param {number} caTaskId - The Case task ID to add the result to\n   * @param {number} resultCode - The result Code\n   * @param {number} resultID - The result ID\n   * @param {number} resultSetID - The result set ID\n   * @param {Object} [options] - Options for the Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents an object describing CaTaskResultsItem.\n   */\n   addTaskResult(caObjectId: number, caTaskId: number, resultCode: number, resultID: number, resultSetID: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaTaskId: caTaskId,\n        ResultCode: resultCode,\n        ResultID: resultID,\n        ResultSetID: resultSetID\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   addTaskComment(caTaskId: number, comment: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId,\n        CommentText: comment\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by CaObjectId\n   *\n   * @category Tasks\n   * @param {number} caObjectId - The Case Object to get the attached tasks\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksByCaseId(caObjectId: number, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks by TaskIds\n   *\n   * @category Tasks\n   * @param {Array<number>} caTaskIds - The IDs of the tasks to retrieve\n   * @param {boolean} checkRelatedItems - Wherther to check related items. Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of the CaTaskItemBases.\n   */\n   getTasksById(caTaskIds: Array<number>, checkRelatedItems: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds,\n        CheckRelatedItems: checkRelatedItems\n      }\n      this.cw.runRequest('Pll/CaseTask/ByIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get CaTaskResultsItem by CaTaskIds\n   *\n   * @category Task Results\n   * @param {Array<number>} caTaskIds - The IDs of the tasks for which to retrieve results\n   * @return {Object} Returns Promise that represents a collection of CaTaskResultsItems.\n   */\n   getResultsByTaskId(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskResults/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {number} caTaskId - The task ID for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CommentRecords.\n   */\n   getCommentsForTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskComments by CaTaskId\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskIds - The task IDs for which to retrieve attached comments\n   * @return {Object} Returns Promise that represents a collection of CaTaskCommentsItemBase.\n   */\n   getCommentsForTasks(caTaskIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        caTaskIds: caTaskIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/ByCaTaskIds', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {Object} [options] - Options for Task. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   updateTask(caTaskId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Task Comment\n   *\n   * @category Comments\n   * @param {number} caTaskCommentId - The Case task ID of the task to add the comment to\n   * @param {string} comment - The comment text\n   * @param {number} commentId - Probably unnecessary?\n   * @return {Object} Returns Promise that represents an object describing CaTaskCommentsItemBase.\n   */\n   updateTaskComment(caTaskCommentId: number, comment: string, commentId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentId: caTaskCommentId,\n        CommentText: comment\n      }\n      if(typeof(commentId)!='undefined') {\n        _.set(data, 'CommentId', commentId)\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Updates a task\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The Case Object to attach the task to\n   * @param {string} resultCode - The result code to set for the specified Task\n   * @param {Object} [options] - Options for Task. Specify either or both TaskCompletedBy & TaskCompleteDate. See /{subdirectory}/apidocs/#/service-info/Pll/CaseTask\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   setTaskResult(caTaskId: number, resultCode: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      if(_.intersectionBy(_.keysIn(options), ['TaskCompleteDate', 'TaskCompletedBy']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (TaskCompletedBy, TaskCompleteDate) must be defined.'))\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseTask/SetResult', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents an object describing CaTaskItemBase.\n   */\n   deleteTask(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseTask/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task by TaskID\n   *\n   * @category Tasks\n   * @param {number} caTaskId - The caTaskId for the task which should be deleted\n   * @return {Object} Returns Promise that represents the number of the CaObjectID\n   */\n   deleteTasksOnCase(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseTask/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes tasks by TaskID\n   *\n   * @category Comments\n   * @param {Array<number>} caTaskCommentIds - The comments to delete\n   * @return {Object} Returns Promise that represents a dictionary of comment IDs.\n   */\n   deleteTaskComments(caTaskCommentIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskCommentIds: caTaskCommentIds\n      }\n      this.cw.runRequest('Pll/CaseTaskComments/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Case Tasks. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Tasks\n   * @param {Object} filters - The parameters to search by. (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType)\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskIDs\n   */\n   searchForTasks(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['ResponsibleUserId', 'TaskAvailable', 'TaskComplete', 'TaskType']).length==0) {\n        reject(new CWError(1, 'At least one of the attributes (ResponsibleUserId, TaskAvailable, TaskComplete, TaskType) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseTask/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTaskResults Objects. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Task Results\n   * @param {Object} filters - The parameters to search by. See: /{subdirectory}/apidocs/#/service-info/Pll/CaseTaskResults\n   * @return {Object} Returns Promise that represents a collection of resulting CaTaskResultsItem\n   */\n   searchForTaskResults(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = filters\n      this.cw.runRequest('Pll/CaseTaskResults/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Adds a task to the case specified by the CaObectId.\n     *\n     * @category Task Attachments\n     * @param {number} caTaskId - The Task ID to attach the document to\n     * @param {number} caObjectId - The Case Object ID\n     * @param {string} docName - The file name as it should display in the system\n     * @param {string} locationType - The location of the file...leave blank\n     * @param {any} file - The binary string for the file\n     * @return {Object} Returns Promise that represents an object describing added Attachment\n     */\n  addTaskAttachment(caTaskId: number, caObjectId: number, docName: number, file: any, locationType?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        CaTaskId: caTaskId,\n        DocName: docName\n      }\n      if(typeof(locationType)!='undefined') {\n        _.set(data, 'LocationType', locationType)\n      }\n      this.cw.runRequest('Pll/CaseRelDocs/AddTaskRelDoc', data, file).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n     * Gets each Document Attached to the specified Task\n     *\n     * @category Task Attachments\n     * @param {number} caTaskId - The Task ID to attach the document to\n     * @return {Object} Returns Promise that represents a collection of objects describing each Attachment on the provided task\n     */\n  getTaskAttachments(caTaskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaTaskId: caTaskId\n      }\n      this.cw.runRequest('Pll/CaseRelDocs/ByCaTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Deletes a task attachment by caRelDocId (Related Case Document ID). Same as RelDocs delete for case.\n   *\n   * @category Task Attachments\n   * @param {number} caRelDocId - The caRelDocId for the related document which should be deleted\n   * @return {Object} Returns Promise that represents the an object describing the deleted document.\n   */\n  deleteTaskAttachment(caRelDocId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaRelDocId: caRelDocId\n      }\n      this.cw.runRequest('PLL/CaseRelDocs/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n\n\n\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class CaseAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Add Business Case Template\n   *\n   * @category Case Templates\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the created case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  addBusinessCaseTemplate(data: Object) {\n    return new Promise((resolve, reject) => {\n      this.cw.runRequest('Pll/BusinessCase/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Business Case Template\n   *\n   * @category Case Templates\n   * @param {number} busCaseId - The Business Case ID to update\n   * @param {Object} data - The Business Case Template options.\n   * @return {Object} Returns Promise that represents an object describing the updated case template. See: /{subdirectory}/apidocs/#/data-type-info;dataType=BusinessCaseItem\n   */\n  updateBusinessCaseTemplate(busCaseId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        BusCaseId: busCaseId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/BusinessCase/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Business Case Templates\n   *\n   * @category Case Templates\n   * @return {Object} Returns Promise that represents a collection of Business Case Templates\n   */\n  getBusinessCaseTemplates() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/BusinessCase/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Case Type\n   *\n   * @category Types & SubTypes\n   * @param {string} caseTypeName - The case type name\n   * @param {string} caseTypeDesciption - The case type description\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the added case type\n   */\n  addCaseType(caseTypeName: string, caseTypeDesciption: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseType: caseTypeName,\n        CaseTypeDesciption: caseTypeDesciption\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Case Type\n   *\n   * @category Types & SubTypes\n   * @param {number} caseTypeId - The case Type ID\n   * @param {Object} options - The other options for the Case Type\n   * @return {Object} Returns Promise that represents an object describing the updated case type\n   */\n  updateCaseType(caseTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        CaseTypeId: caseTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Case Types\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems\n   */\n  getCaseTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/CaseType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents an Array of CaseTypeIDs\n   */\n  searchCaseTypeIDs(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(2, 'At least one of the attributes (CaFeeId, CaObjectId, FeeCode, FeeDesc) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for CaseTypes. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @category Types & SubTypes\n   * @param {Object} filters - The parameter(s) to search by (CaseType, CaseTypeDesc, CaseTypeId)\n   * @return {Object} Returns Promise that represents a collection of CaseTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=CaseTypeItem\n   */\n  searchCaseTypeObjects(filters: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['CaseType', 'CaseTypeDesc', 'CaseTypeId']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (CaseType, CaseTypeDesc, CaseTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseType/SearchObject', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add SubType\n   *\n   * @category Types & SubTypes\n   * @param {string} subTypeName - The SubTypeId\n   * @param {string} subTypeDescription - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  addSubtype(subTypeName: string, subTypeDescription: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubType: subTypeName,\n        SubTypeDesc: subTypeDescription\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update SubType\n   *\n   * @category Types & SubTypes\n   * @param {number} subTypeId - The SubTypeId\n   * @param {Object} options - The case Object ID\n   * @return {Object} Returns Promise that represents an object describing the updated SubTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  updateSubtype(subTypeId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        SubTypeId: subTypeId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/SubType/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get SubTypes\n   *\n   * @category Types & SubTypes\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=SubTypeItem\n   */\n  getSubtypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/SubType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Fees\n   *\n   * @category Fees\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getFees() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/FeeSetup/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search for Fees. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchFees(filters: {AccountCode?: string, FeeCode?: string, FeeDesc?: string, FeeSetupId?: number, FeeTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'FeeCode', 'FeeDesc', 'FeeSetupId', 'FeeTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, FeeCode, FeeDesc, FeeSetupId, FeeTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/FeeSetup/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Expirations\n   *\n   * @category Expirations\n   * @return {Object} Returns Promise that represents a collection of ExpirationTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  getExpirations() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/ExpirationType/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add an Expiration type\n   *\n   * @category Expirations\n   * @param {Object} options - Must specify OrgId and ExpirationDescType attributes. See: /{subdirectory}/apidocs/#/service-info/Pll/ExpirationType\n   * @return {Object} Returns Promise that represents an object describing the newly-added ExpirationTypeItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=ExpirationTypeItem\n   */\n  addExpiration(options?: Object) {\n    return new Promise((resolve, reject) => {\n      if(!_.has(options, 'OrgId') || !_.has(options, 'ExpirationTypeDesc')) {\n        reject(new CWError(5, 'OrgId and ExpirationTypeDesc must both be defined.'))\n      }\n      var data = options\n      this.cw.runRequest('Pll/ExpirationType/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Deposits\n   *\n   * @category Deposits\n   * @return {Object} Returns Promise that represents a collection of DepositItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepositItemBase\n   */\n  getDeposits() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Deposit/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Search Deposits. Include at least one of the search fields. A logical 'and' operation is applied for multiple search fields.\n   *\n   * @param {Object} filters - The parameter(s) to search by (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId).\n   * @return {Object} Returns Promise that represents an Array of FeeSetupIDs\n   */\n  searchDeposits(filters: {AccountCode?: string, DepositCode?: string, DepositDesc?: string, DepositId?: number, DepositTypeId?: number}) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AccountCode', 'DepositCode', 'DepositDesc', 'DepositId', 'DepositTypeId']).length==0) {\n        reject(new CWError(4, 'At least one of the attributes (AccountCode, DepositCode, DepositDesc, DepositId, DepositTypeId) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/Deposit/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Disciplines\n   *\n   * @category Disciplines\n   * @return {Object} Returns Promise that represents a collection of DisciplineItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DisciplineItem\n   */\n  getDisciplines() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Discipline/All', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Department\n   *\n   * @category Departments & Divisions\n   * @param {string} departmentCode - The SubTypeId\n   * @param {string} departmentName - The SubTypeId\n   * @param {Object} options - Other SubType options.\n   * @return {Object} Returns Promise that represents an object describing the added DepartmentItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  addDepartment(departmentCode: string, departmentName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentCode: departmentCode,\n        DepartmentName: departmentName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Department/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Departments\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of SubTypeItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DepartmentItem\n   */\n  getDepartments() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Department/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Division\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  addDivision(departmentId: number, divisionName: string, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        DepartmentId: departmentId,\n        DivisionName: divisionName\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/Division/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Divisions\n   *\n   * @category Departments & Divisions\n   * @return {Object} Returns Promise that represents a collection of DivisionItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=DivisionItem\n   */\n  getDivisions() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Division/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Holiday\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents an object describing the newly-added DivisionItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  addHoliday(holidayDate: Date, holidayDesc: string, halfDayFlag?: string) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayDate: holidayDate,\n        HolidayDesc: holidayDesc\n      }\n      if(typeof(halfDayFlag)!='undefined') {\n        _.set(data, 'HalfDayFlag', halfDayFlag)\n      }\n      this.cw.runRequest('Pll/Holiday/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Holiday\n   *\n   * @category Holidays\n   * @param {number} holidayId - ID of Holiday to delete\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  deleteHoliday(holidayId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        HolidayId: holidayId\n      }\n      this.cw.runRequest('Pll/Holiday/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Holidays\n   *\n   * @category Holidays\n   * @return {Object} Returns Promise that represents a collection of HolidaysItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=HolidaysItem\n   */\n  getHolidays() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/Holiday/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Inspection Time Block\n   *\n   * @category Inspections\n   * @param {string} labelText - Label for the time block\n   * @param {string} startTime - Start time in 24 hour format (HH:mm)\n   * @param {string} endTime - End time in 24 hour format (HH:mm)\n   * @param {Object} inspTimeBlocksDetails - See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspTimeBlocksDetailItem\n   * @return {Object} Returns Promise that represents an object describing the newly-added InspectionTimeBlocksItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  addInspectionTimeBlock(labelText: string, startTime: string, endTime: string, inspTimeBlocksDetails?: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        LabelText: labelText,\n        StartTime: startTime,\n        EndTime: endTime\n      }\n      if(typeof(inspTimeBlocksDetails)!='undefined') {\n        _.set(data, 'InspTimeBlocksDetails', inspTimeBlocksDetails)\n      }\n      this.cw.runRequest('Pll/InspectionTimeBlock/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Inspection Time Blocks\n   *\n   * @category Inspections\n   * @return {Object} Returns Promise that represents a collection of InspectionTimeBlocksItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=InspectionTimeBlocksItem\n   */\n  getInspectionTimeBlocks() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/InspectionTimeBlock/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all NotificationCases\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationCaseItem\n   */\n  getNotificationCases() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationCase/GetNotificationCaseList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Notification Types\n   *\n   * @category Notifications\n   * @return {Object} Returns Promise that represents a collection of NotificationCaseItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NotificationTypeItem\n   */\n  getNotificationTypes() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NotificationType/GetNotificationTypeList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} options - attributes or update\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addNumberingGroup(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/NumberingGroup/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update Numbering Group\n   *\n   * @category NumberingGroups\n   * @param {number} numberingGroupId - ID of NumberGroup to update\n   * @param {number} options - updates attributes\n   * @return {Object} Returns Promise that represents an object describing the newly-added HolidaysItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  updateNumberingGroup(numberingGroupId: number, options?: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        NumberingGroupId: numberingGroupId\n      }\n      var data = _.merge(data_init, options)\n      this.cw.runRequest('Pll/NumberingGroup/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all Numbering Groups\n   *\n   * @category NumberingGroups\n   * @return {Object} Returns Promise that represents a collection of NumberingGroupItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  getNumberingGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/NumberingGroup/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Person\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person\n   * @return {Object} Returns Promise that represents an object describing the newly-added NumberingGroupItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=NumberingGroupItem\n   */\n  addPerson(name: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        Name: name\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all People\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleItem\n   */\n  getPeople() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/People/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add People Role\n   *\n   * @category People\n   * @param {string} name - Name of person\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/PeopleRole\n   * @return {Object} Returns Promise that represents an object describing the newly-added PeopleRoleItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  addPeopleRole(roleCode: string, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        RoleCode: roleCode\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/People/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all PeopleRoles\n   *\n   * @category People\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getPeopleRoles() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/PeopleRole/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultDetail. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  addTaskResultDetail(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultDetail\n   *\n   * @category TaskResults\n   * @param {string} resultDetailId - Result Detail ID\n   * @param {Object} options - attributes for new person. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultDetail\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultDetailItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultDetailItem\n   */\n  updateTaskResultDetail(resultDetailId: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data_init = {\n        ResultDetailId: resultDetailId\n      }\n      var data = _.merge(options, data_init)\n      this.cw.runRequest('Pll/TaskResultDetail/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get all TaskResultDetails\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of PeopleRoleItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=PeopleRoleItem\n   */\n  getTaskResultDetails() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultDetail/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {Object} options - attributes for new TaskResultFeeInsert. See: /{subdirectory}/apidocs/#/service-info/Pll/TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents an object describing the newly-added TaskResultFeeInsertItem. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  addTaskResultFeeInsert(options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = options\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the deleted TaskResultFeeInsertItem.\n   */\n   deleteTaskResultFeeInsert(taskResultFeeInsertId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete TaskResultFeeInsert(s) by Task ID\n   *\n   * @category TaskResults\n   * @param {number} taskId - ID for Task parent of TaskResultFeeInsert(s) to be deleted.\n   * @return {Object} Returns Promise that represents the ID Number of the Task parent of the deleted TaskResultFeeInsertItem(s).\n   */\n   deleteTaskResultFeeInsertByTaskId(taskId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskId: taskId\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/DeleteByTaskId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @param {number} taskResultFeeInsertId - ID for TaskResultFeeInsert to be updated.\n   * @param {number} taskId - Updated TaskID\n   * @param {number} taskResultId - Updated TaskResultId\n   * @param {number} [feeSetupId] - Fee setup ID update for TaskResultFeeInsert\n   * @return {Object} Returns Promise that represents the ID Number of the updated TaskResultFeeInsertItem.\n   */\n   updateTaskResultFeeInsert(taskResultFeeInsertId: number, taskId: number, taskResultId: number, feeSetupId?: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        TaskResultFeeInsertId: taskResultFeeInsertId,\n        TaskId: taskId,\n        TaskResultId: taskResultId\n      }\n      if(typeof(feeSetupId)!='undefined') {\n        _.set(data, 'FeeSetupId', feeSetupId)\n      }\n      this.cw.runRequest('Pll/TaskResultFeeInsert/Update', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Get all TaskResultFeeInsert\n   *\n   * @category TaskResults\n   * @return {Object} Returns Promise that represents a collection of TaskResultFeeInsertItems. See: /{subdirectory}/apidocs/#/data-type-info;dataType=TaskResultFeeInsertItem\n   */\n  getTaskResultFeeInsert() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Pll/TaskResultFeeInsert/GetList', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\n\nconst _ = require('lodash')\n\nexport class CaseAssets {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Attach asset to case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when attaching the asset. Defaults to true.\n   * @param {Object} [options] - Options for CaseDataGroup including Address, AddressId, AssetId, AssetObjectId, AssetType, CityName, CrossStreet, DateExpired, ExpiredFlag, Facility_Id, FeatureAssetId, FeatureClass, FeatureObjectId, LegacyId, Level_Id, LndObjectId, Location, MasterFlag, ObjectId, StateCode, StreetDirection, StreetFraction, StreetName, StreetNumber, StreetPostDir, StreetType, Suite, TileNo, UpdateCaseData, XCoord, YCoord, ZCoord, and ZipCode\n   * @return {Object} Returns Promise that represents an object describing CaAddress.\n   */\n   attach(caObjectId: number, updateXY: boolean = true, options?: {Address?: string, AddressId?: number, AssetId?: string, AssetObjectId?: number, AssetType?: string, CityName?: string, CrossStreet?: string, DateExpired?: string, ExpiredFlag?: string, Facility_Id?: string, FeatureAssetId?: string, FeatureClass?: string, FeatureObjectId?: number, LegacyId?: string, Level_Id?: string, LndObjectId?: number, Location?: string, MasterFlag?: string, ObjectId?: string, StateCode?: string, StreetDirection?: string, StreetFraction?: string, StreetName?: string, StreetNumber?: number, StreetPostDir?: string, StreetType?: string, Suite?: string, TileNo?: string, UpdateCaseData?: boolean, XCoord?: number, YCoord?: number, ZCoord?: number, ZipCode?: string}) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        UpdateXY: updateXY\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Pll/CaseAddress/Add', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Detach specific asset from case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to attach the data group to.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when detaching the assets. Defaults to true.\n   * @return {Object} Returns Promise that represents a collection of the default CaDataGroupItemBases.\n   */\n  detach(caAddressId: number, updateXY: boolean = true) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaAddressId: caAddressId,\n        UpdateXY: updateXY\n      }\n      this.cw.runRequest('Pll/CaseAddress/Delete', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Detach all assets from case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object to detach the assets from.\n   * @param {boolean} updateXY - Whether or not to update the Case's X/Y values when detaching the asset(s). Defaults to false.\n   * @return {Object} Returns Promise that represents a collection of detached CaAddressIds.\n   */\n  detachAll(caObjectId: number, updateXY: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId,\n        UpdateXY: updateXY\n      }\n      this.cw.runRequest('Pll/CaseAddress/DeleteByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get assets attached to a specific case\n   *\n   * @category Case Assets\n   * @param {number} caObjectId - The Case Object from which to get attached assets\n   * @return {Object} Returns Promise that represents a collection of the default CaAddresses.\n   */\n  getForCase(caObjectId: number) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        CaObjectId: caObjectId\n      }\n      this.cw.runRequest('Pll/CaseAddress/ByCaObjectId', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n\n  /**\n   * Search for Case Assets. Include one or more of the search fields. A logical 'and' operation is applied to muliple search fields\n   *\n   * @category Case Assets\n   * @param {Object} filters - The parameters to search by. (AssetType, CaAddressId, CaObjectId, CityName, ExpiredFlag, StateCode, StateName, StreetName, StreetNumber, Suite, ZipCode)\n   * @return {Object} Returns Promise that represents an Array of resulting CaAddresses\n   */\n   search(filters?: Object) {\n    return new Promise((resolve, reject) => {\n      if(_.intersectionBy(_.keysIn(filters), ['AssetType', 'CaAddressId', 'CaObjectId', 'CityName', 'ExpiredFlag', 'StateCode', 'StateName', 'StreetName', 'StreetNumber', 'Suite', 'ZipCode']).length==0) {\n        reject(new CWError(3, 'At least one of the attributes (AssetType, CaAddressId, CaObjectId, CityName, ExpiredFlag, StateCode, StateName, StreetName, StreetNumber, Suite, ZipCode) must be defined.'))\n      }\n      var data = filters\n      this.cw.runRequest('Pll/CaseAddress/Search', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class WorkOrderAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get entity groups\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all entity groups\n   */\n  getEntityGroups() {\n    return new Promise((resolve, reject) => {\n      var data = {}\n      this.cw.runRequest('Ams/Entity/Groups', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get entity types\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all GIS WorkOrder entity types\n   */\n  getEntityTypes(entityGroups:Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data = {EntityGroups: entityGroups}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get WorkOrder templates\n   *\n   * @category WorkOrders Admin\n   * @return {Object} Returns Promise that represents a collection of all WorkOrder templates\n   */\n  getTemplates(entityType:string, includeComments:boolean=true, includeInstructions:boolean=true) {\n    return new Promise((resolve, reject) => {\n      var data = {EntityType: entityType, IncludeComments: includeComments, IncludeInstructions: includeInstructions}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Update WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {Object} wOTemplate - Obect that describes the WorkOrder Template\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  updateTemplate(wOTemplate:Object) {\n    let valid_fields = [\"AcctNum\", \"AutoCreateTask\", \"Cancel\", \"Comments\", \"CopyCustomFieldVal\", \"CycleFrom\", \"CycleIncludeWeekends\", \"CycleIntervalNum\", \"CycleIntervalUnit\", \"CycleType\", \"DaysToComplete\", \"DefaultProject\", \"DefaultProjectSid\", \"Description\", \"Effort\", \"ExpenseType\", \"Instructions\", \"IsReactive\", \"MaintScore\", \"NumDaysBefore\", \"Priority\",   \"RequireAssetOnClose\", \"Shop\", \"Stage\", \"SubmitToEmployeeSid\", \"SupervisorEmployeeSid\", \"UnitsAccompDesc\", \"UnitsAccompDescLock\", \"WOCategory\", \"WOCustFieldCatId\", \"WOPrintTmpt\", \"WOTemplateId\", \"WorkMonth\"]\n    return new Promise((resolve, reject) => {\n      var data = wOTemplate\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get template group rights for provided WorkOrder Templates\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateGroupRights(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplates', data).then(r => { // TODO: Update this URL\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get template activity services for provided WorkOrder Templates\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateActivity(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplateActivityService', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get fields which will be updated when provided WorkOrder Template instance closes\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - Array one or more WorkOrder Template IDs\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getUpdateFields(wOTemplateIds:Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateIds: wOTemplateIds}\n      this.cw.runRequest('Ams/Designer/WOTemplateUpdateFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get equipment\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateEquipment(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateEquipment', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get labor\n   *\n   * @category WorkOrders Admin\n   * @param {Array<number>} wOTemplateIds - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateLabor(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateLabor', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get material\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateMaterial(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateMaterial', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get map layer fields configured for provided WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all\n   */\n  getTemplateMapLayerFields(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WorkOrderTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WorkOrderTemplateMapLayerFields', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get tasks configured for provided WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all tasks on WorkOrder template\n   */\n  getTemplateTasks(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Tasks/ByWorkOrderTemplate', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get inspections connected to provided WorkOrder template\n   *\n   * @category WorkOrders Admin\n   * @param {number} wOTemplateId - WorkOrder Template ID\n   * @return {Object} Returns Promise that represents a collection of all tasks on WorkOrder template\n   */\n  getRelatedInspectionTemplates(wOTemplateId:number) {\n    return new Promise((resolve, reject) => {\n      var data = {WOTemplateId: wOTemplateId}\n      this.cw.runRequest('Ams/Designer/WOTemplateInspections', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class InspectionAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get inspection templates\n   *\n   * @category Inspection Templates\n   * @param {Array<string>} [entityTypes] - The Entity Type(s) to return potential inspections for\n   * @param {boolean} [canCreate] - If true, only return templates the user can create, ignored if false or null, default is true\n   * @param {Object} [options] - An object which can include: [IncludeInactive]: boolean, MaximumDateModified: Date, MinimumDateModified: Date, TemplateIds: Array<number>\n   * @return {Object} Returns Promise that represents a collection of all Inspections matching the provided parameters\n   */\n  getTemplates(entityTypes?: Array<string>, canCreate?: boolean, options?: {IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>}) {\n    return new Promise((resolve, reject) => {\n      var data: {EntityTypes?: Array<string>, CanCreate?: boolean, IncludeInactive?: boolean, MaximumDateModified?: Date, MinimumDateModified?: Date, TemplateIds?: Array<number>} = {}\n      if(typeof(entityTypes)!=='undefined') {\n        data.EntityTypes = entityTypes\n      }\n      data.CanCreate = typeof(canCreate)!=='undefined' ? canCreate : true\n      if(typeof(options)==='object') {\n        _.forIn(options, (v, k) => {\n          data[k] = v\n        })\n      }\n      this.cw.runRequest('Ams/InspectionTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nconst _ = require('lodash')\n\nexport class RequestAdmin {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * @hidden\n   */\n  constructor(cw) {\n    this.cw = cw\n  }\n\n  /**\n   * Get service request templates\n   *\n   * @category Requests Admin\n   * @param {Object} searchData - search data\n   * @return {Object} Returns Promise that represents a collection of all Service Request Templates\n   */\n  getTemplates(searchData: Object) {\n    return new Promise((resolve, reject) => {\n      var data = searchData\n      this.cw.runRequest('Ams/ServiceRequestTemplate/Templates', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\nexport class WorkOrderCosts {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Storage of object's active activityType\n   */\n  currentActivityType: string\n\n  /**\n   * @hidden\n   */\n  constructor(cw:any) {\n    this.cw = cw\n    this.currentActivityType = \"WorkOrder\"\n  }\n\n  /**\n   * Get Cost Codes\n   *\n   * @category Labor Costs\n   * @param {Array<number>} employeeSids - A list of Employee IDs for which to get the job codes.\n   * @param {boolean} commonOnly - Set to true to get the Cost Codes that are common to ALL employees in the list, otherwise get all job codes that apply to at least one employee in the list.\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  getCodes(employeeSids: Object, commonOnly: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        EmployeeSids: employeeSids,\n        CommonCodesOnly: commonOnly\n      }\n      this.cw.runRequest('Ams/LaborCost/CostCodes', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Job Codes\n   *\n   * @category Labor Costs\n   * @return {Object} Returns Promise that represents an object describing\n   */\n   getJobCodes() {\n    return new Promise((resolve, reject) => {\n    this.cw.runRequest('Ams/LaborCost/JobCodes').then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add WorkOrder Labor Costs\n   *\n   * @category WorkOrder Costs\n   * @param {number} workOrderSid - Array of inspection labor costings\n   * @param {number} hours - Number of hours to add\n   * @param {Object} options - options for the work order\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  addLabor(workOrderSid: number, hours: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        WorkOrderSid: workOrderSid,\n        Hours: hours\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      // TODO: ensure each object has Hours & InspectionId\n      this.cw.runRequest('Ams/LaborCost/AddWorkOrderCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n   /**\n   * Get Labor Costs for WorkOrder(s)\n   *\n   * @category WorkOrder Costs\n   * @param {Array<number>} workOrderSids - Array of request Ids to get costs for\n   * @param {boolean} estimated - Whether to get estimates or actuals (defaults to false -- get actuals)\n   * @return {Object} Returns Promise that represents an object describing\n   */\n   getLabor(workOrderSids: Array<number>, estimated: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Estimated: estimated,\n        WorkOrderSids: workOrderSids\n      }\n      this.cw.runRequest('Ams/LaborCost/WorkOrderCostsByWorkOrder', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete WorkOrder Labor Costs\n   *\n   * @category WorkOrder Costs\n   * @param {Array<number>} laborCostIds - List of labor cost IDs to delete\n   * @param {boolean} estimated - Whether to delete estimates or actuals (defaults to false -- delete actuals)\n   * @return {Object} Returns Promise that represents an object describing\n   */\n    deleteLabor(laborCostIds: Array<number>, estimated: boolean = false) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          LaborCostIds: laborCostIds,\n          Estimated: estimated\n        }\n        this.cw.runRequest('Ams/LaborCost/DeleteWorkOrderCosts', data).then((response: any) => {\n          resolve(response.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n\n  /**\n   * Add WorkOrder Equipment Costs\n   *\n   * @category WorkOrder Costs\n   * @param {Object} workOrderSid - the work order to add the equipment costs to\n   * @param {Object} options - additional options\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  addEquipment(workOrderSid: number, options: Object) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        WorkOrderSid: workOrderSid\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      // TODO: ensure each object has Hours & InspectionId\n      this.cw.runRequest('Ams/EquipmentCost/AddWorkOrderCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n   /**\n   * Get Equipment Costs for WorkOrder(s)\n   *\n   * @category WorkOrder Costs\n   * @param {number} workOrderSid - the work order to add the equipment costs to\n   * @param {boolean} estimated - true to get estimated costs. defaults to false\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  //  WorkOrderCostsByWorkOrderList<EquipmentCost>\n  getEquipment(workOrderSid: number, estimated: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        WorkOrderSid: workOrderSid,\n        Estimated: estimated\n      }\n      // TODO: ensure each object has Hours & InspectionId\n      this.cw.runRequest('Ams/EquipmentCost/WorkOrderCostsByWorkOrder', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete WorkOrder Equipment Costs\n   *\n   * @category WorkOrder Costs\n   * @param {Object} \n   * @return {Object} Returns Promise that represents an object describing\n   */\n  deleteEquipment(equipmentCostIds: Array<number>, estimated: boolean = false) { // \"WorkOrderId\", \"WorkOrderSid\", \"Estimated\", \"MaterialSids\", \"Units\", \"AcctNum\", \"Source\", \"TransDate\", \"ContractorSids\", \"ContractorMaterialId\", \"ContractorMaterialDescription\", \"ContractorMaterialCost\", \"TaskIds\", \"Entities\", \"CombineIssuesByMaterialSid\"\n    return new Promise((resolve, reject) => {\n      var data = {\n        EquipmentCostIds: equipmentCostIds,\n        Estimated: estimated\n      }\n      this.cw.runRequest('Ams/EquipmentCost/DeleteWorkOrderCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add WorkOrder Material Costs\n   *\n   * @category WorkOrder Costs\n   * @param {number} workOrderSid - Work Order SID number to add the material to\n   * @param {number} units - Decimal units for material \n   * @param {Object} options - Additional work order options\n   * @param {boolean} combineIssuesByMaterialSid - Combine issues with the same MaterialSid into a single commit, default is true\n   * @return {Object} Returns Promise that represents a collection describing the work order material costs\n   */\n  addMaterial(workOrderSid: number, units: number, options: Object, combineIssuesByMaterialSid: boolean = true) { // \"WorkOrderId\", \"WorkOrderSid\", \"Estimated\", \"MaterialSids\", \"Units\", \"AcctNum\", \"Source\", \"TransDate\", \"ContractorSids\", \"ContractorMaterialId\", \"ContractorMaterialDescription\", \"ContractorMaterialCost\", \"TaskIds\", \"Entities\", \"CombineIssuesByMaterialSid\"\n    return new Promise((resolve, reject) => {\n      var data = {\n        Units: units,\n        WorkOrderSid: workOrderSid,\n        CombineIssuesByMaterialSid: combineIssuesByMaterialSid\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Ams/MaterialCost/AddWorkOrderCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Material Costs for WorkOrder(s)\n   *\n   * @category WorkOrder Costs\n   * @param {number} workOrderSid - the work order to add the equipment costs to\n   * @param {boolean} estimated - true to get estimated costs. defaults to false and gets actuals.\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  getMaterial(workOrderSid: number, estimated: boolean = false) { // \"WorkOrderId\", \"WorkOrderSid\", \"Estimated\", \"MaterialSids\", \"Units\", \"AcctNum\", \"Source\", \"TransDate\", \"ContractorSids\", \"ContractorMaterialId\", \"ContractorMaterialDescription\", \"ContractorMaterialCost\", \"TaskIds\", \"Entities\", \"CombineIssuesByMaterialSid\"\n    return new Promise((resolve, reject) => {\n      var data = {\n        WorkOrderSid: workOrderSid,\n        Estimated: estimated\n      }\n      this.cw.runRequest('Ams/MaterialCost/AddWorkOrderCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete WorkOrder Material Costs\n   *\n   * @category WorkOrder Costs\n   * @param {Array<number>} materialCostIds - list of material cost IDs to delete\n   * @param {boolean} estimated - true to delete the estimated costs. defaults to false and deletes actuals.\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  deleteMaterial(materialCostIds: number, estimated: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        MaterialCostIds: materialCostIds,\n        Estimated: estimated\n      }\n      this.cw.runRequest('Ams/MaterialCost/DeleteWorkOrderCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\nexport class InspectionCosts {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Storage of object's active activityType\n   */\n  currentActivityType: string\n\n  /**\n   * @hidden\n   */\n  constructor(cw:any) {\n    this.cw = cw\n    this.currentActivityType = \"Inspection\"\n  }\n\n  /**\n   * Get Cost Codes\n   *\n   * @category Labor Costs\n   * @param {Array<number>} employeeSids - A list of Employee IDs for which to get the job codes.\n   * @param {boolean} commonOnly - Set to true to get the Cost Codes that are common to ALL employees in the list, otherwise get all job codes that apply to at least one employee in the list.\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  getCodes(employeeSids: Object, commonOnly: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        EmployeeSids: employeeSids,\n        CommonCodesOnly: commonOnly\n      }\n      this.cw.runRequest('Ams/LaborCost/CostCodes', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Job Codes\n   *\n   * @category Labor Costs\n   * @return {Object} Returns Promise that represents an object describing\n   */\n   getJobCodes() {\n    return new Promise((resolve, reject) => {\n    this.cw.runRequest('Ams/LaborCost/JobCodes').then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Inspection Labor Costs\n   *\n   * @category Inspection Costs\n   * @param {number} inspectionId - Inspection ID to add labor costs to\n   * @param {number} hours - The hours to add to the inspection\n   * @param {Object} options - Additional settings for hours setting\n   * @param {boolean} estimated - Boolean, get estimated or real costs, defaults to false (get real by default)\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  addLabor(inspectionId: number, hours: number, options?: object, estimated: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Estimated: estimated,\n        InspectionIds: inspectionId,\n        Hours: hours\n      }\n      if(typeof(options)!='undefined') {\n        data = _.merge(data, options)\n      }\n      this.cw.runRequest('Ams/LaborCost/AddInspectionCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n   /**\n   * Get Labor Costs for a specific list of Inspections\n   *\n   * @category Inspection Costs\n   * @param {Array<int>} inspectionIds - An array of inspection IDs to get associated costs for.\n   * @param {boolean} estimated - Boolean, get estimated or real costs, defaults to false (get real by default)\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  getLabor(inspectionIds: Array<number>, estimated: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Estimated: estimated,\n        InspectionIds: inspectionIds\n      }\n      this.cw.runRequest('Ams/LaborCost/InspectionCostsByInspection', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Inspection Labor Costs\n   *\n   * @category Inspection Costs\n   * @param {Array<int>} laborCostIds - An array of inspection labor cost IDs to delete\n   * @param {boolean} estimated - Boolean, delete estimated or real costs, defaults to false (delete real by default)\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  deleteLabor(laborCostIds: Array<number>, estimated: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        Estimated: estimated,\n        reqLaborCostIds: laborCostIds\n      }\n      this.cw.runRequest('Ams/LaborCost/DeleteInspectionCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n    /**\n   * Add Inspection Equipment Costs\n   *\n   * @category Inspection Costs\n   * @param {Object} inspectionId - the inspection to add the equipment costs to\n   * @param {Object} options - additional options\n   * @return {Object} Returns Promise that represents an object describing\n   */\n    addEquipment(inspectionId: number, options: Object) {\n      return new Promise((resolve, reject) => {\n        var data = {\n          InspectionId: inspectionId\n        }\n        if(typeof(options)!='undefined') {\n          data = _.merge(data, options)\n        }\n        // TODO: ensure each object has Hours & InspectionId\n        this.cw.runRequest('Ams/EquipmentCost/AddInspectionCosts', data).then((response: any) => {\n          resolve(response.Value)\n        }).catch(e => {\n          reject(e)\n        })\n      })\n    }\n  \n   /**\n   * Get Equipment Costs for Inspection(s)\n   *\n   * @category Inspection Costs\n   * @param {Array<number>} inspectionIds - the inspection to get the equipment costs for.\n   * @param {Object} estimated - get estimated equipment costs. Defaults to false.\n   * @return {Object} Returns Promise that represents an object describing\n   */\n   getEquipment(inspectionIds: number, estimated: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        InspectionIds: inspectionIds,\n        Estimated: estimated\n      }\n      this.cw.runRequest('Ams/EquipmentCost/InspectionCostsByInspection', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Inspection Equipment Costs\n   *\n   * @category Inspection Costs\n   * @param {Array<number>} equipmentCostIds - the equipment cost IDs to delete.\n   * @param {Object} estimated - delete estimated equipment costs. Defaults to false.\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  deleteEquipment(equipmentCostIds: Array<number>, estimated: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        EquipmentCostIds: equipmentCostIds,\n        Estimated: estimated\n      }\n      this.cw.runRequest('Ams/EquipmentCost/DeleteInspectionCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n}\n","import { CWError } from './error'\nimport ReversibleMap from 'reversible-map'\nconst _ = require('lodash')\n\nexport class RequestCosts {\n  /**\n   * @hidden\n   */\n  cw: any\n\n  /**\n   * Storage of object's active activityType\n   */\n  currentActivityType: string\n\n  /**\n   * @hidden\n   */\n  constructor(cw:any) {\n    this.cw = cw\n    this.currentActivityType = \"Request\"\n  }\n\n  /**\n   * Get Cost Codes\n   *\n   * @category Labor Costs\n   * @param {Array<number>} employeeSids - A list of Employee IDs for which to get the job codes.\n   * @param {boolean} commonOnly - Set to true to get the Cost Codes that are common to ALL employees in the list, otherwise get all job codes that apply to at least one employee in the list.\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  getCodes(employeeSids: Object, commonOnly: boolean = false) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        EmployeeSids: employeeSids,\n        CommonCodesOnly: commonOnly\n      }\n      this.cw.runRequest('Ams/LaborCost/CostCodes', data).then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Get Job Codes\n   *\n   * @category Labor Costs\n   * @return {Object} Returns Promise that represents an object describing\n   */\n   getJobCodes() {\n    return new Promise((resolve, reject) => {\n    this.cw.runRequest('Ams/LaborCost/JobCodes').then(r => {\n        resolve(r.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Add Request Labor Costs\n   *\n   * @category Request Costs\n   * @param {Object} requestCosts - Array of inspection labor costings\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  addLabor(requestCosts: Array<Object>) {\n    return new Promise((resolve, reject) => {\n      var data = requestCosts\n      // TODO: ensure each object has Hours & InspectionId\n      this.cw.runRequest('Ams/LaborCost/AddRequestCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n   /**\n   * Get Labor Costs for Request(s)\n   *\n   * @category Request Costs\n   * @param {Array<number>} requestIds - Array of request Ids to get costs for\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  getLabor(requestIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        RequestIds: requestIds\n      }\n      this.cw.runRequest('Ams/LaborCost/RequestCostsByRequest', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  /**\n   * Delete Request Labor Costs\n   *\n   * @category Request Costs\n   * @param {Array<number>} laborCostIds - Array of request labor cost Ids to delete\n   * @return {Object} Returns Promise that represents an object describing\n   */\n  deleteLabor(laborCostIds: Array<number>) {\n    return new Promise((resolve, reject) => {\n      var data = {\n        LaborCostIds: laborCostIds\n      }\n      this.cw.runRequest('Ams/LaborCost/DeleteRequestCosts', data).then((response: any) => {\n        resolve(response.Value)\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n}\n","import { CWError } from './error'\nimport { General } from './general'\nimport { ActivityLinks } from './activity_link'\nimport { Gis } from './gis'\nimport { MessageQueue } from './message_queue'\nimport { Search } from './search'\nimport { Request } from './request'\nimport { Inspection } from './inspection'\nimport { WorkOrder } from './workorder'\nimport { Briefcase } from './briefcase'\nimport { CaseData } from './case_data'\nimport { CaseFinancial } from './case_financial'\nimport { CaseWorkflow} from './case_workflow'\nimport { CaseAdmin } from './case_admin'\nimport { Comments } from './comments'\nimport { CaseAssets } from './case_assets'\nimport { WorkOrderAdmin } from './workorder_admin'\nimport { InspectionAdmin } from './inspection_admin'\nimport { RequestAdmin } from './request_admin'\nimport { WorkOrderCosts } from './workorder_costs'\nimport { InspectionCosts } from './inspection_costs'\nimport { RequestCosts } from './request_costs'\n\nconst https = require('https')\nconst querystring = require('querystring')\nconst _ = require('lodash')\n\ninterface postData {\n  data?: string\n  token?: string\n  file?: any\n}\n\ninterface Citywork {\n}\n\n/**\n * Core class Cityworks with most of the authentication and install capabilities functions\n */\nclass Cityworks implements Citywork {\n  /**\n   * The domain of the cityworks install. Defaults to Cityworks Online\n   */\n  private base_url: string\n  /**\n   * Stores the currently in use authentication token\n   */\n  private Token?: string\n  /**\n   * Stores the login username\n   */\n  private login?: string\n  /**\n   * Holds the login password\n   */\n  private password?: string\n  /**\n   * Holds the GIS Token for GIS-based Authentication (Portal)\n   */\n  private gisToken?: string\n  /**\n   * Holds the GIS Token URL for GIS-based Authentication (Portal)\n   */\n  private gisTokenUrl?: string\n  /**\n   * Stores settings including path (defaults to \"cityworks\"), secure (defaults to true), expires (defaults to null - does not expire), default_domain\n   */\n  private settings: {\n    path: string,\n    secure: boolean,\n    expires: any,\n    default_domain?: any\n  }\n  error?: any\n\n  private extensions: Object\n  private features: Object\n  private potential_loads: Array<string>\n\n  /**\n     * Contructor for a new cityworks instance's object, allows one to optionally configure the domain and other settings right from the get-go\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'workorder', 'inspection', 'request', 'case']\n     */\n  constructor(base_url?: string, settings?: Object, load?: Array<string>) {\n    this.base_url = 'cityworksonline'\n    this.extensions = {\"UnknownExtension\": 0, \"CwAnalytics\": 1, \"WebHooks\": 2, \"PLLPublicApp\": 3, \"ActivityUpdate\": 4, \"SingleSignOn\": 5}\n    this.features = {\"UnknownFeature\": 0, \"ViewInspections\": 1, \"EditInspections\": 2, \"ViewServiceRequest\": 3, \"EditServiceRequest\": 4, \"ViewWorkOrder\": 5, \"EditWorkOrder\": 6, \"EquipmentCheckOut\": 7, \"OfficeField\": 8, \"Respond\": 9, \"Eurl\": 10, \"PaverInterface\": 11, \"Contracts\": 12, \"Storeroom\": 13, \"PLL\": 14, \"Cw4XL\": 15, \"TableEditor\": 16, \"CCTVInterface\": 17, \"MobileAndroid\": 18, \"MobileiOS\": 19, \"PerformanceBudgeting\": 20, \"Insights\": 21, \"RespondCase\": 22, \"RespondInspection\": 23, \"RespondServiceRequest\": 24, \"RespondTaskManager\": 25, \"RespondWorkOrder\": 26, \"Workload\": 27, \"OpX\": 28, \"TrimbleUnityMobile\": 29, \"TrimbleVegetationManager\": 30}\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n    this.potential_loads = ['general', 'activity_link', 'message_queue', 'gis', 'search', 'request', 'case', 'case_financial']\n    if(typeof(base_url)!='undefined') {\n      this.configure(base_url, settings, load)\n    }\n  }\n\n  /**\n     * Configure a new cityworks instance's domain and other settings\n     *\n     * @param {string} [base_url] - The first color, in hexadecimal format.\n     * @param {object} [settings] - The second color, in hexadecimal format.\n     * @param {array} [load] - allows user to choose which modules to load and make available. Full availability array: ['general', 'activity_link', 'message_queue', 'gis', 'search', 'workorder', 'inspection', 'request', 'case']\n     * @return {boolean} Returns true if successful, otherwise, throws error\n     */\n  configure(base_url?: string, settings?: Object, load?: Array<string>) {\n    if(typeof base_url !== 'undefined') { this.base_url = base_url } else { this.base_url = 'cityworksonline' }\n    this.settings = {\n      path: 'cityworks',\n      secure: true,\n      expires: null,\n      default_domain: null\n    }\n\n    if(typeof(settings)!='undefined') {\n      _.forEach(settings, (v,k) => {\n        if(typeof(this.settings[k])!='undefined') {this.settings[k] = v}\n      })\n    }\n  }\n\n  /**\n     * Send a request to the Cityworks API\n     *\n     * If one ever needs to access or call an unimplemented API endpoint of a Cityworks install, one can call this method directly with the path and data payload:\n     *\n     * `cityworks.runRequest(path, data)`\n     *\n     * @param {string} path - The path to the particular endpoint\n     * @param {Object} data - The data object to be sent to the Cityworks API\n     * @param {any} file - The file to send in binary to the Cityworks API\n     * @return {Object} Returns Promise object that represents the json object returned from the Cityworks API\n     */\n  runRequest(path, data?, file?: any) {\n    return new Promise((resolve, reject) => {\n      let pd = {} as postData\n\n      if(typeof(data) !== 'undefined') {\n        pd.data = JSON.stringify(data)\n      }\n      \n      if(typeof(file) !== 'undefined' && (path=='Pll/CaseRelDocs/AddTaskRelDoc' || path=='Pll/CaseRelDocs/Add')) {\n        pd.file = file\n      }\n\n      if(typeof(this.Token) !== 'undefined' && this.Token != '' && path!='General/Authentication/CityworksOnlineAuthenticate' && path!='General/Authentication/Authenticate') {\n        pd.token = this.Token\n      }\n\n      let obj: {\n        Status: number,\n        Message: string\n      }\n\n      let options = {\n        hostname: this.base_url,\n        port: 443,\n        path: '/' + this.settings.path + '/services/' + path,\n        method: 'POST',\n        headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n           'Content-Length': Buffer.byteLength(querystring.stringify(pd))\n        },\n        timeout: 10000000\n      }\n      let request = https.request(options, (response) => {\n          let str=''\n          response.on('error',function(e){\n              console.log(e, 'Caught on error')\n              reject(new CWError(13, \"Unknown error.\", e))\n          })\n\n          response.on('data',function(chunk){\n              str+=chunk\n          })\n\n          response.on('end',function(){\n            try {\n              var test_str = JSON.stringify(str) + \"[test string]\"\n              if(test_str.match(/\\<h2\\>Object\\ moved\\ to/)==null) {\n                var obj=JSON.parse(str)\n                // if(path=='General/ActivityNotification/UserWatching') {\n                //   console.log(str, options, pd, obj)\n                // }\n                if(typeof(obj)=='undefined') {\n                  // failed\n                  reject(new CWError(10, 'No response received from Cityworks API.'))\n                } else if(typeof(obj)!='undefined' && typeof(obj.Value)!='undefined') { // && typeof(response.Value.Token)!='undefined') {\n                  switch(obj.Status) {\n                    case 1:\n                      reject(new CWError(1, 'Error', obj))\n                      break;\n                    case 2:\n                      reject(new CWError(2, 'Unauthorized', obj))\n                      break;\n                    case 3:\n                      reject(new CWError(3, 'InvalidCredentials', obj))\n                      break;\n                    case 0:\n                    default:\n                      resolve(obj);\n                      break;\n                  }\n                } else {\n                  reject(new CWError(4, \"Unknown error.\", {options: options, postedData: pd, api_returned_string: obj}))\n                }\n              } else {\n                reject(new CWError(5, \"Error parsing JSON. Cityworks returned HTML.\", {response: str}))\n              }\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log('try/catch error on JSON')\n                reject(new CWError(6, \"Error parsing JSON.\", {error: e}))\n              } else {\n                console.log('try/catch error on JSON - but not an instance of SyntaxError')\n                reject(new CWError(7, \"Error parsing JSON.\"))\n              }\n            }\n          })\n      })\n      request.write(querystring.stringify(pd))\n      request.end()\n    })\n  }\n\n  /**\n     * Authenticate with the Cityworks API and store an access token for use. Stores the token on cityworks.Token.\n     * @param {string} login - User's login name\n     * @param {password} password - User's password\n     * @return {Object} Returns Promise object that represents a boolean which tells you the login succeeded (true) or failed (false).\n     */\n  authenticate(login: string, password: string) {\n    return new Promise((resolve, reject) => {\n      let data = { LoginName:login, Password:password }\n      let path = 'General/Authentication/Authenticate'\n      if(this.base_url == 'cityworksonline') {\n        path = 'General/Authentication/CityworksOnlineAuthenticate'\n      }\n      this.runRequest(path, data).then((response: any) => {\n        // if(response.Status>0) {\n        //   // failed\n        //   reject(new CWError(100, response.Message))\n        // } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.login = login\n          this.password = password\n          this.Token = response.Value.Token\n          resolve(true)\n        // } else {\n        //   // failed\n        //   reject(new CWError(11, 'Unknown Error'))\n        // }\n      }).catch(error => {\n        reject(error);\n      })\n    })\n  }\n\n  /**\n     * Authenticate a username with a GIS Token\n     * @param {login} - Gis user name, should match a Cityworks employee login name\n     * @param {string} gisToken - Gis Oauth2 access token\n     * @param {string} gisTokenUrl - Base url to GIS server (not the '/generateToken' endpoint)\n     * @param {number} [expires] - Authenticate to Cityworks for a specified number of milliseconds, defaults to 2 weeks\n     */\n  authenticateWithGISToken(login: string, gisToken: string, gisTokenUrl: string, expires?: number) {\n    this.login = login\n    this.gisToken = gisToken\n    this.gisTokenUrl = gisTokenUrl\n    if(typeof(expires)!='undefined') {\n      expires = 1209600000\n    }\n\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/AuthenticateGisToken'\n      let data = { LoginName:this.login, GisToken: this.gisToken, GisTokenUrl: this.gisTokenUrl, Expires: expires}\n\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          // TODO: CWError here.\n        } else if(typeof(response.Value)!='undefined' && typeof(response.Value.Token)!='undefined') {\n          this.Token = response.Value.Token\n          resolve(true)\n        } else {\n          // failed\n          resolve(false)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Validate provided token\n     * @param {string} token - User's login name\n     * @param {boolean} [set] - Set a valid token as the cityworks instance's active token\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the token's validity and that is was set (true) or throws an error if was not valid (and not set).\n     */\n  validateToken(token:string, set?:boolean) {\n    return new Promise((resolve, reject) => {\n      if(typeof(set)=='undefined') {\n        let set = false\n      }\n      let data = { Token: token }\n      let path = 'General/Authentication/Validate'\n      this.runRequest(path, data).then((response: any) => {\n        if(response.Status>0) {\n          // failed\n          resolve(false)\n        } else {\n          if(set) {\n            this.Token = token\n          }\n          resolve(response.Value)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  /**\n     * Set a token you've retrieved from your storage system as the active token for the cityworks instance. Note that this doesn't check the token for validity.\n     * @param {token} token - The token string to set as the active token.\n     * @return {boolean} Returns a boolean which apprises one that the token was set (true) or not set (false).\n     */\n  setToken(token) {\n    if(token!='' && token!=null) {\n      this.Token = token\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n     * Get currently set, valid token\n     * @param {token} token - The token string to set as the active token.\n     * @return {string} Returns a string which is the currently-set token or the boolean false value if no (valid) token set\n     */\n  getToken() {\n    if(this.Token=='' || this.Token==null) {\n      return false\n    } else {\n      return this.Token\n    }\n  }\n\n  /**\n     * Revoke all current user's tokens or only tokens created before a particular date and time.\n     * @param {number} [revokeBefore] - Datetime as an Epoch integer (number), if you wish to revoke only tokens created before a particular datetime\n     * @return {Object} Returns Promise object that represents a boolean which apprises one of the revocation outcome's success (true) or failure (false)\n     */\n  revokeToken(revokeBefore?:number) {\n    return new Promise((resolve, reject) => {\n      let data = { RevokeDate: revokeBefore }\n      let path = 'General/Token/RevokeUser'\n      this.runRequest(path, data).then((response: any) => {\n        if((typeof(response.Status)!='undefined' && response.Status>0)) {\n          // failed\n          resolve(false)\n        } else {\n          resolve(true)\n        }\n      }).catch(error => {\n        throw error\n      })\n    })\n  }\n\n  // App data\n\n  /**\n     * Get the localization settings for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the localization settings for the current Cityworks install\n     */\n  getLocalizationSettings() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/LocalizationSettings'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the system timezone options for current Cityworks install\n     * @return {Object} Returns Promise object that represents an Object which contains all the timezone settings for the currentCityworks install\n     */\n  getTimezoneOptions() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Localization/TimeZones'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the current install's location information\n     * @return {Object} Returns Promise object that represents an Object which contains the location information\n     */\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/AppData/CurrentLocation'\n      this.runRequest(path, {}).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  // Licensing Checks\n  /**\n     * Check if a particular license is available to the currently-authenticated user\n     * @param {string} area - Area of access\n     * @param {string} service - Service to access\n     * @return {boolean} Returns Promise object that represents a boolean which informs access is granted (true) or denied (false)\n     */\n  licensedApiCheck(area: string, service: string) {\n    return new Promise((resolve, reject) => {\n      let data = {\n        \"Area\": area,\n        \"Service\": service\n      }\n      let path = 'General/AppData/SelectedEntities'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if a current Cityworks install is licensed to use a particular extension\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {string} extension - Extension name\n     * @return {boolean} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionCheck(extension: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.extensions[extension])=='undefined') {\n        reject(new CWError(4, 'Extension provided does not exist or is mispelled.', {'provided': extension, 'available': this.extensions}))\n      }\n      let data = {\n        \"Extension\": this.extensions[extension]\n      }\n      let path = 'General/Authorization/LicensedExtensionCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check a whole list to see if current Cityworks install is licensed to use extensions\n     *\n     * Possible extensions currently include: \"UnknownExtension\", \"CwAnalytics\", \"WebHooks\", \"PLLPublicApp\", \"ActivityUpdate\", \"SingleSignOn\"\n     *\n     * @param {Array<string>} extension - Extension names\n     * @return {Object} Returns Promise object that represents a boolean which informs extension is licensed (true) or not (false)\n     */\n  licensedExtensionsCheck(extensions: Array<string>) {\n    return new Promise((resolve, reject) => {\n        var data: { Extensions: Array<number> } = {\n          Extensions: []\n        }\n      _.forEach(extensions, (v) => {\n        if(typeof(this.extensions[v])=='undefined') {\n          reject(new CWError(5, 'Extension provided does not exist or is mispelled.', {'provided': v, 'available': this.extensions}))\n        } else {\n          data.Extensions.push(this.extensions[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedExtensionsCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_extensions = _.invert(this.extensions)\n        _.forEach(response, (ext_num, bool) => {\n          if(typeof(inv_extensions[ext_num])=='undefined') {\n            reject(new CWError(6, 'Extension index provided does not exist or isn\\'t configured properly.', {'provided_num_returned': ext_num, 'available': this.extensions}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_extensions[ext_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use a feature:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {string} [feature] - Feature to check to see if ciurrently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeatureCheck(feature: string) {\n    return new Promise((resolve, reject) => {\n      if(typeof(this.features[feature])=='undefined') {\n        reject(new CWError(7, 'Feature provided does not exist or is mispelled.', {'provided': feature, 'available': this.features}))\n      }\n      let data = {\n        \"Feature\": this.features[feature]\n      }\n      let path = 'General/Authorization/LicensedFeatureCheck'\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Check if current user is licensed to use features:\n     *\n     * \"UnknownFeature\", \"ViewInspections\", \"EditInspections\", \"ViewServiceRequest\", \"EditServiceRequest\", \"ViewWorkOrder\", \"EditWorkOrder\", \"EquipmentCheckOut\", \"OfficeField\", \"Respond\", \"Eurl\", \"PaverInterface\", \"Contracts\", \"Storeroom\", \"PLL\", \"Cw4XL\", \"TableEditor\", \"CCTVInterface\", \"MobileAndroid\", \"MobileiOS\", \"PerformanceBudgeting\", \"Insights\", \"RespondCase\", \"RespondInspection\", \"RespondServiceRequest\", \"RespondTaskManager\", \"RespondWorkOrder\", \"Workload\", \"OpX\", \"TrimbleUnityMobile\", \"TrimbleVegetationManager\"\n     *\n     * @param {Array<string>} [feature] - Features to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedFeaturesCheck(features: Array<string>) {\n    return new Promise((resolve, reject) => {\n      var data: { Features: Array<number> } = {\n        Features: []\n      }\n      _.forEach(features, (v: string) => {\n        if(typeof(this.features[v])=='undefined') {\n          reject(new CWError(8, 'Feature provided does not exist or is mispelled.', {'provided': v, 'available': this.features}))\n        } else {\n          data.Features.push(this.features[v])\n        }\n      })\n      let path = 'General/Authorization/LicensedFeaturesCheck'\n      this.runRequest(path, data).then((response: any) => {\n        let rez: Object = {}\n        // reverse boolean to numeric dictionary to a boolean to string dictionary\n        let inv_features = _.invert(this.features)\n        _.forEach(response.Value, (feat_num, bool) => {\n          if(typeof(inv_features[feat_num])=='undefined') {\n            reject(new CWError(9, 'Feature index provided does not exist or isn\\'t configured properly.', {'provided': feat_num, 'available': inv_features}))\n          } else {\n            // Put string name of extension in rezponse object and set boolean on it.\n            rez[inv_features[feat_num]] = bool\n          }\n        })\n        resolve(rez)\n      })\n    })\n  }\n\n  // LicensedServicesCheck\n  // Check if current user is licensed to use services\n  // List req ServicesList of 'Area/Service', i.e. ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n  /**\n     * Check if current user is licensed to use services. List req ServicesList of 'Area/Service', i.e.:\n     *\n     * ['AMS/Inspection','AMS/WorkOrder','PLL/Case']\n     *\n     * @param {Array<string>} [services] - Services to check to see if currently authenticated user can utilize\n     * @return {Object} Returns Promise object that represents a boolean which communicates license state as licensed (true) or not (false)\n     */\n  licensedServicesCheck(services: Array<string>) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authorization/LicensedServicesCheck'\n      var data: { Services: Array<string> } = {\n        Services: services\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of CityworksOnline sites for this user\n     *\n     * @param {string} [login] - Login Name to use when checking. Defaults to previously-stored login name.\n     * @param {string} [password] - Password to use when checking. Defaults to previously-stored password.\n     * @return {Object} Returns Promise object that represents an array of cityworks online sites available to this user.\n     */\n  cityworksOnlineSites(login?: string, password?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/CityworksOnlineSites'\n      var data = {\n        LoginName: (typeof(login)!='undefined') ? login: this.login,\n        Password:  (typeof(password)!='undefined') ? password : this.password\n      }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a collection of the configured domains.\n     */\n  domains() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Domains'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get a list of Domains (not tld, but organizations) in the currently-connected Cityworks install\n     *\n     * @param {string} [login] - Optional login name to get user information for. Defaults to currently-set user name used for login.\n     * @return {Object} Returns Promise object that represents an Object with the user information\n     */\n  user(login?: string) {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/User'\n      let data = { LoginName: (typeof(login)!='undefined') ? login: this.login }\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n\n  /**\n     * Get the software version number of the currently-connected Cityworks install\n     *\n     * @return {Object} Returns Promise object that represents a string of the version number\n     */\n  version() {\n    return new Promise((resolve, reject) => {\n      let path = 'General/Authentication/Version'\n      var data = {}\n      this.runRequest(path, data).then((response: any) => {\n        resolve(response.Value)\n      })\n    })\n  }\n}\n\nconst cw = new Cityworks()\n\nconst general = new General(cw)\nconst activity_link = new ActivityLinks(cw)\nconst message_queue = new MessageQueue(cw)\nconst search = new Search(cw)\nconst gis = new Gis(cw)\nconst request = new Request(cw)\nconst inspection = new Inspection(cw)\nconst workorder = new WorkOrder(cw)\nconst briefcase = new Briefcase(cw)\n\nbriefcase.data = new CaseData(cw)\nbriefcase.financial = new CaseFinancial(cw)\nbriefcase.workflow = new CaseWorkflow(cw)\nbriefcase.admin = new CaseAdmin(cw)\nbriefcase.comment = new Comments(cw, 'CaObject')\nbriefcase.asset = new CaseAssets(cw)\n\nworkorder.admin = new WorkOrderAdmin(cw)\nworkorder.costs = new WorkOrderCosts(cw)\nworkorder.comment = new Comments(cw, 'WorkOrder')\n\ninspection.admin = new InspectionAdmin(cw)\ninspection.costs = new InspectionCosts(cw)\n\nrequest.admin = new RequestAdmin(cw)\nrequest.costs = new RequestCosts(cw)\nrequest.comment = new Comments(cw, 'Request')\n\nexport { cw as Cityworks, general, activity_link, message_queue, search, gis, request, inspection, workorder, briefcase }"],"names":["_","require","CWError","code","message","info","this","name","has","get","JSON","stringify","General","cw","_proto","prototype","notifications","_this","Promise","resolve","reject","runRequest","then","response","Value","e","amIWatching","activityType","activityId","_this2","aType","null","case","task","provided","potential_activities","ActivityType","ActivityId","r","getActivityMetadataByIds","ids","table","_this3","tables","indexOf","available","Ids","TableName","console","log","getHistory","_this4","getWOEntityCostSummary","object_ids","_this5","ObjectIds","searchWOEntityCostSummary","search_id","_this6","SearchId","ActivityLinks","activityTypes","linkTypes","ReversibleMap","set","add","source_type","source_sid","destination_type","destination_sid","link_type","options","data","SourceType","SourceSid","DestType","DestSid","LinkType","type","sids","ActivitySids","return_data","Array","forEach","link","key","push","clone","SourceActivityType","SourceActivitySid","DestinationActivityType","DestinationActivitySid","activity_link_id","ActivityLinkId","remove","Gis","getConfig","whichType","whichId","getGisData","context","toLowerCase","domain","domainId","downloadMobile","cacheId","initialExtent","request","requestId","inspection","inspectionId","workOrder","workOrderSid","_this7","user","allDomains","allGroups","_this8","selectedEntities","_this9","getEntityAttributes","entityType","_this10","EntityType","MessageQueue","status","Pending","Processing","Complete","Failed","hook_types","Unknown","ActivityUpdate","Email","WebHook","processMessages","delete_successful","Delete","maxcount","MaxCount","Status","hours_to_keep","HoursToKeep","preferences","search","parameters","max_results","MaxResults","allowed_params","disallowed_params","v","k","value","concat","update","HookType","updateMessageStatus","getWebooks","hook_ids","HookIds","Search","searchTypes","Null","Request","WorkOrder","Inspection","Contract","Permit","GIS","PermitTask","PermitAddress","InspCommon","Case","WorkOrderEntity","StoreTransaction","Requisition","Material","WorkActivity","MaterialLeaf","WoTemplate","Employee","Analytics","TokenState","AssetCalculationResult","Equipment","CustomerAccount","InspTemplate","ProblemLeaf","AssetSplitRecord","PavementInsp","TvInspection","Projects","quick","text","QuickSearchText","execute","searchId","merge","getSaved","searchType","applyToEntities","employeeSid","length","savedEndpoint","displayFields","types","enableServices","searchIds","Enable","SearchIds","disableServices","getDefinition","getDefinitions","getDefinitionNames","deleteDefinitions","_this11","saveDefinition","searchFor","_this12","SearchFor","admin","costs","comment","updateMLF","ServiceRequestId","create","sr_data","move","x","y","projection","z","base_data","RequestId","X","Y","changeProblem","problemSid","ProblemSid","getById","getByIds","requestIds","RequestIds","getAuditLog","getCustomFields","changeCustomFieldCategory","categoryId","CategoryId","cancel","cancelReason","dateCancelled","uncancel","close","_this13","Message","reopen","_this14","_this15","searchData","_this16","searchObject","_this17","createSearchDefinition","searchName","sharedWithin","enableEurl","_this18","isString","getProblemNodes","viewOnly","displayMode","includeCancelled","_this19","DomainId","IncludeCancelled","ViewOnly","getProblems","forPublicOnly","onlyActiveTemplates","domainIds","_this20","ForPublicOnly","OnlyActiveTemplates","getProblemsByKeywords","keywords","_this21","Keywords","getPriorities","_this22","ProblemSids","getCustomFieldTemplate","_this23","getQASettings","_this24","getProblemLeaf","_this25","getStatuses","_this26","DomainIds","getEmployeeLists","listType","_this27","includes","getDispatchTos","getSubmitTos","streetCodes","_this28","getTemplatesById","problemSids","minimumDateModified","maximumDateModified","_this29","createTemplateSearchDefinition","_this30","getTemplateQAs","_this31","searchTemplates","_this32","getTemplates","templateIds","canCreate","includeInactiveIf","_this33","CanCreate","IncludeInactiveIf","getWOTemplates","includeInactive","_this34","IncludeInactive","getMLFs","_this35","updateMLFs","_this36","isNumber","deleteMLFs","_this37","insp_data","createFromEntities","createFromParent","createFromServiceRequest","createFromWorkOrder","InspectionId","inspectionIds","InspectionIds","CancelReason","DateCancelled","statuses","submitTos","includeInactiveEmployees","IncludeInactiveEmployees","connectAsset","entity","updateXY","facility","EntityUid","Entity","Facility_Id","Level_Id","getAnswers","inspections","getCycleFrom","getCycleIntervals","getCycleTypes","getDistricts","data_init","entityTypes","EntityTypes","forIn","getTemplatesByIds","inspTemplateIds","InspTemplateIds","getTemplateEntityTypes","getQA","getQConditions","deleteAttachments","attachmentIds","AttachmentIds","downloadAttachment","attachmentId","AttachmentId","getAttachmentById","getAttachments","_this38","_this39","wo_data","workOrderSId","s","combine","fromWorkOrderIds","toWorkOrderId","cancelCombinedWorkOrders","CancelCombinedWorkOrders","ToWorkOrderId","FromWorkOrderIds","workOrderId","WorkOrderId","path","workOrderSIds","workorderSId","getInstructions","getCustomFieldValues","workorderSIds","getEntities","GetGisData","addEntities","entityInfo","UpdateXY","updateEntity","workComplete","WorkComplete","removeEntities","workOrderIds","WorkOrderIds","getWOsByEntities","entityUids","getSearchList","getSupervisors","getCategories","getStages","getExpenseTypes","Briefcase","asset","workflow","financial","caseTypeId","subTypeId","CaseTypeId","SubTypeId","createChild","busCaseId","parentCaObjectId","BusCaseId","ParentCaObjectId","createFromRequest","caObjectId","CaObjectId","caObjectIds","CaObjectIds","filters","CaseData","addGroup","caseDataGroupId","groupCode","CaseDataGroupId","GroupCode","addDefaultGroups","wipAddDetail","caseDataDetailId","caDataGroupId","columnSequence","detailCode","detailSequence","CaseDataDetailId","CaDataGroupId","ColumnSequence","DetailCode","DetailSequence","getGroupsByCaseId","deleteGroupsByCaseId","searchForGroups","intersectionBy","keysIn","checkGIS","entityUid","updateGroupsFromAsset","addDetail","updateDetail","caDataDetailId","CaDataDetailId","lockDetail","Lock","unlockDetail","searchForDetails","addListValue","listValue","ListValue","deleteListValue","searchForListValueIds","searchForListValueObjects","CaseFinancial","addFee","feeSetupId","FeeSetupId","addPayment","addRefund","caPaymentId","refundAmount","CaPaymentId","RefundAmount","Comments","addDepositPayment","caDepositId","CaDepositId","addDeposit","depositId","amount","DepositId","addInstrument","instTypeId","dateExpire","InstTypeId","Amount","DateExpire","updateFee","caFeeId","CaFeeId","voidRefund","caPaymentRefundId","voided","CaPaymentRefundId","Voided","addDefaultFees","addDefaultDeposits","getFees","getDeposits","getPayments","getInstruments","deleteFee","deleteFeesByCaseId","deletePayment","deleteRefund","deletePaymentsByCaseId","deleteDeposit","deleteDepositsByCaseId","deleteInstrument","caInstrumentId","CaInstrumentId","deleteInstrumentsByCaseId","searchFees","searchPayments","searchRefunds","searchDeposits","getAllFeeTemplates","searchFeeTemplates","searchCaseInstruments","getInstrumentList","addCaseInstrumentRelease","releasedBy","dateReleased","amountReleased","percentReleased","DateReleased","ReleasedBy","deleteCaseInstrumentRelease","caInstReleasesId","CaInstReleasesId","searchCaseInstrumentReleases","fees","searchAvailableFees","getTenderTypes","addTenderType","updateTenderType","tenderTypeId","TenderTypeId","currentActivityType","sid","ActivitySid","id","CommentId","getPredefined","category","CaseWorkflow","addTask","taskId","startPoint","endPoint","TaskId","StartPoint","EndPoint","addTaskResult","caTaskId","resultCode","resultID","resultSetID","CaTaskId","ResultCode","ResultID","ResultSetID","addTaskComment","CommentText","getTasksByCaseId","checkRelatedItems","CheckRelatedItems","getTasksById","caTaskIds","CaTaskIds","getResultsByTaskId","getCommentsForTask","getCommentsForTasks","updateTask","updateTaskComment","caTaskCommentId","commentId","CaTaskCommentId","setTaskResult","deleteTask","deleteTasksOnCase","deleteTaskComments","caTaskCommentIds","CaTaskCommentIds","searchForTasks","searchForTaskResults","addTaskAttachment","docName","file","locationType","DocName","getTaskAttachments","deleteTaskAttachment","caRelDocId","CaRelDocId","CaseAdmin","addBusinessCaseTemplate","updateBusinessCaseTemplate","getBusinessCaseTemplates","addCaseType","caseTypeName","caseTypeDesciption","CaseType","CaseTypeDesciption","updateCaseType","getCaseTypes","searchCaseTypeIDs","searchCaseTypeObjects","addSubtype","subTypeName","subTypeDescription","SubType","SubTypeDesc","updateSubtype","getSubtypes","getExpirations","addExpiration","getDisciplines","addDepartment","departmentCode","departmentName","DepartmentCode","DepartmentName","getDepartments","addDivision","departmentId","divisionName","DepartmentId","DivisionName","getDivisions","addHoliday","holidayDate","holidayDesc","halfDayFlag","HolidayDate","HolidayDesc","deleteHoliday","holidayId","HolidayId","getHolidays","addInspectionTimeBlock","labelText","startTime","endTime","inspTimeBlocksDetails","LabelText","StartTime","EndTime","getInspectionTimeBlocks","getNotificationCases","getNotificationTypes","addNumberingGroup","updateNumberingGroup","numberingGroupId","NumberingGroupId","getNumberingGroups","addPerson","Name","getPeople","addPeopleRole","roleCode","RoleCode","getPeopleRoles","addTaskResultDetail","updateTaskResultDetail","resultDetailId","ResultDetailId","getTaskResultDetails","addTaskResultFeeInsert","_this40","deleteTaskResultFeeInsert","taskResultFeeInsertId","_this41","TaskResultFeeInsertId","deleteTaskResultFeeInsertByTaskId","_this42","updateTaskResultFeeInsert","taskResultId","_this43","TaskResultId","getTaskResultFeeInsert","_this44","CaseAssets","attach","detach","caAddressId","CaAddressId","detachAll","getForCase","WorkOrderAdmin","getEntityGroups","getEntityTypes","entityGroups","EntityGroups","includeComments","includeInstructions","IncludeComments","IncludeInstructions","updateTemplate","wOTemplate","getTemplateGroupRights","wOTemplateIds","WOTemplateIds","getTemplateActivity","getUpdateFields","getTemplateEquipment","wOTemplateId","WOTemplateId","getTemplateLabor","getTemplateMaterial","getTemplateMapLayerFields","WorkOrderTemplateId","getTemplateTasks","getRelatedInspectionTemplates","InspectionAdmin","RequestAdmin","WorkOrderCosts","getCodes","employeeSids","commonOnly","EmployeeSids","CommonCodesOnly","getJobCodes","addLabor","hours","WorkOrderSid","Hours","getLabor","workOrderSids","estimated","Estimated","WorkOrderSids","deleteLabor","laborCostIds","LaborCostIds","addEquipment","getEquipment","deleteEquipment","equipmentCostIds","EquipmentCostIds","addMaterial","units","combineIssuesByMaterialSid","Units","CombineIssuesByMaterialSid","getMaterial","deleteMaterial","materialCostIds","MaterialCostIds","InspectionCosts","reqLaborCostIds","RequestCosts","requestCosts","https","querystring","Cityworks","base_url","settings","load","Token","login","password","gisToken","gisTokenUrl","error","extensions","features","potential_loads","UnknownExtension","CwAnalytics","WebHooks","PLLPublicApp","SingleSignOn","UnknownFeature","ViewInspections","EditInspections","ViewServiceRequest","EditServiceRequest","ViewWorkOrder","EditWorkOrder","EquipmentCheckOut","OfficeField","Respond","Eurl","PaverInterface","Contracts","Storeroom","PLL","Cw4XL","TableEditor","CCTVInterface","MobileAndroid","MobileiOS","PerformanceBudgeting","Insights","RespondCase","RespondInspection","RespondServiceRequest","RespondTaskManager","RespondWorkOrder","Workload","OpX","TrimbleUnityMobile","TrimbleVegetationManager","secure","expires","default_domain","configure","pd","token","hostname","port","method","headers","Buffer","byteLength","timeout","str","on","chunk","match","obj","parse","postedData","api_returned_string","SyntaxError","write","end","authenticate","LoginName","Password","authenticateWithGISToken","GisToken","GisTokenUrl","Expires","validateToken","setToken","getToken","revokeToken","revokeBefore","RevokeDate","getLocalizationSettings","getTimezoneOptions","getCurrentLocation","licensedApiCheck","area","service","Area","Service","licensedExtensionCheck","extension","Extension","licensedExtensionsCheck","Extensions","rez","inv_extensions","invert","ext_num","bool","provided_num_returned","licensedFeatureCheck","feature","Feature","licensedFeaturesCheck","Features","inv_features","feat_num","licensedServicesCheck","services","Services","cityworksOnlineSites","domains","version","general","activity_link","message_queue","gis","workorder","briefcase"],"mappings":"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"}